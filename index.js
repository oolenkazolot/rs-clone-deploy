(() => {
  var e = {
      545: function (e) {
        e.exports = (function () {
          'use strict';
          var e = {
              d: function (t, i) {
                for (var o in i) e.o(i, o) && !e.o(t, o) && Object.defineProperty(t, o, { enumerable: !0, get: i[o] });
              },
              o: function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
              },
            },
            t = {};
          e.d(t, {
            default: function () {
              return U;
            },
          });
          var i = {
              days: 'days',
              months: 'months',
              years: 'years',
              day: 'day',
              month: 'month',
              year: 'year',
              eventChangeViewDate: 'changeViewDate',
              eventChangeCurrentView: 'changeCurrentView',
              eventChangeFocusDate: 'changeFocusDate',
              eventChangeSelectedDate: 'changeSelectedDate',
              eventChangeTime: 'changeTime',
              eventChangeLastSelectedDate: 'changeLastSelectedDate',
              actionSelectDate: 'selectDate',
              actionUnselectDate: 'unselectDate',
              cssClassWeekend: '-weekend-',
            },
            o = {
              classes: '',
              inline: !1,
              locale: {
                days: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
                daysShort: ['Вос', 'Пон', 'Вто', 'Сре', 'Чет', 'Пят', 'Суб'],
                daysMin: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
                months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
                monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
                today: 'Сегодня',
                clear: 'Очистить',
                dateFormat: 'dd.MM.yyyy',
                timeFormat: 'HH:mm',
                firstDay: 1,
              },
              startDate: new Date(),
              firstDay: '',
              weekends: [6, 0],
              dateFormat: '',
              altField: '',
              altFieldDateFormat: 'T',
              toggleSelected: !0,
              keyboardNav: !0,
              selectedDates: !1,
              container: '',
              isMobile: !1,
              visible: !1,
              position: 'bottom left',
              offset: 12,
              view: i.days,
              minView: i.days,
              showOtherMonths: !0,
              selectOtherMonths: !0,
              moveToOtherMonthsOnSelect: !0,
              showOtherYears: !0,
              selectOtherYears: !0,
              moveToOtherYearsOnSelect: !0,
              minDate: '',
              maxDate: '',
              disableNavWhenOutOfRange: !0,
              multipleDates: !1,
              multipleDatesSeparator: ', ',
              range: !1,
              dynamicRange: !0,
              buttons: !1,
              monthsField: 'monthsShort',
              showEvent: 'focus',
              autoClose: !1,
              prevHtml: '<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',
              nextHtml: '<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',
              navTitles: { days: 'MMMM, <i>yyyy</i>', months: 'yyyy', years: 'yyyy1 - yyyy2' },
              timepicker: !1,
              onlyTimepicker: !1,
              dateTimeSeparator: ' ',
              timeFormat: '',
              minHours: 0,
              maxHours: 24,
              minMinutes: 0,
              maxMinutes: 59,
              hoursStep: 1,
              minutesStep: 1,
              onSelect: !1,
              onChangeViewDate: !1,
              onChangeView: !1,
              onRenderCell: !1,
              onShow: !1,
              onHide: !1,
              onClickDayName: !1,
            };
          function r(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : document;
            return 'string' == typeof e ? t.querySelector(e) : e;
          }
          function a() {
            let { tagName: e = 'div', className: t = '', innerHtml: i = '', id: o = '', attrs: r = {} } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
              a = document.createElement(e);
            return t && a.classList.add(...t.split(' ')), o && (a.id = o), i && (a.innerHTML = i), r && s(a, r), a;
          }
          function s(e, t) {
            for (let [i, o] of Object.entries(t)) void 0 !== o && e.setAttribute(i, o);
            return e;
          }
          function n(e) {
            return new Date(e.getFullYear(), e.getMonth() + 1, 0).getDate();
          }
          function l(e) {
            let t = e.getHours(),
              { hours: i, dayPeriod: o } = c(t);
            return {
              year: e.getFullYear(),
              month: e.getMonth(),
              fullMonth: e.getMonth() + 1 < 10 ? '0' + (e.getMonth() + 1) : e.getMonth() + 1,
              date: e.getDate(),
              fullDate: e.getDate() < 10 ? '0' + e.getDate() : e.getDate(),
              day: e.getDay(),
              hours: t,
              fullHours: d(t),
              hours12: i,
              dayPeriod: o,
              fullHours12: d(i),
              minutes: e.getMinutes(),
              fullMinutes: e.getMinutes() < 10 ? '0' + e.getMinutes() : e.getMinutes(),
            };
          }
          function c(e) {
            return { dayPeriod: e > 11 ? 'pm' : 'am', hours: e % 12 == 0 ? 12 : e % 12 };
          }
          function d(e) {
            return e < 10 ? '0' + e : e;
          }
          function u(e) {
            let t = 10 * Math.floor(e.getFullYear() / 10);
            return [t, t + 9];
          }
          function h() {
            let e = [];
            for (var t = arguments.length, i = new Array(t), o = 0; o < t; o++) i[o] = arguments[o];
            return (
              i.forEach((t) => {
                if ('object' == typeof t) for (let i in t) t[i] && e.push(i);
                else t && e.push(t);
              }),
              e.join(' ')
            );
          }
          function p(e, t) {
            let o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.days;
            if (!e || !t) return !1;
            let r = l(e),
              a = l(t);
            return { [i.days]: r.date === a.date && r.month === a.month && r.year === a.year, [i.months]: r.month === a.month && r.year === a.year, [i.years]: r.year === a.year }[o];
          }
          function g(e, t, i) {
            let o = y(e, !1).getTime(),
              r = y(t, !1).getTime();
            return i ? o >= r : o > r;
          }
          function m(e, t) {
            return !g(e, t, !0);
          }
          function y(e) {
            let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
              i = new Date(e.getTime());
            return 'boolean' != typeof t || t || f(i), i;
          }
          function f(e) {
            return e.setHours(0, 0, 0, 0), e;
          }
          function w(e, t, i) {
            e.length
              ? e.forEach((e) => {
                  e.addEventListener(t, i);
                })
              : e.addEventListener(t, i);
          }
          function b(e, t) {
            return !(!e || e === document || e instanceof DocumentFragment) && (e.matches(t) ? e : b(e.parentNode, t));
          }
          function k(e, t, i) {
            return e > i ? i : e < t ? t : e;
          }
          function v(e) {
            for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) i[o - 1] = arguments[o];
            return (
              i
                .filter((e) => e)
                .forEach((t) => {
                  for (let [i, o] of Object.entries(t))
                    if (void 0 !== o && '[object Object]' === o.toString()) {
                      let t = void 0 !== e[i] ? e[i].toString() : void 0,
                        r = o.toString(),
                        a = Array.isArray(o) ? [] : {};
                      (e[i] = e[i] ? (t !== r ? a : e[i]) : a), v(e[i], o);
                    } else e[i] = o;
                }),
              e
            );
          }
          function A(e) {
            let t = e;
            return e instanceof Date || (t = new Date(e)), isNaN(t.getTime()) && (console.log(`Unable to convert value "${e}" to Date object`), (t = !1)), t;
          }
          function x(e) {
            let t = '\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;';
            return new RegExp('(^|>|' + t + ')(' + e + ')($|<|' + t + ')', 'g');
          }
          function C(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          class _ {
            constructor() {
              let { type: e, date: t, dp: i, opts: o, body: r } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              C(this, 'focus', () => {
                this.$cell.classList.add('-focus-'), (this.focused = !0);
              }),
                C(this, 'removeFocus', () => {
                  this.$cell.classList.remove('-focus-'), (this.focused = !1);
                }),
                C(this, 'select', () => {
                  this.$cell.classList.add('-selected-'), (this.selected = !0);
                }),
                C(this, 'removeSelect', () => {
                  this.$cell.classList.remove('-selected-', '-range-from-', '-range-to-'), (this.selected = !1);
                }),
                C(this, 'onChangeSelectedDate', () => {
                  this.isDisabled || (this._handleSelectedStatus(), this.opts.range && this._handleRangeStatus());
                }),
                C(this, 'onChangeFocusDate', (e) => {
                  if (!e) return void (this.focused && this.removeFocus());
                  let t = p(e, this.date, this.type);
                  t ? this.focus() : !t && this.focused && this.removeFocus(), this.opts.range && this._handleRangeStatus();
                }),
                C(this, 'render', () => ((this.$cell.innerHTML = this._getHtml()), (this.$cell.adpCell = this), this.$cell)),
                (this.type = e),
                (this.singleType = this.type.slice(0, -1)),
                (this.date = t),
                (this.dp = i),
                (this.opts = o),
                (this.body = r),
                (this.customData = !1),
                this.init();
            }
            init() {
              let { range: e, onRenderCell: t } = this.opts;
              t && (this.customData = t({ date: this.date, cellType: this.singleType, datepicker: this.dp })),
                this._createElement(),
                this._bindDatepickerEvents(),
                this._handleInitialFocusStatus(),
                this.dp.hasSelectedDates && (this._handleSelectedStatus(), e && this._handleRangeStatus());
            }
            _bindDatepickerEvents() {
              this.dp.on(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.on(i.eventChangeFocusDate, this.onChangeFocusDate);
            }
            unbindDatepickerEvents() {
              this.dp.off(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.off(i.eventChangeFocusDate, this.onChangeFocusDate);
            }
            _createElement() {
              var e;
              let { year: t, month: i, date: o } = l(this.date),
                r = (null === (e = this.customData) || void 0 === e ? void 0 : e.attrs) || {};
              this.$cell = a({ className: this._getClassName(), attrs: { 'data-year': t, 'data-month': i, 'data-date': o, ...r } });
            }
            _getClassName() {
              var e, t;
              let o = new Date(),
                { selectOtherMonths: r, selectOtherYears: a } = this.opts,
                { minDate: s, maxDate: n } = this.dp,
                { day: c } = l(this.date),
                d = this._isOutOfMinMaxRange(),
                u = null === (e = this.customData) || void 0 === e ? void 0 : e.disabled,
                g = h('air-datepicker-cell', `-${this.singleType}-`, {
                  '-current-': p(o, this.date, this.type),
                  '-min-date-': s && p(s, this.date, this.type),
                  '-max-date-': n && p(n, this.date, this.type),
                }),
                m = '';
              switch (this.type) {
                case i.days:
                  m = h({ '-weekend-': this.dp.isWeekend(c), '-other-month-': this.isOtherMonth, '-disabled-': (this.isOtherMonth && !r) || d || u });
                  break;
                case i.months:
                  m = h({ '-disabled-': d || u });
                  break;
                case i.years:
                  m = h({ '-other-decade-': this.isOtherDecade, '-disabled-': d || (this.isOtherDecade && !a) || u });
              }
              return h(g, m, null === (t = this.customData) || void 0 === t ? void 0 : t.classes);
            }
            _getHtml() {
              var e;
              let { year: t, month: o, date: r } = l(this.date),
                { showOtherMonths: a, showOtherYears: s } = this.opts;
              if (null !== (e = this.customData) && void 0 !== e && e.html) return this.customData.html;
              switch (this.type) {
                case i.days:
                  return !a && this.isOtherMonth ? '' : r;
                case i.months:
                  return this.dp.locale[this.opts.monthsField][o];
                case i.years:
                  return !s && this.isOtherDecade ? '' : t;
              }
            }
            _isOutOfMinMaxRange() {
              let { minDate: e, maxDate: t } = this.dp,
                { type: o, date: r } = this,
                { month: a, year: s, date: n } = l(r),
                c = o === i.days,
                d = o === i.years,
                u = !!e && new Date(s, d ? e.getMonth() : a, c ? n : e.getDate()),
                h = !!t && new Date(s, d ? t.getMonth() : a, c ? n : t.getDate());
              return e && t ? m(u, e) || g(h, t) : e ? m(u, e) : t ? g(h, t) : void 0;
            }
            destroy() {
              this.unbindDatepickerEvents();
            }
            _handleRangeStatus() {
              let { rangeDateFrom: e, rangeDateTo: t } = this.dp,
                i = h({
                  '-in-range-': e && t && ((o = this.date), (r = e), (a = t), g(o, r) && m(o, a)),
                  '-range-from-': e && p(this.date, e, this.type),
                  '-range-to-': t && p(this.date, t, this.type),
                });
              var o, r, a;
              this.$cell.classList.remove('-range-from-', '-range-to-', '-in-range-'), i && this.$cell.classList.add(...i.split(' '));
            }
            _handleSelectedStatus() {
              let e = this.dp._checkIfDateIsSelected(this.date, this.type);
              e ? this.select() : !e && this.selected && this.removeSelect();
            }
            _handleInitialFocusStatus() {
              p(this.dp.focusDate, this.date, this.type) && this.focus();
            }
            get isDisabled() {
              return this.$cell.matches('.-disabled-');
            }
            get isOtherMonth() {
              return this.dp.isOtherMonth(this.date);
            }
            get isOtherDecade() {
              return this.dp.isOtherDecade(this.date);
            }
          }
          function E(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          let q = {
            [i.days]: `<div class="air-datepicker-body--day-names"></div><div class="air-datepicker-body--cells -${i.days}-"></div>`,
            [i.months]: `<div class="air-datepicker-body--cells -${i.months}-"></div>`,
            [i.years]: `<div class="air-datepicker-body--cells -${i.years}-"></div>`,
          };
          const S = '.air-datepicker-cell';
          class D {
            constructor(e) {
              let { dp: t, type: o, opts: r } = e;
              E(this, 'handleClick', (e) => {
                let t = e.target.closest(S).adpCell;
                if (t.isDisabled) return;
                if (!this.dp.isMinViewReached) return void this.dp.down();
                let i = this.dp._checkIfDateIsSelected(t.date, t.type);
                i ? this.dp._handleAlreadySelectedDates(i, t.date) : this.dp.selectDate(t.date);
              }),
                E(this, 'handleDayNameClick', (e) => {
                  let t = e.target.getAttribute('data-day-index');
                  this.opts.onClickDayName({ dayIndex: Number(t), datepicker: this.dp });
                }),
                E(this, 'onChangeCurrentView', (e) => {
                  e !== this.type ? this.hide() : (this.show(), this.render());
                }),
                E(this, 'onMouseOverCell', (e) => {
                  let t = b(e.target, S);
                  this.dp.setFocusDate(!!t && t.adpCell.date);
                }),
                E(this, 'onMouseOutCell', () => {
                  this.dp.setFocusDate(!1);
                }),
                E(this, 'onClickBody', (e) => {
                  let { onClickDayName: t } = this.opts,
                    i = e.target;
                  i.closest(S) && this.handleClick(e), t && i.closest('.air-datepicker-body--day-name') && this.handleDayNameClick(e);
                }),
                E(this, 'onMouseDown', (e) => {
                  this.pressed = !0;
                  let t = b(e.target, S),
                    i = t && t.adpCell;
                  p(i.date, this.dp.rangeDateFrom) && (this.rangeFromFocused = !0), p(i.date, this.dp.rangeDateTo) && (this.rangeToFocused = !0);
                }),
                E(this, 'onMouseMove', (e) => {
                  if (!this.pressed || !this.dp.isMinViewReached) return;
                  e.preventDefault();
                  let t = b(e.target, S),
                    i = t && t.adpCell,
                    { selectedDates: o, rangeDateTo: r, rangeDateFrom: a } = this.dp;
                  if (!i || i.isDisabled) return;
                  let { date: s } = i;
                  if (2 === o.length) {
                    if (this.rangeFromFocused && !g(s, r)) {
                      let { hours: e, minutes: t } = l(a);
                      s.setHours(e), s.setMinutes(t), (this.dp.rangeDateFrom = s), this.dp.replaceDate(a, s);
                    }
                    if (this.rangeToFocused && !m(s, a)) {
                      let { hours: e, minutes: t } = l(r);
                      s.setHours(e), s.setMinutes(t), (this.dp.rangeDateTo = s), this.dp.replaceDate(r, s);
                    }
                  }
                }),
                E(this, 'onMouseUp', () => {
                  (this.pressed = !1), (this.rangeFromFocused = !1), (this.rangeToFocused = !1);
                }),
                E(this, 'onChangeViewDate', (e, t) => {
                  if (!this.isVisible) return;
                  let o = u(e),
                    r = u(t);
                  switch (this.dp.currentView) {
                    case i.days:
                      if (p(e, t, i.months)) return;
                      break;
                    case i.months:
                      if (p(e, t, i.years)) return;
                      break;
                    case i.years:
                      if (o[0] === r[0] && o[1] === r[1]) return;
                  }
                  this.render();
                }),
                E(this, 'render', () => {
                  this.destroyCells(),
                    this._generateCells(),
                    this.cells.forEach((e) => {
                      this.$cells.appendChild(e.render());
                    });
                }),
                (this.dp = t),
                (this.type = o),
                (this.opts = r),
                (this.cells = []),
                (this.$el = ''),
                (this.pressed = !1),
                (this.isVisible = !0),
                this.init();
            }
            init() {
              this._buildBaseHtml(), this.type === i.days && this.renderDayNames(), this.render(), this._bindEvents(), this._bindDatepickerEvents();
            }
            _bindEvents() {
              let { range: e, dynamicRange: t } = this.opts;
              w(this.$el, 'mouseover', this.onMouseOverCell),
                w(this.$el, 'mouseout', this.onMouseOutCell),
                w(this.$el, 'click', this.onClickBody),
                e && t && (w(this.$el, 'mousedown', this.onMouseDown), w(this.$el, 'mousemove', this.onMouseMove), w(window.document, 'mouseup', this.onMouseUp));
            }
            _bindDatepickerEvents() {
              this.dp.on(i.eventChangeViewDate, this.onChangeViewDate), this.dp.on(i.eventChangeCurrentView, this.onChangeCurrentView);
            }
            _buildBaseHtml() {
              (this.$el = a({ className: `air-datepicker-body -${this.type}-`, innerHtml: q[this.type] })),
                (this.$names = r('.air-datepicker-body--day-names', this.$el)),
                (this.$cells = r('.air-datepicker-body--cells', this.$el));
            }
            _getDayNamesHtml() {
              let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.dp.locale.firstDay,
                t = '',
                o = this.dp.isWeekend,
                { onClickDayName: r } = this.opts,
                a = e,
                s = 0;
              for (; s < 7; ) {
                let e = a % 7;
                (t += `<div class="${h('air-datepicker-body--day-name', { [i.cssClassWeekend]: o(e), '-clickable-': !!r })}" data-day-index='${e}'>${this.dp.locale.daysMin[e]}</div>`), s++, a++;
              }
              return t;
            }
            _getDaysCells() {
              let {
                  viewDate: e,
                  locale: { firstDay: t },
                } = this.dp,
                i = n(e),
                { year: o, month: r } = l(e),
                a = new Date(o, r, 1),
                s = new Date(o, r, i),
                c = a.getDay() - t,
                d = 6 - s.getDay() + t;
              (c = c < 0 ? c + 7 : c), (d = d > 6 ? d - 7 : d);
              let u = (function (e, t) {
                  let { year: i, month: o, date: r } = l(e);
                  return new Date(i, o, r - t);
                })(a, c),
                h = i + c + d,
                p = u.getDate(),
                { year: g, month: m } = l(u),
                y = 0;
              for (; y < h; ) {
                let e = new Date(g, m, p + y);
                this._generateCell(e), y++;
              }
            }
            _generateCell(e) {
              let { type: t, dp: i, opts: o } = this,
                r = new _({ type: t, dp: i, opts: o, date: e, body: this });
              return this.cells.push(r), r;
            }
            _generateDayCells() {
              this._getDaysCells();
            }
            _generateMonthCells() {
              let { year: e } = this.dp.parsedViewDate,
                t = 0;
              for (; t < 12; ) this.cells.push(this._generateCell(new Date(e, t))), t++;
            }
            _generateYearCells() {
              let e = u(this.dp.viewDate),
                t = e[0] - 1,
                i = e[1] + 1,
                o = t;
              for (; o <= i; ) this.cells.push(this._generateCell(new Date(o, 0))), o++;
            }
            renderDayNames() {
              this.$names.innerHTML = this._getDayNamesHtml();
            }
            _generateCells() {
              switch (this.type) {
                case i.days:
                  this._generateDayCells();
                  break;
                case i.months:
                  this._generateMonthCells();
                  break;
                case i.years:
                  this._generateYearCells();
              }
            }
            show() {
              (this.isVisible = !0), this.$el.classList.remove('-hidden-');
            }
            hide() {
              (this.isVisible = !1), this.$el.classList.add('-hidden-');
            }
            destroyCells() {
              this.cells.forEach((e) => e.destroy()), (this.cells = []), (this.$cells.innerHTML = '');
            }
            destroy() {
              this.destroyCells(), this.dp.off(i.eventChangeViewDate, this.onChangeViewDate), this.dp.off(i.eventChangeCurrentView, this.onChangeCurrentView);
            }
          }
          function B(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          class L {
            constructor(e) {
              let { dp: t, opts: i } = e;
              B(this, 'onClickNav', (e) => {
                let t = b(e.target, '.air-datepicker-nav--action');
                if (!t) return;
                let i = t.dataset.action;
                this.dp[i]();
              }),
                B(this, 'onChangeViewDate', () => {
                  this.render(), this._resetNavStatus(), this.handleNavStatus();
                }),
                B(this, 'onChangeCurrentView', () => {
                  this.render(), this._resetNavStatus(), this.handleNavStatus();
                }),
                B(this, 'onClickNavTitle', () => {
                  this.dp.isFinalView || this.dp.up();
                }),
                B(this, 'update', () => {
                  let { prevHtml: e, nextHtml: t } = this.opts;
                  (this.$prev.innerHTML = e), (this.$next.innerHTML = t), this._resetNavStatus(), this.render(), this.handleNavStatus();
                }),
                B(this, 'renderDelay', () => {
                  setTimeout(this.render);
                }),
                B(this, 'render', () => {
                  (this.$title.innerHTML = this._getTitle()),
                    (function (e, t) {
                      for (let i in t) t[i] ? e.classList.add(i) : e.classList.remove(i);
                    })(this.$title, { '-disabled-': this.dp.isFinalView });
                }),
                (this.dp = t),
                (this.opts = i),
                this.init();
            }
            init() {
              this._createElement(), this._buildBaseHtml(), this._defineDOM(), this.render(), this.handleNavStatus(), this._bindEvents(), this._bindDatepickerEvents();
            }
            _defineDOM() {
              (this.$title = r('.air-datepicker-nav--title', this.$el)), (this.$prev = r('[data-action="prev"]', this.$el)), (this.$next = r('[data-action="next"]', this.$el));
            }
            _bindEvents() {
              this.$el.addEventListener('click', this.onClickNav), this.$title.addEventListener('click', this.onClickNavTitle);
            }
            _bindDatepickerEvents() {
              this.dp.on(i.eventChangeViewDate, this.onChangeViewDate),
                this.dp.on(i.eventChangeCurrentView, this.onChangeCurrentView),
                this.isNavIsFunction && (this.dp.on(i.eventChangeSelectedDate, this.renderDelay), this.dp.opts.timepicker && this.dp.on(i.eventChangeTime, this.render));
            }
            destroy() {
              this.dp.off(i.eventChangeViewDate, this.onChangeViewDate),
                this.dp.off(i.eventChangeCurrentView, this.onChangeCurrentView),
                this.isNavIsFunction && (this.dp.off(i.eventChangeSelectedDate, this.renderDelay), this.dp.opts.timepicker && this.dp.off(i.eventChangeTime, this.render));
            }
            _createElement() {
              this.$el = a({ tagName: 'nav', className: 'air-datepicker-nav' });
            }
            _getTitle() {
              let { dp: e, opts: t } = this,
                i = t.navTitles[e.currentView];
              return 'function' == typeof i ? i(e) : e.formatDate(e.viewDate, i);
            }
            handleNavStatus() {
              let { disableNavWhenOutOfRange: e } = this.opts,
                { minDate: t, maxDate: o } = this.dp;
              if ((!t && !o) || !e) return;
              let { year: r, month: a } = this.dp.parsedViewDate,
                s = !!t && l(t),
                n = !!o && l(o);
              switch (this.dp.currentView) {
                case i.days:
                  t && s.month >= a && s.year >= r && this._disableNav('prev'), o && n.month <= a && n.year <= r && this._disableNav('next');
                  break;
                case i.months:
                  t && s.year >= r && this._disableNav('prev'), o && n.year <= r && this._disableNav('next');
                  break;
                case i.years: {
                  let e = u(this.dp.viewDate);
                  t && s.year >= e[0] && this._disableNav('prev'), o && n.year <= e[1] && this._disableNav('next');
                  break;
                }
              }
            }
            _disableNav(e) {
              r('[data-action="' + e + '"]', this.$el).classList.add('-disabled-');
            }
            _resetNavStatus() {
              !(function (e) {
                for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) i[o - 1] = arguments[o];
                e.length
                  ? e.forEach((e) => {
                      e.classList.remove(...i);
                    })
                  : e.classList.remove(...i);
              })(this.$el.querySelectorAll('.air-datepicker-nav--action'), '-disabled-');
            }
            _buildBaseHtml() {
              let { prevHtml: e, nextHtml: t } = this.opts;
              this.$el.innerHTML = `<div class="air-datepicker-nav--action" data-action="prev">${e}</div><div class="air-datepicker-nav--title"></div><div class="air-datepicker-nav--action" data-action="next">${t}</div>`;
            }
            get isNavIsFunction() {
              let { navTitles: e } = this.opts;
              return Object.keys(e).find((t) => 'function' == typeof e[t]);
            }
          }
          var T = { today: { content: (e) => e.locale.today, onClick: (e) => e.setViewDate(new Date()) }, clear: { content: (e) => e.locale.clear, onClick: (e) => e.clear() } };
          class M {
            constructor(e) {
              let { dp: t, opts: i } = e;
              (this.dp = t), (this.opts = i), this.init();
            }
            init() {
              this.createElement(), this.render();
            }
            createElement() {
              this.$el = a({ className: 'air-datepicker-buttons' });
            }
            destroy() {
              this.$el.parentNode.removeChild(this.$el);
            }
            clearHtml() {
              return (this.$el.innerHTML = ''), this;
            }
            generateButtons() {
              let { buttons: e } = this.opts;
              Array.isArray(e) || (e = [e]),
                e.forEach((e) => {
                  let t = e;
                  'string' == typeof e && T[e] && (t = T[e]);
                  let i = this.createButton(t);
                  t.onClick && this.attachEventToButton(i, t.onClick), this.$el.appendChild(i);
                });
            }
            attachEventToButton(e, t) {
              e.addEventListener('click', () => {
                t(this.dp);
              });
            }
            createButton(e) {
              let { content: t, className: i, tagName: o = 'button', attrs: r = {} } = e;
              return a({ tagName: o, innerHtml: `<span tabindex='-1'>${'function' == typeof t ? t(this.dp) : t}</span>`, className: h('air-datepicker-button', i), attrs: r });
            }
            render() {
              this.generateButtons();
            }
          }
          function I(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          class $ {
            constructor() {
              let { opts: e, dp: t } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              I(this, 'toggleTimepickerIsActive', (e) => {
                this.dp.timepickerIsActive = e;
              }),
                I(this, 'onChangeSelectedDate', (e) => {
                  let { date: t, updateTime: i = !1 } = e;
                  t && (this.setMinMaxTime(t), this.setCurrentTime(!!i && t), this.addTimeToDate(t));
                }),
                I(this, 'onChangeLastSelectedDate', (e) => {
                  e && (this.setTime(e), this.render());
                }),
                I(this, 'onChangeInputRange', (e) => {
                  let t = e.target;
                  (this[t.getAttribute('name')] = t.value), this.updateText(), this.dp.trigger(i.eventChangeTime, { hours: this.hours, minutes: this.minutes });
                }),
                I(this, 'onMouseEnterLeave', (e) => {
                  let t = e.target.getAttribute('name'),
                    i = this.$minutesText;
                  'hours' === t && (i = this.$hoursText), i.classList.toggle('-focus-');
                }),
                I(this, 'onFocus', () => {
                  this.toggleTimepickerIsActive(!0);
                }),
                I(this, 'onBlur', () => {
                  this.toggleTimepickerIsActive(!1);
                }),
                (this.opts = e),
                (this.dp = t);
              let { timeFormat: o } = this.dp.locale;
              o && (o.match(x('h')) || o.match(x('hh'))) && (this.ampm = !0), this.init();
            }
            init() {
              this.setTime(this.dp.lastSelectedDate || this.dp.viewDate), this.createElement(), this.buildHtml(), this.defineDOM(), this.render(), this.bindDatepickerEvents(), this.bindDOMEvents();
            }
            bindDatepickerEvents() {
              this.dp.on(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.on(i.eventChangeLastSelectedDate, this.onChangeLastSelectedDate);
            }
            bindDOMEvents() {
              let e = 'input';
              navigator.userAgent.match(/trident/gi) && (e = 'change'),
                w(this.$ranges, e, this.onChangeInputRange),
                w(this.$ranges, 'mouseenter', this.onMouseEnterLeave),
                w(this.$ranges, 'mouseleave', this.onMouseEnterLeave),
                w(this.$ranges, 'focus', this.onFocus),
                w(this.$ranges, 'mousedown', this.onFocus),
                w(this.$ranges, 'blur', this.onBlur);
            }
            createElement() {
              this.$el = a({ className: h('air-datepicker-time', { '-am-pm-': this.dp.ampm }) });
            }
            destroy() {
              this.dp.off(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.off(i.eventChangeLastSelectedDate, this.onChangeLastSelectedDate), this.$el.parentNode.removeChild(this.$el);
            }
            buildHtml() {
              let {
                ampm: e,
                hours: t,
                displayHours: i,
                minutes: o,
                minHours: r,
                minMinutes: a,
                maxHours: s,
                maxMinutes: n,
                dayPeriod: l,
                opts: { hoursStep: c, minutesStep: u },
              } = this;
              this.$el.innerHTML =
                `<div class="air-datepicker-time--current">   <span class="air-datepicker-time--current-hours">${d(
                  i
                )}</span>   <span class="air-datepicker-time--current-colon">:</span>   <span class="air-datepicker-time--current-minutes">${d(o)}</span>   ` +
                (e ? `<span class='air-datepicker-time--current-ampm'>${l}</span>` : '') +
                '</div><div class="air-datepicker-time--sliders">   <div class="air-datepicker-time--row">' +
                `      <input type="range" name="hours" value="${t}" min="${r}" max="${s}" step="${c}"/>   </div>   <div class="air-datepicker-time--row">` +
                `      <input type="range" name="minutes" value="${o}" min="${a}" max="${n}" step="${u}"/>   </div></div>`;
            }
            defineDOM() {
              let e = (e) => r(e, this.$el);
              (this.$ranges = this.$el.querySelectorAll('[type="range"]')),
                (this.$hours = e('[name="hours"]')),
                (this.$minutes = e('[name="minutes"]')),
                (this.$hoursText = e('.air-datepicker-time--current-hours')),
                (this.$minutesText = e('.air-datepicker-time--current-minutes')),
                (this.$ampm = e('.air-datepicker-time--current-ampm'));
            }
            setTime(e) {
              this.setMinMaxTime(e), this.setCurrentTime(e);
            }
            addTimeToDate(e) {
              e && (e.setHours(this.hours), e.setMinutes(this.minutes));
            }
            setMinMaxTime(e) {
              if ((this.setMinMaxTimeFromOptions(), e)) {
                let { minDate: t, maxDate: i } = this.dp;
                t && p(e, t) && this.setMinTimeFromMinDate(t), i && p(e, i) && this.setMaxTimeFromMaxDate(i);
              }
            }
            setCurrentTime(e) {
              let { hours: t, minutes: i } = e ? l(e) : this;
              (this.hours = k(t, this.minHours, this.maxHours)), (this.minutes = k(i, this.minMinutes, this.maxMinutes));
            }
            setMinMaxTimeFromOptions() {
              let { minHours: e, minMinutes: t, maxHours: i, maxMinutes: o } = this.opts;
              (this.minHours = k(e, 0, 23)), (this.minMinutes = k(t, 0, 59)), (this.maxHours = k(i, 0, 23)), (this.maxMinutes = k(o, 0, 59));
            }
            setMinTimeFromMinDate(e) {
              let { lastSelectedDate: t } = this.dp;
              (this.minHours = e.getHours()), t && t.getHours() > e.getHours() ? (this.minMinutes = this.opts.minMinutes) : (this.minMinutes = e.getMinutes());
            }
            setMaxTimeFromMaxDate(e) {
              let { lastSelectedDate: t } = this.dp;
              (this.maxHours = e.getHours()), t && t.getHours() < e.getHours() ? (this.maxMinutes = this.opts.maxMinutes) : (this.maxMinutes = e.getMinutes());
            }
            updateSliders() {
              (s(this.$hours, { min: this.minHours, max: this.maxHours }).value = this.hours), (s(this.$minutes, { min: this.minMinutes, max: this.maxMinutes }).value = this.minutes);
            }
            updateText() {
              (this.$hoursText.innerHTML = d(this.displayHours)), (this.$minutesText.innerHTML = d(this.minutes)), this.ampm && (this.$ampm.innerHTML = this.dayPeriod);
            }
            set hours(e) {
              this._hours = e;
              let { hours: t, dayPeriod: i } = c(e);
              (this.displayHours = this.ampm ? t : e), (this.dayPeriod = i);
            }
            get hours() {
              return this._hours;
            }
            render() {
              this.updateSliders(), this.updateText();
            }
          }
          function N(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          class H {
            constructor(e) {
              let { dp: t, opts: i } = e;
              N(this, 'pressedKeys', new Set()),
                N(
                  this,
                  'hotKeys',
                  new Map([
                    [
                      [
                        ['Control', 'ArrowRight'],
                        ['Control', 'ArrowUp'],
                      ],
                      (e) => e.month++,
                    ],
                    [
                      [
                        ['Control', 'ArrowLeft'],
                        ['Control', 'ArrowDown'],
                      ],
                      (e) => e.month--,
                    ],
                    [
                      [
                        ['Shift', 'ArrowRight'],
                        ['Shift', 'ArrowUp'],
                      ],
                      (e) => e.year++,
                    ],
                    [
                      [
                        ['Shift', 'ArrowLeft'],
                        ['Shift', 'ArrowDown'],
                      ],
                      (e) => e.year--,
                    ],
                    [
                      [
                        ['Alt', 'ArrowRight'],
                        ['Alt', 'ArrowUp'],
                      ],
                      (e) => (e.year += 10),
                    ],
                    [
                      [
                        ['Alt', 'ArrowLeft'],
                        ['Alt', 'ArrowDown'],
                      ],
                      (e) => (e.year -= 10),
                    ],
                    [['Control', 'Shift', 'ArrowUp'], (e, t) => t.up()],
                  ])
                ),
                N(this, 'handleHotKey', (e) => {
                  let t = this.hotKeys.get(e),
                    i = l(this.getInitialFocusDate());
                  t(i, this.dp);
                  let { year: o, month: r, date: a } = i,
                    s = n(new Date(o, r));
                  s < a && (a = s);
                  let c = this.dp.getClampedDate(new Date(o, r, a));
                  this.dp.setFocusDate(c, { viewDateTransition: !0 });
                }),
                N(this, 'isHotKeyPressed', () => {
                  let e = !1,
                    t = this.pressedKeys.size,
                    i = (e) => this.pressedKeys.has(e);
                  for (let [o] of this.hotKeys) {
                    if (e) break;
                    if (Array.isArray(o[0]))
                      o.forEach((r) => {
                        e || t !== r.length || (e = r.every(i) && o);
                      });
                    else {
                      if (t !== o.length) continue;
                      e = o.every(i) && o;
                    }
                  }
                  return e;
                }),
                N(this, 'isArrow', (e) => e >= 37 && e <= 40),
                N(this, 'onKeyDown', (e) => {
                  let { key: t, which: i } = e,
                    {
                      dp: o,
                      dp: { focusDate: r },
                      opts: a,
                    } = this;
                  this.registerKey(t);
                  let s = this.isHotKeyPressed();
                  if (s) return e.preventDefault(), void this.handleHotKey(s);
                  if (this.isArrow(i)) return e.preventDefault(), void this.focusNextCell(t);
                  if ('Enter' === t) {
                    if (o.currentView !== a.minView) return void o.down();
                    if (r) {
                      let e = o._checkIfDateIsSelected(r);
                      return void (e ? o._handleAlreadySelectedDates(e, r) : o.selectDate(r));
                    }
                  }
                  'Escape' === t && this.dp.hide();
                }),
                N(this, 'onKeyUp', (e) => {
                  this.removeKey(e.key);
                }),
                (this.dp = t),
                (this.opts = i),
                this.init();
            }
            init() {
              this.bindKeyboardEvents();
            }
            bindKeyboardEvents() {
              let { $el: e } = this.dp;
              e.addEventListener('keydown', this.onKeyDown), e.addEventListener('keyup', this.onKeyUp);
            }
            destroy() {
              let { $el: e } = this.dp;
              e.removeEventListener('keydown', this.onKeyDown), e.removeEventListener('keyup', this.onKeyUp), (this.hotKeys = null), (this.pressedKeys = null);
            }
            getInitialFocusDate() {
              let {
                  focusDate: e,
                  currentView: t,
                  selectedDates: o,
                  parsedViewDate: { year: r, month: a },
                } = this.dp,
                s = e || o[o.length - 1];
              if (!s)
                switch (t) {
                  case i.days:
                    s = new Date(r, a, new Date().getDate());
                    break;
                  case i.months:
                    s = new Date(r, a, 1);
                    break;
                  case i.years:
                    s = new Date(r, 0, 1);
                }
              return s;
            }
            focusNextCell(e) {
              let t = this.getInitialFocusDate(),
                { currentView: o } = this.dp,
                { days: r, months: a, years: s } = i,
                n = l(t),
                c = n.year,
                d = n.month,
                u = n.date;
              switch (e) {
                case 'ArrowLeft':
                  o === r && (u -= 1), o === a && (d -= 1), o === s && (c -= 1);
                  break;
                case 'ArrowUp':
                  o === r && (u -= 7), o === a && (d -= 3), o === s && (c -= 4);
                  break;
                case 'ArrowRight':
                  o === r && (u += 1), o === a && (d += 1), o === s && (c += 1);
                  break;
                case 'ArrowDown':
                  o === r && (u += 7), o === a && (d += 3), o === s && (c += 4);
              }
              let h = this.dp.getClampedDate(new Date(c, d, u));
              this.dp.setFocusDate(h, { viewDateTransition: !0 });
            }
            registerKey(e) {
              this.pressedKeys.add(e);
            }
            removeKey(e) {
              this.pressedKeys.delete(e);
            }
          }
          let P = {
            on(e, t) {
              this.__events || (this.__events = {}), this.__events[e] ? this.__events[e].push(t) : (this.__events[e] = [t]);
            },
            off(e, t) {
              this.__events && this.__events[e] && (this.__events[e] = this.__events[e].filter((e) => e !== t));
            },
            removeAllEvents() {
              this.__events = {};
            },
            trigger(e) {
              for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) i[o - 1] = arguments[o];
              this.__events &&
                this.__events[e] &&
                this.__events[e].forEach((e) => {
                  e(...i);
                });
            },
          };
          function j(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          let V = '',
            z = '',
            F = !1;
          class U {
            static buildGlobalContainer(e) {
              (F = !0), (V = a({ className: e, id: e })), r('body').appendChild(V);
            }
            constructor(e, t) {
              var s = this;
              if (
                (j(this, 'viewIndexes', [i.days, i.months, i.years]),
                j(this, 'next', () => {
                  let { year: e, month: t } = this.parsedViewDate;
                  switch (this.currentView) {
                    case i.days:
                      this.setViewDate(new Date(e, t + 1, 1));
                      break;
                    case i.months:
                      this.setViewDate(new Date(e + 1, t, 1));
                      break;
                    case i.years:
                      this.setViewDate(new Date(e + 10, 0, 1));
                  }
                }),
                j(this, 'prev', () => {
                  let { year: e, month: t } = this.parsedViewDate;
                  switch (this.currentView) {
                    case i.days:
                      this.setViewDate(new Date(e, t - 1, 1));
                      break;
                    case i.months:
                      this.setViewDate(new Date(e - 1, t, 1));
                      break;
                    case i.years:
                      this.setViewDate(new Date(e - 10, 0, 1));
                  }
                }),
                j(this, '_finishHide', () => {
                  (this.hideAnimation = !1), this._destroyComponents(), this.$container.removeChild(this.$datepicker);
                }),
                j(this, 'setPosition', function (e) {
                  let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                  if ('function' == typeof (e = e || s.opts.position))
                    return void (s.customHide = e({ $datepicker: s.$datepicker, $target: s.$el, $pointer: s.$pointer, isViewChange: t, done: s._finishHide }));
                  let i,
                    o,
                    { isMobile: r } = s.opts,
                    a = s.$el.getBoundingClientRect(),
                    n = s.$el.getBoundingClientRect(),
                    l = s.$datepicker.offsetParent,
                    c = s.$el.offsetParent,
                    d = s.$datepicker.getBoundingClientRect(),
                    u = e.split(' '),
                    h = window.scrollY,
                    p = window.scrollX,
                    g = s.opts.offset,
                    m = u[0],
                    y = u[1];
                  if (r) s.$datepicker.style.cssText = 'left: 50%; top: 50%';
                  else {
                    if (
                      (l === c && l !== document.body && ((n = { top: s.$el.offsetTop, left: s.$el.offsetLeft, width: a.width, height: s.$el.offsetHeight }), (h = 0), (p = 0)),
                      l !== c && l !== document.body)
                    ) {
                      let e = l.getBoundingClientRect();
                      (n = { top: a.top - e.top, left: a.left - e.left, width: a.width, height: a.height }), (h = 0), (p = 0);
                    }
                    switch (m) {
                      case 'top':
                        i = n.top - d.height - g;
                        break;
                      case 'right':
                        o = n.left + n.width + g;
                        break;
                      case 'bottom':
                        i = n.top + n.height + g;
                        break;
                      case 'left':
                        o = n.left - d.width - g;
                    }
                    switch (y) {
                      case 'top':
                        i = n.top;
                        break;
                      case 'right':
                        o = n.left + n.width - d.width;
                        break;
                      case 'bottom':
                        i = n.top + n.height - d.height;
                        break;
                      case 'left':
                        o = n.left;
                        break;
                      case 'center':
                        /left|right/.test(m) ? (i = n.top + n.height / 2 - d.height / 2) : (o = n.left + n.width / 2 - d.width / 2);
                    }
                    s.$datepicker.style.cssText = `left: ${o + p}px; top: ${i + h}px`;
                  }
                }),
                j(this, '_setInputValue', () => {
                  let {
                      opts: e,
                      $altField: t,
                      locale: { dateFormat: i },
                    } = this,
                    { altFieldDateFormat: o, altField: r } = e;
                  r && t && (t.value = this._getInputValue(o)), (this.$el.value = this._getInputValue(i));
                }),
                j(this, '_getInputValue', (e) => {
                  let { selectedDates: t, opts: i } = this,
                    { multipleDates: o, multipleDatesSeparator: r } = i;
                  if (!t.length) return '';
                  let a = 'function' == typeof e,
                    s = a ? e(o ? t : t[0]) : t.map((t) => this.formatDate(t, e));
                  return (s = a ? s : s.join(r)), s;
                }),
                j(this, '_checkIfDateIsSelected', function (e) {
                  let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i.days,
                    o = !1;
                  return (
                    s.selectedDates.some((i) => {
                      let r = p(e, i, t);
                      return (o = r && i), r;
                    }),
                    o
                  );
                }),
                j(this, '_scheduleCallAfterTransition', (e) => {
                  this._cancelScheduledCall(),
                    e && e(!1),
                    (this._onTransitionEnd = () => {
                      e && e(!0);
                    }),
                    this.$datepicker.addEventListener('transitionend', this._onTransitionEnd, { once: !0 });
                }),
                j(this, '_cancelScheduledCall', () => {
                  this.$datepicker.removeEventListener('transitionend', this._onTransitionEnd);
                }),
                j(this, 'setViewDate', (e) => {
                  if (!((e = A(e)) instanceof Date)) return;
                  if (p(e, this.viewDate)) return;
                  let t = this.viewDate;
                  this.viewDate = e;
                  let { onChangeViewDate: o } = this.opts;
                  if (o) {
                    let { month: e, year: t } = this.parsedViewDate;
                    o({ month: e, year: t, decade: this.curDecade });
                  }
                  this.trigger(i.eventChangeViewDate, e, t);
                }),
                j(this, 'setFocusDate', function (e) {
                  let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                  (!e || (e = A(e)) instanceof Date) && ((s.focusDate = e), s.opts.range && e && s._handleRangeOnFocus(), s.trigger(i.eventChangeFocusDate, e, t));
                }),
                j(this, 'setCurrentView', (e) => {
                  if (this.viewIndexes.includes(e)) {
                    if (((this.currentView = e), this.elIsInput && this.visible && this.setPosition(void 0, !0), this.trigger(i.eventChangeCurrentView, e), !this.views[e])) {
                      let t = (this.views[e] = new D({ dp: this, opts: this.opts, type: e }));
                      this.shouldUpdateDOM && this.$content.appendChild(t.$el);
                    }
                    this.opts.onChangeView && this.opts.onChangeView(e);
                  }
                }),
                j(this, '_updateLastSelectedDate', (e) => {
                  (this.lastSelectedDate = e), this.trigger(i.eventChangeLastSelectedDate, e);
                }),
                j(this, 'destroy', () => {
                  let { showEvent: e, isMobile: t } = this.opts,
                    i = this.$datepicker.parentNode;
                  i && i.removeChild(this.$datepicker),
                    this.$el.removeEventListener(e, this._onFocus),
                    this.$el.removeEventListener('blur', this._onBlur),
                    window.removeEventListener('resize', this._onResize),
                    t && this._removeMobileAttributes(),
                    this.keyboardNav && this.keyboardNav.destroy(),
                    (this.views = null),
                    (this.nav = null),
                    (this.$datepicker = null),
                    (this.opts = null),
                    (this.$customContainer = null),
                    (this.viewDate = null),
                    (this.focusDate = null),
                    (this.selectedDates = null),
                    (this.rangeDateFrom = null),
                    (this.rangeDateTo = null);
                }),
                j(this, 'update', (e) => {
                  let t = v({}, this.opts);
                  v(this.opts, e);
                  let { timepicker: o, buttons: r, range: a, selectedDates: s, isMobile: n } = this.opts,
                    l = this.visible || this.treatAsInline;
                  this._createMinMaxDates(),
                    this._limitViewDateByMaxMinDates(),
                    this._handleLocale(),
                    !t.selectedDates && s && this.selectDate(s),
                    e.view && this.setCurrentView(e.view),
                    this._setInputValue(),
                    t.range && !a
                      ? ((this.rangeDateTo = !1), (this.rangeDateFrom = !1))
                      : !t.range && a && this.selectedDates.length && ((this.rangeDateFrom = this.selectedDates[0]), (this.rangeDateTo = this.selectedDates[1])),
                    t.timepicker && !o
                      ? (l && this.timepicker.destroy(), (this.timepicker = !1), this.$timepicker.parentNode.removeChild(this.$timepicker))
                      : !t.timepicker && o && this._addTimepicker(),
                    !t.buttons && r
                      ? this._addButtons()
                      : t.buttons && !r
                      ? (this.buttons.destroy(), this.$buttons.parentNode.removeChild(this.$buttons))
                      : l && t.buttons && r && this.buttons.clearHtml().render(),
                    !t.isMobile && n
                      ? (this.treatAsInline || z || this._createMobileOverlay(), this._addMobileAttributes(), this.visible && this._showMobileOverlay())
                      : t.isMobile && !n && (this._removeMobileAttributes(), this.visible && (z.classList.remove('-active-'), 'function' != typeof this.opts.position && this.setPosition())),
                    l && (this.nav.update(), this.views[this.currentView].render(), this.currentView === i.days && this.views[this.currentView].renderDayNames());
                }),
                j(this, 'isOtherMonth', (e) => {
                  let { month: t } = l(e);
                  return t !== this.parsedViewDate.month;
                }),
                j(this, 'isOtherYear', (e) => {
                  let { year: t } = l(e);
                  return t !== this.parsedViewDate.year;
                }),
                j(this, 'isOtherDecade', (e) => {
                  let { year: t } = l(e),
                    [i, o] = u(this.viewDate);
                  return t < i || t > o;
                }),
                j(this, '_onChangeSelectedDate', (e) => {
                  let { silent: t } = e;
                  setTimeout(() => {
                    this._setInputValue(), this.opts.onSelect && !t && this._triggerOnSelect();
                  });
                }),
                j(this, '_onChangeFocusedDate', function (e) {
                  let { viewDateTransition: t } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                  if (!e) return;
                  let i = !1;
                  t && (i = s.isOtherMonth(e) || s.isOtherYear(e) || s.isOtherDecade(e)), i && s.setViewDate(e);
                }),
                j(this, '_onChangeTime', (e) => {
                  let { hours: t, minutes: i } = e,
                    o = new Date(),
                    {
                      lastSelectedDate: r,
                      opts: { onSelect: a },
                    } = this,
                    s = r;
                  r || (s = o);
                  let n = this.getCell(s, this.currentViewSingular),
                    l = n && n.adpCell;
                  (l && l.isDisabled) || (s.setHours(t), s.setMinutes(i), r ? (this._setInputValue(), a && this._triggerOnSelect()) : this.selectDate(s));
                }),
                j(this, '_onFocus', (e) => {
                  this.visible || this.show();
                }),
                j(this, '_onBlur', (e) => {
                  this.inFocus || !this.visible || this.opts.isMobile || this.hide();
                }),
                j(this, '_onMouseDown', (e) => {
                  this.inFocus = !0;
                }),
                j(this, '_onMouseUp', (e) => {
                  (this.inFocus = !1), this.$el.focus();
                }),
                j(this, '_onResize', () => {
                  this.visible && 'function' != typeof this.opts.position && this.setPosition();
                }),
                j(this, '_onClickOverlay', () => {
                  this.visible && this.hide();
                }),
                j(this, 'isWeekend', (e) => this.opts.weekends.includes(e)),
                j(this, 'getClampedDate', (e) => {
                  let { minDate: t, maxDate: i } = this,
                    o = e;
                  return i && g(e, i) ? (o = i) : t && m(e, t) && (o = t), o;
                }),
                (this.$el = r(e)),
                !this.$el)
              )
                return;
              (this.$datepicker = a({ className: 'air-datepicker' })),
                (this.opts = v({}, o, t)),
                (this.$customContainer = !!this.opts.container && r(this.opts.container)),
                (this.$altField = r(this.opts.altField || !1));
              let { view: n, startDate: c } = this.opts;
              c || (this.opts.startDate = new Date()),
                'INPUT' === this.$el.nodeName && (this.elIsInput = !0),
                (this.inited = !1),
                (this.visible = !1),
                (this.viewDate = A(this.opts.startDate)),
                (this.focusDate = !1),
                (this.initialReadonly = this.$el.getAttribute('readonly')),
                (this.customHide = !1),
                (this.currentView = n),
                (this.selectedDates = []),
                (this.views = {}),
                (this.keys = []),
                (this.rangeDateFrom = ''),
                (this.rangeDateTo = ''),
                (this.timepickerIsActive = !1),
                (this.treatAsInline = this.opts.inline || !this.elIsInput),
                this.init();
            }
            init() {
              let {
                  opts: e,
                  treatAsInline: t,
                  opts: { inline: i, isMobile: o, selectedDates: a, keyboardNav: s, onlyTimepicker: n },
                } = this,
                l = r('body');
              (!F || (F && V && !l.contains(V))) && !i && this.elIsInput && !this.$customContainer && U.buildGlobalContainer(U.defaultGlobalContainerId),
                !o || z || t || this._createMobileOverlay(),
                this._handleLocale(),
                this._bindSubEvents(),
                this._createMinMaxDates(),
                this._limitViewDateByMaxMinDates(),
                this.elIsInput && (i || this._bindEvents(), s && !n && (this.keyboardNav = new H({ dp: this, opts: e }))),
                a && this.selectDate(a, { silent: !0 }),
                this.opts.visible && !t && this.show(),
                o && !t && this.$el.setAttribute('readonly', !0),
                t && this._createComponents();
            }
            _createMobileOverlay() {
              (z = a({ className: 'air-datepicker-overlay' })), V.appendChild(z);
            }
            _createComponents() {
              let {
                opts: e,
                treatAsInline: t,
                opts: { inline: i, buttons: o, timepicker: r, position: a, classes: s, onlyTimepicker: n, isMobile: l },
              } = this;
              this._buildBaseHtml(),
                this.elIsInput && (i || this._setPositionClasses(a)),
                (!i && this.elIsInput) || this.$datepicker.classList.add('-inline-'),
                s && this.$datepicker.classList.add(...s.split(' ')),
                n && this.$datepicker.classList.add('-only-timepicker-'),
                l && !t && this._addMobileAttributes(),
                (this.views[this.currentView] = new D({ dp: this, type: this.currentView, opts: e })),
                (this.nav = new L({ dp: this, opts: e })),
                r && this._addTimepicker(),
                o && this._addButtons(),
                this.$content.appendChild(this.views[this.currentView].$el),
                this.$nav.appendChild(this.nav.$el);
            }
            _destroyComponents() {
              for (let e in this.views) this.views[e].destroy();
              (this.views = {}), this.nav.destroy(), this.timepicker && this.timepicker.destroy();
            }
            _addMobileAttributes() {
              z.addEventListener('click', this._onClickOverlay), this.$datepicker.classList.add('-is-mobile-'), this.$el.setAttribute('readonly', !0);
            }
            _removeMobileAttributes() {
              z.removeEventListener('click', this._onClickOverlay),
                this.$datepicker.classList.remove('-is-mobile-'),
                this.initialReadonly || '' === this.initialReadonly || this.$el.removeAttribute('readonly');
            }
            _createMinMaxDates() {
              let { minDate: e, maxDate: t } = this.opts;
              (this.minDate = !!e && A(e)), (this.maxDate = !!t && A(t));
            }
            _addTimepicker() {
              (this.$timepicker = a({ className: 'air-datepicker--time' })),
                this.$datepicker.appendChild(this.$timepicker),
                (this.timepicker = new $({ dp: this, opts: this.opts })),
                this.$timepicker.appendChild(this.timepicker.$el);
            }
            _addButtons() {
              (this.$buttons = a({ className: 'air-datepicker--buttons' })),
                this.$datepicker.appendChild(this.$buttons),
                (this.buttons = new M({ dp: this, opts: this.opts })),
                this.$buttons.appendChild(this.buttons.$el);
            }
            _bindSubEvents() {
              this.on(i.eventChangeSelectedDate, this._onChangeSelectedDate), this.on(i.eventChangeFocusDate, this._onChangeFocusedDate), this.on(i.eventChangeTime, this._onChangeTime);
            }
            _buildBaseHtml() {
              let { inline: e } = this.opts;
              var t, i;
              this.elIsInput
                ? e
                  ? ((t = this.$datepicker), (i = this.$el).parentNode.insertBefore(t, i.nextSibling))
                  : this.$container.appendChild(this.$datepicker)
                : this.$el.appendChild(this.$datepicker),
                (this.$datepicker.innerHTML = '<i class="air-datepicker--pointer"></i><div class="air-datepicker--navigation"></div><div class="air-datepicker--content"></div>'),
                (this.$content = r('.air-datepicker--content', this.$datepicker)),
                (this.$pointer = r('.air-datepicker--pointer', this.$datepicker)),
                (this.$nav = r('.air-datepicker--navigation', this.$datepicker));
            }
            _handleLocale() {
              let { locale: e, dateFormat: t, firstDay: i, timepicker: o, onlyTimepicker: r, timeFormat: a, dateTimeSeparator: s } = this.opts;
              var n;
              (this.locale = ((n = e), JSON.parse(JSON.stringify(n)))), t && (this.locale.dateFormat = t), void 0 !== a && '' !== a && (this.locale.timeFormat = a);
              let { timeFormat: l } = this.locale;
              if (('' !== i && (this.locale.firstDay = i), o && 'function' != typeof t)) {
                let e = l ? s : '';
                this.locale.dateFormat = [this.locale.dateFormat, l || ''].join(e);
              }
              r && 'function' != typeof t && (this.locale.dateFormat = this.locale.timeFormat);
            }
            _setPositionClasses(e) {
              if ('function' == typeof e) return void this.$datepicker.classList.add('-custom-position-');
              let t = (e = e.split(' '))[0],
                i = `air-datepicker -${t}-${e[1]}- -from-${t}-`;
              this.$datepicker.classList.add(...i.split(' '));
            }
            _bindEvents() {
              this.$el.addEventListener(this.opts.showEvent, this._onFocus),
                this.$el.addEventListener('blur', this._onBlur),
                this.$datepicker.addEventListener('mousedown', this._onMouseDown),
                this.$datepicker.addEventListener('mouseup', this._onMouseUp),
                window.addEventListener('resize', this._onResize);
            }
            _limitViewDateByMaxMinDates() {
              let { viewDate: e, minDate: t, maxDate: i } = this;
              i && g(e, i) && this.setViewDate(i), t && m(e, t) && this.setViewDate(t);
            }
            formatDate() {
              let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.viewDate,
                t = arguments.length > 1 ? arguments[1] : void 0;
              if (((e = A(e)), !(e instanceof Date))) return;
              let i = t,
                o = this.locale,
                r = l(e),
                a = r.dayPeriod,
                s = u(e),
                n = U.replacer,
                c = {
                  T: e.getTime(),
                  m: r.minutes,
                  mm: r.fullMinutes,
                  h: r.hours12,
                  hh: r.fullHours12,
                  H: r.hours,
                  HH: r.fullHours,
                  aa: a,
                  AA: a.toUpperCase(),
                  E: o.daysShort[r.day],
                  EEEE: o.days[r.day],
                  d: r.date,
                  dd: r.fullDate,
                  M: r.month + 1,
                  MM: r.fullMonth,
                  MMM: o.monthsShort[r.month],
                  MMMM: o.months[r.month],
                  yy: r.year.toString().slice(-2),
                  yyyy: r.year,
                  yyyy1: s[0],
                  yyyy2: s[1],
                };
              for (let [e, t] of Object.entries(c)) i = n(i, x(e), t);
              return i;
            }
            down(e) {
              this._handleUpDownActions(e, 'down');
            }
            up(e) {
              this._handleUpDownActions(e, 'up');
            }
            selectDate(e) {
              let t,
                o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                { currentView: r, parsedViewDate: a, selectedDates: s } = this,
                { updateTime: n } = o,
                { moveToOtherMonthsOnSelect: l, moveToOtherYearsOnSelect: c, multipleDates: d, range: u, autoClose: h } = this.opts,
                p = s.length;
              if (Array.isArray(e))
                return (
                  e.forEach((e) => {
                    this.selectDate(e, o);
                  }),
                  new Promise((e) => {
                    setTimeout(e);
                  })
                );
              if ((e = A(e)) instanceof Date) {
                if (
                  (r === i.days && e.getMonth() !== a.month && l && (t = new Date(e.getFullYear(), e.getMonth(), 1)),
                  r === i.years && e.getFullYear() !== a.year && c && (t = new Date(e.getFullYear(), 0, 1)),
                  t && this.setViewDate(t),
                  d && !u)
                ) {
                  if (p === d) return;
                  this._checkIfDateIsSelected(e) || s.push(e);
                } else if (u)
                  switch (p) {
                    case 1:
                      s.push(e),
                        this.rangeDateTo || (this.rangeDateTo = e),
                        g(this.rangeDateFrom, this.rangeDateTo) && ((this.rangeDateTo = this.rangeDateFrom), (this.rangeDateFrom = e)),
                        (this.selectedDates = [this.rangeDateFrom, this.rangeDateTo]);
                      break;
                    case 2:
                      (this.selectedDates = [e]), (this.rangeDateFrom = e), (this.rangeDateTo = '');
                      break;
                    default:
                      (this.selectedDates = [e]), (this.rangeDateFrom = e);
                  }
                else this.selectedDates = [e];
                return (
                  this.trigger(i.eventChangeSelectedDate, { action: i.actionSelectDate, silent: null == o ? void 0 : o.silent, date: e, updateTime: n }),
                  this._updateLastSelectedDate(e),
                  h && !this.timepickerIsActive && this.visible && (d || u ? u && 1 === p && this.hide() : this.hide()),
                  new Promise((e) => {
                    setTimeout(e);
                  })
                );
              }
            }
            unselectDate(e) {
              let t = this.selectedDates,
                o = this;
              if ((e = A(e)) instanceof Date)
                return t.some((r, a) => {
                  if (p(r, e))
                    return (
                      t.splice(a, 1),
                      o.selectedDates.length ? o._updateLastSelectedDate(o.selectedDates[o.selectedDates.length - 1]) : ((o.rangeDateFrom = ''), (o.rangeDateTo = ''), o._updateLastSelectedDate(!1)),
                      this.trigger(i.eventChangeSelectedDate, { action: i.actionUnselectDate, date: e }),
                      !0
                    );
                });
            }
            replaceDate(e, t) {
              let o = this.selectedDates.find((t) => p(t, e, this.currentView)),
                r = this.selectedDates.indexOf(o);
              r < 0 ||
                p(this.selectedDates[r], t, this.currentView) ||
                ((this.selectedDates[r] = t), this.trigger(i.eventChangeSelectedDate, { action: i.actionSelectDate, date: t, updateTime: !0 }), this._updateLastSelectedDate(t));
            }
            clear() {
              let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              return (
                (this.selectedDates = []),
                (this.rangeDateFrom = !1),
                (this.rangeDateTo = !1),
                this.trigger(i.eventChangeSelectedDate, { action: i.actionUnselectDate, silent: e.silent }),
                new Promise((e) => {
                  setTimeout(e);
                })
              );
            }
            show() {
              let { onShow: e, isMobile: t } = this.opts;
              this._cancelScheduledCall(),
                this.visible || this.hideAnimation || this._createComponents(),
                this.setPosition(this.opts.position),
                this.$datepicker.classList.add('-active-'),
                (this.visible = !0),
                e && this._scheduleCallAfterTransition(e),
                t && this._showMobileOverlay();
            }
            hide() {
              let { onHide: e, isMobile: t } = this.opts,
                i = this._hasTransition();
              (this.visible = !1),
                (this.hideAnimation = !0),
                this.$datepicker.classList.remove('-active-'),
                this.customHide && this.customHide(),
                this.elIsInput && this.$el.blur(),
                this._scheduleCallAfterTransition((t) => {
                  !this.customHide && ((t && i) || (!t && !i)) && this._finishHide(), e && e(t);
                }),
                t && z.classList.remove('-active-');
            }
            _triggerOnSelect() {
              let e = [],
                t = [],
                {
                  selectedDates: i,
                  locale: o,
                  opts: { onSelect: r, multipleDates: a, range: s },
                } = this,
                n = a || s,
                l = 'function' == typeof o.dateFormat;
              i.length && ((e = i.map(y)), (t = l ? (a ? o.dateFormat(e) : e.map((e) => o.dateFormat(e))) : e.map((e) => this.formatDate(e, o.dateFormat)))),
                r({ date: n ? e : e[0], formattedDate: n ? t : t[0], datepicker: this });
            }
            _handleAlreadySelectedDates(e, t) {
              let { range: i, toggleSelected: o } = this.opts;
              i ? (o ? this.unselectDate(t) : 2 !== this.selectedDates.length && this.selectDate(t)) : o && this.unselectDate(t), o || this._updateLastSelectedDate(e);
            }
            _handleUpDownActions(e, t) {
              if (!((e = A(e || this.focusDate || this.viewDate)) instanceof Date)) return;
              let i = 'up' === t ? this.viewIndex + 1 : this.viewIndex - 1;
              i > 2 && (i = 2), i < 0 && (i = 0), this.setViewDate(new Date(e.getFullYear(), e.getMonth(), 1)), this.setCurrentView(this.viewIndexes[i]);
            }
            _handleRangeOnFocus() {
              1 === this.selectedDates.length &&
                (g(this.selectedDates[0], this.focusDate)
                  ? ((this.rangeDateTo = this.selectedDates[0]), (this.rangeDateFrom = this.focusDate))
                  : ((this.rangeDateTo = this.focusDate), (this.rangeDateFrom = this.selectedDates[0])));
            }
            getCell(e) {
              let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i.day;
              if (!((e = A(e)) instanceof Date)) return;
              let { year: o, month: r, date: a } = l(e),
                s = `[data-year="${o}"]`,
                n = `[data-month="${r}"]`,
                c = { [i.day]: `${s}${n}[data-date="${a}"]`, [i.month]: `${s}${n}`, [i.year]: `${s}` };
              return this.views[this.currentView].$el.querySelector(c[t]);
            }
            _showMobileOverlay() {
              z.classList.add('-active-');
            }
            _hasTransition() {
              return (
                window
                  .getComputedStyle(this.$datepicker)
                  .getPropertyValue('transition-duration')
                  .split(', ')
                  .reduce((e, t) => parseFloat(t) + e, 0) > 0
              );
            }
            get shouldUpdateDOM() {
              return this.visible || this.treatAsInline;
            }
            get parsedViewDate() {
              return l(this.viewDate);
            }
            get currentViewSingular() {
              return this.currentView.slice(0, -1);
            }
            get curDecade() {
              return u(this.viewDate);
            }
            get viewIndex() {
              return this.viewIndexes.indexOf(this.currentView);
            }
            get isFinalView() {
              return this.currentView === i.years;
            }
            get hasSelectedDates() {
              return this.selectedDates.length > 0;
            }
            get isMinViewReached() {
              return this.currentView === this.opts.minView || this.currentView === i.days;
            }
            get $container() {
              return this.$customContainer || V;
            }
            static replacer(e, t, i) {
              return e.replace(t, function (e, t, o, r) {
                return t + i + r;
              });
            }
          }
          var Y;
          return j(U, 'defaults', o), j(U, 'version', '3.3.5'), j(U, 'defaultGlobalContainerId', 'air-datepicker-global-container'), (Y = U.prototype), Object.assign(Y, P), t.default;
        })();
      },
      102: (e, t, i) => {
        'use strict';
        i.d(t, { Z: () => n });
        var o = i(15),
          r = i.n(o),
          a = i(645),
          s = i.n(a)()(r());
        s.push([
          e.id,
          '.air-datepicker-cell.-year-.-other-decade-,.air-datepicker-cell.-day-.-other-month-{color:var(--adp-color-other-month)}.air-datepicker-cell.-year-.-other-decade-:hover,.air-datepicker-cell.-day-.-other-month-:hover{color:var(--adp-color-other-month-hover)}.-disabled-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-disabled-.-focus-.air-datepicker-cell.-day-.-other-month-{color:var(--adp-color-other-month)}.-selected-.air-datepicker-cell.-year-.-other-decade-,.-selected-.air-datepicker-cell.-day-.-other-month-{color:#fff;background:var(--adp-background-color-selected-other-month)}.-selected-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-selected-.-focus-.air-datepicker-cell.-day-.-other-month-{background:var(--adp-background-color-selected-other-month-focused)}.-in-range-.air-datepicker-cell.-year-.-other-decade-,.-in-range-.air-datepicker-cell.-day-.-other-month-{background-color:var(--adp-background-color-in-range);color:var(--adp-color)}.-in-range-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-in-range-.-focus-.air-datepicker-cell.-day-.-other-month-{background-color:var(--adp-background-color-in-range-focused)}.air-datepicker-cell.-year-.-other-decade-:empty,.air-datepicker-cell.-day-.-other-month-:empty{background:none;border:none}.air-datepicker-cell{border-radius:var(--adp-cell-border-radius);box-sizing:border-box;cursor:pointer;display:flex;position:relative;align-items:center;justify-content:center;z-index:1}.air-datepicker-cell.-focus-{background:var(--adp-cell-background-color-hover)}.air-datepicker-cell.-current-{color:var(--adp-color-current-date)}.air-datepicker-cell.-current-.-focus-{color:var(--adp-color)}.air-datepicker-cell.-current-.-in-range-{color:var(--adp-color-current-date)}.air-datepicker-cell.-disabled-{cursor:default;color:var(--adp-color-disabled)}.air-datepicker-cell.-disabled-.-focus-{color:var(--adp-color-disabled)}.air-datepicker-cell.-disabled-.-in-range-{color:var(--adp-color-disabled-in-range)}.air-datepicker-cell.-disabled-.-current-.-focus-{color:var(--adp-color-disabled)}.air-datepicker-cell.-in-range-{background:var(--adp-cell-background-color-in-range);border-radius:0}.air-datepicker-cell.-in-range-:hover{background:var(--adp-cell-background-color-in-range-hover)}.air-datepicker-cell.-range-from-{border:1px solid var(--adp-cell-border-color-in-range);background-color:var(--adp-cell-background-color-in-range);border-radius:var(--adp-cell-border-radius) 0 0 var(--adp-cell-border-radius)}.air-datepicker-cell.-range-to-{border:1px solid var(--adp-cell-border-color-in-range);background-color:var(--adp-cell-background-color-in-range);border-radius:0 var(--adp-cell-border-radius) var(--adp-cell-border-radius) 0}.air-datepicker-cell.-range-to-.-range-from-{border-radius:var(--adp-cell-border-radius)}.air-datepicker-cell.-selected-{color:#fff;border:none;background:var(--adp-cell-background-color-selected)}.air-datepicker-cell.-selected-.-current-{color:#fff;background:var(--adp-cell-background-color-selected)}.air-datepicker-cell.-selected-.-focus-{background:var(--adp-cell-background-color-selected-hover)}\r\n.air-datepicker-body{transition:all var(--adp-transition-duration) var(--adp-transition-ease)}.air-datepicker-body.-hidden-{display:none}.air-datepicker-body--day-names{display:grid;grid-template-columns:repeat(7, var(--adp-day-cell-width));margin:8px 0 3px}.air-datepicker-body--day-name{color:var(--adp-day-name-color);display:flex;align-items:center;justify-content:center;flex:1;text-align:center;text-transform:uppercase;font-size:.8em}.air-datepicker-body--day-name.-clickable-{cursor:pointer}.air-datepicker-body--day-name.-clickable-:hover{color:var(--adp-day-name-color-hover)}.air-datepicker-body--cells{display:grid}.air-datepicker-body--cells.-days-{grid-template-columns:repeat(7, var(--adp-day-cell-width));grid-auto-rows:var(--adp-day-cell-height)}.air-datepicker-body--cells.-months-{grid-template-columns:repeat(3, 1fr);grid-auto-rows:var(--adp-month-cell-height)}.air-datepicker-body--cells.-years-{grid-template-columns:repeat(4, 1fr);grid-auto-rows:var(--adp-year-cell-height)}\r\n.air-datepicker-nav{display:flex;justify-content:space-between;border-bottom:1px solid var(--adp-border-color-inner);min-height:var(--adp-nav-height);padding:var(--adp-padding);box-sizing:content-box}.-only-timepicker- .air-datepicker-nav{display:none}.air-datepicker-nav--title,.air-datepicker-nav--action{display:flex;cursor:pointer;align-items:center;justify-content:center}.air-datepicker-nav--action{width:var(--adp-nav-action-size);border-radius:var(--adp-border-radius);-webkit-user-select:none;-moz-user-select:none;user-select:none}.air-datepicker-nav--action:hover{background:var(--adp-background-color-hover)}.air-datepicker-nav--action:active{background:var(--adp-background-color-active)}.air-datepicker-nav--action.-disabled-{visibility:hidden}.air-datepicker-nav--action svg{width:32px;height:32px}.air-datepicker-nav--action path{fill:none;stroke:var(--adp-nav-arrow-color);stroke-width:2px}.air-datepicker-nav--title{border-radius:var(--adp-border-radius);padding:0 8px}.air-datepicker-nav--title i{font-style:normal;color:var(--adp-nav-color-secondary);margin-left:.3em}.air-datepicker-nav--title:hover{background:var(--adp-background-color-hover)}.air-datepicker-nav--title:active{background:var(--adp-background-color-active)}.air-datepicker-nav--title.-disabled-{cursor:default;background:none}\r\n.air-datepicker-buttons{display:grid;grid-auto-columns:1fr;grid-auto-flow:column}.air-datepicker-button{display:inline-flex;color:var(--adp-btn-color);border-radius:var(--adp-btn-border-radius);cursor:pointer;height:var(--adp-btn-height);border:none;background:rgba(255,255,255,0)}.air-datepicker-button:hover{color:var(--adp-btn-color-hover);background:var(--adp-btn-background-color-hover)}.air-datepicker-button:focus{color:var(--adp-btn-color-hover);background:var(--adp-btn-background-color-hover);outline:none}.air-datepicker-button:active{background:var(--adp-btn-background-color-active)}.air-datepicker-button span{outline:none;display:flex;align-items:center;justify-content:center;width:100%;height:100%}\r\n.air-datepicker-time{display:grid;grid-template-columns:max-content 1fr;grid-column-gap:12px;align-items:center;position:relative;padding:0 var(--adp-time-padding-inner)}.-only-timepicker- .air-datepicker-time{border-top:none}.air-datepicker-time--current{display:flex;align-items:center;flex:1;font-size:14px;text-align:center}.air-datepicker-time--current-colon{margin:0 2px 3px;line-height:1}.air-datepicker-time--current-hours,.air-datepicker-time--current-minutes{line-height:1;font-size:19px;font-family:"Century Gothic",CenturyGothic,AppleGothic,sans-serif;position:relative;z-index:1}.air-datepicker-time--current-hours:after,.air-datepicker-time--current-minutes:after{content:"";background:var(--adp-background-color-hover);border-radius:var(--adp-border-radius);position:absolute;left:-2px;top:-3px;right:-2px;bottom:-2px;z-index:-1;opacity:0}.air-datepicker-time--current-hours.-focus-:after,.air-datepicker-time--current-minutes.-focus-:after{opacity:1}.air-datepicker-time--current-ampm{text-transform:uppercase;align-self:flex-end;color:var(--adp-time-day-period-color);margin-left:6px;font-size:11px;margin-bottom:1px}.air-datepicker-time--row{display:flex;align-items:center;font-size:11px;height:17px;background:linear-gradient(to right, var(--adp-time-track-color), var(--adp-time-track-color)) left 50%/100% var(--adp-time-track-height) no-repeat}.air-datepicker-time--row:first-child{margin-bottom:4px}.air-datepicker-time--row input[type=range]{background:none;cursor:pointer;flex:1;height:100%;width:100%;padding:0;margin:0;-webkit-appearance:none}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{-webkit-appearance:none}.air-datepicker-time--row input[type=range]::-ms-tooltip{display:none}.air-datepicker-time--row input[type=range]:hover::-webkit-slider-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:hover::-moz-range-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:hover::-ms-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:focus{outline:none}.air-datepicker-time--row input[type=range]:focus::-webkit-slider-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]:focus::-moz-range-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]:focus::-ms-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-webkit-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-moz-range-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-moz-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-ms-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-ms-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{margin-top:calc(var(--adp-time-thumb-size)/2*-1)}.air-datepicker-time--row input[type=range]::-webkit-slider-runnable-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-moz-range-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-fill-lower{background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-fill-upper{background:rgba(0,0,0,0)}\r\n.air-datepicker{--adp-font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";--adp-font-size: 14px;--adp-width: 246px;--adp-z-index: 100;--adp-padding: 4px;--adp-grid-areas: "nav" "body" "timepicker" "buttons";--adp-transition-duration: .3s;--adp-transition-ease: ease-out;--adp-transition-offset: 8px;--adp-background-color: #fff;--adp-background-color-hover: #f0f0f0;--adp-background-color-active: #eaeaea;--adp-background-color-in-range: rgba(92, 196, 239, .1);--adp-background-color-in-range-focused: rgba(92, 196, 239, .2);--adp-background-color-selected-other-month-focused: #8ad5f4;--adp-background-color-selected-other-month: #a2ddf6;--adp-color: #4a4a4a;--adp-color-secondary: #9c9c9c;--adp-accent-color: #4eb5e6;--adp-color-current-date: var(--adp-accent-color);--adp-color-other-month: #dedede;--adp-color-disabled: #aeaeae;--adp-color-disabled-in-range: #939393;--adp-color-other-month-hover: #c5c5c5;--adp-border-color: #dbdbdb;--adp-border-color-inner: #efefef;--adp-border-radius: 4px;--adp-border-color-inline: #d7d7d7;--adp-nav-height: 32px;--adp-nav-arrow-color: var(--adp-color-secondary);--adp-nav-action-size: 32px;--adp-nav-color-secondary: var(--adp-color-secondary);--adp-day-name-color: #ff9a19;--adp-day-name-color-hover: #8ad5f4;--adp-day-cell-width: 1fr;--adp-day-cell-height: 32px;--adp-month-cell-height: 42px;--adp-year-cell-height: 56px;--adp-pointer-size: 10px;--adp-poiner-border-radius: 2px;--adp-pointer-offset: 14px;--adp-cell-border-radius: 4px;--adp-cell-background-color-hover: var(--adp-background-color-hover);--adp-cell-background-color-selected: #5cc4ef;--adp-cell-background-color-selected-hover: #45bced;--adp-cell-background-color-in-range: rgba(92, 196, 239, 0.1);--adp-cell-background-color-in-range-hover: rgba(92, 196, 239, 0.2);--adp-cell-border-color-in-range: var(--adp-cell-background-color-selected);--adp-btn-height: 32px;--adp-btn-color: var(--adp-accent-color);--adp-btn-color-hover: var(--adp-color);--adp-btn-border-radius: var(--adp-border-radius);--adp-btn-background-color-hover: var(--adp-background-color-hover);--adp-btn-background-color-active: var(--adp-background-color-active);--adp-time-track-height: 1px;--adp-time-track-color: #dedede;--adp-time-track-color-hover: #b1b1b1;--adp-time-thumb-size: 12px;--adp-time-padding-inner: 10px;--adp-time-day-period-color: var(--adp-color-secondary);--adp-mobile-font-size: 16px;--adp-mobile-nav-height: 40px;--adp-mobile-width: 320px;--adp-mobile-day-cell-height: 38px;--adp-mobile-month-cell-height: 48px;--adp-mobile-year-cell-height: 64px}.air-datepicker-overlay{--adp-overlay-background-color: rgba(0, 0, 0, .3);--adp-overlay-transition-duration: .3s;--adp-overlay-transition-ease: ease-out;--adp-overlay-z-index: 99}\r\n.air-datepicker{background:var(--adp-background-color);border:1px solid var(--adp-border-color);box-shadow:0 4px 12px rgba(0,0,0,.15);border-radius:var(--adp-border-radius);box-sizing:content-box;display:grid;grid-template-columns:1fr;grid-template-rows:repeat(4, max-content);grid-template-areas:var(--adp-grid-areas);font-family:var(--adp-font-family),sans-serif;font-size:var(--adp-font-size);color:var(--adp-color);width:var(--adp-width);position:absolute;transition:opacity var(--adp-transition-duration) var(--adp-transition-ease),transform var(--adp-transition-duration) var(--adp-transition-ease);z-index:var(--adp-z-index)}.air-datepicker:not(.-custom-position-){opacity:0}.air-datepicker.-from-top-{transform:translateY(calc(var(--adp-transition-offset) * -1))}.air-datepicker.-from-right-{transform:translateX(var(--adp-transition-offset))}.air-datepicker.-from-bottom-{transform:translateY(var(--adp-transition-offset))}.air-datepicker.-from-left-{transform:translateX(calc(var(--adp-transition-offset) * -1))}.air-datepicker.-active-:not(.-custom-position-){transform:translate(0, 0);opacity:1}.air-datepicker.-active-.-custom-position-{transition:none}.air-datepicker.-inline-{border-color:var(--adp-border-color-inline);box-shadow:none;position:static;left:auto;right:auto;opacity:1;transform:none}.air-datepicker.-inline- .air-datepicker--pointer{display:none}.air-datepicker.-is-mobile-{--adp-font-size: var(--adp-mobile-font-size);--adp-day-cell-height: var(--adp-mobile-day-cell-height);--adp-month-cell-height: var(--adp-mobile-month-cell-height);--adp-year-cell-height: var(--adp-mobile-year-cell-height);--adp-nav-height: var(--adp-mobile-nav-height);--adp-nav-action-size: var(--adp-mobile-nav-height);position:fixed;width:var(--adp-mobile-width);border:none}.air-datepicker.-is-mobile- *{-webkit-tap-highlight-color:rgba(0,0,0,0)}.air-datepicker.-is-mobile- .air-datepicker--pointer{display:none}.air-datepicker.-is-mobile-:not(.-custom-position-){transform:translate(-50%, calc(-50% + var(--adp-transition-offset)))}.air-datepicker.-is-mobile-.-active-:not(.-custom-position-){transform:translate(-50%, -50%)}.air-datepicker.-custom-position-{transition:none}.air-datepicker-global-container{position:absolute;left:0;top:0}.air-datepicker--pointer{--pointer-half-size: calc(var(--adp-pointer-size) / 2);position:absolute;width:var(--adp-pointer-size);height:var(--adp-pointer-size);z-index:-1}.air-datepicker--pointer:after{content:"";position:absolute;background:#fff;border-top:1px solid var(--adp-border-color-inline);border-right:1px solid var(--adp-border-color-inline);border-top-right-radius:var(--adp-poiner-border-radius);width:var(--adp-pointer-size);height:var(--adp-pointer-size);box-sizing:border-box}.-top-left- .air-datepicker--pointer,.-top-center- .air-datepicker--pointer,.-top-right- .air-datepicker--pointer,[data-popper-placement^=top] .air-datepicker--pointer{top:calc(100% - var(--pointer-half-size) + 1px)}.-top-left- .air-datepicker--pointer:after,.-top-center- .air-datepicker--pointer:after,.-top-right- .air-datepicker--pointer:after,[data-popper-placement^=top] .air-datepicker--pointer:after{transform:rotate(135deg)}.-right-top- .air-datepicker--pointer,.-right-center- .air-datepicker--pointer,.-right-bottom- .air-datepicker--pointer,[data-popper-placement^=right] .air-datepicker--pointer{right:calc(100% - var(--pointer-half-size) + 1px)}.-right-top- .air-datepicker--pointer:after,.-right-center- .air-datepicker--pointer:after,.-right-bottom- .air-datepicker--pointer:after,[data-popper-placement^=right] .air-datepicker--pointer:after{transform:rotate(225deg)}.-bottom-left- .air-datepicker--pointer,.-bottom-center- .air-datepicker--pointer,.-bottom-right- .air-datepicker--pointer,[data-popper-placement^=bottom] .air-datepicker--pointer{bottom:calc(100% - var(--pointer-half-size) + 1px)}.-bottom-left- .air-datepicker--pointer:after,.-bottom-center- .air-datepicker--pointer:after,.-bottom-right- .air-datepicker--pointer:after,[data-popper-placement^=bottom] .air-datepicker--pointer:after{transform:rotate(315deg)}.-left-top- .air-datepicker--pointer,.-left-center- .air-datepicker--pointer,.-left-bottom- .air-datepicker--pointer,[data-popper-placement^=left] .air-datepicker--pointer{left:calc(100% - var(--pointer-half-size) + 1px)}.-left-top- .air-datepicker--pointer:after,.-left-center- .air-datepicker--pointer:after,.-left-bottom- .air-datepicker--pointer:after,[data-popper-placement^=left] .air-datepicker--pointer:after{transform:rotate(45deg)}.-top-left- .air-datepicker--pointer,.-bottom-left- .air-datepicker--pointer{left:var(--adp-pointer-offset)}.-top-right- .air-datepicker--pointer,.-bottom-right- .air-datepicker--pointer{right:var(--adp-pointer-offset)}.-top-center- .air-datepicker--pointer,.-bottom-center- .air-datepicker--pointer{left:calc(50% - var(--adp-pointer-size)/2)}.-left-top- .air-datepicker--pointer,.-right-top- .air-datepicker--pointer{top:var(--adp-pointer-offset)}.-left-bottom- .air-datepicker--pointer,.-right-bottom- .air-datepicker--pointer{bottom:var(--adp-pointer-offset)}.-left-center- .air-datepicker--pointer,.-right-center- .air-datepicker--pointer{top:calc(50% - var(--adp-pointer-size)/2)}.air-datepicker--navigation{grid-area:nav}.air-datepicker--content{box-sizing:content-box;padding:var(--adp-padding);grid-area:body}.-only-timepicker- .air-datepicker--content{display:none}.air-datepicker--time{grid-area:timepicker}.air-datepicker--buttons{grid-area:buttons}.air-datepicker--buttons,.air-datepicker--time{padding:var(--adp-padding);border-top:1px solid var(--adp-border-color-inner)}.air-datepicker-overlay{position:fixed;background:var(--adp-overlay-background-color);left:0;top:0;width:0;height:0;opacity:0;transition:opacity var(--adp-overlay-transition-duration) var(--adp-overlay-transition-ease),left 0s,height 0s,width 0s;transition-delay:0s,var(--adp-overlay-transition-duration),var(--adp-overlay-transition-duration),var(--adp-overlay-transition-duration);z-index:var(--adp-overlay-z-index)}.air-datepicker-overlay.-active-{opacity:1;width:100%;height:100%;transition:opacity var(--adp-overlay-transition-duration) var(--adp-overlay-transition-ease),height 0s,width 0s}\r\n',
          '',
          {
            version: 3,
            sources: ['webpack://./node_modules/air-datepicker/air-datepicker.css'],
            names: [],
            mappings:
              'AAAA,oFAAoF,kCAAkC,CAAC,gGAAgG,wCAAwC,CAAC,0HAA0H,kCAAkC,CAAC,0GAA0G,UAAU,CAAC,2DAA2D,CAAC,0HAA0H,mEAAmE,CAAC,0GAA0G,qDAAqD,CAAC,sBAAsB,CAAC,0HAA0H,6DAA6D,CAAC,gGAAgG,eAAe,CAAC,WAAW,CAAC,qBAAqB,2CAA2C,CAAC,qBAAqB,CAAC,cAAc,CAAC,YAAY,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,SAAS,CAAC,6BAA6B,iDAAiD,CAAC,+BAA+B,mCAAmC,CAAC,uCAAuC,sBAAsB,CAAC,0CAA0C,mCAAmC,CAAC,gCAAgC,cAAc,CAAC,+BAA+B,CAAC,wCAAwC,+BAA+B,CAAC,2CAA2C,wCAAwC,CAAC,kDAAkD,+BAA+B,CAAC,gCAAgC,oDAAoD,CAAC,eAAe,CAAC,sCAAsC,0DAA0D,CAAC,kCAAkC,sDAAsD,CAAC,0DAA0D,CAAC,6EAA6E,CAAC,gCAAgC,sDAAsD,CAAC,0DAA0D,CAAC,6EAA6E,CAAC,6CAA6C,2CAA2C,CAAC,gCAAgC,UAAU,CAAC,WAAW,CAAC,oDAAoD,CAAC,0CAA0C,UAAU,CAAC,oDAAoD,CAAC,wCAAwC,0DAA0D;AACpiG,qBAAqB,wEAAwE,CAAC,8BAA8B,YAAY,CAAC,gCAAgC,YAAY,CAAC,0DAA0D,CAAC,gBAAgB,CAAC,+BAA+B,+BAA+B,CAAC,YAAY,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,MAAM,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,cAAc,CAAC,2CAA2C,cAAc,CAAC,iDAAiD,qCAAqC,CAAC,4BAA4B,YAAY,CAAC,mCAAmC,0DAA0D,CAAC,yCAAyC,CAAC,qCAAqC,oCAAoC,CAAC,2CAA2C,CAAC,oCAAoC,oCAAoC,CAAC,0CAA0C;AACp+B,oBAAoB,YAAY,CAAC,6BAA6B,CAAC,qDAAqD,CAAC,gCAAgC,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,uCAAuC,YAAY,CAAC,uDAAuD,YAAY,CAAC,cAAc,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,4BAA4B,gCAAgC,CAAC,sCAAsC,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,kCAAkC,4CAA4C,CAAC,mCAAmC,6CAA6C,CAAC,uCAAuC,iBAAiB,CAAC,gCAAgC,UAAU,CAAC,WAAW,CAAC,iCAAiC,SAAS,CAAC,iCAAiC,CAAC,gBAAgB,CAAC,2BAA2B,sCAAsC,CAAC,aAAa,CAAC,6BAA6B,iBAAiB,CAAC,oCAAoC,CAAC,gBAAgB,CAAC,iCAAiC,4CAA4C,CAAC,kCAAkC,6CAA6C,CAAC,sCAAsC,cAAc,CAAC,eAAe;AAClyC,wBAAwB,YAAY,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,uBAAuB,mBAAmB,CAAC,0BAA0B,CAAC,0CAA0C,CAAC,cAAc,CAAC,4BAA4B,CAAC,WAAW,CAAC,8BAA8B,CAAC,6BAA6B,gCAAgC,CAAC,gDAAgD,CAAC,6BAA6B,gCAAgC,CAAC,gDAAgD,CAAC,YAAY,CAAC,8BAA8B,iDAAiD,CAAC,4BAA4B,YAAY,CAAC,YAAY,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,UAAU,CAAC,WAAW;AAC1sB,qBAAqB,YAAY,CAAC,qCAAqC,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,uCAAuC,CAAC,wCAAwC,eAAe,CAAC,8BAA8B,YAAY,CAAC,kBAAkB,CAAC,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,oCAAoC,gBAAgB,CAAC,aAAa,CAAC,0EAA0E,aAAa,CAAC,cAAc,CAAC,iEAAiE,CAAC,iBAAiB,CAAC,SAAS,CAAC,sFAAsF,UAAU,CAAC,4CAA4C,CAAC,sCAAsC,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,sGAAsG,SAAS,CAAC,mCAAmC,wBAAwB,CAAC,mBAAmB,CAAC,sCAAsC,CAAC,eAAe,CAAC,cAAc,CAAC,iBAAiB,CAAC,0BAA0B,YAAY,CAAC,kBAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,mJAAmJ,CAAC,sCAAsC,iBAAiB,CAAC,4CAA4C,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,uBAAuB,CAAC,kEAAkE,uBAAuB,CAAC,yDAAyD,YAAY,CAAC,wEAAwE,8CAA8C,CAAC,oEAAoE,8CAA8C,CAAC,6DAA6D,8CAA8C,CAAC,kDAAkD,YAAY,CAAC,wEAAwE,oDAAoD,CAAC,sDAAsD,CAAC,oEAAoE,oDAAoD,CAAC,sDAAsD,CAAC,6DAA6D,oDAAoD,CAAC,sDAAsD,CAAC,kEAAkE,qBAAqB,CAAC,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,4CAA4C,CAAC,eAAe,CAAC,cAAc,CAAC,4DAA4D,CAAC,oDAAoD,CAAC,8DAA8D,qBAAqB,CAAC,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,4CAA4C,CAAC,eAAe,CAAC,cAAc,CAAC,yDAAyD,CAAC,oDAAoD,CAAC,uDAAuD,qBAAqB,CAAC,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,4CAA4C,CAAC,eAAe,CAAC,cAAc,CAAC,wDAAwD,CAAC,oDAAoD,CAAC,kEAAkE,gDAAgD,CAAC,2EAA2E,WAAW,CAAC,mCAAmC,CAAC,cAAc,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,8DAA8D,WAAW,CAAC,mCAAmC,CAAC,cAAc,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,uDAAuD,WAAW,CAAC,mCAAmC,CAAC,cAAc,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,4DAA4D,wBAAwB,CAAC,4DAA4D,wBAAwB;AAC5yI,gBAAgB,gKAAgK,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,qDAAqD,CAAC,8BAA8B,CAAC,+BAA+B,CAAC,4BAA4B,CAAC,4BAA4B,CAAC,qCAAqC,CAAC,sCAAsC,CAAC,uDAAuD,CAAC,+DAA+D,CAAC,4DAA4D,CAAC,oDAAoD,CAAC,oBAAoB,CAAC,8BAA8B,CAAC,2BAA2B,CAAC,iDAAiD,CAAC,gCAAgC,CAAC,6BAA6B,CAAC,sCAAsC,CAAC,sCAAsC,CAAC,2BAA2B,CAAC,iCAAiC,CAAC,wBAAwB,CAAC,kCAAkC,CAAC,sBAAsB,CAAC,iDAAiD,CAAC,2BAA2B,CAAC,qDAAqD,CAAC,6BAA6B,CAAC,mCAAmC,CAAC,yBAAyB,CAAC,2BAA2B,CAAC,6BAA6B,CAAC,4BAA4B,CAAC,wBAAwB,CAAC,+BAA+B,CAAC,0BAA0B,CAAC,6BAA6B,CAAC,oEAAoE,CAAC,6CAA6C,CAAC,mDAAmD,CAAC,6DAA6D,CAAC,mEAAmE,CAAC,2EAA2E,CAAC,sBAAsB,CAAC,wCAAwC,CAAC,uCAAuC,CAAC,iDAAiD,CAAC,mEAAmE,CAAC,qEAAqE,CAAC,4BAA4B,CAAC,+BAA+B,CAAC,qCAAqC,CAAC,2BAA2B,CAAC,8BAA8B,CAAC,uDAAuD,CAAC,4BAA4B,CAAC,6BAA6B,CAAC,yBAAyB,CAAC,kCAAkC,CAAC,oCAAoC,CAAC,mCAAmC,CAAC,wBAAwB,iDAAiD,CAAC,sCAAsC,CAAC,uCAAuC,CAAC,yBAAyB;AACjxF,gBAAgB,sCAAsC,CAAC,wCAAwC,CAAC,qCAAqC,CAAC,sCAAsC,CAAC,sBAAsB,CAAC,YAAY,CAAC,yBAAyB,CAAC,yCAAyC,CAAC,yCAAyC,CAAC,6CAA6C,CAAC,8BAA8B,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,gJAAgJ,CAAC,0BAA0B,CAAC,wCAAwC,SAAS,CAAC,2BAA2B,6DAA6D,CAAC,6BAA6B,kDAAkD,CAAC,8BAA8B,kDAAkD,CAAC,4BAA4B,6DAA6D,CAAC,iDAAiD,yBAAyB,CAAC,SAAS,CAAC,2CAA2C,eAAe,CAAC,yBAAyB,2CAA2C,CAAC,eAAe,CAAC,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,kDAAkD,YAAY,CAAC,4BAA4B,4CAA4C,CAAC,wDAAwD,CAAC,4DAA4D,CAAC,0DAA0D,CAAC,8CAA8C,CAAC,mDAAmD,CAAC,cAAc,CAAC,6BAA6B,CAAC,WAAW,CAAC,8BAA8B,yCAAyC,CAAC,qDAAqD,YAAY,CAAC,oDAAoD,oEAAoE,CAAC,6DAA6D,+BAA+B,CAAC,kCAAkC,eAAe,CAAC,iCAAiC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAyB,sDAAsD,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,8BAA8B,CAAC,UAAU,CAAC,+BAA+B,UAAU,CAAC,iBAAiB,CAAC,eAAe,CAAC,mDAAmD,CAAC,qDAAqD,CAAC,uDAAuD,CAAC,6BAA6B,CAAC,8BAA8B,CAAC,qBAAqB,CAAC,wKAAwK,+CAA+C,CAAC,gMAAgM,wBAAwB,CAAC,gLAAgL,iDAAiD,CAAC,wMAAwM,wBAAwB,CAAC,oLAAoL,kDAAkD,CAAC,4MAA4M,wBAAwB,CAAC,4KAA4K,gDAAgD,CAAC,oMAAoM,uBAAuB,CAAC,6EAA6E,8BAA8B,CAAC,+EAA+E,+BAA+B,CAAC,iFAAiF,0CAA0C,CAAC,2EAA2E,6BAA6B,CAAC,iFAAiF,gCAAgC,CAAC,iFAAiF,yCAAyC,CAAC,4BAA4B,aAAa,CAAC,yBAAyB,sBAAsB,CAAC,0BAA0B,CAAC,cAAc,CAAC,4CAA4C,YAAY,CAAC,sBAAsB,oBAAoB,CAAC,yBAAyB,iBAAiB,CAAC,+CAA+C,0BAA0B,CAAC,kDAAkD,CAAC,wBAAwB,cAAc,CAAC,8CAA8C,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,uHAAuH,CAAC,wIAAwI,CAAC,kCAAkC,CAAC,iCAAiC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,+GAA+G',
            sourcesContent: [
              '.air-datepicker-cell.-year-.-other-decade-,.air-datepicker-cell.-day-.-other-month-{color:var(--adp-color-other-month)}.air-datepicker-cell.-year-.-other-decade-:hover,.air-datepicker-cell.-day-.-other-month-:hover{color:var(--adp-color-other-month-hover)}.-disabled-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-disabled-.-focus-.air-datepicker-cell.-day-.-other-month-{color:var(--adp-color-other-month)}.-selected-.air-datepicker-cell.-year-.-other-decade-,.-selected-.air-datepicker-cell.-day-.-other-month-{color:#fff;background:var(--adp-background-color-selected-other-month)}.-selected-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-selected-.-focus-.air-datepicker-cell.-day-.-other-month-{background:var(--adp-background-color-selected-other-month-focused)}.-in-range-.air-datepicker-cell.-year-.-other-decade-,.-in-range-.air-datepicker-cell.-day-.-other-month-{background-color:var(--adp-background-color-in-range);color:var(--adp-color)}.-in-range-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-in-range-.-focus-.air-datepicker-cell.-day-.-other-month-{background-color:var(--adp-background-color-in-range-focused)}.air-datepicker-cell.-year-.-other-decade-:empty,.air-datepicker-cell.-day-.-other-month-:empty{background:none;border:none}.air-datepicker-cell{border-radius:var(--adp-cell-border-radius);box-sizing:border-box;cursor:pointer;display:flex;position:relative;align-items:center;justify-content:center;z-index:1}.air-datepicker-cell.-focus-{background:var(--adp-cell-background-color-hover)}.air-datepicker-cell.-current-{color:var(--adp-color-current-date)}.air-datepicker-cell.-current-.-focus-{color:var(--adp-color)}.air-datepicker-cell.-current-.-in-range-{color:var(--adp-color-current-date)}.air-datepicker-cell.-disabled-{cursor:default;color:var(--adp-color-disabled)}.air-datepicker-cell.-disabled-.-focus-{color:var(--adp-color-disabled)}.air-datepicker-cell.-disabled-.-in-range-{color:var(--adp-color-disabled-in-range)}.air-datepicker-cell.-disabled-.-current-.-focus-{color:var(--adp-color-disabled)}.air-datepicker-cell.-in-range-{background:var(--adp-cell-background-color-in-range);border-radius:0}.air-datepicker-cell.-in-range-:hover{background:var(--adp-cell-background-color-in-range-hover)}.air-datepicker-cell.-range-from-{border:1px solid var(--adp-cell-border-color-in-range);background-color:var(--adp-cell-background-color-in-range);border-radius:var(--adp-cell-border-radius) 0 0 var(--adp-cell-border-radius)}.air-datepicker-cell.-range-to-{border:1px solid var(--adp-cell-border-color-in-range);background-color:var(--adp-cell-background-color-in-range);border-radius:0 var(--adp-cell-border-radius) var(--adp-cell-border-radius) 0}.air-datepicker-cell.-range-to-.-range-from-{border-radius:var(--adp-cell-border-radius)}.air-datepicker-cell.-selected-{color:#fff;border:none;background:var(--adp-cell-background-color-selected)}.air-datepicker-cell.-selected-.-current-{color:#fff;background:var(--adp-cell-background-color-selected)}.air-datepicker-cell.-selected-.-focus-{background:var(--adp-cell-background-color-selected-hover)}\r\n.air-datepicker-body{transition:all var(--adp-transition-duration) var(--adp-transition-ease)}.air-datepicker-body.-hidden-{display:none}.air-datepicker-body--day-names{display:grid;grid-template-columns:repeat(7, var(--adp-day-cell-width));margin:8px 0 3px}.air-datepicker-body--day-name{color:var(--adp-day-name-color);display:flex;align-items:center;justify-content:center;flex:1;text-align:center;text-transform:uppercase;font-size:.8em}.air-datepicker-body--day-name.-clickable-{cursor:pointer}.air-datepicker-body--day-name.-clickable-:hover{color:var(--adp-day-name-color-hover)}.air-datepicker-body--cells{display:grid}.air-datepicker-body--cells.-days-{grid-template-columns:repeat(7, var(--adp-day-cell-width));grid-auto-rows:var(--adp-day-cell-height)}.air-datepicker-body--cells.-months-{grid-template-columns:repeat(3, 1fr);grid-auto-rows:var(--adp-month-cell-height)}.air-datepicker-body--cells.-years-{grid-template-columns:repeat(4, 1fr);grid-auto-rows:var(--adp-year-cell-height)}\r\n.air-datepicker-nav{display:flex;justify-content:space-between;border-bottom:1px solid var(--adp-border-color-inner);min-height:var(--adp-nav-height);padding:var(--adp-padding);box-sizing:content-box}.-only-timepicker- .air-datepicker-nav{display:none}.air-datepicker-nav--title,.air-datepicker-nav--action{display:flex;cursor:pointer;align-items:center;justify-content:center}.air-datepicker-nav--action{width:var(--adp-nav-action-size);border-radius:var(--adp-border-radius);-webkit-user-select:none;-moz-user-select:none;user-select:none}.air-datepicker-nav--action:hover{background:var(--adp-background-color-hover)}.air-datepicker-nav--action:active{background:var(--adp-background-color-active)}.air-datepicker-nav--action.-disabled-{visibility:hidden}.air-datepicker-nav--action svg{width:32px;height:32px}.air-datepicker-nav--action path{fill:none;stroke:var(--adp-nav-arrow-color);stroke-width:2px}.air-datepicker-nav--title{border-radius:var(--adp-border-radius);padding:0 8px}.air-datepicker-nav--title i{font-style:normal;color:var(--adp-nav-color-secondary);margin-left:.3em}.air-datepicker-nav--title:hover{background:var(--adp-background-color-hover)}.air-datepicker-nav--title:active{background:var(--adp-background-color-active)}.air-datepicker-nav--title.-disabled-{cursor:default;background:none}\r\n.air-datepicker-buttons{display:grid;grid-auto-columns:1fr;grid-auto-flow:column}.air-datepicker-button{display:inline-flex;color:var(--adp-btn-color);border-radius:var(--adp-btn-border-radius);cursor:pointer;height:var(--adp-btn-height);border:none;background:rgba(255,255,255,0)}.air-datepicker-button:hover{color:var(--adp-btn-color-hover);background:var(--adp-btn-background-color-hover)}.air-datepicker-button:focus{color:var(--adp-btn-color-hover);background:var(--adp-btn-background-color-hover);outline:none}.air-datepicker-button:active{background:var(--adp-btn-background-color-active)}.air-datepicker-button span{outline:none;display:flex;align-items:center;justify-content:center;width:100%;height:100%}\r\n.air-datepicker-time{display:grid;grid-template-columns:max-content 1fr;grid-column-gap:12px;align-items:center;position:relative;padding:0 var(--adp-time-padding-inner)}.-only-timepicker- .air-datepicker-time{border-top:none}.air-datepicker-time--current{display:flex;align-items:center;flex:1;font-size:14px;text-align:center}.air-datepicker-time--current-colon{margin:0 2px 3px;line-height:1}.air-datepicker-time--current-hours,.air-datepicker-time--current-minutes{line-height:1;font-size:19px;font-family:"Century Gothic",CenturyGothic,AppleGothic,sans-serif;position:relative;z-index:1}.air-datepicker-time--current-hours:after,.air-datepicker-time--current-minutes:after{content:"";background:var(--adp-background-color-hover);border-radius:var(--adp-border-radius);position:absolute;left:-2px;top:-3px;right:-2px;bottom:-2px;z-index:-1;opacity:0}.air-datepicker-time--current-hours.-focus-:after,.air-datepicker-time--current-minutes.-focus-:after{opacity:1}.air-datepicker-time--current-ampm{text-transform:uppercase;align-self:flex-end;color:var(--adp-time-day-period-color);margin-left:6px;font-size:11px;margin-bottom:1px}.air-datepicker-time--row{display:flex;align-items:center;font-size:11px;height:17px;background:linear-gradient(to right, var(--adp-time-track-color), var(--adp-time-track-color)) left 50%/100% var(--adp-time-track-height) no-repeat}.air-datepicker-time--row:first-child{margin-bottom:4px}.air-datepicker-time--row input[type=range]{background:none;cursor:pointer;flex:1;height:100%;width:100%;padding:0;margin:0;-webkit-appearance:none}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{-webkit-appearance:none}.air-datepicker-time--row input[type=range]::-ms-tooltip{display:none}.air-datepicker-time--row input[type=range]:hover::-webkit-slider-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:hover::-moz-range-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:hover::-ms-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:focus{outline:none}.air-datepicker-time--row input[type=range]:focus::-webkit-slider-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]:focus::-moz-range-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]:focus::-ms-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-webkit-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-moz-range-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-moz-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-ms-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-ms-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{margin-top:calc(var(--adp-time-thumb-size)/2*-1)}.air-datepicker-time--row input[type=range]::-webkit-slider-runnable-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-moz-range-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-fill-lower{background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-fill-upper{background:rgba(0,0,0,0)}\r\n.air-datepicker{--adp-font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";--adp-font-size: 14px;--adp-width: 246px;--adp-z-index: 100;--adp-padding: 4px;--adp-grid-areas: "nav" "body" "timepicker" "buttons";--adp-transition-duration: .3s;--adp-transition-ease: ease-out;--adp-transition-offset: 8px;--adp-background-color: #fff;--adp-background-color-hover: #f0f0f0;--adp-background-color-active: #eaeaea;--adp-background-color-in-range: rgba(92, 196, 239, .1);--adp-background-color-in-range-focused: rgba(92, 196, 239, .2);--adp-background-color-selected-other-month-focused: #8ad5f4;--adp-background-color-selected-other-month: #a2ddf6;--adp-color: #4a4a4a;--adp-color-secondary: #9c9c9c;--adp-accent-color: #4eb5e6;--adp-color-current-date: var(--adp-accent-color);--adp-color-other-month: #dedede;--adp-color-disabled: #aeaeae;--adp-color-disabled-in-range: #939393;--adp-color-other-month-hover: #c5c5c5;--adp-border-color: #dbdbdb;--adp-border-color-inner: #efefef;--adp-border-radius: 4px;--adp-border-color-inline: #d7d7d7;--adp-nav-height: 32px;--adp-nav-arrow-color: var(--adp-color-secondary);--adp-nav-action-size: 32px;--adp-nav-color-secondary: var(--adp-color-secondary);--adp-day-name-color: #ff9a19;--adp-day-name-color-hover: #8ad5f4;--adp-day-cell-width: 1fr;--adp-day-cell-height: 32px;--adp-month-cell-height: 42px;--adp-year-cell-height: 56px;--adp-pointer-size: 10px;--adp-poiner-border-radius: 2px;--adp-pointer-offset: 14px;--adp-cell-border-radius: 4px;--adp-cell-background-color-hover: var(--adp-background-color-hover);--adp-cell-background-color-selected: #5cc4ef;--adp-cell-background-color-selected-hover: #45bced;--adp-cell-background-color-in-range: rgba(92, 196, 239, 0.1);--adp-cell-background-color-in-range-hover: rgba(92, 196, 239, 0.2);--adp-cell-border-color-in-range: var(--adp-cell-background-color-selected);--adp-btn-height: 32px;--adp-btn-color: var(--adp-accent-color);--adp-btn-color-hover: var(--adp-color);--adp-btn-border-radius: var(--adp-border-radius);--adp-btn-background-color-hover: var(--adp-background-color-hover);--adp-btn-background-color-active: var(--adp-background-color-active);--adp-time-track-height: 1px;--adp-time-track-color: #dedede;--adp-time-track-color-hover: #b1b1b1;--adp-time-thumb-size: 12px;--adp-time-padding-inner: 10px;--adp-time-day-period-color: var(--adp-color-secondary);--adp-mobile-font-size: 16px;--adp-mobile-nav-height: 40px;--adp-mobile-width: 320px;--adp-mobile-day-cell-height: 38px;--adp-mobile-month-cell-height: 48px;--adp-mobile-year-cell-height: 64px}.air-datepicker-overlay{--adp-overlay-background-color: rgba(0, 0, 0, .3);--adp-overlay-transition-duration: .3s;--adp-overlay-transition-ease: ease-out;--adp-overlay-z-index: 99}\r\n.air-datepicker{background:var(--adp-background-color);border:1px solid var(--adp-border-color);box-shadow:0 4px 12px rgba(0,0,0,.15);border-radius:var(--adp-border-radius);box-sizing:content-box;display:grid;grid-template-columns:1fr;grid-template-rows:repeat(4, max-content);grid-template-areas:var(--adp-grid-areas);font-family:var(--adp-font-family),sans-serif;font-size:var(--adp-font-size);color:var(--adp-color);width:var(--adp-width);position:absolute;transition:opacity var(--adp-transition-duration) var(--adp-transition-ease),transform var(--adp-transition-duration) var(--adp-transition-ease);z-index:var(--adp-z-index)}.air-datepicker:not(.-custom-position-){opacity:0}.air-datepicker.-from-top-{transform:translateY(calc(var(--adp-transition-offset) * -1))}.air-datepicker.-from-right-{transform:translateX(var(--adp-transition-offset))}.air-datepicker.-from-bottom-{transform:translateY(var(--adp-transition-offset))}.air-datepicker.-from-left-{transform:translateX(calc(var(--adp-transition-offset) * -1))}.air-datepicker.-active-:not(.-custom-position-){transform:translate(0, 0);opacity:1}.air-datepicker.-active-.-custom-position-{transition:none}.air-datepicker.-inline-{border-color:var(--adp-border-color-inline);box-shadow:none;position:static;left:auto;right:auto;opacity:1;transform:none}.air-datepicker.-inline- .air-datepicker--pointer{display:none}.air-datepicker.-is-mobile-{--adp-font-size: var(--adp-mobile-font-size);--adp-day-cell-height: var(--adp-mobile-day-cell-height);--adp-month-cell-height: var(--adp-mobile-month-cell-height);--adp-year-cell-height: var(--adp-mobile-year-cell-height);--adp-nav-height: var(--adp-mobile-nav-height);--adp-nav-action-size: var(--adp-mobile-nav-height);position:fixed;width:var(--adp-mobile-width);border:none}.air-datepicker.-is-mobile- *{-webkit-tap-highlight-color:rgba(0,0,0,0)}.air-datepicker.-is-mobile- .air-datepicker--pointer{display:none}.air-datepicker.-is-mobile-:not(.-custom-position-){transform:translate(-50%, calc(-50% + var(--adp-transition-offset)))}.air-datepicker.-is-mobile-.-active-:not(.-custom-position-){transform:translate(-50%, -50%)}.air-datepicker.-custom-position-{transition:none}.air-datepicker-global-container{position:absolute;left:0;top:0}.air-datepicker--pointer{--pointer-half-size: calc(var(--adp-pointer-size) / 2);position:absolute;width:var(--adp-pointer-size);height:var(--adp-pointer-size);z-index:-1}.air-datepicker--pointer:after{content:"";position:absolute;background:#fff;border-top:1px solid var(--adp-border-color-inline);border-right:1px solid var(--adp-border-color-inline);border-top-right-radius:var(--adp-poiner-border-radius);width:var(--adp-pointer-size);height:var(--adp-pointer-size);box-sizing:border-box}.-top-left- .air-datepicker--pointer,.-top-center- .air-datepicker--pointer,.-top-right- .air-datepicker--pointer,[data-popper-placement^=top] .air-datepicker--pointer{top:calc(100% - var(--pointer-half-size) + 1px)}.-top-left- .air-datepicker--pointer:after,.-top-center- .air-datepicker--pointer:after,.-top-right- .air-datepicker--pointer:after,[data-popper-placement^=top] .air-datepicker--pointer:after{transform:rotate(135deg)}.-right-top- .air-datepicker--pointer,.-right-center- .air-datepicker--pointer,.-right-bottom- .air-datepicker--pointer,[data-popper-placement^=right] .air-datepicker--pointer{right:calc(100% - var(--pointer-half-size) + 1px)}.-right-top- .air-datepicker--pointer:after,.-right-center- .air-datepicker--pointer:after,.-right-bottom- .air-datepicker--pointer:after,[data-popper-placement^=right] .air-datepicker--pointer:after{transform:rotate(225deg)}.-bottom-left- .air-datepicker--pointer,.-bottom-center- .air-datepicker--pointer,.-bottom-right- .air-datepicker--pointer,[data-popper-placement^=bottom] .air-datepicker--pointer{bottom:calc(100% - var(--pointer-half-size) + 1px)}.-bottom-left- .air-datepicker--pointer:after,.-bottom-center- .air-datepicker--pointer:after,.-bottom-right- .air-datepicker--pointer:after,[data-popper-placement^=bottom] .air-datepicker--pointer:after{transform:rotate(315deg)}.-left-top- .air-datepicker--pointer,.-left-center- .air-datepicker--pointer,.-left-bottom- .air-datepicker--pointer,[data-popper-placement^=left] .air-datepicker--pointer{left:calc(100% - var(--pointer-half-size) + 1px)}.-left-top- .air-datepicker--pointer:after,.-left-center- .air-datepicker--pointer:after,.-left-bottom- .air-datepicker--pointer:after,[data-popper-placement^=left] .air-datepicker--pointer:after{transform:rotate(45deg)}.-top-left- .air-datepicker--pointer,.-bottom-left- .air-datepicker--pointer{left:var(--adp-pointer-offset)}.-top-right- .air-datepicker--pointer,.-bottom-right- .air-datepicker--pointer{right:var(--adp-pointer-offset)}.-top-center- .air-datepicker--pointer,.-bottom-center- .air-datepicker--pointer{left:calc(50% - var(--adp-pointer-size)/2)}.-left-top- .air-datepicker--pointer,.-right-top- .air-datepicker--pointer{top:var(--adp-pointer-offset)}.-left-bottom- .air-datepicker--pointer,.-right-bottom- .air-datepicker--pointer{bottom:var(--adp-pointer-offset)}.-left-center- .air-datepicker--pointer,.-right-center- .air-datepicker--pointer{top:calc(50% - var(--adp-pointer-size)/2)}.air-datepicker--navigation{grid-area:nav}.air-datepicker--content{box-sizing:content-box;padding:var(--adp-padding);grid-area:body}.-only-timepicker- .air-datepicker--content{display:none}.air-datepicker--time{grid-area:timepicker}.air-datepicker--buttons{grid-area:buttons}.air-datepicker--buttons,.air-datepicker--time{padding:var(--adp-padding);border-top:1px solid var(--adp-border-color-inner)}.air-datepicker-overlay{position:fixed;background:var(--adp-overlay-background-color);left:0;top:0;width:0;height:0;opacity:0;transition:opacity var(--adp-overlay-transition-duration) var(--adp-overlay-transition-ease),left 0s,height 0s,width 0s;transition-delay:0s,var(--adp-overlay-transition-duration),var(--adp-overlay-transition-duration),var(--adp-overlay-transition-duration);z-index:var(--adp-overlay-z-index)}.air-datepicker-overlay.-active-{opacity:1;width:100%;height:100%;transition:opacity var(--adp-overlay-transition-duration) var(--adp-overlay-transition-ease),height 0s,width 0s}\r\n',
            ],
            sourceRoot: '',
          },
        ]);
        const n = s;
      },
      645: (e) => {
        'use strict';
        e.exports = function (e) {
          var t = [];
          return (
            (t.toString = function () {
              return this.map(function (t) {
                var i = e(t);
                return t[2] ? '@media '.concat(t[2], ' {').concat(i, '}') : i;
              }).join('');
            }),
            (t.i = function (e, i, o) {
              'string' == typeof e && (e = [[null, e, '']]);
              var r = {};
              if (o)
                for (var a = 0; a < this.length; a++) {
                  var s = this[a][0];
                  null != s && (r[s] = !0);
                }
              for (var n = 0; n < e.length; n++) {
                var l = [].concat(e[n]);
                (o && r[l[0]]) || (i && (l[2] ? (l[2] = ''.concat(i, ' and ').concat(l[2])) : (l[2] = i)), t.push(l));
              }
            }),
            t
          );
        };
      },
      15: (e) => {
        'use strict';
        function t(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var i = 0, o = new Array(t); i < t; i++) o[i] = e[i];
          return o;
        }
        e.exports = function (e) {
          var i,
            o,
            r =
              ((o = 4),
              (function (e) {
                if (Array.isArray(e)) return e;
              })((i = e)) ||
                (function (e, t) {
                  var i = e && (('undefined' != typeof Symbol && e[Symbol.iterator]) || e['@@iterator']);
                  if (null != i) {
                    var o,
                      r,
                      a = [],
                      s = !0,
                      n = !1;
                    try {
                      for (i = i.call(e); !(s = (o = i.next()).done) && (a.push(o.value), !t || a.length !== t); s = !0);
                    } catch (e) {
                      (n = !0), (r = e);
                    } finally {
                      try {
                        s || null == i.return || i.return();
                      } finally {
                        if (n) throw r;
                      }
                    }
                    return a;
                  }
                })(i, o) ||
                (function (e, i) {
                  if (e) {
                    if ('string' == typeof e) return t(e, i);
                    var o = Object.prototype.toString.call(e).slice(8, -1);
                    return (
                      'Object' === o && e.constructor && (o = e.constructor.name),
                      'Map' === o || 'Set' === o ? Array.from(e) : 'Arguments' === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o) ? t(e, i) : void 0
                    );
                  }
                })(i, o) ||
                (function () {
                  throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                })()),
            a = r[1],
            s = r[3];
          if (!s) return a;
          if ('function' == typeof btoa) {
            var n = btoa(unescape(encodeURIComponent(JSON.stringify(s)))),
              l = 'sourceMappingURL=data:application/json;charset=utf-8;base64,'.concat(n),
              c = '/*# '.concat(l, ' */'),
              d = s.sources.map(function (e) {
                return '/*# sourceURL='.concat(s.sourceRoot || '').concat(e, ' */');
              });
            return [a].concat(d).concat([c]).join('\n');
          }
          return [a].join('\n');
        };
      },
      379: (e, t, i) => {
        'use strict';
        var o,
          r = (function () {
            var e = {};
            return function (t) {
              if (void 0 === e[t]) {
                var i = document.querySelector(t);
                if (window.HTMLIFrameElement && i instanceof window.HTMLIFrameElement)
                  try {
                    i = i.contentDocument.head;
                  } catch (e) {
                    i = null;
                  }
                e[t] = i;
              }
              return e[t];
            };
          })(),
          a = [];
        function s(e) {
          for (var t = -1, i = 0; i < a.length; i++)
            if (a[i].identifier === e) {
              t = i;
              break;
            }
          return t;
        }
        function n(e, t) {
          for (var i = {}, o = [], r = 0; r < e.length; r++) {
            var n = e[r],
              l = t.base ? n[0] + t.base : n[0],
              c = i[l] || 0,
              d = ''.concat(l, ' ').concat(c);
            i[l] = c + 1;
            var u = s(d),
              h = { css: n[1], media: n[2], sourceMap: n[3] };
            -1 !== u ? (a[u].references++, a[u].updater(h)) : a.push({ identifier: d, updater: m(h, t), references: 1 }), o.push(d);
          }
          return o;
        }
        function l(e) {
          var t = document.createElement('style'),
            o = e.attributes || {};
          if (void 0 === o.nonce) {
            var a = i.nc;
            a && (o.nonce = a);
          }
          if (
            (Object.keys(o).forEach(function (e) {
              t.setAttribute(e, o[e]);
            }),
            'function' == typeof e.insert)
          )
            e.insert(t);
          else {
            var s = r(e.insert || 'head');
            if (!s) throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
            s.appendChild(t);
          }
          return t;
        }
        var c,
          d =
            ((c = []),
            function (e, t) {
              return (c[e] = t), c.filter(Boolean).join('\n');
            });
        function u(e, t, i, o) {
          var r = i ? '' : o.media ? '@media '.concat(o.media, ' {').concat(o.css, '}') : o.css;
          if (e.styleSheet) e.styleSheet.cssText = d(t, r);
          else {
            var a = document.createTextNode(r),
              s = e.childNodes;
            s[t] && e.removeChild(s[t]), s.length ? e.insertBefore(a, s[t]) : e.appendChild(a);
          }
        }
        function h(e, t, i) {
          var o = i.css,
            r = i.media,
            a = i.sourceMap;
          if (
            (r ? e.setAttribute('media', r) : e.removeAttribute('media'),
            a && 'undefined' != typeof btoa && (o += '\n/*# sourceMappingURL=data:application/json;base64,'.concat(btoa(unescape(encodeURIComponent(JSON.stringify(a)))), ' */')),
            e.styleSheet)
          )
            e.styleSheet.cssText = o;
          else {
            for (; e.firstChild; ) e.removeChild(e.firstChild);
            e.appendChild(document.createTextNode(o));
          }
        }
        var p = null,
          g = 0;
        function m(e, t) {
          var i, o, r;
          if (t.singleton) {
            var a = g++;
            (i = p || (p = l(t))), (o = u.bind(null, i, a, !1)), (r = u.bind(null, i, a, !0));
          } else
            (i = l(t)),
              (o = h.bind(null, i, t)),
              (r = function () {
                !(function (e) {
                  if (null === e.parentNode) return !1;
                  e.parentNode.removeChild(e);
                })(i);
              });
          return (
            o(e),
            function (t) {
              if (t) {
                if (t.css === e.css && t.media === e.media && t.sourceMap === e.sourceMap) return;
                o((e = t));
              } else r();
            }
          );
        }
        e.exports = function (e, t) {
          (t = t || {}).singleton || 'boolean' == typeof t.singleton || (t.singleton = (void 0 === o && (o = Boolean(window && document && document.all && !window.atob)), o));
          var i = n((e = e || []), t);
          return function (e) {
            if (((e = e || []), '[object Array]' === Object.prototype.toString.call(e))) {
              for (var o = 0; o < i.length; o++) {
                var r = s(i[o]);
                a[r].references--;
              }
              for (var l = n(e, t), c = 0; c < i.length; c++) {
                var d = s(i[c]);
                0 === a[d].references && (a[d].updater(), a.splice(d, 1));
              }
              i = l;
            }
          };
        };
      },
    },
    t = {};
  function i(o) {
    var r = t[o];
    if (void 0 !== r) return r.exports;
    var a = (t[o] = { id: o, exports: {} });
    return e[o].call(a.exports, a, a.exports, i), a.exports;
  }
  (i.n = (e) => {
    var t = e && e.__esModule ? () => e.default : () => e;
    return i.d(t, { a: t }), t;
  }),
    (i.d = (e, t) => {
      for (var o in t) i.o(t, o) && !i.o(e, o) && Object.defineProperty(e, o, { enumerable: !0, get: t[o] });
    }),
    (i.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
    (i.p = '/rs-clone-deploy/'),
    (i.nc = void 0),
    (() => {
      'use strict';
      const e = class {
        createElement(e, t, i) {
          const o = document.createElement(e);
          return o.classList.add(t), i && (o.textContent = i), o;
        }
        createLink(e, t, i) {
          const o = document.createElement('a');
          return o.classList.add(e), (o.href = t), i && (o.textContent = i), o;
        }
        createBtn(e, t, i) {
          const o = document.createElement('button');
          return o.classList.add(e), 'string' == typeof t && (o.textContent = t), t && 'string' != typeof t && o.append(t), i && (o.type = i), o;
        }
        createForm(e, t) {
          const i = document.createElement('form');
          return i.classList.add(e), (i.action = t), i;
        }
        createIcon(e, t) {
          const i = document.createElement('i');
          return i.classList.add(e), i.classList.add(t), i;
        }
        createVideo(e) {
          const t = document.createElement('video');
          return (t.src = e), (t.autoplay = !0), (t.muted = !0), (t.loop = !0), t;
        }
        createImage(e, t, i) {
          const o = document.createElement('img');
          return (o.src = e), (o.alt = t), (o.className = i), o;
        }
        createLabel(e, t, i) {
          const o = document.createElement('label');
          return t && o.setAttribute('for', t), e && o.classList.add(e), i && (o.textContent = i), o;
        }
        createInput(e, t) {
          const i = document.createElement('input');
          return i.classList.add(e), this.addAttributes(i, t), i;
        }
        addAttributes(e, t) {
          for (const i in t) t[i] && e.setAttribute(i, t[i]);
        }
      };
      function t(e, t) {
        t &&
          t.forEach((t) => {
            e.classList.add(t);
          });
      }
      function o(e, t) {
        return (i) => {
          i && i.preventDefault(), t && r(t)();
          const o = document.getElementById(e);
          o &&
            (t
              ? setTimeout(() => {
                  o.classList.add('open');
                }, 500)
              : o.classList.add('open'));
        };
      }
      function r(e) {
        return () => {
          const t = document.getElementById(e);
          t && t.classList.remove('open');
        };
      }
      const a = function ({ content: e, className: i, variant: o, onClick: r, type: a }) {
          const s = document.createElement('button');
          return (
            s.classList.add('btn'),
            a && (s.type = a),
            t(s, i),
            (function (e, t) {
              'string' == typeof t ? (e.textContent = t) : e.append(t);
            })(s, e),
            o && s.classList.add(`btn--${o}`),
            r && (s.onclick = r),
            s
          );
        },
        s = i.p + 'video/v11.mp4',
        n = i.p + 'video/v2.mp4',
        l = i.p + 'video/v3.mp4',
        c = i.p + 'video/v4.mp4',
        d = i.p + 'assets/pic1.jpg';
      var u = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const h = class {
          registration(e) {
            return u(this, void 0, void 0, function* () {
              try {
                const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/auth/register', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(e),
                  }),
                  i = yield t.json();
                if (i) return i;
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          authorization(e) {
            return u(this, void 0, void 0, function* () {
              try {
                const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/auth/login', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(e),
                });
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          createUserInfo(e) {
            return u(this, void 0, void 0, function* () {
              try {
                const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/user/create', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(e),
                });
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          getUserInfo(e) {
            return u(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/user/get/${e}`);
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          updateUserInfo(e) {
            return u(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/user/update/${e.id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ weight: e.weight, height: e.height }),
                  }),
                  i = yield t.json();
                if (i) return i;
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
        },
        p = [
          {
            title: 'ABS Workouts',
            image: '/rs-clone-deploy/assets/png/abs3.png',
            block: [
              {
                id: 1,
                title: 'ABS beginner',
                exercisesAmt: '19',
                exercisesTime: '15',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/abs3.png',
                color: 'linear-gradient(90deg, rgba(24,240,237,1) 0%, rgba(206,247,242,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'jumping jacks',
                    description:
                      'Stand upright with your legs together, arms at your sides. Bend your knees slightly, and jump into the air. As you jump, spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
                    youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
                    quantity: 'x30',
                  },
                  {
                    id: 2,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:22',
                  },
                  {
                    id: 3,
                    title: 'standing bicycle crunches',
                    description:
                      'Stand with feet together, knees slightly bent, hands behind head. Brace abs in tight and lift left knee up as right shoulder rotates towards knee (try to touch). Lower back to start.',
                    example: '/rs-clone-deploy/assets/gifs/standing_bicycle_crunch.gif',
                    youtube: 'https://www.youtube.com/watch?v=8lsAXzvVHrc',
                    quantity: 'x14',
                  },
                  {
                    id: 4,
                    title: 'russian twist',
                    description:
                      'Sit with your feet slightly lifted and back titled backwards. Then hold your hands together and twist from side to side. Keep your legs still when twisting and your neck neutral. Tighten your abs.',
                    example: '/rs-clone-deploy/assets/gifs/russian_twist.gif',
                    youtube: 'https://www.youtube.com/watch?v=DJQGX2J4IVw',
                    quantity: 'x16',
                  },
                  {
                    id: 5,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x18',
                  },
                  {
                    id: 6,
                    title: 'flutter kicks',
                    description:
                      'Lie on your back with your arms at your sides and legs slightly lifted. Then quickly raise your right leg up, and simultaneous lower your left hand. This exercise can increase core strength and improve your endurance.',
                    example: '/rs-clone-deploy/assets/gifs/flutter_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=K5wuM_gNWyw',
                    quantity: '00:15',
                  },
                  {
                    id: 7,
                    title: 'leg raisers',
                    description:
                      'Lie on your back, legs straight and together. Keep your legs straight and lift them all the way up to the ceiling until your butt comes off the floor. Slowly lower your legs back down till they are just above the floor. Hold for a moment. Raise your legs back up. Repeat.',
                    example: '/rs-clone-deploy/assets/gifs/leg_raisers.gif',
                    youtube: 'https://www.youtube.com/watch?v=dGKbTKLnym4',
                    quantity: 'x8',
                  },
                  {
                    id: 8,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x14',
                  },
                  {
                    id: 9,
                    title: 'skipping without rope',
                    description:
                      'This is a good warm-up exercise. Pretend to hold a skipping rope handle in each hand. Jump and alternately land on the balls of your feet, rotating your wrists at the same time as you as if you were spinning a rope.',
                    example: '/rs-clone-deploy/assets/gifs/skipping_without_rope.gif',
                    youtube: 'https://www.youtube.com/watch?v=CYGeazlNbU4',
                    quantity: '00:30',
                  },
                  {
                    id: 10,
                    title: 'standing bicycle crunches',
                    description:
                      'Stand with feet together, knees slightly bent, hands behind head. Brace abs in tight and lift left knee up as right shoulder rotates towards knee (try to touch). Lower back to start.',
                    example: '/rs-clone-deploy/assets/gifs/standing_bicycle_crunch.gif',
                    youtube: 'https://www.youtube.com/watch?v=8lsAXzvVHrc',
                    quantity: 'x12',
                  },
                  {
                    id: 11,
                    title: 'russian twist',
                    description:
                      'Sit with your feet slightly lifted and back titled backwards. Then hold your hands together and twist from side to side. Keep your legs still when twisting and your neck neutral. Tighten your abs.',
                    example: '/rs-clone-deploy/assets/gifs/russian_twist.gif',
                    youtube: 'https://www.youtube.com/watch?v=DJQGX2J4IVw',
                    quantity: 'x14',
                  },
                  {
                    id: 12,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x16',
                  },
                  {
                    id: 13,
                    title: 'flutter kicks',
                    description:
                      'Lie on your back with your arms at your sides and legs slightly lifted. Then quickly raise your right leg up, and simultaneous lower your left hand. This exercise can increase core strength and improve your endurance.',
                    example: '/rs-clone-deploy/assets/gifs/flutter_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=K5wuM_gNWyw',
                    quantity: '00:15',
                  },
                  {
                    id: 14,
                    title: 'leg raisers',
                    description:
                      'Lie on your back, legs straight and together. Keep your legs straight and lift them all the way up to the ceiling until your butt comes off the floor. Slowly lower your legs back down till they are just above the floor. Hold for a moment. Raise your legs back up. Repeat.',
                    example: '/rs-clone-deploy/assets/gifs/leg_raisers.gif',
                    youtube: 'https://www.youtube.com/watch?v=dGKbTKLnym4',
                    quantity: 'x6',
                  },
                  {
                    id: 15,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x12',
                  },
                  {
                    id: 16,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '00:30',
                  },
                  {
                    id: 17,
                    title: 'cobra stretch',
                    description:
                      'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
                    example: '/rs-clone-deploy/assets/png/cobra.png',
                    youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
                    quantity: '00:30',
                  },
                  {
                    id: 18,
                    title: 'lying twist stretch left',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the left. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                  {
                    id: 19,
                    title: 'lying twist stretch right',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the right. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 2,
                title: 'ABS intermediate',
                exercisesAmt: '20',
                exercisesTime: '17',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/abs3.png',
                color: 'linear-gradient(90deg, rgba(113,179,235,1) 0%, rgba(202,227,249,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'jumping jacks',
                    description:
                      'Stand upright with your legs together, arms at your sides Bend your knees slightly, and jump into the air. As you jump , spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
                    youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
                    quantity: 'x30',
                  },
                  {
                    id: 2,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x24',
                  },
                  {
                    id: 4,
                    title: 'reverse crunches',
                    description: 'Lie on your back with your knees up and hands behind your head. Lift your shoulders and thighs, and then stretch out.',
                    example: '/rs-clone-deploy/assets/gifs/reverse_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=UwRfRN5fYRg',
                    quantity: 'x18',
                  },
                  {
                    id: 5,
                    title: 'leg raisers',
                    description:
                      'Lie on your back, legs straight and together. Keep your legs straight and lift them all the way up to the ceiling until your butt comes off the floor. Slowly lower your legs back down till they are just above the floor. Hold for a moment. Raise your legs back up. Repeat.',
                    example: '/rs-clone-deploy/assets/gifs/leg_raisers.gif',
                    youtube: 'https://www.youtube.com/watch?v=dGKbTKLnym4',
                    quantity: 'x16',
                  },
                  {
                    id: 6,
                    title: 'heel touch',
                    description:
                      'Keep your back flat and bend your knees to a 90-degree angle with your feet firmly planted on the floor. Engage your core as you bend your spine to reach your right hand toward your right ankle. Repeat this movement on your left side. Keep your lower back on the floor.',
                    example: '/rs-clone-deploy/assets/gifs/heel_touch.gif',
                    youtube: 'https://www.youtube.com/watch?v=9bR-elyolBQ',
                    quantity: 'x20',
                  },
                  {
                    id: 7,
                    title: 'reclined oblique twist',
                    description:
                      'Lie on your back with your legs extended and your elbow directly under your shoulders. LIft your left leg up at a 45 degree angle while reaching your right arm over to your left side. Then slowly go back to the starting position. Repeat several times, and then switch to the other side.',
                    example: '/rs-clone-deploy/assets/gifs/reclined_oblique_twist.gif',
                    youtube: 'https://www.youtube.com/watch?v=XKW5jru5pGo',
                    quantity: 'x16',
                  },
                  {
                    id: 8,
                    title: 'heels to the heaven',
                    description: 'Lie on your back, position your arms out to your sides. From here, activate the lower abdominals and lift the legs until they are perpendicular to the ground.',
                    example: '/rs-clone-deploy/assets/gifs/heels_to_the heaven.gif',
                    youtube: 'https://www.youtube.com/watch?v=wdS2U6z0JGY',
                    quantity: 'x12',
                  },
                  {
                    id: 9,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '00:30',
                  },
                  {
                    id: 10,
                    title: 'skipping without rope',
                    description:
                      'This is a good warm-up exercise. Pretend to hold a skipping rope handle in each hand. Jump and alternately land on the balls of your feet, rotating your wrists at the same time as you as if you were spinning a rope.',
                    example: '/rs-clone-deploy/assets/gifs/skipping_without_rope.gif',
                    youtube: 'https://www.youtube.com/watch?v=CYGeazlNbU4',
                    quantity: '00:30',
                  },
                  {
                    id: 11,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x22',
                  },
                  {
                    id: 12,
                    title: 'reverse crunches',
                    description: 'Lie on your back with your knees up and hands behind your head. Lift your shoulders and thighs, and then stretch out.',
                    example: '/rs-clone-deploy/assets/gifs/reverse_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=UwRfRN5fYRg',
                    quantity: 'x16',
                  },
                  {
                    id: 13,
                    title: 'leg raisers',
                    description:
                      'Lie on your back, legs straight and together. Keep your legs straight and lift them all the way up to the ceiling until your butt comes off the floor. Slowly lower your legs back down till they are just above the floor. Hold for a moment. Raise your legs back up. Repeat.',
                    example: '/rs-clone-deploy/assets/gifs/leg_raisers.gif',
                    youtube: 'https://www.youtube.com/watch?v=dGKbTKLnym4',
                    quantity: 'x14',
                  },
                  {
                    id: 14,
                    title: 'heel touch',
                    description:
                      'Keep your back flat and bend your knees to a 90-degree angle with your feet firmly planted on the floor. Engage your core as you bend your spine to reach your right hand toward your right ankle. Repeat this movement on your left side. Keep your lower back on the floor.',
                    example: '/rs-clone-deploy/assets/gifs/heel_touch.gif',
                    youtube: 'https://www.youtube.com/watch?v=9bR-elyolBQ',
                    quantity: 'x18',
                  },
                  {
                    id: 15,
                    title: 'reclined oblique twist',
                    description:
                      'Lie on your back with your legs extended and your elbow directly under your shoulders. LIft your left leg up at a 45 degree angle while reaching your right arm over to your left side. Then slowly go back to the starting position. Repeat several times, and then switch to the other side.',
                    example: '/rs-clone-deploy/assets/gifs/reclined_oblique_twist.gif',
                    youtube: 'https://www.youtube.com/watch?v=XKW5jru5pGo',
                    quantity: 'x14',
                  },
                  {
                    id: 16,
                    title: 'heels to the heaven',
                    description: 'Lie on your back, position your arms out to your sides. From here, activate the lower abdominals and lift the legs until they are perpendicular to the ground.',
                    example: '/rs-clone-deploy/assets/gifs/heels_to_the heaven.gif',
                    youtube: 'https://www.youtube.com/watch?v=wdS2U6z0JGY',
                    quantity: 'x10',
                  },
                  {
                    id: 17,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '00:30',
                  },
                  {
                    id: 18,
                    title: 'cobra stretch',
                    description:
                      'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
                    example: '/rs-clone-deploy/assets/png/cobra.png',
                    youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
                    quantity: '00:30',
                  },
                  {
                    id: 19,
                    title: 'lying twist stretch left',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the left. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                  {
                    id: 20,
                    title: 'lying twist stretch right',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the right. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 3,
                title: 'ABS advanced',
                exercisesAmt: '26',
                exercisesTime: '13',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/abs3.png',
                color: 'linear-gradient(90deg, rgba(244,117,117,1) 0%, rgba(255,209,209,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'jumping jacks',
                    description:
                      'Stand upright with your legs together, arms at your sides Bend your knees slightly, and jump into the air. As you jump , spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
                    youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
                    quantity: 'x30',
                  },
                  {
                    id: 2,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'cross knee plank',
                    description:
                      'Get on the floor on all fours and assume a push up or ab plank position. To execute this move, squeeze the abs and bring your left leg up to your right elbow and back. Repeat with the opposite leg.',
                    example: '/rs-clone-deploy/assets/gifs/cross_knee_plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=O4fFIYpYySU',
                    quantity: 'x28',
                  },
                  {
                    id: 4,
                    title: 'cross arm crunches',
                    description:
                      'Lie flat on your back and cross your arms across your chest. Bend your knees and firmly plant your feet on the floor. Brace your core and lift your shoulders and upper back off of the floor. Hold at the top for a second and then retract back down to starting position.',
                    example: '/rs-clone-deploy/assets/gifs/cross_arm_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=Qz3ylqqJ90M',
                    quantity: 'x18',
                  },
                  {
                    id: 5,
                    title: 'heel touch',
                    description:
                      'Keep your back flat and bend your knees to a 90-degree angle with your feet firmly planted on the floor. Engage your core as you bend your spine to reach your right hand toward your right ankle. Repeat this movement on your left side. Keep your lower back on the floor.',
                    example: '/rs-clone-deploy/assets/gifs/heel_touch.gif',
                    youtube: 'https://www.youtube.com/watch?v=9bR-elyolBQ',
                    quantity: 'x24',
                  },
                  {
                    id: 6,
                    title: 'x man crunch',
                    description:
                      'Lie down on the floor. Take the x position, keeping your hands and feet off the ground. Bring your arms and legs together in the middle/ Go back to starting position.',
                    example: '/rs-clone-deploy/assets/gifs/x_man_crunch.gif',
                    youtube: 'https://www.youtube.com/watch?v=f_ZsJgaqFNE',
                    quantity: 'x18',
                  },
                  {
                    id: 7,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x20',
                  },
                  {
                    id: 8,
                    title: 'side crunches left',
                    description:
                      'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
                    example: '/rs-clone-deploy/assets/gifs/side_crunch_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
                    quantity: 'x16',
                  },
                  {
                    id: 9,
                    title: 'side crunches right',
                    description:
                      'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
                    example: '/rs-clone-deploy/assets/gifs/side_crunch_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
                    quantity: 'x16',
                  },
                  {
                    id: 10,
                    title: 'heels to the heaven',
                    description: 'Lie on your back, position your arms out to your sides. From here, activate the lower abdominals and lift the legs until they are perpendicular to the ground.',
                    example: '/rs-clone-deploy/assets/gifs/heels_to_the heaven.gif',
                    youtube: 'https://www.youtube.com/watch?v=wdS2U6z0JGY',
                    quantity: 'x20',
                  },
                  {
                    id: 11,
                    title: 'vhold',
                    description: 'Sit on the floor, lift your legs up at a 45 degree angle, and lean your upper body back at a 45 degree angle. Stretch your arms forward. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/vhold.jpg',
                    youtube: 'https://www.youtube.com/watch?v=WGwI629aTAY',
                    quantity: '00:30',
                  },
                  {
                    id: 12,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '01:00',
                  },
                  {
                    id: 13,
                    title: 'skipping without rope',
                    description:
                      'This is a good warm-up exercise. Pretend to hold a skipping rope handle in each hand. Jump and alternately land on the balls of your feet, rotating your wrists at the same time as you as if you were spinning a rope.',
                    example: '/rs-clone-deploy/assets/gifs/skipping_without_rope.gif',
                    youtube: 'https://www.youtube.com/watch?v=CYGeazlNbU4',
                    quantity: '00:30',
                  },
                  {
                    id: 14,
                    title: 'cross knee plank',
                    description:
                      'Get on the floor on all fours and assume a push up or ab plank position. To execute this move, squeeze the abs and bring your left leg up to your right elbow and back. Repeat with the opposite leg.',
                    example: '/rs-clone-deploy/assets/gifs/cross_knee_plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=O4fFIYpYySU',
                    quantity: 'x26',
                  },
                  {
                    id: 15,
                    title: 'cross arm crunches',
                    description:
                      'Lie flat on your back and cross your arms across your chest. Bend your knees and firmly plant your feet on the floor. Brace your core and lift your shoulders and upper back off of the floor. Hold at the top for a second and then retract back down to starting position.',
                    example: '/rs-clone-deploy/assets/gifs/cross_arm_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=Qz3ylqqJ90M',
                    quantity: 'x16',
                  },
                  {
                    id: 16,
                    title: 'heel touch',
                    description:
                      'Keep your back flat and bend your knees to a 90-degree angle with your feet firmly planted on the floor. Engage your core as you bend your spine to reach your right hand toward your right ankle. Repeat this movement on your left side. Keep your lower back on the floor.',
                    example: '/rs-clone-deploy/assets/gifs/heel_touch.gif',
                    youtube: 'https://www.youtube.com/watch?v=9bR-elyolBQ',
                    quantity: 'x22',
                  },
                  {
                    id: 17,
                    title: 'x man crunch',
                    description:
                      'Lie down on the floor. Take the x position, keeping your hands and feet off the ground. Bring your arms and legs together in the middle/ Go back to starting position.',
                    example: '/rs-clone-deploy/assets/gifs/x_man_crunch.gif',
                    youtube: 'https://www.youtube.com/watch?v=f_ZsJgaqFNE',
                    quantity: 'x16',
                  },
                  {
                    id: 18,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x18',
                  },
                  {
                    id: 19,
                    title: 'side crunches left',
                    description:
                      'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
                    example: '/rs-clone-deploy/assets/gifs/side_crunch_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
                    quantity: 'x14',
                  },
                  {
                    id: 20,
                    title: 'side crunches right',
                    description:
                      'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
                    example: '/rs-clone-deploy/assets/gifs/side_crunch_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
                    quantity: 'x14',
                  },
                  {
                    id: 21,
                    title: 'heels to the heaven',
                    description: 'Lie on your back, position your arms out to your sides. From here, activate the lower abdominals and lift the legs until they are perpendicular to the ground.',
                    example: '/rs-clone-deploy/assets/gifs/heels_to_the heaven.gif',
                    youtube: 'https://www.youtube.com/watch?v=wdS2U6z0JGY',
                    quantity: 'x18',
                  },
                  {
                    id: 22,
                    title: 'vhold',
                    description: 'Sit on the floor, lift your legs up at a 45 degree angle, and lean your upper body back at a 45 degree angle. Stretch your arms forward. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/vhold.jpg',
                    youtube: 'https://www.youtube.com/watch?v=WGwI629aTAY',
                    quantity: '00:25',
                  },
                  {
                    id: 23,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '00:30',
                  },
                  {
                    id: 24,
                    title: 'cobra stretch',
                    description:
                      'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
                    example: '/rs-clone-deploy/assets/png/cobra.png',
                    youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
                    quantity: '00:30',
                  },
                  {
                    id: 25,
                    title: 'lying twist stretch left',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the left. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                  {
                    id: 26,
                    title: 'lying twist stretch right',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the right. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                ],
              },
            ],
          },
          {
            title: 'BUTT Workouts',
            image: '/rs-clone-deploy/assets/png/butt.png',
            block: [
              {
                id: 4,
                title: 'BUTT beginner',
                exercisesAmt: '18',
                exercisesTime: '13',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/butt.png',
                color: 'linear-gradient(90deg, rgba(24,240,237,1) 0%, rgba(206,247,242,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'butt kicks',
                    description:
                      "Run in place while kicking your heel up to touch your butt with each step. Try to do it as fast as you can. Keep your chest up, tighten your abs. It's a great exercise for the gluteus and hamstrings.",
                    example: '/rs-clone-deploy/assets/gifs/butt_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=vXVPvY1UbJI',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x12',
                  },
                  {
                    id: 4,
                    title: 'standing glute kickbacks left',
                    description:
                      'Сontract your core muscles. Extend your left leg back and up. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
                    quantity: 'x10',
                  },
                  {
                    id: 5,
                    title: 'standing glute kickbacks right',
                    description:
                      'Get into all fours, with a straight spine, and contract your core muscles. Extend your right leg back and up until your thigh is parallel with the ground. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position without touching your knee to the ground and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
                    quantity: 'x10',
                  },
                  {
                    id: 6,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x10',
                  },
                  {
                    id: 7,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x14',
                  },
                  {
                    id: 8,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 9,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x10',
                  },
                  {
                    id: 10,
                    title: 'standing glute kickbacks right',
                    description:
                      'Get into all fours, with a straight spine, and contract your core muscles. Extend your right leg back and up until your thigh is parallel with the ground. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position without touching your knee to the ground and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
                    quantity: 'x8',
                  },
                  {
                    id: 11,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x8',
                  },
                  {
                    id: 12,
                    title: 'standing glute kickbacks left',
                    description:
                      'Сontract your core muscles. Extend your left leg back and up. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
                    quantity: 'x8',
                  },
                  {
                    id: 13,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x8',
                  },
                  {
                    id: 14,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x12',
                  },
                  {
                    id: 15,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 16,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 17,
                    title: 'knee to chest stretch left',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your left knee towards your chest as much as you can while keeping your right leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                  {
                    id: 18,
                    title: 'knee to chest stretch right',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your right knee towards your chest as much as you can while keeping your left leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 5,
                title: 'BUTT intermediate',
                exercisesAmt: '26',
                exercisesTime: '18',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/butt.png',
                color: 'linear-gradient(90deg, rgba(113,179,235,1) 0%, rgba(202,227,249,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'butt kicks',
                    description:
                      "Run in place while kicking your heel up to touch your butt with each step. Try to do it as fast as you can. Keep your chest up, tighten your abs. It's a great exercise for the gluteus and hamstrings.",
                    example: '/rs-clone-deploy/assets/gifs/butt_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=vXVPvY1UbJI',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'lunges',
                    description:
                      'Start in a standing position with your feet hip-width apart. Step forward longer than a walking stride so one leg is ahead of your torso and the other is behind. Your foot should land flat and remain flat while it is on the ground. Your rear heel will rise off of the ground. Bend your knees to approximately 90 degrees as you lower yourself. Remember to keep your trunk upright and core engaged. Then, forcefully push off from your front leg to return to the starting position.',
                    example: '/rs-clone-deploy/assets/gifs/lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=yIc1YbVLMZ8',
                    quantity: 'x14',
                  },
                  {
                    id: 4,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 5,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 6,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x12',
                  },
                  {
                    id: 7,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x12',
                  },
                  {
                    id: 8,
                    title: 'bottom leg lift left',
                    description: 'Lie on your left side with your head resting on your left hand. Then put your right foot forward on the floor Lift your left leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x12',
                  },
                  {
                    id: 9,
                    title: 'bottom leg lift right',
                    description: 'Lie on your right side with your head resting on your right hand. Then put your left foot forward on the floor Lift your right leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x12',
                  },
                  {
                    id: 10,
                    title: 'fire hydrant left',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your left leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x10',
                  },
                  {
                    id: 11,
                    title: 'fire hydrant right',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x10',
                  },
                  {
                    id: 12,
                    title: 'split squat left',
                    description:
                      'From a standing position, take a long step forward as if performing a lunge. The heel of your back foot should be raised. Keeping your torso straight, lower slowly until your back knee almost touches the floor, then push back up.',
                    example: '/rs-clone-deploy/assets/gifs/split_squat_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=SFSZVKzqnXA',
                    quantity: 'x10',
                  },
                  {
                    id: 13,
                    title: 'split squat right',
                    description:
                      'From a standing position, take a long step forward as if performing a lunge. The heel of your back foot should be raised. Keeping your torso straight, lower slowly until your back knee almost touches the floor, then push back up.',
                    example: '/rs-clone-deploy/assets/gifs/split_squat_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=SFSZVKzqnXA',
                    quantity: 'x10',
                  },
                  {
                    id: 14,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 15,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 16,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x10',
                  },
                  {
                    id: 17,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x10',
                  },
                  {
                    id: 18,
                    title: 'bottom leg lift left',
                    description: 'Lie on your left side with your head resting on your left hand. Then put your right foot forward on the floor Lift your left leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x10',
                  },
                  {
                    id: 19,
                    title: 'bottom leg lift right',
                    description: 'Lie on your right side with your head resting on your right hand. Then put your left foot forward on the floor Lift your right leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x10',
                  },
                  {
                    id: 20,
                    title: 'lunges',
                    description:
                      'Start in a standing position with your feet hip-width apart. Step forward longer than a walking stride so one leg is ahead of your torso and the other is behind. Your foot should land flat and remain flat while it is on the ground. Your rear heel will rise off of the ground. Bend your knees to approximately 90 degrees as you lower yourself. Remember to keep your trunk upright and core engaged. Then, forcefully push off from your front leg to return to the starting position.',
                    example: '/rs-clone-deploy/assets/gifs/lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=yIc1YbVLMZ8',
                    quantity: 'x12',
                  },
                  {
                    id: 21,
                    title: 'fire hydrant left',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your left leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x8',
                  },
                  {
                    id: 22,
                    title: 'fire hydrant right',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x8',
                  },
                  {
                    id: 23,
                    title: 'split squat left',
                    description:
                      'From a standing position, take a long step forward as if performing a lunge. The heel of your back foot should be raised. Keeping your torso straight, lower slowly until your back knee almost touches the floor, then push back up.',
                    example: '/rs-clone-deploy/assets/gifs/split_squat_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=SFSZVKzqnXA',
                    quantity: 'x8',
                  },
                  {
                    id: 24,
                    title: 'split squat right',
                    description:
                      'From a standing position, take a long step forward as if performing a lunge. The heel of your back foot should be raised. Keeping your torso straight, lower slowly until your back knee almost touches the floor, then push back up.',
                    example: '/rs-clone-deploy/assets/gifs/split_squat_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=SFSZVKzqnXA',
                    quantity: 'x8',
                  },
                  {
                    id: 25,
                    title: 'kneeling lunge stretch left',
                    description:
                      'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
                    example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
                    quantity: '00:30',
                  },
                  {
                    id: 26,
                    title: 'kneeling lunge stretch right',
                    description:
                      'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
                    example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 6,
                title: 'BUTT advanced',
                exercisesAmt: '32',
                exercisesTime: '24',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/butt.png',
                color: 'linear-gradient(90deg, rgba(244,117,117,1) 0%, rgba(255,209,209,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'butt kicks',
                    description:
                      "Run in place while kicking your heel up to touch your butt with each step. Try to do it as fast as you can. Keep your chest up, tighten your abs. It's a great exercise for the gluteus and hamstrings.",
                    example: '/rs-clone-deploy/assets/gifs/butt_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=vXVPvY1UbJI',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x15',
                  },
                  {
                    id: 4,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 5,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 6,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x15',
                  },
                  {
                    id: 7,
                    title: 'curtsy lunges',
                    description:
                      'Stand with your feet hip-width apart, hands on your hips. Take a big step back with your right leg, crossing it behind your left. Bend your knees and lower your hips until your left thigh is nearly parallel to the floor. Keep your torso upright and your hips and shoulders as square as possible to the wall in front of you. Then repeat on the other side.',
                    example: '/rs-clone-deploy/assets/gifs/curtsy_lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=-rTyKlHjYT8',
                    quantity: 'x14',
                  },
                  {
                    id: 8,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x14',
                  },
                  {
                    id: 9,
                    title: 'lunge knee hops right',
                    description:
                      'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
                    example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
                    quantity: 'x12',
                  },
                  {
                    id: 10,
                    title: 'lunge knee hops left',
                    description:
                      'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
                    example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
                    quantity: 'x12',
                  },
                  {
                    id: 11,
                    title: 'flutter kicks',
                    description:
                      'Lie on your back with your arms at your sides and legs slightly lifted. Then quickly raise your right leg up, and simultaneous lower your left hand. This exercise can increase core strength and improve your endurance.',
                    example: '/rs-clone-deploy/assets/gifs/flutter_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=K5wuM_gNWyw',
                    quantity: '00:30',
                  },
                  {
                    id: 12,
                    title: 'bench glute kick back left',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x16',
                  },
                  {
                    id: 13,
                    title: 'bench glute kick back right',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x16',
                  },
                  {
                    id: 14,
                    title: 'sumo squat',
                    description:
                      'Start in a traditional squat stance with your feet about shoulder-width apart and toes pointed forward. Clasp your hands together at your chest. Take a step to the side with your right foot until your stance is 3–4 feet wide, or wider than hip width. Wider is OK as long as you can perform the move correctly. Move your hips back slightly and bend your knees as you lower your body into a squat position. Draw your tailbone straight down to the floor. Be mindful to keep your spine neutral, core engaged, and eyes forward throughout the movement. Lower until your thighs are parallel to the floor. You can go lower or shorten the squat if parallel is too low or if you can’t maintain your leg alignmen. Pause in the squat position for a few seconds. Then, engaging your glutes, press up to standing, driving up through your heels.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=Z2F0bArQH5s',
                    quantity: 'x15',
                  },
                  {
                    id: 15,
                    title: 'single leg bridge left',
                    description:
                      'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
                    example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
                    quantity: 'x12',
                  },
                  {
                    id: 16,
                    title: 'single leg bridge right',
                    description:
                      'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
                    example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
                    quantity: 'x12',
                  },
                  {
                    id: 17,
                    title: 'jumping squats',
                    description: 'Stand with feet shoulder width and knees slightly bent. Start by doing a regular squat. engage your core, and jump up explosively.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_squats.webp',
                    youtube: 'https://www.youtube.com/watch?v=txLE-jOCEsc',
                    quantity: 'x12',
                  },
                  {
                    id: 18,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 19,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 20,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x12',
                  },
                  {
                    id: 21,
                    title: 'curtsy lunges',
                    description:
                      'Stand with your feet hip-width apart, hands on your hips. Take a big step back with your right leg, crossing it behind your left. Bend your knees and lower your hips until your left thigh is nearly parallel to the floor. Keep your torso upright and your hips and shoulders as square as possible to the wall in front of you. Then repeat on the other side.',
                    example: '/rs-clone-deploy/assets/gifs/curtsy_lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=-rTyKlHjYT8',
                    quantity: 'x12',
                  },
                  {
                    id: 22,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x12',
                  },
                  {
                    id: 23,
                    title: 'lunge knee hops left',
                    description:
                      'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
                    example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
                    quantity: 'x10',
                  },
                  {
                    id: 24,
                    title: 'lunge knee hops right',
                    description:
                      'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
                    example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
                    quantity: 'x10',
                  },
                  {
                    id: 25,
                    title: 'flutter kicks',
                    description:
                      'Lie on your back with your arms at your sides and legs slightly lifted. Then quickly raise your right leg up, and simultaneous lower your left hand. This exercise can increase core strength and improve your endurance.',
                    example: '/rs-clone-deploy/assets/gifs/flutter_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=K5wuM_gNWyw',
                    quantity: '00:30',
                  },
                  {
                    id: 26,
                    title: 'bench glute kick back left',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x14',
                  },
                  {
                    id: 27,
                    title: 'bench glute kick back right',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x14',
                  },
                  {
                    id: 28,
                    title: 'sumo squat',
                    description:
                      'Start in a traditional squat stance with your feet about shoulder-width apart and toes pointed forward. Clasp your hands together at your chest. Take a step to the side with your right foot until your stance is 3–4 feet wide, or wider than hip width. Wider is OK as long as you can perform the move correctly. Move your hips back slightly and bend your knees as you lower your body into a squat position. Draw your tailbone straight down to the floor. Be mindful to keep your spine neutral, core engaged, and eyes forward throughout the movement. Lower until your thighs are parallel to the floor. You can go lower or shorten the squat if parallel is too low or if you can’t maintain your leg alignmen. Pause in the squat position for a few seconds. Then, engaging your glutes, press up to standing, driving up through your heels.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=Z2F0bArQH5s',
                    quantity: 'x12',
                  },
                  {
                    id: 29,
                    title: 'single leg bridge left',
                    description:
                      'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
                    example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
                    quantity: 'x10',
                  },
                  {
                    id: 30,
                    title: 'single leg bridge right',
                    description:
                      'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
                    example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
                    quantity: 'x10',
                  },
                  {
                    id: 31,
                    title: 'kneeling lunge stretch left',
                    description:
                      'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
                    example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
                    quantity: '00:30',
                  },
                  {
                    id: 32,
                    title: 'kneeling lunge stretch right',
                    description:
                      'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
                    example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
                    quantity: '00:30',
                  },
                ],
              },
            ],
          },
          {
            title: 'THIGH Workouts',
            image: '/rs-clone-deploy/assets/png/thigh.png',
            block: [
              {
                id: 7,
                title: 'THIGH beginner',
                exercisesAmt: '19',
                exercisesTime: '14',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/thigh.png',
                color: 'linear-gradient(90deg, rgba(24,240,237,1) 0%, rgba(206,247,242,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'jumping jacks',
                    description:
                      'Stand upright with your legs together, arms at your sides Bend your knees slightly, and jump into the air. As you jump , spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
                    youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
                    quantity: 'x30',
                  },
                  {
                    id: 3,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x12',
                  },
                  {
                    id: 4,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 5,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 6,
                    title: 'backward lunge',
                    description:
                      'Stand tall with your feet hip distance apart. Take a large step backward and lower your body toward the floor.  Both legs should be bent at a 90-degree angle at the bottom of the lunge.  Rise back to start and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/backward_lunge.gif',
                    youtube: 'https://www.youtube.com/watch?v=_LGpDtENZ5U',
                    quantity: 'x14',
                  },
                  {
                    id: 7,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 8,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 9,
                    title: 'burpees',
                    description:
                      'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
                    example: '/rs-clone-deploy/assets/gifs/burpees.gif',
                    youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
                    quantity: 'x5',
                  },
                  {
                    id: 10,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 11,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 12,
                    title: 'backward lunge',
                    description:
                      'Stand tall with your feet hip distance apart. Take a large step backward and lower your body toward the floor.  Both legs should be bent at a 90-degree angle at the bottom of the lunge.  Rise back to start and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/backward_lunge.gif',
                    youtube: 'https://www.youtube.com/watch?v=_LGpDtENZ5U',
                    quantity: 'x12',
                  },
                  {
                    id: 13,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x8',
                  },
                  {
                    id: 14,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x8',
                  },
                  {
                    id: 15,
                    title: 'quad stretch left',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 16,
                    title: 'quad stretch right',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 17,
                    title: 'knee to chest stretch left',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your left knee towards your chest as much as you can while keeping your right leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                  {
                    id: 18,
                    title: 'knee to chest stretch right',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your right knee towards your chest as much as you can while keeping your left leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 8,
                title: 'THIGH intermediate',
                exercisesAmt: '26',
                exercisesTime: '19',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/thigh.png',
                color: 'linear-gradient(90deg, rgba(113,179,235,1) 0%, rgba(202,227,249,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'side hop',
                    description: 'Jump with both feet to the right and then to the left, in a quick, repetitive movement',
                    example: '/rs-clone-deploy/assets/gifs/side_hop.gif',
                    youtube: 'https://www.youtube.com/watch?v=nYmUEJIBj3c',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'lunges',
                    description:
                      'Start in a standing position with your feet hip-width apart. Step forward longer than a walking stride so one leg is ahead of your torso and the other is behind. Your foot should land flat and remain flat while it is on the ground. Your rear heel will rise off of the ground. Bend your knees to approximately 90 degrees as you lower yourself. Remember to keep your trunk upright and core engaged. Then, forcefully push off from your front leg to return to the starting position.',
                    example: '/rs-clone-deploy/assets/gifs/lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=yIc1YbVLMZ8',
                    quantity: 'x14',
                  },
                  {
                    id: 4,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 5,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 6,
                    title: 'sumo squat',
                    description:
                      'Start in a traditional squat stance with your feet about shoulder-width apart and toes pointed forward. Clasp your hands together at your chest. Take a step to the side with your right foot until your stance is 3–4 feet wide, or wider than hip width. Wider is OK as long as you can perform the move correctly. Move your hips back slightly and bend your knees as you lower your body into a squat position. Draw your tailbone straight down to the floor. Be mindful to keep your spine neutral, core engaged, and eyes forward throughout the movement. Lower until your thighs are parallel to the floor. You can go lower or shorten the squat if parallel is too low or if you can’t maintain your leg alignmen. Pause in the squat position for a few seconds. Then, engaging your glutes, press up to standing, driving up through your heels.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=Z2F0bArQH5s',
                    quantity: 'x12',
                  },
                  {
                    id: 7,
                    title: 'frog press',
                    description:
                      'Lie on your back with your knees bent to 90 degrees, turning them outwards like a frog. Make sure to keep your heels pressed together while flexing your feet towards you. Tighten your stomach and crunch up, lifting your head and shoulders off the floor, holding this position. Place your arms down by your side, hovering just above the floor. Straighten your legs away from your body at a 45-degree angle. Return to the starting position, completing the desired amount of repetitions.',
                    example: '/rs-clone-deploy/assets/gifs/frog_press.gif',
                    youtube: 'https://www.youtube.com/watch?v=JvA7t9xKWgg',
                    quantity: 'x12',
                  },
                  {
                    id: 8,
                    title: 'fire hydrant left',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your left leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x12',
                  },
                  {
                    id: 9,
                    title: 'fire hydrant right',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x12',
                  },
                  {
                    id: 10,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 11,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 12,
                    title: 'burpees',
                    description:
                      'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
                    example: '/rs-clone-deploy/assets/gifs/burpees.gif',
                    youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
                    quantity: 'x6',
                  },
                  {
                    id: 13,
                    title: 'lunges',
                    description:
                      'Start in a standing position with your feet hip-width apart. Step forward longer than a walking stride so one leg is ahead of your torso and the other is behind. Your foot should land flat and remain flat while it is on the ground. Your rear heel will rise off of the ground. Bend your knees to approximately 90 degrees as you lower yourself. Remember to keep your trunk upright and core engaged. Then, forcefully push off from your front leg to return to the starting position.',
                    example: '/rs-clone-deploy/assets/gifs/lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=yIc1YbVLMZ8',
                    quantity: 'x12',
                  },
                  {
                    id: 14,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 15,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 16,
                    title: 'sumo squat',
                    description:
                      'Start in a traditional squat stance with your feet about shoulder-width apart and toes pointed forward. Clasp your hands together at your chest. Take a step to the side with your right foot until your stance is 3–4 feet wide, or wider than hip width. Wider is OK as long as you can perform the move correctly. Move your hips back slightly and bend your knees as you lower your body into a squat position. Draw your tailbone straight down to the floor. Be mindful to keep your spine neutral, core engaged, and eyes forward throughout the movement. Lower until your thighs are parallel to the floor. You can go lower or shorten the squat if parallel is too low or if you can’t maintain your leg alignmen. Pause in the squat position for a few seconds. Then, engaging your glutes, press up to standing, driving up through your heels.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=Z2F0bArQH5s',
                    quantity: 'x10',
                  },
                  {
                    id: 17,
                    title: 'frog press',
                    description:
                      'Lie on your back with your knees bent to 90 degrees, turning them outwards like a frog. Make sure to keep your heels pressed together while flexing your feet towards you. Tighten your stomach and crunch up, lifting your head and shoulders off the floor, holding this position. Place your arms down by your side, hovering just above the floor. Straighten your legs away from your body at a 45-degree angle. Return to the starting position, completing the desired amount of repetitions.',
                    example: '/rs-clone-deploy/assets/gifs/frog_press.gif',
                    youtube: 'https://www.youtube.com/watch?v=JvA7t9xKWgg',
                    quantity: 'x10',
                  },
                  {
                    id: 18,
                    title: 'fire hydrant left',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your left leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x10',
                  },
                  {
                    id: 19,
                    title: 'fire hydrant right',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x10',
                  },
                  {
                    id: 20,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x8',
                  },
                  {
                    id: 21,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x8',
                  },
                  {
                    id: 22,
                    title: 'burpees',
                    description:
                      'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
                    example: '/rs-clone-deploy/assets/gifs/burpees.gif',
                    youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
                    quantity: 'x5',
                  },
                  {
                    id: 23,
                    title: 'quad stretch left',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 24,
                    title: 'quad stretch right',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 25,
                    title: 'knee to chest stretch left',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your left knee towards your chest as much as you can while keeping your right leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                  {
                    id: 26,
                    title: 'knee to chest stretch right',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your right knee towards your chest as much as you can while keeping your left leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 9,
                title: 'THIGH advanced',
                exercisesAmt: '29',
                exercisesTime: '21',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/thigh.png',
                color: 'linear-gradient(90deg, rgba(244,117,117,1) 0%, rgba(255,209,209,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'burpees',
                    description:
                      'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
                    example: '/rs-clone-deploy/assets/gifs/burpees.gif',
                    youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
                    quantity: 'x10',
                  },
                  {
                    id: 3,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x15',
                  },
                  {
                    id: 4,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 5,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 6,
                    title: 'side lunges',
                    description:
                      'Start with your feet shoulder-width apart, toes pointed straight forward. Step out with your right foot as wide as possible. Engage through the right heel as you drop your hips down and back while keeping the left leg straight, stretching the groin on the left leg and keeping both soles of the feet on the ground and toes pointed straight forward. Make sure your right knee is tracking over your right foot the whole motion. Powerfully your right heel into the floor to push yourself back to the full standing start position. This exercise strengthens your glutes and thighs.',
                    example: '/rs-clone-deploy/assets/gifs/side_lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=tlUg1DXhHm8',
                    quantity: 'x14',
                  },
                  {
                    id: 7,
                    title: 'bottom leg lift left',
                    description: 'Lie on your left side with your head resting on your left hand. Then put your right foot forward on the floor Lift your left leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x12',
                  },
                  {
                    id: 8,
                    title: 'bottom leg lift right',
                    description: 'Lie on your right side with your head resting on your right hand. Then put your left foot forward on the floor Lift your right leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x12',
                  },
                  {
                    id: 9,
                    title: 'jumping squats',
                    description: 'Stand with feet shoulder width and knees slightly bent. Start by doing a regular squat. engage your core, and jump up explosively.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_squats.webp',
                    youtube: 'https://www.youtube.com/watch?v=txLE-jOCEsc',
                    quantity: 'x12',
                  },
                  {
                    id: 10,
                    title: 'side leg circles left',
                    description:
                      'Lie on your side, with one leg stacked on top of the other. Extend your bottom arm straight and rest your head on it, while you place your other hand on the floor in front of your body for support. Lift the top leg up and perform leg circles.',
                    example: '/rs-clone-deploy/assets/gifs/side_leg_circles_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VgysBPnVJWg',
                    quantity: 'x12',
                  },
                  {
                    id: 11,
                    title: 'side leg circles right',
                    description:
                      'Lie on your side, with one leg stacked on top of the other. Extend your bottom arm straight and rest your head on it, while you place your other hand on the floor in front of your body for support. Lift the top leg up and perform leg circles.',
                    example: '/rs-clone-deploy/assets/gifs/side_leg_circles_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VgysBPnVJWg',
                    quantity: 'x12',
                  },
                  {
                    id: 12,
                    title: 'bench glute kick back left',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x15',
                  },
                  {
                    id: 13,
                    title: 'bench glute kick back right',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x15',
                  },
                  {
                    id: 14,
                    title: 'burpees',
                    description:
                      'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
                    example: '/rs-clone-deploy/assets/gifs/burpees.gif',
                    youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
                    quantity: 'x6',
                  },
                  {
                    id: 15,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x12',
                  },
                  {
                    id: 16,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 17,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 18,
                    title: 'side lunges',
                    description:
                      'Start with your feet shoulder-width apart, toes pointed straight forward. Step out with your right foot as wide as possible. Engage through the right heel as you drop your hips down and back while keeping the left leg straight, stretching the groin on the left leg and keeping both soles of the feet on the ground and toes pointed straight forward. Make sure your right knee is tracking over your right foot the whole motion. Powerfully your right heel into the floor to push yourself back to the full standing start position. This exercise strengthens your glutes and thighs.',
                    example: '/rs-clone-deploy/assets/gifs/side_lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=tlUg1DXhHm8',
                    quantity: 'x12',
                  },
                  {
                    id: 19,
                    title: 'bottom leg lift left',
                    description: 'Lie on your left side with your head resting on your left hand. Then put your right foot forward on the floor Lift your left leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x10',
                  },
                  {
                    id: 20,
                    title: 'bottom leg lift right',
                    description: 'Lie on your right side with your head resting on your right hand. Then put your left foot forward on the floor Lift your right leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x10',
                  },
                  {
                    id: 21,
                    title: 'jumping squats',
                    description: 'Stand with feet shoulder width and knees slightly bent. Start by doing a regular squat. engage your core, and jump up explosively.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_squats.webp',
                    youtube: 'https://www.youtube.com/watch?v=txLE-jOCEsc',
                    quantity: 'x10',
                  },
                  {
                    id: 22,
                    title: 'side leg circles left',
                    description:
                      'Lie on your side, with one leg stacked on top of the other. Extend your bottom arm straight and rest your head on it, while you place your other hand on the floor in front of your body for support. Lift the top leg up and perform leg circles.',
                    example: '/rs-clone-deploy/assets/gifs/side_leg_circles_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VgysBPnVJWg',
                    quantity: 'x10',
                  },
                  {
                    id: 23,
                    title: 'side leg circles right',
                    description:
                      'Lie on your side, with one leg stacked on top of the other. Extend your bottom arm straight and rest your head on it, while you place your other hand on the floor in front of your body for support. Lift the top leg up and perform leg circles.',
                    example: '/rs-clone-deploy/assets/gifs/side_leg_circles_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VgysBPnVJWg',
                    quantity: 'x10',
                  },
                  {
                    id: 24,
                    title: 'bench glute kick back left',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x12',
                  },
                  {
                    id: 25,
                    title: 'bench glute kick back right',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x12',
                  },
                  {
                    id: 26,
                    title: 'wall sit',
                    description:
                      "Stand with your back to a wall, feet hip-width apart and slightly in front of you. Lean back into the wall, and slide down like you're sitting down onto a chair. Your knees should bent at 90 degrees with the knees above your ankles. Hold this position for 30 seconds.",
                    example: '/rs-clone-deploy/assets/png/wall_sit.png',
                    youtube: 'https://www.youtube.com/watch?v=Yp3ZwACK9v4',
                    quantity: '00:40',
                  },
                  {
                    id: 27,
                    title: 'quad stretch left',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 28,
                    title: 'quad stretch right',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 29,
                    title: 'lying butterfly stretch',
                    description: 'Lie on the floor with your feet together. Open your knees to the sides. Hold this position.',
                    example: '/rs-clone-deploy/assets/png/lying_butterfly_stretch.png',
                    youtube: 'https://www.youtube.com/watch?v=bzfY0Zr3sUE',
                    quantity: '00:30',
                  },
                ],
              },
            ],
          },
          {
            title: 'Routines',
            image: '/rs-clone-deploy/assets/images/morning_evening.jpg',
            block: [
              {
                id: 10,
                title: 'Morning Warmup',
                exercisesAmt: '11',
                exercisesTime: '10',
                image: '/rs-clone-deploy/assets/images/morning_evening.jpg',
                color: 'linear-gradient(90deg, rgba(128,27,150,0.7567401960784313) 0%, rgba(214,189,221,1) 78%)',
                exercises: [
                  {
                    id: 1,
                    title: 'bridge',
                    description:
                      'Lie on your back with your knees bent. Tighten the muscles in your stomach. Raise your hips off the floor until they line up with your knees and shoulders. Hold for three deep breaths. Return to the starting position and repeat.',
                    example: '/rs-clone-deploy/assets/images/bridge.jpg',
                    youtube: 'https://www.youtube.com/watch?v=-KKADnBsPzw',
                    quantity: '00:20',
                  },
                  {
                    id: 2,
                    title: 'reverse crunches',
                    description: 'Lie on your back with your knees up and hands behind your head. Lift your shoulders and thighs, and then stretch out.',
                    example: '/rs-clone-deploy/assets/gifs/reverse_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=UwRfRN5fYRg',
                    quantity: 'x20',
                  },
                  {
                    id: 3,
                    title: 'abdominal crunches',
                    description:
                      'Keep your knees comfortably apart. Fold your arms on your chest and tighten your abdominal muscles. Raise your head and shoulders off of the floor. Hold for three deep breaths, then return to starting position.',
                    example: '/rs-clone-deploy/assets/gifs/abdominal_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=RUNrHkbP4Pc',
                    quantity: 'x20',
                  },
                  {
                    id: 4,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x30',
                  },
                  {
                    id: 5,
                    title: 'bird dog',
                    description:
                      'Begin on all fours in the tabletop position. Then stretch your right leg and left arm at the same time. Hold for a few seconds, then go back and repeat with the other side.',
                    example: '/rs-clone-deploy/assets/gifs/bird_dog.gif',
                    youtube: 'https://www.youtube.com/watch?v=v0oCYe8__bU',
                    quantity: 'x25',
                  },
                  {
                    id: 6,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '00:30',
                  },
                  {
                    id: 7,
                    title: 'cobra stretch',
                    description:
                      'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
                    example: '/rs-clone-deploy/assets/png/cobra.png',
                    youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
                    quantity: '00:30',
                  },
                  {
                    id: 8,
                    title: 'shoulder stretch left',
                    description: 'Bring one arm across your upper body and hold it straight. Grasp the elbow with the other arm and gently pull toward your chest. Hold.',
                    example: '/rs-clone-deploy/assets/gifs/shoulders_stretch_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=9k0EN2RCGgU',
                    quantity: '00:20',
                  },
                  {
                    id: 9,
                    title: 'shoulder stretch right',
                    description: 'Bring one arm across your upper body and hold it straight. Grasp the elbow with the other arm and gently pull toward your chest. Hold.',
                    example: '/rs-clone-deploy/assets/gifs/shoulders_stretch_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=9k0EN2RCGgU',
                    quantity: '00:20',
                  },
                  {
                    id: 10,
                    title: 'butt kicks',
                    description:
                      "Run in place while kicking your heel up to touch your butt with each step. Try to do it as fast as you can. Keep your chest up, tighten your abs. It's a great exercise for the gluteus and hamstrings.",
                    example: '/rs-clone-deploy/assets/gifs/butt_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=vXVPvY1UbJI',
                    quantity: '00:30',
                  },
                  {
                    id: 11,
                    title: 'jumping jacks',
                    description:
                      'Stand upright with your legs together, arms at your sides Bend your knees slightly, and jump into the air. As you jump , spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
                    youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
                    quantity: 'x30',
                  },
                ],
              },
              {
                id: 11,
                title: 'Sleepy Time Stretch',
                exercisesAmt: '13',
                exercisesTime: '13',
                image: '/rs-clone-deploy/assets/images/morning_evening2.jpg',
                color: 'linear-gradient(90deg, rgba(128,27,150,0.7567401960784313) 0%, rgba(214,189,221,1) 78%)',
                exercises: [
                  {
                    id: 1,
                    title: 'quad stretch left',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'quad stretch right',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'quad stretch left',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 4,
                    title: 'quad stretch right',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 5,
                    title: 'triceps stretch left',
                    description:
                      'Stand with your arms relaxed at your sides. With your affected arm, gently bend your elbow up toward you as far as possible. Your palm should face up. Then straighten your arm as much as you can.',
                    example: '/rs-clone-deploy/assets/images/triceps_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=L9IGOcrdcFk',
                    quantity: '00:30',
                  },
                  {
                    id: 6,
                    title: 'triceps stretch right',
                    description:
                      'Stand with your arms relaxed at your sides. With your affected arm, gently bend your elbow up toward you as far as possible. Your palm should face up. Then straighten your arm as much as you can.',
                    example: '/rs-clone-deploy/assets/images/tricep_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=L9IGOcrdcFk',
                    quantity: '00:30',
                  },
                  {
                    id: 7,
                    title: 'cobra stretch',
                    description:
                      'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
                    example: '/rs-clone-deploy/assets/png/cobra.png',
                    youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
                    quantity: '00:30',
                  },
                  {
                    id: 8,
                    title: 'child pose',
                    description:
                      'Keep on the floor with your toes together and your knees hip-width apart. Rest your palms on top of your thighs. On an exhale lower your torso between your knees. Extend your arms alongside your torso with your palms facing down. Relax your shoulders towards the ground. Rest in the pose for as long as you needed.',
                    example: '/rs-clone-deploy/assets/png/child_pose.png',
                    youtube: 'https://www.youtube.com/watch?v=DMwRPGMPB10',
                    quantity: '00:30',
                  },
                  {
                    id: 9,
                    title: 'cat cow pose',
                    description:
                      'Keep your hands shoulder-width apart and your knees directly below your hips. Inhale deeply while curving your lower back and bringing your head up, tilting your pelvis up like a cow. Exhale deeply and bring your abdomen in, arching your spine and bringing your head and pelvis down like a cat. Repeat several times.',
                    example: '/rs-clone-deploy/assets/gifs/cat_cow_pose.gif',
                    youtube: 'https://www.youtube.com/watch?v=w_UKcI1Ftn8',
                    quantity: '00:30',
                  },
                  {
                    id: 10,
                    title: 'lying butterfly stretch',
                    description: 'Lie on the floor with your feet together. Open your knees to the sides. Hold this position.',
                    example: '/rs-clone-deploy/assets/png/lying_butterfly_stretch.png',
                    youtube: 'https://www.youtube.com/watch?v=bzfY0Zr3sUE',
                    quantity: '00:30',
                  },
                  {
                    id: 11,
                    title: 'bridge',
                    description:
                      'Lie on your back with your knees bent. Tighten the muscles in your stomach. Raise your hips off the floor until they line up with your knees and shoulders. Hold for three deep breaths. Return to the starting position and repeat.',
                    example: '/rs-clone-deploy/assets/images/bridge.jpg',
                    youtube: 'https://www.youtube.com/watch?v=-KKADnBsPzw',
                    quantity: '00:30',
                  },
                  {
                    id: 12,
                    title: 'lying twist stretch left',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the left. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                  {
                    id: 13,
                    title: 'lying twist stretch right',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the right. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                ],
              },
            ],
          },
        ],
        g = i.p + 'assets/abs3.png',
        m = i.p + 'assets/butt.png',
        y = i.p + 'assets/thigh.png',
        f = i.p + 'assets/whole_body2.png',
        w = i.p + 'assets/morning_evening.jpg',
        b = i.p + 'assets/morning_evening2.jpg',
        k =
          '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2,17H5.638l5.722,4.769A1,1,0,0,0,12,22a.989.989,0,0,0,.424-.095A1,1,0,0,0,13,21V3a1,1,0,0,0-1.64-.769L5.638,7H2A1,1,0,0,0,1,8v8A1,1,0,0,0,2,17ZM3,9H6a1,1,0,0,0,.64-.231L11,5.135v13.73L6.64,15.231A1,1,0,0,0,6,15H3Zm20,3a7.008,7.008,0,0,1-7,7,1,1,0,0,1,0-2A5,5,0,0,0,16,7a1,1,0,0,1,0-2A7.008,7.008,0,0,1,23,12Zm-5,0a2,2,0,0,0-2-2,1,1,0,0,1,0-2,4,4,0,0,1,0,8,1,1,0,0,1,0-2A2,2,0,0,0,18,12Z"/></svg>',
        v =
          '<?xml version="1.0" ?><svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><defs><style>.cls-1{fill:#101820;}</style></defs><title/><g data-name="Layer 35" id="Layer_35"><path class="cls-1" d="M18,29a1,1,0,0,1-.57-.18l-10-7A1,1,0,0,1,7,21V11a1,1,0,0,1,.43-.82l10-7a1,1,0,0,1,1-.07A1,1,0,0,1,19,4V28a1,1,0,0,1-.54.89A1,1,0,0,1,18,29ZM9,20.48l8,5.6V5.92l-8,5.6Z"/><path class="cls-1" d="M8,22H4a3,3,0,0,1-3-3V13a3,3,0,0,1,3-3H8a1,1,0,0,1,1,1V21A1,1,0,0,1,8,22ZM4,12a1,1,0,0,0-1,1v6a1,1,0,0,0,1,1H7V12Z"/><rect class="cls-1" height="12" transform="translate(-3.77 22.9) rotate(-45)" width="2" x="24.76" y="10"/><rect class="cls-1" height="2" transform="translate(-3.77 22.9) rotate(-45)" width="12" x="19.76" y="15"/></g></svg>',
        A = class {
          constructor(t) {
            (this.template = new e()),
              (this.exercise = t),
              (this.backLayer = this.template.createElement('div', 'exercise-modal__backlayer')),
              (this.modal = this.template.createElement('div', 'exercise-modal'));
          }
          draw() {
            this.backLayer.append(this.modal);
            const e = this.template.createBtn('exercise-modal__button-close');
            this.modal.append(e);
            const t = document.createElement('img');
            t.className = 'exercise-modal__gif';
            const i = this.exercise.example;
            (t.src = i), this.modal.append(t), this.createExerciseInfo();
            const o = this.template.createElement('p', 'exercise-modal__description', this.exercise.description);
            this.modal.append(o),
              document.body.prepend(this.backLayer),
              e.addEventListener('click', () => {
                this.closeExerciseModal();
              }),
              window.addEventListener('click', (e) => {
                e.target.classList.contains('exercise-modal__backlayer') && this.closeExerciseModal();
              });
          }
          closeExerciseModal() {
            document.body.removeChild(this.backLayer);
          }
          createExerciseInfo() {
            const e = this.template.createElement('div', 'exercise-modal__info'),
              t = this.template.createElement('span', 'exercise-modal__name', this.exercise.title),
              i = this.template.createElement('span', 'exercise-modal__quantity', this.exercise.quantity),
              o = this.template.createLink('exercise-modal__link', this.exercise.youtube);
            (o.target = '_blank'), e.append(t, i, o), this.modal.append(e);
          }
        };
      var x = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const C = class {
          createUserInfo(e) {
            return x(this, void 0, void 0, function* () {
              try {
                const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/complex/create', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(e),
                });
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          getComplex(e) {
            return x(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/complex/get-all/${e}`);
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          deleteComplex(e) {
            return x(this, void 0, void 0, function* () {
              try {
                yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/complex/delete/${e}`, { method: 'DELETE' });
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          createExercise(e) {
            return x(this, void 0, void 0, function* () {
              try {
                const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/exercise/create', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(e),
                });
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          getExercises(e) {
            return x(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/exercise/get-all/${e}`);
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          deleteExercise(e) {
            return x(this, void 0, void 0, function* () {
              try {
                yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/exercise/delete/${e}`, { method: 'DELETE' });
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          updateExercise(e, t) {
            return x(this, void 0, void 0, function* () {
              try {
                const i = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/exercise/update/${e}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(t),
                });
                return yield i.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          fulfilledComplex(e) {
            return x(this, void 0, void 0, function* () {
              try {
                const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/completed/create', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(e),
                });
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          getCompletedComplexes(e) {
            return x(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/completed/get-all/${e}`);
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          getWeeklyStatistic(e) {
            return x(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/completed/weekly-workouts/${e}`);
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          getUserSettings(e) {
            return x(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/user/get/${e}`);
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          updateRestTime(e, t) {
            return x(this, void 0, void 0, function* () {
              try {
                const i = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/user/update-rest/${e}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(t),
                });
                return yield i.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          updateLoad(e, t) {
            return x(this, void 0, void 0, function* () {
              try {
                const i = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/user/update-load/${e}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(t),
                });
                return yield i.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
        },
        _ = {
          trainings: [
            {
              id: 1,
              title: 'high stepping',
              description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
              example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
              youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
              quantity: '00:22',
            },
            {
              id: 2,
              title: 'side hop',
              description: 'Jump with both feet to the right and then to the left, in a quick, repetitive movement',
              example: '/rs-clone-deploy/assets/gifs/side_hop.gif',
              youtube: 'https://www.youtube.com/watch?v=nYmUEJIBj3c',
              quantity: '00:30',
            },
            {
              id: 3,
              title: 'squats',
              description:
                'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
              example: '/rs-clone-deploy/assets/gifs/squats.gif',
              youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
              quantity: 'x12',
            },
            {
              id: 4,
              title: 'wall push ups',
              description:
                "While facing the wall, stand just over one arm's length away. Your body should create a 45-degree angle when you place your hands against the wall. Keep your feet shoulder-width apart. Lower yourself against the wall. Keep your body straight.",
              example: '/rs-clone-deploy/assets/gifs/wall_push_ups.gif',
              youtube: 'https://www.youtube.com/watch?v=EOf3cGIQpA4',
              quantity: 'x15',
            },
            {
              id: 5,
              title: 'butt bridge',
              description:
                'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
              example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
              youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
              quantity: 'x14',
            },
            {
              id: 6,
              title: 'fire hydrant left',
              description:
                'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your left leg to the side at a 90 degree angle.',
              example: '/rs-clone-deploy/assets/gifs/fire_hydrand_left.gif',
              youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
              quantity: 'x10',
            },
            {
              id: 7,
              title: 'plank',
              description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
              example: '/rs-clone-deploy/assets/gifs/plank.gif',
              youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
              quantity: '00:30',
            },
            {
              id: 8,
              title: 'butt kicks',
              description:
                "Run in place while kicking your heel up to touch your butt with each step. Try to do it as fast as you can. Keep your chest up, tighten your abs. It's a great exercise for the gluteus and hamstrings.",
              example: '/rs-clone-deploy/assets/gifs/butt_kicks.gif',
              youtube: 'https://www.youtube.com/watch?v=vXVPvY1UbJI',
              quantity: '00:30',
            },
            {
              id: 9,
              title: 'cobra stretch',
              description:
                'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
              example: '/rs-clone-deploy/assets/png/cobra.png',
              youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
              quantity: '00:30',
            },
            {
              id: 10,
              title: 'child pose',
              description:
                'Keep on the floor with your toes together and your knees hip-width apart. Rest your palms on top of your thighs. On an exhale lower your torso between your knees. Extend your arms alongside your torso with your palms facing down. Relax your shoulders towards the ground. Rest in the pose for as long as you needed.',
              example: '/rs-clone-deploy/assets/png/child_pose.png',
              youtube: 'https://www.youtube.com/watch?v=DMwRPGMPB10',
              quantity: '00:30',
            },
            {
              id: 11,
              title: 'knee to chest stretch left',
              description:
                'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your left knee towards your chest as much as you can while keeping your right leg straight on the ground. Hold this position.',
              example: '/rs-clone-deploy/assets/images/knee_to_chest_left.jpg',
              youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
              quantity: '00:30',
            },
            {
              id: 12,
              title: 'knee to chest stretch right',
              description:
                'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your right knee towards your chest as much as you can while keeping your left leg straight on the ground. Hold this position.',
              example: '/rs-clone-deploy/assets/images/knee_to_chest_right.jpg',
              youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
              quantity: '00:30',
            },
            {
              id: 13,
              title: 'jumping jacks',
              description:
                'Stand upright with your legs together, arms at your sides Bend your knees slightly, and jump into the air. As you jump , spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
              example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
              youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
              quantity: 'x30',
            },
            {
              id: 14,
              title: 'heel touch',
              description:
                'Keep your back flat and bend your knees to a 90-degree angle with your feet firmly planted on the floor. Engage your core as you bend your spine to reach your right hand toward your right ankle. Repeat this movement on your left side. Keep your lower back on the floor.',
              example: '/rs-clone-deploy/assets/gifs/heel_touch.gif',
              youtube: 'https://www.youtube.com/watch?v=9bR-elyolBQ',
              quantity: 'x20',
            },
            {
              id: 15,
              title: 'bird dog',
              description:
                'Begin on all fours in the tabletop position. Then stretch your right leg and left arm at the same time. Hold for a few seconds, then go back and repeat with the other side.',
              example: '/rs-clone-deploy/assets/gifs/bird_dog.gif',
              youtube: 'https://www.youtube.com/watch?v=v0oCYe8__bU',
              quantity: 'x25',
            },
            {
              id: 16,
              title: 'reverse crunches',
              description: 'Lie on your back with your knees up and hands behind your head. Lift your shoulders and thighs, and then stretch out.',
              example: '/rs-clone-deploy/assets/gifs/reverse_crunches.gif',
              youtube: 'https://www.youtube.com/watch?v=UwRfRN5fYRg',
              quantity: 'x18',
            },
            {
              id: 17,
              title: 'leg raisers',
              description:
                'Lie on your back, legs straight and together. Keep your legs straight and lift them all the way up to the ceiling until your butt comes off the floor. Slowly lower your legs back down till they are just above the floor. Hold for a moment. Raise your legs back up. Repeat.',
              example: '/rs-clone-deploy/assets/gifs/leg_raisers.gif',
              youtube: 'https://www.youtube.com/watch?v=dGKbTKLnym4',
              quantity: 'x8',
            },
            {
              id: 18,
              title: 'lying twist stretch left',
              description:
                'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the left. Hold this position. This exercise stretches your obliques and lower back.',
              example: '/rs-clone-deploy/assets/images/lying_twist_stretch_left.jpg',
              youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
              quantity: '00:30',
            },
            {
              id: 19,
              title: 'lying twist stretch right',
              description:
                'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the right. Hold this position. This exercise stretches your obliques and lower back.',
              example: '/rs-clone-deploy/assets/images/lying_twist_stretch_right.jpg',
              youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
              quantity: '00:30',
            },
            {
              id: 20,
              title: 'mountain climber',
              description:
                'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
              example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
              youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
              quantity: 'x18',
            },
            {
              id: 21,
              title: 'donkey kicks left',
              description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
              example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
              youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
              quantity: 'x12',
            },
            {
              id: 22,
              title: 'donkey kicks right',
              description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
              example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
              youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
              quantity: 'x12',
            },
            {
              id: 23,
              title: 'burpees',
              description:
                'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
              example: '/rs-clone-deploy/assets/gifs/burpees.gif',
              youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
              quantity: 'x5',
            },
            {
              id: 24,
              title: 'flutter kicks',
              description:
                'Lie on your back with your arms at your sides and legs slightly lifted. Then quickly raise your right leg up, and simultaneous lower your left hand. This exercise can increase core strength and improve your endurance.',
              example: '/rs-clone-deploy/assets/gifs/flutter_kicks.gif',
              youtube: 'https://www.youtube.com/watch?v=K5wuM_gNWyw',
              quantity: '00:15',
            },
            {
              id: 25,
              title: 'fire hydrant right',
              description:
                'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
              example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
              youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
              quantity: 'x10',
            },
            {
              id: 26,
              title: 'inchworms',
              description:
                'Start with your feet shoulder width apart. Hinge your body forward and walk your hands out in front of you along the floor, keeping your feet in place. Continue walking your arms out past the plank position. Your arms should be above your head and your feet should still be at the back of the mat. Start walking your feet towards your hands in small steps. Continue inching your body up until your feet meet your palms, then repeat the movement.',
              example: '/rs-clone-deploy/assets/gifs/inchworms.gif',
              youtube: 'https://www.youtube.com/watch?v=ZY2ji_Ho0dA',
              quantity: 'x10',
            },
            {
              id: 27,
              title: 'skipping without rope',
              description:
                'This is a good warm-up exercise. Pretend to hold a skipping rope handle in each hand. Jump and alternately land on the balls of your feet, rotating your wrists at the same time as you as if you were spinning a rope.',
              example: '/rs-clone-deploy/assets/gifs/skipping_without_rope.gif',
              youtube: 'https://www.youtube.com/watch?v=CYGeazlNbU4',
              quantity: '00:30',
            },
            {
              id: 28,
              title: 'lying butterfly stretch',
              description: 'Lie on the floor with your feet together. Open your knees to the sides. Hold this position.',
              example: '/rs-clone-deploy/assets/png/lying_butterfly_stretch.png',
              youtube: 'https://www.youtube.com/watch?v=bzfY0Zr3sUE',
              quantity: '00:30',
            },
            {
              id: 29,
              title: 'lunges',
              description:
                'Start in a standing position with your feet hip-width apart. Step forward longer than a walking stride so one leg is ahead of your torso and the other is behind. Your foot should land flat and remain flat while it is on the ground. Your rear heel will rise off of the ground. Bend your knees to approximately 90 degrees as you lower yourself. Remember to keep your trunk upright and core engaged. Then, forcefully push off from your front leg to return to the starting position.',
              example: '/rs-clone-deploy/assets/gifs/lunges.gif',
              youtube: 'https://www.youtube.com/watch?v=yIc1YbVLMZ8',
              quantity: 'x14',
            },
            {
              id: 30,
              title: 'claps over head',
              description: 'Stand with your feet shoulder width apart and arms extended to the sides. Raise your arms and clap over your head. Keep your arms straight during the exercise.',
              example: '/rs-clone-deploy/assets/gifs/claps_over_head.gif',
              youtube: 'https://www.youtube.com/watch?v=2i80fjp5saU',
              quantity: 'x15',
            },
            {
              id: 31,
              title: 'adductor stretch in standing',
              description:
                'Stand tall with your chest up and your core tight. Step directly to the left, leaving your right foot in place. Bend the left knee and pause once the upper left thigh is parallel to the ground. your right leg should be completely straight. Toes on both feet should be pointed straight ahead. Hold this stretch for 20 to 40 seconds. Return to the starting position and repeat on the other side.',
              example: '/rs-clone-deploy/assets/gifs/adductor_stretch_in_standing.gif',
              youtube: 'https://www.youtube.com/watch?v=MjFb2MyaNjs',
              quantity: 'x15',
            },
            {
              id: 32,
              title: 'standing bicycle crunches',
              description:
                'Stand with feet together, knees slightly bent, hands behind head. Brace abs in tight and lift left knee up as right shoulder rotates towards knee (try to touch). Lower back to start.',
              example: '/rs-clone-deploy/assets/gifs/standing_bicycle_crunch.gif',
              youtube: 'https://www.youtube.com/watch?v=8lsAXzvVHrc',
              quantity: 'x14',
            },
            {
              id: 33,
              title: 'arm scissors',
              description:
                'Begin by standing with good posture and raising your arms straight out in front of your body. Keeping your arms parallel to the ground, retract them until they are even with your torso. Return to the start position allowing your arms to cross over. Repeat the movement, alternating the rop and bottom hand on each forward pass.',
              example: '/rs-clone-deploy/assets/gifs/arm_scissors.gif',
              youtube: 'https://www.youtube.com/watch?v=pFrJQ-MyL10',
              quantity: '00:15',
            },
            {
              id: 34,
              title: 'side lunges',
              description:
                'Start with your feet shoulder-width apart, toes pointed straight forward. Step out with your right foot as wide as possible. Engage through the right heel as you drop your hips down and back while keeping the left leg straight, stretching the groin on the left leg and keeping both soles of the feet on the ground and toes pointed straight forward. Make sure your right knee is tracking over your right foot the whole motion. Powerfully your right heel into the floor to push yourself back to the full standing start position. This exercise strengthens your glutes and thighs.',
              example: '/rs-clone-deploy/assets/gifs/side_lunges.gif',
              youtube: 'https://www.youtube.com/watch?v=tlUg1DXhHm8',
              quantity: 'x14',
            },
            {
              id: 35,
              title: 'side lying leg lift left',
              description:
                'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
              example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
              youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
              quantity: 'x10',
            },
            {
              id: 36,
              title: 'side lying leg lift right',
              description:
                'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
              example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
              youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
              quantity: 'x10',
            },
            {
              id: 37,
              title: 'clapping crunches',
              description:
                'Sit on the floor with your knees bent, feet lifted a little bit and back titled backwards. Alternately lift your legs and clap under your knees. Exhale when you lift your legs and clap under your knees. Keep your upper body still and your neck neutral.',
              example: '/rs-clone-deploy/assets/png/clapping_crunches.png',
              youtube: 'https://www.youtube.com/watch?v=LUQt2wSOFNM',
              quantity: 'x10',
            },
            {
              id: 38,
              title: 'bicycle crunches',
              description:
                'Lie flat on an exercise mat with your face up, your legs straight, your feet on the floor, and your head and shoulders slightly raised off the mat. Place both of your hands on the back of your head without interlocking your fingers. Raise your knees toward your chest until your shins are parallel to the floor.',
              example: '/rs-clone-deploy/assets/gifs/bicycle_crunches.gif',
              youtube: 'https://www.youtube.com/watch?v=-nJkAJpQemI',
              quantity: 'x14',
            },
            {
              id: 39,
              title: 'russian twist',
              description:
                'Sit with your feet slightly lifted and back titled backwards. Then hold your hands together and twist from side to side. Keep your legs still when twisting and your neck neutral. Tighten your abs.',
              example: '/rs-clone-deploy/assets/gifs/russian_twist.gif',
              youtube: 'https://www.youtube.com/watch?v=DJQGX2J4IVw',
              quantity: 'x16',
            },
            {
              id: 40,
              title: 'reclined oblique twist',
              description:
                'Lie on your back with your legs extended and your elbow directly under your shoulders. LIft your left leg up at a 45 degree angle while reaching your right arm over to your left side. Then slowly go back to the starting position. Repeat several times, and then switch to the other side.',
              example: '/rs-clone-deploy/assets/gifs/reclined_oblique_twist.gif',
              youtube: 'https://www.youtube.com/watch?v=XKW5jru5pGo',
              quantity: 'x16',
            },
            {
              id: 41,
              title: 'heels to the heaven',
              description: 'Lie on your back, position your arms out to your sides. From here, activate the lower abdominals and lift the legs until they are perpendicular to the ground.',
              example: '/rs-clone-deploy/assets/gifs/heels_to_the heaven.gif',
              youtube: 'https://www.youtube.com/watch?v=wdS2U6z0JGY',
              quantity: 'x12',
            },
            {
              id: 42,
              title: 'cross knee plank',
              description:
                'Get on the floor on all fours and assume a push up or ab plank position. To execute this move, squeeze the abs and bring your left leg up to your right elbow and back. Repeat with the opposite leg.',
              example: '/rs-clone-deploy/assets/gifs/cross_knee_plank.gif',
              youtube: 'https://www.youtube.com/watch?v=O4fFIYpYySU',
              quantity: 'x28',
            },
            {
              id: 43,
              title: 'cross arm crunches',
              description:
                'Lie flat on your back and cross your arms across your chest. Bend your knees and firmly plant your feet on the floor. Brace your core and lift your shoulders and upper back off of the floor. Hold at the top for a second and then retract back down to starting position.',
              example: '/rs-clone-deploy/assets/gifs/cross_arm_crunches.gif',
              youtube: 'https://www.youtube.com/watch?v=Qz3ylqqJ90M',
              quantity: 'x18',
            },
            {
              id: 44,
              title: 'x man crunch',
              description: 'Lie down on the floor. Take the x position, keeping your hands and feet off the ground. Bring your arms and legs together in the middle/ Go back to starting position.',
              example: '/rs-clone-deploy/assets/gifs/x_man_crunch.gif',
              youtube: 'https://www.youtube.com/watch?v=f_ZsJgaqFNE',
              quantity: 'x18',
            },
            {
              id: 45,
              title: 'side crunches left',
              description:
                'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
              example: '/rs-clone-deploy/assets/gifs/side_crunch_left.gif',
              youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
              quantity: 'x16',
            },
            {
              id: 46,
              title: 'side crunches right',
              description:
                'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
              example: '/rs-clone-deploy/assets/gifs/side_crunch_right.gif',
              youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
              quantity: 'x16',
            },
            {
              id: 47,
              title: 'vhold',
              description: 'Sit on the floor, lift your legs up at a 45 degree angle, and lean your upper body back at a 45 degree angle. Stretch your arms forward. Hold this position.',
              example: '/rs-clone-deploy/assets/images/vhold.jpg',
              youtube: 'https://www.youtube.com/watch?v=WGwI629aTAY',
              quantity: '00:30',
            },
            {
              id: 48,
              title: 'standing glute kickbacks left',
              description:
                'Сontract your core muscles. Extend your left leg back and up. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position and repeat.',
              example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_left.gif',
              youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
              quantity: 'x10',
            },
            {
              id: 49,
              title: 'standing glute kickbacks right',
              description:
                'Get into all fours, with a straight spine, and contract your core muscles. Extend your right leg back and up until your thigh is parallel with the ground. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position without touching your knee to the ground and repeat.',
              example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_right.gif',
              youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
              quantity: 'x10',
            },
            {
              id: 50,
              title: 'kneeling lunge stretch left',
              description:
                'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
              example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_left.gif',
              youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
              quantity: '00:30',
            },
            {
              id: 51,
              title: 'kneeling lunge stretch right',
              description:
                'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
              example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_right.gif',
              youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
              quantity: '00:30',
            },
            {
              id: 52,
              title: 'bottom leg lift left',
              description: 'Lie on your left side with your head resting on your left hand. Then put your right foot forward on the floor Lift your left leg up and down.',
              example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_left.gif',
              youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
              quantity: 'x12',
            },
            {
              id: 53,
              title: 'bottom leg lift right',
              description: 'Lie on your right side with your head resting on your right hand. Then put your left foot forward on the floor Lift your right leg up and down.',
              example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_right.gif',
              youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
              quantity: 'x12',
            },
            {
              id: 54,
              title: 'split squat left',
              description:
                'From a standing position, take a long step forward as if performing a lunge. The heel of your back foot should be raised. Keeping your torso straight, lower slowly until your back knee almost touches the floor, then push back up.',
              example: '/rs-clone-deploy/assets/gifs/split_squat_left.gif',
              youtube: 'https://www.youtube.com/watch?v=SFSZVKzqnXA',
              quantity: 'x10',
            },
            {
              id: 55,
              title: 'curtsy lunges',
              description:
                'Stand with your feet hip-width apart, hands on your hips. Take a big step back with your right leg, crossing it behind your left. Bend your knees and lower your hips until your left thigh is nearly parallel to the floor. Keep your torso upright and your hips and shoulders as square as possible to the wall in front of you. Then repeat on the other side.',
              example: '/rs-clone-deploy/assets/gifs/curtsy_lunges.gif',
              youtube: 'https://www.youtube.com/watch?v=-rTyKlHjYT8',
              quantity: 'x14',
            },
            {
              id: 56,
              title: 'lunge knee hops right',
              description:
                'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
              example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_right.gif',
              youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
              quantity: 'x12',
            },
            {
              id: 57,
              title: 'lunge knee hops left',
              description:
                'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
              example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_left.gif',
              youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
              quantity: 'x12',
            },
            {
              id: 58,
              title: 'bench glute kick back left',
              description: 'Same with glute kickbacks, just work with a bench.',
              example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_left.gif',
              youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
              quantity: 'x16',
            },
            {
              id: 59,
              title: 'bench glute kick back right',
              description: 'Same with glute kickbacks, just work with a bench.',
              example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_right.gif',
              youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
              quantity: 'x16',
            },
            {
              id: 60,
              title: 'sumo squat',
              description:
                'Start in a traditional squat stance with your feet about shoulder-width apart and toes pointed forward. Clasp your hands together at your chest. Take a step to the side with your right foot until your stance is 3–4 feet wide, or wider than hip width. Wider is OK as long as you can perform the move correctly. Move your hips back slightly and bend your knees as you lower your body into a squat position. Draw your tailbone straight down to the floor. Be mindful to keep your spine neutral, core engaged, and eyes forward throughout the movement. Lower until your thighs are parallel to the floor. You can go lower or shorten the squat if parallel is too low or if you can’t maintain your leg alignmen. Pause in the squat position for a few seconds. Then, engaging your glutes, press up to standing, driving up through your heels.',
              example: '/rs-clone-deploy/assets/gifs/squats.gif',
              youtube: 'https://www.youtube.com/watch?v=Z2F0bArQH5s',
              quantity: 'x15',
            },
            {
              id: 61,
              title: 'single leg bridge left',
              description:
                'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
              example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_left.gif',
              youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
              quantity: 'x12',
            },
            {
              id: 62,
              title: 'single leg bridge right',
              description:
                'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
              example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_right.gif',
              youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
              quantity: 'x12',
            },
            {
              id: 63,
              title: 'jumping squats',
              description: 'Stand with feet shoulder width and knees slightly bent. Start by doing a regular squat. engage your core, and jump up explosively.',
              example: '/rs-clone-deploy/assets/gifs/jumping_squats.webp',
              youtube: 'https://www.youtube.com/watch?v=txLE-jOCEsc',
              quantity: 'x12',
            },
            {
              id: 64,
              title: 'backward lunge',
              description:
                'Stand tall with your feet hip distance apart. Take a large step backward and lower your body toward the floor.  Both legs should be bent at a 90-degree angle at the bottom of the lunge.  Rise back to start and repeat.',
              example: '/rs-clone-deploy/assets/gifs/backward_lunge.gif',
              youtube: 'https://www.youtube.com/watch?v=_LGpDtENZ5U',
              quantity: 'x14',
            },
            {
              id: 65,
              title: 'quad stretch left',
              description:
                'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
              example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
              youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
              quantity: '00:30',
            },
            {
              id: 66,
              title: 'quad stretch right',
              description:
                'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
              example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
              youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
              quantity: '00:30',
            },
            {
              id: 67,
              title: 'frog press',
              description:
                'Lie on your back with your knees bent to 90 degrees, turning them outwards like a frog. Make sure to keep your heels pressed together while flexing your feet towards you. Tighten your stomach and crunch up, lifting your head and shoulders off the floor, holding this position. Place your arms down by your side, hovering just above the floor. Straighten your legs away from your body at a 45-degree angle. Return to the starting position, completing the desired amount of repetitions.',
              example: '/rs-clone-deploy/assets/gifs/frog_press.gif',
              youtube: 'https://www.youtube.com/watch?v=JvA7t9xKWgg',
              quantity: 'x12',
            },
            {
              id: 68,
              title: 'side leg circles left',
              description:
                'Lie on your side, with one leg stacked on top of the other. Extend your bottom arm straight and rest your head on it, while you place your other hand on the floor in front of your body for support. Lift the top leg up and perform leg circles.',
              example: '/rs-clone-deploy/assets/gifs/side_leg_circles_left.gif',
              youtube: 'https://www.youtube.com/watch?v=VgysBPnVJWg',
              quantity: 'x12',
            },
            {
              id: 69,
              title: 'wall sit',
              description:
                "Stand with your back to a wall, feet hip-width apart and slightly in front of you. Lean back into the wall, and slide down like you're sitting down onto a chair. Your knees should bent at 90 degrees with the knees above your ankles. Hold this position for 30 seconds.",
              example: '/rs-clone-deploy/assets/png/wall_sit.png',
              youtube: 'https://www.youtube.com/watch?v=Yp3ZwACK9v4',
              quantity: '00:40',
            },
            {
              id: 70,
              title: 'bridge',
              description:
                'Lie on your back with your knees bent. Tighten the muscles in your stomach. Raise your hips off the floor until they line up with your knees and shoulders. Hold for three deep breaths. Return to the starting position and repeat.',
              example: '/rs-clone-deploy/assets/images/bridge.jpg',
              youtube: 'https://www.youtube.com/watch?v=-KKADnBsPzw',
              quantity: 'x14',
            },
            {
              id: 71,
              title: 'abdominal crunches',
              description:
                'Keep your knees comfortably apart. Fold your arms on your chest and tighten your abdominal muscles. Raise your head and shoulders off of the floor. Hold for three deep breaths, then return to starting position.',
              example: '/rs-clone-deploy/assets/gifs/abdominal_crunches.gif',
              youtube: 'https://www.youtube.com/watch?v=RUNrHkbP4Pc',
              quantity: 'x20',
            },
            {
              id: 72,
              title: 'shoulder stretch left',
              description: 'Bring one arm across your upper body and hold it straight. Grasp the elbow with the other arm and gently pull toward your chest. Hold.',
              example: '/rs-clone-deploy/assets/gifs/shoulders_stretch_left.gif',
              youtube: 'https://www.youtube.com/watch?v=9k0EN2RCGgU',
              quantity: '00:20',
            },
            {
              id: 73,
              title: 'shoulder stretch right',
              description: 'Bring one arm across your upper body and hold it straight. Grasp the elbow with the other arm and gently pull toward your chest. Hold.',
              example: '/rs-clone-deploy/assets/gifs/shoulders_stretch_right.gif',
              youtube: 'https://www.youtube.com/watch?v=9k0EN2RCGgU',
              quantity: '00:20',
            },
            {
              id: 74,
              title: 'triceps stretch left',
              description:
                'Stand with your arms relaxed at your sides. With your affected arm, gently bend your elbow up toward you as far as possible. Your palm should face up. Then straighten your arm as much as you can.',
              example: '/rs-clone-deploy/assets/images/triceps_stretch_left.jpg',
              youtube: 'https://www.youtube.com/watch?v=L9IGOcrdcFk',
              quantity: '00:30',
            },
            {
              id: 75,
              title: 'triceps stretch right',
              description:
                'Stand with your arms relaxed at your sides. With your affected arm, gently bend your elbow up toward you as far as possible. Your palm should face up. Then straighten your arm as much as you can.',
              example: '/rs-clone-deploy/assets/images/tricep_stretch_right.jpg',
              youtube: 'https://www.youtube.com/watch?v=L9IGOcrdcFk',
              quantity: '00:30',
            },
            {
              id: 76,
              title: 'cat cow pose',
              description:
                'Keep your hands shoulder-width apart and your knees directly below your hips. Inhale deeply while curving your lower back and bringing your head up, tilting your pelvis up like a cow. Exhale deeply and bring your abdomen in, arching your spine and bringing your head and pelvis down like a cat. Repeat several times.',
              example: '/rs-clone-deploy/assets/gifs/cat_cow_pose.gif',
              youtube: 'https://www.youtube.com/watch?v=w_UKcI1Ftn8',
              quantity: '00:30',
            },
            {
              id: 77,
              title: 'fire hydrant right',
              description:
                'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
              example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
              youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
              quantity: 'x10',
            },
          ],
        };
      var E = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const q = class {
        constructor() {
          (this.template = new e()),
            (this.exQuantity = ''),
            (this.exTime = ''),
            (this.color = ''),
            (this.image = ''),
            (this.title = ''),
            this.workout,
            (this.workoutBlock = new j()),
            (this.addNewComplex = new P()),
            (this.complex = new C());
        }
        draw(e) {
          var t, i;
          return E(this, void 0, void 0, function* () {
            const o = document.querySelector('main');
            if (!o) return;
            o.classList.add('main'), (o.textContent = '');
            const r = document.createElement('div');
            r.classList.add('training'), o.append(r);
            const a = yield this.addNewComplex.creatingArrayFromData();
            if (e) {
              const o = yield this.transformExercises(e);
              for (let t = 0; t < a[0].block.length; t++) e === a[0].block[t].id && a[0].block[t].exercises.push(...o);
              [...a, ...p].forEach((t) => {
                t.block.forEach((t) => {
                  String(t.id) === e && (this.workout = t);
                });
              });
              const s = yield this.createHeader(e);
              r.append(s);
              const n = document.createElement('div');
              if (
                ((n.className = 'training__exercises exercises'),
                r.append(n),
                null === (t = this.workout) ||
                  void 0 === t ||
                  t.exercises.forEach((t) => {
                    if (e.length > 2) {
                      const e = new I(t, !0);
                      n.append(e.draw());
                    } else {
                      const e = new I(t, !1);
                      n.append(e.draw());
                    }
                  }),
                e.length > 2)
              ) {
                const e = this.workoutBlock.createAddWorkoutPlanCont('Add new exercises', !1);
                e.classList.add('singl-train__plus'),
                  n.append(e),
                  (null === (i = this.workout) || void 0 === i ? void 0 : i.exercises.length) || n.append(this.template.createElement('div', 'singl-train__empty-text', 'Exercise list is empty')),
                  n.classList.add('addit');
              }
              r.append(this.createDetailsModal());
            }
          });
        }
        createHeader(e) {
          return E(this, void 0, void 0, function* () {
            const t = yield this.addNewComplex.creatingArrayFromData(),
              i = yield this.transformExercises(e);
            for (let o = 0; o < t[0].block.length; o++) e === t[0].block[o].id && t[0].block[o].exercises.push(...i);
            [...t, ...p].forEach((t) => {
              t.block.forEach((t) => {
                String(t.id) === e &&
                  ((this.exQuantity = String(t.exercises.length)),
                  (this.exTime = String(Math.round((45 * t.exercises.length) / 60))),
                  (this.color = t.color),
                  (this.image = t.image),
                  (this.title = t.title));
              });
            });
            const o = this.template.createElement('div', 'training__header');
            10 === Number(e)
              ? ((o.style.background = `url(${this.image})`), (o.style.backgroundRepeat = 'no-repeat'), (o.style.backgroundPosition = 'top'), (o.style.backgroundSize = 'cover'))
              : 11 === Number(e)
              ? ((o.style.background = `url(${this.image})`), (o.style.backgroundRepeat = 'no-repeat'), (o.style.backgroundPosition = 'center'), (o.style.backgroundSize = 'cover'))
              : ((o.style.background = `url(${this.image}), ${this.color}`),
                (o.style.backgroundRepeat = 'no-repeat'),
                (o.style.backgroundPosition = 'right bottom'),
                e.length > 2 && (o.style.backgroundPosition = '90% bottom'),
                (o.style.backgroundSize = 'contain'));
            const r = this.template.createElement('div', 'header-upper');
            (r.style.backgroundColor = 'transparent'), o.append(r);
            const a = this.template.createLink('header-upper__return', '/workouts');
            a.addEventListener('click', (e) => {
              e.preventDefault();
              const t = document.querySelector('main');
              t && ((t.innerHTML = ''), me.navigate('workouts'));
            });
            const s = document.createElement('span');
            (s.className = 'header-upper__name'), (s.textContent = this.title);
            const n = this.template.createIcon('header-upper__icon', 'icon-trash');
            n.setAttribute('id', e),
              n.addEventListener('click', () =>
                E(this, void 0, void 0, function* () {
                  yield this.deleteComplex(n);
                  const e = document.querySelector('main');
                  e && ((e.innerHTML = ''), me.navigate('workouts'));
                })
              ),
              r.append(a, s),
              e.length > 2 && r.append(n);
            const l = this.template.createElement('div', 'header-bottom');
            o.append(l);
            const c = this.template.createElement('p', 'header-bottom__name', this.title),
              d = this.template.createElement('p', 'header-bottom__quantity', `${this.exQuantity} exercises`),
              u = this.template.createElement('p', 'header-bottom__time', `${this.exTime} minutes`);
            l.append(c, d, u);
            const h = this.template.createBtn('training__button-start', 'Start now');
            return (
              '0' === this.exTime && (h.disabled = !0),
              h.addEventListener('click', (e) => {
                e.preventDefault();
                const t = document.querySelector('main');
                t && ((t.innerHTML = ''), me.navigate('startTraining'));
              }),
              o.append(h),
              o
            );
          });
        }
        deleteComplex(e) {
          return E(this, void 0, void 0, function* () {
            const t = e.getAttribute('id');
            if (t) {
              yield this.complex.deleteComplex(t);
              const e = yield this.complex.getExercises(t);
              e &&
                e.forEach((e) =>
                  E(this, void 0, void 0, function* () {
                    yield this.complex.deleteExercise(e._id);
                  })
                );
            }
          });
        }
        createDetailsModal() {
          const e = this.template.createElement('div', 'modal-addNewComplex');
          return e.classList.add('invisible'), e;
        }
        transformExercises(e) {
          return E(this, void 0, void 0, function* () {
            const t = yield this.complex.getExercises(e),
              i = [];
            return (
              null == t ||
                t.forEach((e) => {
                  for (let t = 0; t < _.trainings.length; t++)
                    if (e.idExercise === String(_.trainings[t].id)) {
                      const o = {
                        id: _.trainings[t].id,
                        title: _.trainings[t].title,
                        description: _.trainings[t].description,
                        example: _.trainings[t].example,
                        youtube: _.trainings[t].youtube,
                        quantity: e.count,
                        serverId: e._id,
                      };
                      i.push(o);
                    }
                }),
              i
            );
          });
        }
      };
      var S = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      class D {
        constructor() {
          (this.template = new e()), (this.complex = new C());
        }
        createNextPrevBtns(e, t, i, o) {
          const r = this.template.createElement('div', 'buttons-cont'),
            a = this.template.createBtn('next-btn'),
            s = this.template.createIcon('prev-btn__icon', 'icon-arrow_forward_ios');
          a.append(s), e <= 1 && !i && (a.disabled = !0);
          const n = this.template.createBtn('prev-btn'),
            l = this.template.createIcon('prev-btn__icon', 'icon-arrow_back_ios');
          return n.append(l), i || (n.disabled = !0), r.append(n, a), i ? this.slide(a, n, t, e, o) : this.slider(a, n, t, e, i), i && B.changeExerciseContent(n, a), r;
        }
        slider(e, t, i, o, r) {
          !(function () {
            let a = 0;
            e.addEventListener('click', () => {
              if (a < o - 1) {
                (e.disabled = !1), a++, B.changeImgSise(r, a, o), (t.disabled = !1);
                const s = (100 / o) * a;
                (i.style.justifyContent = 'flex-start'), (i.style.transform = `translate(-${s}%)`);
              }
              a >= o - 1 && (e.disabled = !0);
            }),
              t.addEventListener('click', () => {
                if ((a <= o - 1 && (e.disabled = !1), a > 0)) {
                  a--, B.changeImgSise(r, a, o);
                  const e = (100 / o) * a;
                  (i.style.justifyContent = 'flex-start'), (i.style.transform = `translate(-${e}%)`);
                }
                0 === a && (t.disabled = !0);
              });
          })();
        }
        changeImgSise(e, t, i) {
          const o = document.querySelectorAll('.workout-content-container'),
            r = document.querySelectorAll('.workout-plans-png');
          e &&
            (o.forEach((e) => {
              e.classList.remove('largerImg'), e.classList.remove('smallerImg'), e.classList.remove('blur');
            }),
            r.forEach((e) => e.classList.remove('largerPng')),
            o[t].classList.add('smallerImg'),
            o[t].classList.add('blur'),
            t < i - 1 && (r[1 + t].classList.add('largerPng'), o[1 + t].classList.add('largerImg'), t < i - 2 && (o[2 + t].classList.add('smallerImg'), o[2 + t].classList.add('blur'))));
        }
        slide(e, t, i, o, r) {
          let a;
          const s = 100 / o;
          e.addEventListener('click', function () {
            (a = -1), (e.disabled = !0), (i.style.transform = `translate(-${s}%)`), B.changeImgSizeInf('forward');
          }),
            t.addEventListener('click', function () {
              (a = 1), (t.disabled = !0), (i.style.transform = `translate(${s}%)`), B.changeImgSizeInf('backward');
            }),
            i.addEventListener('transitionend', function () {
              -1 === a
                ? e.disabled && (i.firstElementChild && i.appendChild(i.firstElementChild), (e.disabled = !1))
                : 1 === a && t.disabled && (i.lastElementChild && i.prepend(i.lastElementChild), (t.disabled = !1)),
                (i.style.transition = 'none'),
                (i.style.transform = 'translate(0)'),
                setTimeout(function () {
                  i.style.transition = 'ease 0.3s';
                });
            });
        }
        changeImgSizeInf(e) {
          const t = document.querySelectorAll('.workout-content-container'),
            i = document.querySelectorAll('.workout-plans-png');
          t.forEach((e) => {
            e.classList.remove('largerImg'), e.classList.remove('smallerImg');
          }),
            i.forEach((e) => {
              e.classList.remove('largerPng');
            }),
            'forward' === e
              ? (t[3].classList.add('largerImg'),
                i[3].classList.add('largerPng'),
                t[3].classList.remove('blur'),
                t[2].classList.add('smallerImg'),
                t[2].classList.add('blur'),
                t[4].classList.add('smallerImg'),
                t[4].classList.add('blur'))
              : (t[1].classList.add('largerImg'),
                i[1].classList.add('largerPng'),
                t[1].classList.remove('blur'),
                t[0].classList.add('smallerImg'),
                t[0].classList.add('blur'),
                t[2].classList.add('smallerImg'),
                t[2].classList.add('blur'));
        }
        createExercises(e, t) {
          return S(this, void 0, void 0, function* () {
            const i = this.template.createElement('div', 'exercises-container'),
              o = new P(),
              r = yield o.creatingArrayFromData();
            let a = [];
            const s = new q(),
              n = localStorage.getItem('complexId');
            if (n) {
              const e = yield s.transformExercises(JSON.parse(n));
              for (let t = 0; t < r[0].block.length; t++) JSON.parse(n) === r[0].block[t].id && r[0].block[t].exercises.push(...e);
            }
            a = r.length && r[0].block.length ? [...r, ...p] : [...p];
            const l = a[e].block[t];
            if (l.exercises.length)
              for (let e = 0; e < l.exercises.length; e++) {
                const t = l.exercises[e],
                  o = new I(t, !1).draw();
                i.append(o);
              }
            else
              setTimeout(() => {
                document.querySelector('.exercises__startNow-btn').disabled = !0;
              }, 0);
            return i;
          });
        }
        changeExerciseContent(e, t) {
          return S(this, void 0, void 0, function* () {
            const i = new P(),
              o = yield i.creatingArrayFromData();
            let r = [];
            r = o.length && o[0].block.length ? [...o, ...p] : [...p];
            let a = 0,
              s = 0;
            1 === r[a].block.length ? ((a = 1), (s = 1)) : 2 === r[a].block.length ? ((a = 1), (s = 0)) : 0 === r[a].block.length ? ((a = 1), (s = 2)) : ((a = 0), (s = 2)),
              localStorage.setItem('complexId', JSON.stringify(r[a].block[s].id)),
              t.addEventListener('click', () =>
                S(this, void 0, void 0, function* () {
                  (document.querySelector('.exercises__startNow-btn').disabled = !1),
                    s < r[a].block.length - 1 ? s++ : a < r.length - 1 ? ((s = 0), a++) : ((a = 0), (s = 0)),
                    localStorage.setItem('complexId', JSON.stringify(r[a].block[s].id));
                  const e = document.querySelector('.exercises-wrapper'),
                    t = yield B.createExercises(a, s);
                  (e.innerHTML = ''), e.append(t);
                })
              ),
              e.addEventListener('click', () =>
                S(this, void 0, void 0, function* () {
                  (document.querySelector('.exercises__startNow-btn').disabled = !1),
                    s > 0 ? s-- : a > 0 ? (a--, (s = r[a].block.length - 1)) : ((a = r.length - 1), (s = r[a].block.length - 1)),
                    localStorage.setItem('complexId', JSON.stringify(r[a].block[s].id));
                  const e = document.querySelector('.exercises-wrapper'),
                    t = yield B.createExercises(a, s);
                  (e.innerHTML = ''), e.append(t);
                })
              );
          });
        }
        getComplexParam(e) {
          return S(this, void 0, void 0, function* () {
            const t = new P(),
              i = [...(yield t.creatingArrayFromData()), ...p],
              o = [];
            for (let t = 0; t < i.length; t++) for (let r = 0; r < i[t].block.length; r++) i[t].block[r].id === e && o.push(t, r);
            return o;
          });
        }
      }
      const B = new D(),
        L = D;
      var T = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const M = class {
          constructor(t) {
            (this.template = new e()),
              (this.exercise = t),
              (this.backLayer = this.template.createElement('div', 'exercise-modal__backlayer')),
              (this.modal = this.template.createElement('div', 'exercise-modal')),
              (this.addNewComplex = new P()),
              (this.slider = new L()),
              (this.workoutBlock = new j()),
              (this.complex = new C());
          }
          draw(e, t, i) {
            return T(this, void 0, void 0, function* () {
              this.backLayer.append(this.modal);
              const o = localStorage.getItem('complexId'),
                r = this.template.createElement('div', 'dateils__trash-icon');
              r.setAttribute('id', String(e.id)),
                e.serverId && r.setAttribute('serverId', e.serverId),
                (r.innerHTML =
                  '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>trash</title><g id="trash"><path d="M3.883,22.125a2,2,0,0,0,2,1.875H18.121a2,2,0,0,0,2-1.875L21,8H3ZM21,4H18V3a3,3,0,0,0-3-3H9A3,3,0,0,0,6,3V4H3A1,1,0,0,0,3,6H21a1,1,0,0,0,0-2ZM16,4H8V3A1,1,0,0,1,9,2h6a1,1,0,0,1,1,1Z"/></g></svg>'),
                r.addEventListener('click', () =>
                  T(this, void 0, void 0, function* () {
                    if (e.serverId) {
                      yield this.complex.deleteExercise(e.serverId);
                      const t = yield this.complex.getExercises(JSON.parse(String(o)));
                      t && !t.length && (document.querySelector('.training__button-start').disabled = !0);
                    }
                    this.forClickOnDelBtn(), this.createServerExercises(JSON.parse(String(o)));
                  })
                );
              const a = this.template.createBtn('exercise-modal__button-close');
              i || this.modal.append(r), this.modal.append(a);
              const s = document.createElement('img');
              s.className = 'exercise-modal__gif';
              const n = this.exercise.example;
              (s.src = n), this.modal.append(s), this.createExerciseInfo();
              const l = this.template.createElement('p', 'exercise-modal__description', this.exercise.description);
              return (
                this.modal.append(l),
                this.createChangeBlock(t),
                document.body.prepend(this.backLayer),
                a.addEventListener('click', () => {
                  this.closeExerciseModal(), document.querySelector('.modal-addNewComplex').classList.add('invisible');
                }),
                window.addEventListener('click', (e) => {
                  e.target.classList.contains('exercise-modal__backlayer') && this.closeExerciseModal();
                }),
                this.backLayer
              );
            });
          }
          closeExerciseModal() {
            (this.backLayer.style.display = 'none'), document.body.removeChild(this.backLayer);
          }
          createExerciseInfo() {
            const e = this.template.createElement('div', 'exercise-modal__info'),
              t = this.template.createElement('span', 'exercise-modal__name', this.exercise.title),
              i = this.template.createElement('span', 'exercise-modal__quantity', this.exercise.quantity),
              o = this.template.createLink('exercise-modal__link', this.exercise.youtube);
            (o.target = '_blank'), e.append(t, i, o), this.modal.append(e);
          }
          createChangeBlock(e) {
            return T(this, void 0, void 0, function* () {
              const t = this.template.createElement('div', 'exercise-modal__change'),
                i = this.template.createElement('div', 'exercise-modal__counter');
              t.append(i);
              const o = this.template.createBtn('exercise-modal__button-minus', '-'),
                r = this.template.createElement('span', 'exercise-modal__current-quantity', this.exercise.quantity),
                a = this.template.createBtn('exercise-modal__button-plus', '+');
              i.append(o, r, a);
              const s = this.template.createElement('div', 'exercise-modal__buttons'),
                n = this.template.createBtn('exercise-modal__button-cancel', 'cancel'),
                l = this.template.createBtn('exercise-modal__button-save', 'save');
              l.setAttribute('id', String(this.exercise.id)),
                l.addEventListener('click', () =>
                  T(this, void 0, void 0, function* () {
                    const t = document.querySelector('.exercise-modal__current-quantity'),
                      i = document.querySelector('.dateils__trash-icon');
                    document.querySelector('.training__button-start').disabled = !1;
                    const o = l.getAttribute('id'),
                      r = JSON.parse(String(localStorage.getItem('complexId')));
                    if (e) o && r && (yield this.complex.createExercise({ idComplex: r, idExercise: o, count: t.innerHTML }));
                    else {
                      const e = i.getAttribute('serverId');
                      o && r && e && (yield this.complex.updateExercise(e, { idComplex: r, idExercise: o, count: t.innerHTML }));
                    }
                    this.forClickOnSaveBtn(), this.createServerExercises(r);
                  })
                ),
                s.append(n, l),
                t.append(s),
                n.addEventListener('click', (e) => {
                  e.preventDefault(), this.closeExerciseModal();
                }),
                a.addEventListener('click', this.addExerciseQuantity),
                o.addEventListener('click', this.reduceExerciseQuantity),
                this.modal.append(t);
            });
          }
          reduceExerciseQuantity() {
            const e = document.querySelector('.exercise-modal__current-quantity'),
              t = e.textContent;
            if (t.toLowerCase().includes('x')) {
              const i = Number(t.slice(1));
              if (1 === i) return;
              e.textContent = 'X' + (i - 1);
            } else {
              let i = t.slice(0, 2),
                o = t.slice(3);
              if (1 === Number(o) && 0 === Number(i)) return;
              0 === Number(o) ? ((i = Number(i) < 10 ? '0' + (Number(i) - 1) : '' + (Number(i) - 1)), (o = '59')) : (o = Number(o) <= 10 ? '0' + (Number(o) - 1) : '' + (Number(o) - 1)),
                (e.textContent = `${i}:${o}`);
            }
          }
          addExerciseQuantity() {
            const e = document.querySelector('.exercise-modal__current-quantity'),
              t = e.textContent;
            if (t.toLowerCase().includes('x')) {
              const i = Number(t.slice(1));
              e.textContent = `X${i + 1}`;
            } else {
              let i = t.slice(0, 2),
                o = t.slice(3);
              59 === Number(o) ? ((i = Number(i) < 10 ? `0${Number(i) + 1}` : `${Number(i) + 1}`), (o = '00')) : (o = Number(o) < 9 ? `0${Number(o) + 1}` : `${Number(o) + 1}`),
                (e.textContent = `${i}:${o}`);
            }
          }
          forClickOnSaveBtn() {
            return T(this, void 0, void 0, function* () {
              this.closeExerciseModal();
            });
          }
          forClickOnDelBtn() {
            return T(this, void 0, void 0, function* () {
              this.closeExerciseModal();
            });
          }
          createServerExercises(e) {
            return T(this, void 0, void 0, function* () {
              const t = yield this.complex.getExercises(e),
                i = document.querySelector('.header-bottom__quantity'),
                o = document.querySelector('.header-bottom__time'),
                r = (document.querySelector('.exercises-wrapper'), document.querySelector('.training__exercises'));
              if (((r.innerHTML = ''), t)) {
                (i.innerHTML = String(t.length)), (o.innerHTML = String(Math.round((45 * t.length) / 60)));
                for (let e = 0; e < t.length; e++) {
                  const i = t[e].idExercise,
                    o = t[e]._id,
                    a = t[e].count;
                  _.trainings.forEach((e) => {
                    if (String(e.id) === i) {
                      const t = new I(this.createObj(e, o, a), !0).draw();
                      r.append(t);
                    }
                  });
                }
                const e = this.workoutBlock.createAddWorkoutPlanCont('Add new exercises', !1);
                r.append(e);
              }
            });
          }
          createObj(e, t, i) {
            return { id: e.id, title: e.title, description: e.description, example: e.example, youtube: e.youtube, quantity: i, serverId: t };
          }
        },
        I = class {
          constructor(t, i) {
            (this.template = new e()), (this.container = this.template.createElement('div', 'exercise')), (this.container.id = `${t.id}`), (this.exercise = t), (this.flag = i);
          }
          draw() {
            const e = this.template.createElement('div', 'exercise__info');
            this.container.append(e);
            const t = this.template.createElement('p', 'exercise__name', this.exercise.title);
            e.append(t);
            const i = this.template.createElement('p', 'exercise__quantity', this.exercise.quantity);
            e.append(i);
            const o = this.template.createElement('div', 'exercise__gif');
            this.container.append(o);
            const r = document.createElement('img'),
              a = this.exercise.example;
            return (
              (r.src = a),
              o.append(r),
              this.container.addEventListener('click', (e) => {
                e.preventDefault(), this.flag ? new M(this.exercise).draw(this.exercise, !1) : new A(this.exercise).draw();
              }),
              this.container
            );
          }
        };
      function $(e) {
        localStorage.setItem('token', e.token), localStorage.setItem('userId', e.userId);
      }
      function N() {
        const e = localStorage.getItem('userId');
        if (e) return e;
      }
      var H = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const P = class {
          constructor() {
            (this.template = new e()), (this.complex = new C());
          }
          showExercises(e) {
            const t = this.template.createElement('div', 'exercises-wrapper');
            for (let i = 0; i < _.trainings.length; i++) {
              const o = this.template.createElement('div', 'wrap-exercise'),
                r = _.trainings[i],
                a = new I(r, e).draw();
              o.append(a), t.append(o);
              const s = this.template.createBtn('add-exerc-btn', 'add');
              s.addEventListener('click', () => {
                new M(r).draw(_.trainings[i], !0, !0);
              }),
                o.append(s);
            }
            return t;
          }
          createExercisesArray(e) {
            const t = e.getAttribute('id');
            null == t || t.split(' ')[0], null == t || t.split(' ')[1], null == t || t.split(' ')[2];
          }
          createComplexNameModal() {
            const e = this.template.createElement('div', 'complex-name-overlay');
            return document.querySelector('.main').append(e), e;
          }
          addComplexInLocalStore() {
            return H(this, void 0, void 0, function* () {
              const e = document.querySelector('.modal-addNewComplex__input'),
                t = N();
              t && (yield this.complex.createUserInfo({ userId: t, name: e.value || 'no name' }));
            });
          }
          createSelectExercises() {
            return this.template.createElement('div', 'singl-train__empty-text', 'Select An Exercise');
          }
          getComplexes() {
            return H(this, void 0, void 0, function* () {
              const e = N();
              if (e) return yield this.complex.getComplex(e);
            });
          }
          creatingArrayFromData() {
            return H(this, void 0, void 0, function* () {
              const e = yield this.getComplexes(),
                t = [{ title: 'Workouts you created', image: '', block: [] }];
              if (void 0 !== e)
                for (let i = 0; i < Number(e.length); i++) {
                  const o = {
                    id: e[i]._id,
                    title: e[i].name,
                    exercisesAmt: '0',
                    exercisesTime: '0',
                    image: '/rs-clone-deploy/assets/png/whole_body2.png',
                    color: 'linear-gradient(90deg, rgb(241, 147, 215) 0%, rgb(245, 237, 238) 100%)',
                    exercises: [],
                  };
                  t[0].block.push(o);
                }
              return t;
            });
          }
        },
        j = class {
          constructor() {
            (this.template = new e()), (this.addNewComplex = new P());
          }
          createWorkoutBlockCont(e) {
            const t = this.template.createElement('div', 'workout-block-cont');
            return t.append(this.createTitle(e)), t;
          }
          createTitle(e) {
            const t = this.template.createElement('div', 'workout-block-title'),
              i = this.template.createElement('span', 'span', e);
            return t.append(i), t;
          }
          createWorkoutContent(e, t, i, o, r) {
            const a = this.template.createElement('div', 'workout-content-container');
            a.setAttribute('name', e.title), a.append(this.createTextBlock(e.title, String(e.exercises.length), String(Math.round((45 * e.exercises.length) / 60)), i, e.complexityLevel));
            const s = e.title.split(' ')[0];
            return (
              ('sleepy time stretch' !== a.getAttribute('name') && 'morning warmup' !== a.getAttribute('name')) || (a.style.background = '#fff'),
              t < 5 && a.append(this.createPngImage(t, i, s, o, r)),
              a
            );
          }
          createTextBlock(e, t, i, o, r) {
            const a = this.template.createElement('div', 'text-block'),
              s = this.template.createElement('p', 'workout-content-title', e);
            return a.append(s, this.createExercCont(t), this.createTimeCont(i)), !0 === r && a.append(this.createLightnings(o)), a;
          }
          createPngImage(e, t, i, o, r) {
            let a;
            a = r - 1 - e == 3 ? g : r - 1 - e == 2 ? m : r - 1 - e == 1 ? y : r - 1 - e == 0 ? (0 === t ? w : b) : f;
            const s = this.template.createImage(a, 'abs image', 'workout-plans-png');
            return s.classList.add(i), s.src === f && (s.style.right = '-2px'), o && s.classList.add('adaptPng'), s;
          }
          createExercCont(e) {
            const t = this.template.createElement('div', 'descr-cont'),
              i = this.template.createElement('div', 'barbell');
            i.innerHTML =
              '<?xml version="1.0" encoding="UTF-8" standalone="no" ?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="60" height="60" viewBox="0 0 400 400" xml:space="preserve">\n<desc>Created with Fabric.js 3.6.2</desc>\n<defs>\n</defs>\n<g transform="matrix(0.42 0 0 0.42 200 200)"  >\n<path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(58, 57, 58); fill-rule: nonzero; opacity: 1;"  transform=" translate(-256, -256)" d="M 467 176 a 29.94 29.94 0 0 0 -25.32 12.5 a 2 2 0 0 1 -3.64 -1.14 V 150.71 c 0 -20.75 -16.34 -38.21 -37.08 -38.7 A 38 38 0 0 0 362 150 v 82 a 2 2 0 0 1 -2 2 H 152 a 2 2 0 0 1 -2 -2 V 150.71 c 0 -20.75 -16.34 -38.21 -37.08 -38.7 A 38 38 0 0 0 74 150 v 37.38 a 2 2 0 0 1 -3.64 1.14 A 29.94 29.94 0 0 0 45 176 c -16.3 0.51 -29 14.31 -29 30.62 v 98.72 c 0 16.31 12.74 30.11 29 30.62 a 29.94 29.94 0 0 0 25.32 -12.5 A 2 2 0 0 1 74 324.62 v 36.67 C 74 382 90.34 399.5 111.08 400 A 38 38 0 0 0 150 362 V 280 a 2 2 0 0 1 2 -2 H 360 a 2 2 0 0 1 2 2 v 81.29 c 0 20.75 16.34 38.21 37.08 38.7 A 38 38 0 0 0 438 362 V 324.62 a 2 2 0 0 1 3.64 -1.14 A 29.94 29.94 0 0 0 467 336 c 16.3 -0.51 29 -14.31 29 -30.62 V 206.64 C 496 190.33 483.26 176.53 467 176 Z" stroke-linecap="round" />\n</g>\n</svg>';
            const o = this.template.createElement('p', 'desctiption-text', `${e} exercises`);
            return t.append(i, o), t;
          }
          createTimeCont(e) {
            const t = this.template.createElement('div', 'descr-cont'),
              i = this.template.createElement('div', 'descr-time');
            (i.innerHTML =
              '<?xml version="1.0" encoding="iso-8859-1"?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t width="35px" height="35px" viewBox="0 0 510 510" style="enable-background:new 0 0 510 510;" xml:space="preserve">\n<g>\n\t<g id="access-time">\n\t\t<path style="fill-opacity:0.9;" d="M255,0C114.75,0,0,114.75,0,255s114.75,255,255,255s255-114.75,255-255S395.25,0,255,0z\n\t\t\t M255,459c-112.2,0-204-91.8-204-204S142.8,51,255,51s204,91.8,204,204S367.2,459,255,459z"/>\n\t\t<polygon style="fill-opacity:0.9;" points="267.75,127.5 229.5,127.5 229.5,280.5 362.1,362.1 382.5,328.95 267.75,260.1"/>\n\t</g>\n</g>\n</svg>\n'),
              (i.style.fill = 'rgb(58, 57, 58)');
            const o = this.template.createElement('p', 'desctiption-text', `${e} minutes`);
            return t.append(i, o), t;
          }
          createLightnings(e) {
            const t = this.template.createElement('div', 'lightnings-cont');
            for (let i = 0; i < 4; i++) {
              const o = this.template.createElement('div', 'lightning');
              (o.innerHTML =
                '<?xml version="1.0" encoding="iso-8859-1"?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t width="30px" height="30px" viewBox="0 0 286.9 286.9" style="enable-background:new 0 0 286.9 286.9;" xml:space="preserve"\n\t>\n<g>\n\t<polygon points="248.65,76.5 181.65,76.5 210.35,0 95.65,0 38.25,153 86.05,153 38.25,286.9 \t"/>\n</g>\n</svg>\n'),
                (o.style.fill = i <= e ? 'rgb(58, 57, 58)' : 'rgb(158, 156, 158)'),
                t.append(o);
            }
            return t;
          }
          colorBackground(e) {
            const t = e.getAttribute('name');
            let i = '';
            t && (i = t.split(' ')[1]),
              (e.style.background =
                'beginner' === i
                  ? 'linear-gradient(90deg, rgba(135,254,252,1) 0%, rgba(233,244,243,1) 100%)'
                  : 'intermediate' === i
                  ? 'linear-gradient(90deg, rgba(135,195,254,1) 0%, rgba(233,244,243,1) 100%)'
                  : 'advanced' === i
                  ? 'linear-gradient(90deg, rgba(254,151,135,1) 0%, rgba(247,242,242,1) 100%)'
                  : 'Warmup' === i || 'Time' === i
                  ? 'linear-gradient(90deg, rgba(128,27,150,0.75674019604313) 0%, rgba(214,189,221,1) 78%)'
                  : ' linear-gradient(90deg, rgba(241,147,215,1) 0%, rgba(245,237,238,1) 100%)');
          }
          createAddWorkoutPlanCont(e, t) {
            const i = this.template.createElement('div', 'add-workout-plans-cont'),
              o = this.template.createElement('p', 'add-workouts-text', e),
              r = this.template.createElement('div', 'plus-in-circle');
            return (
              (r.innerHTML =
                '<?xml version="1.0" encoding="utf-8"?>\n<svg width="45px" height="45px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n<path d="M13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8V11H8C7.44772 11 7 11.4477 7 12C7 12.5523 7.44772 13 8 13H11V16C11 16.5523 11.4477 17 12 17C12.5523 17 13 16.5523 13 16V13H16C16.5523 13 17 12.5523 17 12C17 11.4477 16.5523 11 16 11H13V8Z"/>\n<path fill-rule="evenodd" clip-rule="evenodd" d="M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2ZM4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12Z"/>\n</svg>'),
              i.append(o, r),
              r.addEventListener('click', () => {
                this.clickOnPlus(t);
              }),
              i
            );
          }
          clickOnPlus(e) {
            const t = document.querySelector('.modal-addNewComplex');
            if (e) (document.querySelector('.modal-addNewComplex__input').value = ''), t.classList.remove('invisible');
            else {
              const e = document.querySelector('.training__exercises');
              (e.innerHTML = ''), e.append(this.addNewComplex.createSelectExercises(), this.addNewComplex.showExercises(!1));
            }
          }
        };
      var V = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      var z = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      var F = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      var U = i(545);
      const Y = i.n(U)();
      var O = i(379),
        R = i.n(O),
        K = i(102);
      R()(K.Z, { insert: 'head', singleton: !1 }), K.Z.locals;
      var W = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const G = class {
          constructor() {
            (this.template = new e()), (this.mainClass = 'modal');
          }
          createModal(e, t, i) {
            const o = this.template.createElement('div', this.mainClass);
            o.id = e;
            const r = this.createBackDrop(e, i),
              a = this.createModalInner(e, i);
            return a.append(t), o.append(r, a), o;
          }
          createBackDrop(e, t) {
            const i = this.template.createElement('div', `${this.mainClass}__backdrop`);
            return t ? ((i.onclick = r(e)), i) : i;
          }
          createModalInner(e, t) {
            const i = this.template.createElement('div', `${this.mainClass}__inner`);
            if (t) {
              const t = this.createIconClose(),
                o = this.template.createBtn('btn-close', t);
              return (o.onclick = r(e)), i.append(o), i;
            }
            return i;
          }
          createIconClose() {
            return this.template.createElement('i', 'icon-close');
          }
        },
        J = new e();
      function Q({ mainClass: e, className: i, attributes: o, imgSrc: r, imgAlt: a, validate: s, units: n, classNameUnits: l }) {
        const c = J.createElement('div', `${e}__input`);
        t(c, i);
        const d = J.createElement('div', `${e}__wrapper`),
          u = (function (e, t) {
            const i = document.createElement('input');
            return (
              i.classList.add(`${e}__input-item`),
              (function (e, t) {
                for (const i in t) e.setAttribute(i, t[i]);
              })(i, t),
              i
            );
          })(e, o),
          h = J.createElement('span', `${e}__error`),
          p = (function (e, t) {
            return J.createElement('span', `${t}`, e);
          })(n, l);
        s &&
          (u.onchange = () => {
            const e = s(u.value, n);
            e.res ? (u.classList.remove('error'), (h.textContent = '')) : (u.classList.add('error'), (h.textContent = e.message || ''));
          });
        const g = J.createImage(r, a, `${e}__img`);
        return d.append(g, u, p), c.append(d, h), c;
      }
      function Z(e) {
        return /.+@.+\..+/i.test(e) ? { res: !0 } : { res: !1, message: 'Please enter a valid email' };
      }
      function X(e) {
        return e.length < 6 ? { res: !1, message: 'Password must not be less than 6 characters' } : e.includes(' ') ? { res: !1, message: 'Password must not contain spaces' } : { res: !0 };
      }
      function ee(e, t) {
        const i = 'inches' === t ? 2.54 * Number(e) : Number(e);
        return i < 50 || i > 600 ? { res: !1, message: 'Enter the correct height' } : { res: !0 };
      }
      function te(e, t) {
        const i = 'Lbs' === t ? 0.45 * Number(e) : Number(e);
        return i < 1 || i > 1500 ? { res: !1, message: 'Enter the correct weight' } : { res: !0 };
      }
      var ie = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      var oe = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const re = class {
        constructor(t) {
          (this.template = new e()),
            (this.exerciseBlock = this.template.createElement('div', 'exercise-block')),
            (this.counter = this.template.createElement('div', 'exercise-block__counter')),
            (this.exercise = t),
            this.interval;
        }
        draw() {
          this.createBlocksHeader();
          const e = document.createElement('img');
          e.className = 'exercise-block__gif';
          const t = this.exercise.example;
          return (e.src = t), this.exerciseBlock.append(e), this.createExerciseInfo(), this.createCounter(), this.createNavigationButtons(), this.exerciseBlock;
        }
        createBlocksHeader() {
          const e = this.template.createElement('div', 'exercise-block__header');
          this.exerciseBlock.append(e);
          const t = this.template.createBtn('exercise-block__button-return');
          t.addEventListener('click', (e) => {
            e.preventDefault();
            const t = document.querySelector('main');
            t && ((t.innerHTML = ''), me.navigate('exercises'));
          });
          const i = this.template.createElement('div', 'exercise-block__settings-block'),
            o = this.template.createBtn('exercise-block__volume'),
            r = localStorage.getItem('sound');
          (o.style.background = 'muted' === r ? 'url(/rs-clone-deploy/assets/svg/mute.svg)' : 'url(/rs-clone-deploy/assets/svg/volume.svg)'),
            o.addEventListener('click', () => {
              this.sound(o);
            });
          const a = this.template.createBtn('exercise-block__settings');
          a.addEventListener('click', () => {
            document.querySelector('.settingsModal').classList.remove('invisible');
          }),
            i.append(o, a),
            e.append(t, i);
        }
        createExerciseInfo() {
          const e = this.template.createElement('div', 'exercise-block__info'),
            t = this.template.createElement('div', 'exercise-block__name', this.exercise.title),
            i = this.template.createElement('div', 'exercise-block__extra'),
            o = this.template.createLink('exercise-block__info-link', '#', 'Info');
          o.addEventListener('click', (e) => {
            e.preventDefault(), new A(this.exercise).draw();
          });
          const r = this.template.createLink('exercise-block__youtube', this.exercise.youtube, 'Watch');
          (r.target = '_blank'), i.append(o, r), e.append(t, i), this.exerciseBlock.append(e, i);
        }
        createCounter() {
          const e = this.template.createElement('span', 'exercise-block__current-quantity', this.exercise.quantity);
          if ((this.counter.append(e), this.exercise.quantity.toLowerCase().includes('x'))) {
            const e = this.template.createBtn('exercise-block__button-done', 'Done');
            e.addEventListener('click', () => {
              this.playDoneBtn();
            }),
              this.counter.append(e);
          } else {
            const e = this.createCountdownBar();
            this.counter.append(e), (this.counter.style.pointerEvents = 'none');
          }
          this.exerciseBlock.append(this.counter);
        }
        createCountdownBar() {
          const e = this.template.createElement('div', 'exercise-block__time-bar'),
            t = this.template.createElement('div', 'exercise-block__track'),
            i = this.template.createBtn('exercise-block__button-pause', 'Pause'),
            o = this.template.createBtn('exercise-block__button-next', 'Next');
          return e.append(t, i, o), e;
        }
        createNavigationButtons() {
          const e = this.template.createElement('div', 'exercise-block__buttons'),
            t = this.template.createBtn('exercise-block__button-prev', 'Previous'),
            i = this.template.createElement('div', 'exercise-block__delim'),
            o = this.template.createBtn('exercise-block__button-skip', 'Skip');
          e.append(t, i, o), this.exerciseBlock.append(e);
        }
        hideExerciseLinks() {
          document.querySelector('.exercise-block__extra').style.visibility = 'hidden';
        }
        showExerciseLinks() {
          const e = document.querySelector('.exercise-block__extra');
          e && (e.style.visibility = 'visible');
        }
        showNextButton() {
          const e = document.querySelector('.exercise-block__button-next');
          e && (e.style.display = 'block');
        }
        disablePreviousButton() {
          const e = document.querySelector('.exercise-block__button-prev');
          e && (e.classList.add('inactive'), (e.disabled = !0));
        }
        enablePreviousButton() {
          const e = document.querySelector('.exercise-block__button-prev');
          e && (e.classList.remove('inactive'), (e.disabled = !1));
        }
        disableSkipButton() {
          const e = document.querySelector('.exercise-block__button-skip');
          e && (e.classList.add('inactive'), (e.disabled = !0));
        }
        enableSkipButton() {
          const e = document.querySelector('.exercise-block__button-skip');
          e && (e.classList.remove('inactive'), (e.disabled = !1));
        }
        disablePauseButton() {
          const e = document.querySelector('.exercise-block__button-pause');
          e && (e.classList.add('inactive'), (e.disabled = !0));
        }
        enablePauseButton() {
          const e = document.querySelector('.exercise-block__button-pause');
          e && (e.classList.remove('inactive'), (e.disabled = !1));
        }
        createThreeCount() {
          const e = this.template.createElement('div', 'counter-three');
          this.counter.append(e);
          let t = 3;
          (e.textContent = `${t}`), e.classList.add('fading');
          const i = () => {
            (t -= 1), (e.textContent = `${t}`);
          };
          e.addEventListener('animationiteration', i), e.addEventListener('animationend', i);
        }
        createCountDown() {
          const e = this.template.createElement('div', 'ready-text', 'ready to go'),
            t = this.template.createElement('div', 'countdown');
          this.counter.append(e, t);
          const i = this.template.createElement('div', 'countdown__circle');
          t.append(i);
          const o = this.template.createElement('div', 'countdown__dot'),
            r = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),
            a = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
          a.setAttribute('cx', '70'), a.setAttribute('cy', '70'), a.setAttribute('r', '70');
          const s = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
          s.setAttribute('cx', '70'), s.setAttribute('cy', '70'), s.setAttribute('r', '70'), r.append(a, s);
          const n = this.template.createElement('div', 'countdown__number', '10');
          i.append(o, r, n);
          const l = setInterval(() => {
            const i = Number(n.textContent) - 1;
            0 === i && (clearInterval(l), (t.style.display = 'none'), (e.style.display = 'none'), this.showExerciseLinks(), this.enableSkipButton(), document.querySelector('main')),
              (n.textContent = `${i}`),
              (s.style.strokeDashoffset = '' + (440 - (440 * i) / 10)),
              (o.style.transform = `rotateZ(${36 * i}deg)`);
          }, 1e3);
        }
        sound(e) {
          'muted' === localStorage.getItem('sound')
            ? ((e.style.background = 'url(/rs-clone-deploy/assets/svg/volume.svg)'), localStorage.setItem('sound', 'unmuted'))
            : ((e.style.background = 'url(/rs-clone-deploy/assets/svg/mute.svg)'), localStorage.setItem('sound', 'muted'));
        }
        playDoneBtn() {
          const e = new Audio(),
            t = localStorage.getItem('sound');
          (e.src = '/rs-clone-deploy/assets/sounds/done.mp3'), ('unmuted' !== t && t) || e.play();
        }
      };
      var ae = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      var se = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const ne = new (class {
          constructor() {
            (this.authorization = new h()), (this.mainPageElement = document.createElement('div')), this.mainPageElement.classList.add('main-page'), (this.template = new e());
          }
          createIntroSection() {
            const e = document.createElement('section');
            e.className = 'main__intro intro';
            const t = this.template.createElement('div', 'intro__wrapper');
            e.append(t);
            const i = this.template.createElement('div', 'intro__left');
            t.append(i);
            const o = this.template.createVideo(s);
            i.append(o);
            const r = this.template.createVideo(n);
            i.append(r);
            const a = this.template.createElement('div', 'intro__center');
            t.append(a);
            const d = this.template.createElement('h2', 'intro__text');
            (d.innerHTML = 'Find Your Inner Energy and Strength.<br> Join Our Comunity for Support.'), a.append(d);
            const u = this.template.createLink('intro__link', 'https://play.google.com/store/apps/details?id=com.betterlifewithapps.womenworkouts&hl=en&gl=US');
            (u.target = '_blank'), a.append(u);
            const h = this.template.createElement('div', 'intro__left');
            t.append(h);
            const p = this.template.createVideo(l);
            h.append(p);
            const g = this.template.createVideo(c);
            h.append(g), this.mainPageElement.append(e);
          }
          createAboutSection() {
            const e = document.createElement('section');
            e.className = 'main__about about';
            const t = this.template.createElement('div', 'about__wrapper');
            e.append(t);
            const i = this.template.createElement('div', 'about__info');
            t.append(i);
            const o = this.template.createElement('h3', 'about__title', 'Why Our App?');
            i.append(o);
            const r = document.createElement('p');
            (r.className = 'about__text'),
              (r.innerHTML =
                "The best way to loose wight and burn fat is to choose exercise routines that incorporate many muscle groups and will spike your heart rate.<br> \n      In our application we have chosen the best exercises that can surve this goal.<br>\n      They burn your fat and tone your entire body, and the best part - <b>you don't need any exercise equipment at all!</b>"),
              i.append(r);
            const a = this.template.createElement('div', 'about__picture');
            t.append(a);
            const s = document.createElement('img');
            (s.src = d), a.append(s), this.mainPageElement.append(e);
          }
          createFeaturesSection() {
            const e = document.createElement('section');
            e.className = 'main__features features';
            const t = this.template.createElement('div', 'features__wrapper');
            e.append(t);
            const i = document.createElement('ul');
            (i.className = 'features__list'),
              t.append(i),
              [
                'The best app for female fitness, weight loss and health',
                'Beginner, Intermediate and Advanced routines',
                'Workout at home & get your body fit on',
                'Track your weight and bmi',
              ].forEach((e) => {
                const t = document.createElement('li');
                (t.className = 'features__list-item'), (t.textContent = e), i.append(t);
              }),
              this.mainPageElement.append(e);
          }
          draw() {
            const e = document.querySelector('main');
            e &&
              (e.classList.add('main'),
              (e.innerHTML = ''),
              (this.mainPageElement.textContent = ''),
              this.createIntroSection(),
              this.createAboutSection(),
              this.createFeaturesSection(),
              e.append(this.mainPageElement));
          }
        })(),
        le = new (class {
          draw() {
            const e = document.querySelector('main');
            if (!e) return;
            e.textContent = '';
            const t = document.createElement('div');
            e.append(t), (t.className = 'error-wrapper');
          }
        })(),
        ce = new (class {
          constructor() {
            (this.template = new e()), (this.workoutBlock = new j()), (this.slider = new L()), (this.addNewComplex = new P()), (this.complex = new C());
          }
          draw() {
            return V(this, void 0, void 0, function* () {
              const e = document.querySelector('main');
              if (!e) return;
              e.classList.add('main'), (e.textContent = '');
              const t = document.createElement('div');
              t.classList.add('workout-plans-page'),
                e.append(t),
                t.append(this.createTitle(), this.workoutBlock.createAddWorkoutPlanCont('Add new workout', !0), yield this.createWrapper(), yield this.createModal());
            });
          }
          createTitle() {
            return this.template.createElement('h1', 'page-title', 'Workout Plans');
          }
          createWrapper() {
            return V(this, void 0, void 0, function* () {
              const e = this.template.createElement('div', 'trainings__content-wrapper');
              return e.append(yield this.createContent()), e;
            });
          }
          createContent() {
            return V(this, void 0, void 0, function* () {
              const e = this.template.createElement('div', 'workout-content-cont'),
                t = yield this.addNewComplex.creatingArrayFromData();
              for (let e = 0; e < t[0].block.length; e++) {
                const i = String(t[0].block[e].id),
                  o = new q(),
                  r = yield o.transformExercises(i);
                for (let e = 0; e < t[0].block.length; e++) i === t[0].block[e].id && t[0].block[e].exercises.push(...r);
              }
              let i = [];
              i = t.length && t[0].block.length ? [...t, ...p] : [...p];
              for (let t = 0; t < i.length; t++) {
                const o = this.workoutBlock.createWorkoutBlockCont(i[t].title),
                  r = this.template.createElement('div', 'workout-wrapper');
                o.append(r), e.append(o);
                const a = this.slider.createNextPrevBtns(i[t].block.length, r, !1, r);
                o.append(a);
                for (let e = 0; e < i[t].block.length; e++) {
                  const o = this.template.createElement('a', 'link-to-exerc'),
                    a = i[t].block[e].id;
                  o.addEventListener('click', (e) => {
                    e.preventDefault();
                    const t = document.querySelector('main');
                    t && ((t.innerHTML = ''), me.navigate(`workouts/${a}`)), localStorage.setItem('complexId', JSON.stringify(a));
                  });
                  const s = i[t].block[e],
                    n = this.workoutBlock.createWorkoutContent(s, t, e, !1, i.length);
                  this.workoutBlock.colorBackground(n), o.append(n), r.append(o);
                }
              }
              return e;
            });
          }
          createModal() {
            return V(this, void 0, void 0, function* () {
              const e = this.template.createElement('div', 'modal-addNewComplex');
              e.classList.add('invisible');
              const t = this.template.createElement('div', 'modal-addNewComplex__addName'),
                i = this.template.createElement('h2', 'modal-addNewComplex__title', 'Create New Workout'),
                o = document.createElement('input');
              (o.placeholder = 'Workout Name'), (o.className = 'modal-addNewComplex__input');
              const r = this.template.createElement('div', 'modal-addNewComplex__btns'),
                a = this.template.createBtn('modal-addNewComplex__cancel', 'Cancel');
              a.classList.add('btn'),
                a.classList.add('btn--second'),
                a.addEventListener('click', () => {
                  e.classList.add('invisible');
                });
              const s = this.template.createBtn('modal-addNewComplex__create', 'Create');
              return (
                s.classList.add('btn'),
                s.addEventListener('click', () =>
                  V(this, void 0, void 0, function* () {
                    yield this.addNewComplex.addComplexInLocalStore(), e.classList.add('invisible');
                    const t = document.querySelector('.trainings__content-wrapper');
                    (t.innerHTML = ''), t.append(yield this.createContent());
                  })
                ),
                r.append(a, s),
                t.append(i, o, r),
                e.append(t),
                e
              );
            });
          }
        })(),
        de = new q(),
        ue = new (class {
          constructor() {
            (this.template = new e()), (this.workoutBlock = new j()), (this.slider = new L()), (this.addNewComplex = new P()), (this.complex = new C());
          }
          draw() {
            return z(this, void 0, void 0, function* () {
              document.body.classList.remove('loaded'), this.getDayOfAWeek();
              const e = document.querySelector('main');
              if (!e) return;
              e.classList.add('main'), (e.textContent = '');
              const t = this.template.createElement('div', 'for-decor'),
                i = document.createElement('div');
              i.classList.add('exercises-page');
              const o = yield this.createMiniHeader(),
                r = yield this.createWeekGoalCont();
              t.append(this.createDecorationEl()),
                o && i.append(o),
                r && i.append(r),
                i.append(yield this.createExercisesBlock(), this.createStartBtn(), yield this.createExercisesCont()),
                this.activePreloader(),
                t.append(i),
                e.append(t);
            });
          }
          activePreloader() {
            document.body.classList.add('loaded_hiding'),
              setTimeout(function () {
                document.body.classList.add('loaded'), document.body.classList.remove('loaded_hiding');
              }, 500);
          }
          createMiniHeader() {
            return z(this, void 0, void 0, function* () {
              const e = yield this.getCompletesExercisesStat(),
                t = this.template.createElement('div', 'mini-header-cont');
              if (e) {
                const i = this.miniHeaderBlock('/rs-clone-deploy/assets/png/weight2.png', String(e.totalCompletedComplexes), 'Workouts'),
                  o = this.miniHeaderBlock('/rs-clone-deploy/assets/png/stopwatch.png', String(e.totalTime.hours), 'h'),
                  r = this.template.createElement('div', 'stat-wrapper'),
                  a = this.template.createElement('div', 'stat-number', String(e.totalTime.minutes)),
                  s = this.template.createElement('p', 'stat-title', 'min');
                return r.append(a, s), o.append(r), t.append(i, o), t;
              }
            });
          }
          miniHeaderBlock(e, t, i) {
            const o = this.template.createElement('div', 'mini-workouts-cont'),
              r = this.template.createImage(e, 'barbell', 'mini-cont-img'),
              a = this.template.createElement('div', 'stat-wrapper'),
              s = this.template.createElement('div', 'stat-number', t),
              n = this.template.createElement('p', 'stat-title', i);
            return a.append(s, n), o.append(r, a), o;
          }
          createWeekGoalCont() {
            return z(this, void 0, void 0, function* () {
              const e = N();
              if (!e) return;
              const t = yield this.complex.getWeeklyStatistic(e),
                i = this.template.createElement('div', 'week-goal-cont'),
                o = this.template.createElement('div', 'week-goal-stat'),
                r = this.template.createElement('p', 'week-goal-text', 'Week Goal'),
                a = this.template.createElement('div', 'week-goal-num', `${null == t ? void 0 : t.weeklyWorkouts.length}/${null == t ? void 0 : t.load}`);
              o.append(r, a);
              const s = yield this.createDaysCont();
              return i.append(o), s && i.append(s), i;
            });
          }
          createDaysCont() {
            return z(this, void 0, void 0, function* () {
              const e = N();
              if (!e) return;
              const t = yield this.complex.getWeeklyStatistic(e),
                i = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                o = this.template.createElement('div', 'days-cont'),
                r = this.getDayOfAWeek();
              for (let e = 0; e < 7; e++) {
                const a = this.template.createElement('div', 'days-circle', i[e]);
                a.classList.remove('days-circle-pink'), r === e + 1 && a.classList.add('days-circle-pink'), o.append(a);
                const s = this.template.createElement('div', 'check-mark');
                s.classList.add('hidden'), (null == t ? void 0 : t.weeklyWorkouts.includes(e + 1)) && s.classList.remove('hidden'), a.append(s);
              }
              return o;
            });
          }
          createExercisesBlock() {
            return z(this, void 0, void 0, function* () {
              const e = this.template.createElement('div', 'exerc-block'),
                t = this.template.createElement('div', 'exerc-slider');
              let i = 0;
              const o = yield this.addNewComplex.creatingArrayFromData();
              for (let e = 0; e < o[0].block.length; e++) {
                const t = String(o[0].block[e].id),
                  i = new q(),
                  r = yield i.transformExercises(t);
                for (let e = 0; e < o[0].block.length; e++) t === o[0].block[e].id && o[0].block[e].exercises.push(...r);
              }
              const r = [...o, ...p];
              for (let e = 0; e < r.length; e++)
                for (let o = 0; o < r[e].block.length; o++) {
                  i++;
                  const a = r[e].block[o],
                    s = this.workoutBlock.createWorkoutContent(a, e, o, !0, r.length);
                  s.classList.add('adapt'),
                    this.workoutBlock.colorBackground(s),
                    s.classList.add('blur'),
                    (2 !== i && 4 !== i) || s.classList.add('smallerImg'),
                    3 === i && (s.classList.add('largerImg'), s.classList.remove('blur'), s.children[1].classList.add('largerPng')),
                    t.append(s);
                }
              const a = this.slider.createNextPrevBtns(i, t, !0, e);
              return e.append(t, a), e;
            });
          }
          createDecorationEl() {
            return this.template.createElement('div', 'decor-circle');
          }
          createExercisesCont() {
            return z(this, void 0, void 0, function* () {
              const e = this.template.createElement('div', 'exercises-wrapper'),
                t = [...(yield this.addNewComplex.creatingArrayFromData()), ...p];
              let i = 0,
                o = 0;
              1 === t[i].block.length ? ((i = 1), (o = 1)) : 2 === t[i].block.length ? ((i = 1), (o = 0)) : 0 === t[i].block.length ? ((i = 1), (o = 2)) : ((i = 0), (o = 2));
              const r = yield this.slider.createExercises(i, o);
              return localStorage.setItem('complexId', JSON.stringify(t[i].block[o].id)), e.append(r), e;
            });
          }
          createStartBtn() {
            const e = this.template.createBtn('exercises__startNow-btn', 'start now'),
              t = this.template.createElement('a', 'link-to-exerc');
            return (
              t.addEventListener('click', (e) => {
                e.preventDefault();
                const t = document.querySelector('main');
                t && ((t.innerHTML = ''), me.navigate('startTraining'));
              }),
              t.append(e),
              t
            );
          }
          getDayOfAWeek() {
            return [7, 1, 2, 3, 4, 5, 6][new Date().getDay()];
          }
          getCompletesExercisesStat() {
            return z(this, void 0, void 0, function* () {
              const e = N();
              if (e) return yield this.complex.getCompletedComplexes(e);
            });
          }
        })(),
        he = new (class {
          constructor() {
            (this.template = new e()),
              (this.calendar = new (class {
                constructor() {
                  this.template = new e();
                }
                createCalendar() {
                  const e = this.template.createElement('section', 'calendar'),
                    t = this.createCalendarWrap();
                  return e.append(t), e;
                }
                createCalendarWrap() {
                  const e = this.template.createElement('div', 'calendar-wrap');
                  return (e.id = 'airdatepicker'), e;
                }
              })()),
              (this.info = new (class {
                constructor() {
                  (this.template = new e()), (this.mainClass = 'info'), (this.authorization = new h());
                }
                createInfo() {
                  return F(this, void 0, void 0, function* () {
                    const e = this.template.createElement('section', `${this.mainClass}`),
                      t = yield this.createItems(),
                      i = this.createBtnWrap();
                    if (t) return e.append(...t, i), e;
                  });
                }
                createItems() {
                  return F(this, void 0, void 0, function* () {
                    const e = N();
                    if (!e) return;
                    const t = yield this.authorization.getUserInfo(e);
                    if (!t) return;
                    const i = [],
                      o = t.units.split('-');
                    for (const e in t)
                      switch (e) {
                        case 'goal': {
                          const o = this.createItem(`${e}:`, t.goal);
                          i.push(o);
                          break;
                        }
                        case 'load': {
                          const o = this.createItem(`${e}:`, `${t.load} workouts per week`);
                          i.push(o);
                          break;
                        }
                        case 'weight': {
                          const r = this.createItem(`${e}:`, `${t.weight} ${o[0]}`);
                          i.push(r);
                          break;
                        }
                        case 'height': {
                          const r = this.createItem(`${e}:`, `${t.height} ${o[1]}`);
                          i.push(r);
                          break;
                        }
                      }
                    return i;
                  });
                }
                createItem(e, t) {
                  const i = this.template.createElement('div', `${this.mainClass}__item`),
                    o = this.createContent(e, t);
                  return i.append(o), i;
                }
                createContent(e, t) {
                  const i = this.template.createElement('div', `${this.mainClass}__item-content`),
                    o = this.template.createElement('div', `${this.mainClass}__item-title`, e),
                    r = this.template.createElement('div', `${this.mainClass}__item-description`, t);
                  return i.append(o, r), i;
                }
                createBtnWrap() {
                  const e = this.template.createElement('div', `${this.mainClass}__btn-wrap`),
                    t = this.createBtnEdit();
                  return e.append(t), e;
                }
                createBtnEdit() {
                  const e = this.template.createBtn(`${this.mainClass}__edit`, 'Edit');
                  return e.classList.add('btn'), e.addEventListener('click', o('modal-edit-profile')), e;
                }
              })()),
              (this.mainClass = 'profile-page'),
              (this.modalEditProfile = new (class {
                constructor() {
                  (this.modal = new G()), (this.template = new e()), (this.mainClass = 'edit-form'), (this.authorization = new h());
                }
                createModal(e) {
                  return ie(this, void 0, void 0, function* () {
                    const t = yield this.createEditForm(e);
                    if (t) return this.modal.createModal('modal-edit-profile', t, !0);
                  });
                }
                createEditForm(e) {
                  return ie(this, void 0, void 0, function* () {
                    const t = this.template.createElement('div', this.mainClass),
                      i = this.createTitle(),
                      o = yield this.createForm(e);
                    if (o) return t.append(i, o), t;
                  });
                }
                getUserInfo() {
                  return ie(this, void 0, void 0, function* () {
                    const e = N();
                    if (e) return (yield this.authorization.getUserInfo(e)) || void 0;
                  });
                }
                createTitle() {
                  return this.template.createElement('div', `${this.mainClass}__title`, 'Edit your weight/height');
                }
                createForm(e) {
                  return ie(this, void 0, void 0, function* () {
                    const t = yield this.getUserInfo();
                    if (!t) return;
                    const i = t.units.split('-'),
                      o = this.template.createForm(`${this.mainClass}__form`, '/'),
                      r = this.template.createElement('div', `${this.mainClass}__input-wrap`),
                      a = Q({
                        mainClass: this.mainClass,
                        className: [],
                        attributes: { id: 'weight', name: 'weight', type: 'number', placeholder: 'Enter weight', value: t.weight },
                        imgSrc: '/rs-clone-deploy/assets/svg/scales.svg',
                        imgAlt: 'scales-img',
                        validate: te,
                        units: i[0],
                        classNameUnits: `${this.mainClass}__units-weight`,
                      }),
                      s = Q({
                        mainClass: this.mainClass,
                        className: [],
                        attributes: { id: 'height', name: 'height', type: 'number', placeholder: 'Enter height', value: t.height },
                        imgSrc: '/rs-clone-deploy/assets/svg/height.svg',
                        imgAlt: 'height-img',
                        validate: ee,
                        units: i[1],
                        classNameUnits: `${this.mainClass}__units-height`,
                      });
                    r.append(a, s);
                    const n = this.createMessage(),
                      l = this.createBtnUpdate();
                    return (
                      o.addEventListener('submit', (t) => {
                        this.onSubmitHandlerForm(t, o, e, i);
                      }),
                      o.append(r, n, l),
                      o
                    );
                  });
                }
                createMessage() {
                  return this.template.createElement('span', `${this.mainClass}__message-form`);
                }
                createBtnUpdate() {
                  return a({ content: 'update', className: [`${this.mainClass}__btn`, 'btn'], type: 'submit' });
                }
                onSubmitHandlerForm(e, t, i, o) {
                  var r, a;
                  e.preventDefault();
                  const s = new FormData(t),
                    n = null === (r = s.get('weight')) || void 0 === r ? void 0 : r.toString(),
                    l = null === (a = s.get('height')) || void 0 === a ? void 0 : a.toString();
                  if (!n || !l) return;
                  const c = ee(l, o[1]).res;
                  if (!te(n, o[0]).res || !c) return;
                  const d = N();
                  d && this.updateInfoUser({ id: d, weight: n, height: l }, i);
                }
                updateInfoUser(e, t) {
                  return ie(this, void 0, void 0, function* () {
                    const i = yield this.authorization.updateUserInfo(e);
                    if (i)
                      if (i.errors && i.message) this.ErrorHandler(i);
                      else {
                        const e = document.querySelector(`.${this.mainClass}__message-form`);
                        e && ((e.textContent = ''), e.classList.remove('error')), r('modal-edit-profile')(), t();
                      }
                  });
                }
                ErrorHandler(e) {
                  const t = document.querySelectorAll(`${this.mainClass}__input`);
                  Array.prototype.slice.call(t).forEach((e) => {
                    e.classList.add('error');
                  });
                  const i = document.querySelector(`.${this.mainClass}__message-form`);
                  i && ((i.textContent = e.message), i.classList.add('error'));
                }
              })()),
              (this.progress = new (class {
                constructor() {
                  (this.template = new e()),
                    (this.mainClass = 'progress'),
                    (this.mainClassTwo = 'bmi'),
                    (this.authorization = new h()),
                    (this.bmiValue = 0),
                    (this.bmiContent = ''),
                    (this.bmiClassName = '');
                }
                createProgress() {
                  return W(this, void 0, void 0, function* () {
                    yield this.calculateBmi();
                    const e = this.template.createElement('section', `${this.mainClass}`),
                      t = this.createBmiBlock();
                    return e.append(t), e;
                  });
                }
                calculateBmi() {
                  return W(this, void 0, void 0, function* () {
                    const e = N();
                    if (!e) return;
                    const t = yield this.authorization.getUserInfo(e);
                    if (!t) return;
                    let i = Number(t.height),
                      o = Number(t.weight);
                    'Lbs-inches' === t.units && ((i = 2.54 * Number(t.height)), (o = 0.45 * Number(t.weight))),
                      (this.bmiValue = parseFloat((o / Math.pow(i / 100, 2)).toFixed(1))),
                      this.createBmiData();
                  });
                }
                createBmiData() {
                  this.bmiValue <= 18.5
                    ? ((this.bmiContent = 'underweight'), (this.bmiClassName = `${this.mainClassTwo}__line-underweight`))
                    : this.bmiValue > 18.5 && this.bmiValue <= 25
                    ? ((this.bmiContent = 'normal'), (this.bmiClassName = `${this.mainClassTwo}__line-normal`))
                    : this.bmiValue > 25 && this.bmiValue <= 30
                    ? ((this.bmiContent = 'overweight'), (this.bmiClassName = `${this.mainClassTwo}__line-overweight`))
                    : this.bmiValue > 30 && this.bmiValue <= 35
                    ? (console.log('ggg'), (this.bmiContent = 'obesity 1 degree'), (this.bmiClassName = `${this.mainClassTwo}__line-obesity1`))
                    : this.bmiValue > 35 && this.bmiValue <= 40
                    ? ((this.bmiContent = 'obesity 2 degree'), (this.bmiClassName = `${this.mainClassTwo}__line-obesity2`))
                    : this.bmiValue > 40 && ((this.bmiContent = 'obesity 3 degree'), (this.bmiClassName = `${this.mainClassTwo}__line-obesity3`));
                }
                createBmiBlock() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}`),
                    t = this.createBmiTitle(),
                    i = this.createBmiContainer();
                  return e.append(t, i), e;
                }
                createBmiTitle() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}__title-container`),
                    t = this.template.createElement('h2', `${this.mainClassTwo}__title`, 'Body Mass Index');
                  return e.append(t), e;
                }
                createBmiContainer() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}__container`),
                    t = this.createParametersBlock(),
                    i = this.createBmiLine(),
                    o = this.createBmiParametersTitle(this.bmiContent, this.bmiClassName);
                  return e.append(t, i, o), e;
                }
                createParametersBlock() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}__parameters`),
                    t = this.createTitles(this.bmiValue.toString());
                  return e.append(...t), e;
                }
                createTitles(e) {
                  return [this.template.createElement('div', `${this.mainClassTwo}__parameters-title`, 'BMI:'), this.template.createElement('div', `${this.mainClassTwo}__parameters-subtitle`, e)];
                }
                createBmiLine() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}__line`);
                  [
                    { className: 'blue', value: ['15'] },
                    { className: 'green', value: ['18.5'] },
                    { className: 'yellow', value: ['25'] },
                    { className: 'orange', value: ['30'] },
                    { className: 'red', value: ['35', '40'] },
                  ].forEach((t) => {
                    const i = this.createLineItem(t);
                    e.append(i);
                  });
                  const t = this.createLineThumb();
                  return e.append(t), e;
                }
                createLineItem(e) {
                  const t = this.template.createElement('div', `${this.mainClassTwo}__line-item`);
                  return (
                    t.classList.add(e.className),
                    e.value.forEach((e) => {
                      const i = this.template.createElement('div', `${this.mainClassTwo}__line-number`, e);
                      t.append(i);
                    }),
                    t
                  );
                }
                createLineThumb() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}__line-thumb`);
                  if (this.bmiValue < 15) return (e.style.left = '0%'), e;
                  if (this.bmiValue > 40) return (e.style.left = '100%'), e;
                  const t = (100 * (this.bmiValue - 15)) / 25;
                  return (e.style.left = t.toString() + '%'), e;
                }
                createBmiParametersTitle(e, t) {
                  return this.template.createElement('div', t, e);
                }
              })());
          }
          draw() {
            return (
              (e = this),
              (t = void 0),
              (o = function* () {
                const e = document.querySelector('.main');
                if (!e) return;
                e.textContent = '';
                const t = this.template.createElement('div', `${this.mainClass}`),
                  i = this.template.createElement('h2', `${this.mainClass}__title`, 'My profile'),
                  o = this.createDecorEl(),
                  r = this.calendar.createCalendar(),
                  a = yield this.info.createInfo();
                if (!a) return;
                const s = this.template.createElement('div', `${this.mainClass}__container`),
                  n = yield this.progress.createProgress();
                s.append(r, a);
                const l = yield this.modalEditProfile.createModal(this.draw.bind(this));
                l && (t.append(o, i, s, n, l), e.append(t), new Y('#airdatepicker'));
              }),
              new ((i = void 0) || (i = Promise))(function (r, a) {
                function s(e) {
                  try {
                    l(o.next(e));
                  } catch (e) {
                    a(e);
                  }
                }
                function n(e) {
                  try {
                    l(o.throw(e));
                  } catch (e) {
                    a(e);
                  }
                }
                function l(e) {
                  var t;
                  e.done
                    ? r(e.value)
                    : ((t = e.value),
                      t instanceof i
                        ? t
                        : new i(function (e) {
                            e(t);
                          })).then(s, n);
                }
                l((o = o.apply(e, t || [])).next());
              })
            );
            var e, t, i, o;
          }
          createDecorEl() {
            return this.template.createElement('div', 'decor');
          }
        })(),
        pe = new (class {
          constructor() {
            (this.template = new e()),
              (this.takeARest = new (class {
                constructor() {
                  this.template = new e();
                }
                draw(e, t) {
                  return oe(this, void 0, void 0, function* () {
                    const i = this.template.createElement('div', 'exercisesModals');
                    document.body.append(i);
                    const o = yield this.createTakeARest(t, e);
                    return o && i.append(o), i;
                  });
                }
                createTakeARest(e, t) {
                  return oe(this, void 0, void 0, function* () {
                    const i = this.template.createElement('div', 'rest__wrapper'),
                      o = N();
                    if (!o) return;
                    const r = new C(),
                      a = yield r.getUserSettings(o);
                    return (
                      i.append(
                        this.createSetiingsCont(),
                        this.createTitle(),
                        this.createCountDown(Number(null == a ? void 0 : a.timeRest) || 20),
                        this.createButtons(),
                        this.nextExerciseText(e, t),
                        this.createNextExerciseWrapper(e, t)
                      ),
                      i
                    );
                  });
                }
                createSetiingsCont() {
                  const e = this.template.createElement('div', 'rest__header'),
                    t = this.template.createElement('div', 'rest__arrow-left');
                  (t.innerHTML =
                    '<?xml version="1.0" ?><!DOCTYPE svg  PUBLIC \'-//W3C//DTD SVG 1.1//EN\'  \'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\'><svg  id="Layer_1" style="enable-background:new 0 0 32 32;" version="1.1" viewBox="0 0 32 32"  xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M28,14H8.8l4.62-4.62C13.814,8.986,14,8.516,14,8c0-0.984-0.813-2-2-2c-0.531,0-0.994,0.193-1.38,0.58l-7.958,7.958  C2.334,14.866,2,15.271,2,16s0.279,1.08,0.646,1.447l7.974,7.973C11.006,25.807,11.469,26,12,26c1.188,0,2-1.016,2-2  c0-0.516-0.186-0.986-0.58-1.38L8.8,18H28c1.104,0,2-0.896,2-2S29.104,14,28,14z"/></svg>'),
                    t.addEventListener('click', (e) => {
                      e.preventDefault();
                      const t = document.querySelector('main');
                      t && ((t.innerHTML = ''), me.navigate('exercises'));
                    });
                  const i = this.template.createElement('div', 'rest__settings-cont'),
                    o = this.template.createElement('div', 'rest__volume'),
                    r = localStorage.getItem('sound');
                  (o.innerHTML = 'muted' === r ? v : k),
                    o.addEventListener('click', () => {
                      const e = localStorage.getItem('sound');
                      o.innerHTML = 'muted' === e ? k : v;
                    });
                  const a = this.template.createElement('div', 'rest__settings');
                  return (
                    a.addEventListener('click', () => {
                      document.querySelector('.settingsModal').classList.remove('invisible');
                    }),
                    (a.innerHTML =
                      '<?xml version="1.0" encoding="iso-8859-1"?>\n<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n viewBox="0 0 507.451 507.45" style="enable-background:new 0 0 507.451 507.45;"\n\t xml:space="preserve">\n<g>\n\t<g id="settings">\n\t\t<path d="M440.813,280.5c0-7.65,2.55-15.3,2.55-25.5s0-17.85-2.55-25.5l53.55-43.35c5.1-5.1,5.1-10.2,2.55-15.3l-51-89.25\n\t\t\tc-2.55-2.55-7.649-5.1-15.3-2.55l-63.75,25.5c-12.75-10.2-28.05-17.85-43.35-25.5l-10.2-66.3C315.863,5.1,308.212,0,303.113,0\n\t\t\th-102c-5.101,0-12.75,5.1-12.75,10.2l-10.2,68.85c-15.3,5.1-28.05,15.3-43.35,25.5l-61.2-25.5c-7.65-2.55-12.75,0-17.851,5.1\n\t\t\tl-51,89.25c-2.55,2.55,0,10.2,5.1,15.3l53.55,40.8c0,7.65-2.55,15.3-2.55,25.5s0,17.85,2.55,25.5l-53.55,43.35\n\t\t\tc-5.1,5.101-5.1,10.2-2.55,15.301l51,89.25c2.55,2.55,7.649,5.1,15.3,2.55l63.75-25.5c12.75,10.2,28.05,17.85,43.35,25.5\n\t\t\tl10.2,66.3c0,5.1,5.1,10.2,12.75,10.2h102c5.101,0,12.75-5.101,12.75-10.2l10.2-66.3c15.3-7.65,30.6-15.3,43.35-25.5l63.75,25.5\n\t\t\tc5.101,2.55,12.75,0,15.301-5.101l51-89.25c2.55-5.1,2.55-12.75-2.551-15.3L440.813,280.5z M252.113,344.25\n\t\t\tc-48.45,0-89.25-40.8-89.25-89.25s40.8-89.25,89.25-89.25s89.25,40.8,89.25,89.25S300.563,344.25,252.113,344.25z"/>\n\t</g>\n</g>\n</svg>'),
                    i.append(o, a),
                    e.append(t, i),
                    e
                  );
                }
                createTitle() {
                  return this.template.createElement('h2', 'rest__title', 'take a rest');
                }
                createButtons() {
                  const e = this.template.createElement('div', 'rest__buttons'),
                    t = this.template.createBtn('rest__add-btn', '+20');
                  t.classList.add('exercises__startNow-btn');
                  const i = this.template.createBtn('rest__skip-btn', 'skip');
                  return (
                    i.classList.add('exercises__startNow-btn'),
                    e.append(t, i),
                    t.addEventListener('click', () => {
                      this.addSeconds();
                    }),
                    e
                  );
                }
                nextExerciseText(e, t) {
                  const i = this.template.createElement('p', 'rest__text');
                  return (i.innerHTML = `next exercise ${t + 2} / ${e.length}`), i;
                }
                createNextExerciseWrapper(e, t) {
                  const i = this.template.createElement('div', 'rest__exerc-wrapper');
                  return i.append(this.nextExercTitle(e, t), this.createNextExerciseInfo(e, t)), i;
                }
                nextExercTitle(e, t) {
                  const i = this.template.createElement('div', 'next-exercise__cont'),
                    o = this.template.createElement('div', 'next-exercise__title');
                  o.innerHTML = `${e[t + 1].title} ${e[t + 1].quantity}`;
                  const r = this.template.createLink('next-exercise__link', e[t + 1].youtube),
                    a = this.template.createElement('div', 'next-exercise__tv');
                  return (
                    r.append(a),
                    (a.innerHTML =
                      '<?xml version="1.0" encoding="utf-8"?>\n\x3c!-- Svg Vector Icons : http://www.onlinewebfonts.com/icon --\x3e\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 1000 1000" enable-background="new 0 0 1000 1000" xml:space="preserve">\n<metadata> Svg Vector Icons : http://www.onlinewebfonts.com/icon </metadata>\n<g><g><g id="play_movie"><g><path d="M624.9,404.8l-168.6-83.4c-8.6-4.2-17-6.3-25-6.3c-21.2,0-42.6,15.8-42.6,51.3v155.9c0,35.5,21.6,51.3,43.1,51.3c8,0,16.5-2.1,25.3-6.4l166.6-83.3c18.8-9.2,29.6-23.8,29.6-40.1C653.3,427.8,642.9,413.6,624.9,404.8z M431.7,551.3l0-22.3h0V551.3z M437.3,527.3c-1.4,0.7-2.6,1.1-3.5,1.4c-0.3-1.4-0.6-3.5-0.6-6.4V366.4c0-2.8,0.3-4.8,0.6-6.2c0.8,0.3,1.7,0.6,2.9,1.2L603.7,444L437.3,527.3z M923.2,99.1H76.8c-36.8,0-66.8,30-66.8,66.8v534.5c0,36.8,30,66.8,66.8,66.8h334.1v89.1h-89.1v44.5h356.4v-44.5h-89.1v-89.1h334.1c36.8,0,66.8-30,66.8-66.8V165.9C990,129.1,960,99.1,923.2,99.1z M544.5,856.4h-89.1v-89.1h89.1V856.4z M945.5,700.5c0,12.3-10,22.3-22.3,22.3H76.8c-12.3,0-22.3-10-22.3-22.3V165.9c0-12.3,10-22.3,22.3-22.3h846.4c12.3,0,22.3,10,22.3,22.3L945.5,700.5L945.5,700.5z"/></g></g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></g>\n</svg>'),
                    i.append(o, r),
                    i
                  );
                }
                createNextExerciseInfo(e, t) {
                  const i = this.template.createElement('div', 'next-exercise__info'),
                    o = this.template.createElement('div', 'next-exercise__img-wrapper'),
                    r = this.template.createImage(e[t + 1].example, 'exercise', 'next-exercise__gif');
                  o.append(r);
                  const a = this.template.createElement('div', 'next-exercise__description', e[t + 1].description);
                  return (a.innerHTML = e[t + 1].description.replace(/\. /g, ". <br><span class='new-line'></span>")), i.append(o, a), i;
                }
                createCountDown(e) {
                  const t = this.template.createElement('div', 'rest__timer'),
                    i = this.template.createElement('div', 'rest__timer-line-before');
                  i.style.animation = `overlay_left ${e}s steps(1, end) forwards`;
                  const o = this.template.createElement('div', 'rest__timer-line');
                  o.style.animation = `rotate ${e}s linear forwards`;
                  const r = this.template.createElement('div', 'rest__timer-line-after');
                  r.style.animation = `overlay_right ${e}s steps(1, end) forwards`;
                  const a = this.template.createElement('div', 'rest__timer-body');
                  return (a.innerHTML = String(e)), this.countSeconds(a, t), t.append(i, o, r, a), t;
                }
                countSeconds(e, t) {
                  const i = new Audio(),
                    o = localStorage.getItem('sound');
                  (i.src = '/rs-clone-deploy/assets/sounds/tiktak.mp3'), ('unmuted' !== o && o) || i.play();
                  const r = setInterval(() => {
                    Number(e.innerHTML) > 0 && ((e.innerHTML = String(Number(e.innerHTML) - 1)), 0 === Number(e.innerHTML) && i.pause());
                  }, 1e3);
                  me.subscribersOnce.push(() => {
                    i.pause();
                  }),
                    setTimeout(() => {
                      const e = document.querySelector('.rest__skip-btn'),
                        t = document.querySelector('.rest__volume'),
                        o = document.querySelector('.rest__arrow-left');
                      e.addEventListener('click', () => {
                        clearInterval(r), i.pause();
                      }),
                        o.addEventListener('click', () => {
                          clearInterval(r), i.pause();
                        }),
                        t.addEventListener('click', () => {
                          const e = localStorage.getItem('sound');
                          'unmuted' === e ? (i.pause(), localStorage.setItem('sound', 'muted')) : 'muted' === e && (i.play(), localStorage.setItem('sound', 'unmuted'));
                        });
                    }, 0);
                }
                addSeconds() {
                  const e = document.querySelector('.rest__timer-body');
                  e.innerHTML = String(Number(e.innerHTML) + 20);
                  const t = document.querySelector('.rest__timer-line'),
                    i = document.querySelector('.rest__timer-line-before'),
                    o = window.getComputedStyle(t).animation.match(/\d{2,}/g),
                    r = document.querySelector('.rest__timer-line-after');
                  o &&
                    ((r.style.animation = `overlay_right ${Number(o[0]) + 20}s steps(1, end) forwards`),
                    (i.style.animation = `overlay_left ${Number(o[0]) + 20}s steps(1, end) forwards`),
                    (t.style.animation = `rotate ${Number(o[0]) + 20}s linear forwards`));
                }
              })()),
              (this.exerciseArray = []),
              (this.currentExerciseIndex = 0),
              (this.counter = 0),
              this.interval,
              (this.complex = new C());
          }
          draw() {
            return se(this, void 0, void 0, function* () {
              const t = document.querySelector('main');
              if (!t) return;
              t.classList.add('main'), (t.textContent = '');
              const i = document.createElement('div');
              i.classList.add('startTraining-page');
              const o = this.template.createElement('div', 'settingsModal'),
                r = N();
              if (!r) return;
              o.classList.add('invisible'),
                o.addEventListener('click', (e) => {
                  e.target.classList.contains('settingsModal') && o.classList.add('invisible');
                }),
                o.classList.add('modal-addNewComplex'),
                o.append(this.createSettingsModal(r)),
                t.append(i, o);
              const a = new P(),
                s = yield a.creatingArrayFromData();
              let n = [];
              const l = new q(),
                c = JSON.parse(String(localStorage.getItem('complexId')));
              if (c) {
                const e = yield l.transformExercises(c);
                for (let t = 0; t < s[0].block.length; t++) c === s[0].block[t].id && s[0].block[t].exercises.push(...e);
              }
              (n = s.length && s[0].block.length ? [...s, ...p] : [...p]),
                n.forEach((e) => {
                  e.block.forEach((e) => {
                    String(e.id) === String(c) && (this.exerciseArray = e.exercises);
                  });
                }),
                (this.currentExerciseIndex = 0);
              const d = new re(this.exerciseArray[this.currentExerciseIndex]);
              i.append(d.draw()),
                0 === this.currentExerciseIndex && this.exerciseArray[this.currentExerciseIndex].quantity.toLowerCase().includes('x')
                  ? (d.createCountDown(), d.hideExerciseLinks(), d.disablePreviousButton(), d.disableSkipButton())
                  : (clearInterval(this.interval),
                    d.createThreeCount(),
                    setTimeout(() => {
                      const e = this.getExerciseDuration(this.exerciseArray[this.currentExerciseIndex]);
                      this.setTimeCounter(e), this.enableCounterBlock();
                    }, 3e3),
                    d.disablePreviousButton());
              const u = Date.now();
              i.addEventListener('click', (t) => {
                const o = t.target;
                if (o.classList.contains('exercise-block__button-done'))
                  if (this.currentExerciseIndex === this.exerciseArray.length - 1) {
                    clearInterval(this.interval), this.counter++;
                    const e = this.getResultMinutes(u);
                    this.showCongrats(this.counter, e);
                  } else clearInterval(this.interval), this.showRestModal(), this.counter++;
                if (o.classList.contains('exercise-block__button-next'))
                  if (this.currentExerciseIndex === this.exerciseArray.length - 1) {
                    clearInterval(this.interval), this.counter++;
                    let e = this.getResultMinutes(u);
                    0 === e && (e = 1), this.showCongrats(this.counter, e);
                  } else clearInterval(this.interval), this.showRestModal(), this.counter++;
                if (o.classList.contains('exercise-block__button-skip'))
                  if (this.currentExerciseIndex === this.exerciseArray.length - 1) {
                    clearInterval(this.interval);
                    let e = this.getResultMinutes(u);
                    0 === e && (e = 1), this.showCongrats(this.counter, e);
                  } else clearInterval(this.interval), this.loadNextExercise();
                if ((o.classList.contains('rest__skip-btn') && (clearInterval(this.interval), this.loadNextExercise()), o.classList.contains('exercise-block__button-prev'))) {
                  if (0 === this.currentExerciseIndex) return;
                  clearInterval(this.interval), this.loadPreviousExercise();
                }
                if (
                  (o.classList.contains('pause-modal__button-restart') && (this.closeModal(), clearInterval(this.interval), (document.body.style.overflow = ''), this.restartExercise()),
                  o.classList.contains('exercise-block__button-pause'))
                ) {
                  clearInterval(this.interval), (document.body.style.overflow = 'hidden');
                  const t = new (class {
                    constructor(t) {
                      (this.template = new e()),
                        (this.exercise = t),
                        (this.backLayer = this.template.createElement('div', 'pause-modal__backlayer')),
                        (this.modal = this.template.createElement('div', 'pause-modal'));
                    }
                    draw() {
                      this.backLayer.append(this.modal);
                      const e = this.template.createElement('div', 'pause-modal__title', 'pause'),
                        t = this.template.createElement('div', 'pause-modal__info'),
                        i = this.template.createElement('div', 'pause-modal__exercise-name', this.exercise.title),
                        o = document.createElement('img');
                      return (o.className = 'pause-modal__exercise-gif'), (o.src = this.exercise.example), t.append(i, o), this.modal.append(e, t), this.createModalButtons(), this.backLayer;
                    }
                    createModalButtons() {
                      const e = this.template.createElement('div', 'pause-modal__buttons'),
                        t = this.template.createBtn('pause-modal__button-restart', 'Restart Exercise'),
                        i = this.template.createBtn('pause-modal__button-continue', 'Continue');
                      e.append(t, i), this.modal.append(e);
                    }
                  })(this.exerciseArray[this.currentExerciseIndex]);
                  i.prepend(t.draw());
                }
                o.classList.contains('pause-modal__button-continue') &&
                  (this.closeModal(),
                  (document.body.style.overflow = ''),
                  this.disableCounterBlock(),
                  clearInterval(this.interval),
                  this.createThreeCount(),
                  setTimeout(() => {
                    const e = this.getExerciseDuration(this.exerciseArray[this.currentExerciseIndex]);
                    this.setTimeCounter(e), this.enableCounterBlock();
                  }, 3e3));
              });
            });
          }
          getResultMinutes(e) {
            const t = Date.now() - e;
            return new Date(t).getMinutes();
          }
          loadNextExercise() {
            (this.currentExerciseIndex = this.currentExerciseIndex + 1), this.showExercise();
          }
          loadPreviousExercise() {
            (this.currentExerciseIndex = this.currentExerciseIndex - 1), this.showExercise();
          }
          restartExercise() {
            this.showExercise();
          }
          showExercise() {
            const e = document.querySelector('.startTraining-page'),
              t = new re(this.exerciseArray[this.currentExerciseIndex]);
            if (!this.exerciseArray[this.currentExerciseIndex].quantity.toLowerCase().includes('x')) {
              if ((clearInterval(this.interval), t.createThreeCount(), !me.isActiveRout('startTraining'))) return;
              setTimeout(() => {
                const e = this.getExerciseDuration(this.exerciseArray[this.currentExerciseIndex]);
                this.setTimeCounter(e), this.enableCounterBlock();
              }, 3e3);
            }
            e && ((e.innerHTML = ''), e.append(t.draw()));
          }
          showRestModal() {
            return se(this, void 0, void 0, function* () {
              const e = document.querySelector('.startTraining-page');
              (e.innerHTML = ''), e.append(yield this.takeARest.draw(this.currentExerciseIndex, this.exerciseArray));
              const t = N();
              if (!t) return;
              const i = yield this.complex.getUserSettings(t);
              this.autoChange(Number(null == i ? void 0 : i.timeRest) || 20);
            });
          }
          showCongrats(t, i) {
            return se(this, void 0, void 0, function* () {
              const o = document.querySelector('.startTraining-page'),
                r = new (class {
                  constructor(t, i) {
                    (this.template = new e()), (this.container = this.template.createElement('div', 'congrats')), (this.counter = t), (this.time = i);
                  }
                  draw() {
                    return ae(this, void 0, void 0, function* () {
                      yield this.saveCompletedComplex();
                      const e = this.template.createElement('div', 'congrats__text', 'well done!'),
                        t = this.template.createElement('div', 'congrats__icons'),
                        i = this.template.createElement('div', 'congrats__exercises-result'),
                        o = this.template.createElement('div', 'congrats__exercises-number', `${this.counter}`),
                        r = this.template.createElement('div', 'congrats__exercises-text', 'Exercises');
                      i.append(o, r);
                      const a = this.template.createElement('div', 'congrats__minutes-result'),
                        s = this.template.createElement('div', 'congrats__minutes-number', `${this.time}`),
                        n = this.template.createElement('div', 'congrats__minutes-text', 'Minutes');
                      a.append(s, n), t.append(i, a);
                      const l = this.template.createLink('congrats__button-complete', '/exercises', 'Complete'),
                        c = new Audio();
                      return (c.src = '/rs-clone-deploy/assets/sounds/finish.mp3'), 'unmuted' === localStorage.getItem('sound') && c.play(), this.container.append(e, t, l), this.container;
                    });
                  }
                  saveCompletedComplex() {
                    return ae(this, void 0, void 0, function* () {
                      const e = new C(),
                        t = N();
                      if (!t) return;
                      const i = localStorage.getItem('complexId');
                      yield e.fulfilledComplex({ userId: t, idComplex: JSON.parse(String(i)), time: String(this.time) });
                    });
                  }
                })(t, i);
              (o.innerHTML = ''),
                o.append(yield r.draw()),
                document.querySelector('.congrats__button-complete').addEventListener('click', (e) => {
                  e.preventDefault();
                  const t = document.querySelector('main');
                  t && ((t.innerHTML = ''), me.navigate('exercises'));
                });
            });
          }
          autoChange(e) {
            let t = 0;
            const i = document.querySelector('.rest__add-btn'),
              o = document.querySelector('.rest__skip-btn');
            i.addEventListener('click', () => {
              t -= 20;
            });
            const r = setInterval(() => {
              t < e && (t++, t === e && (this.loadNextExercise(), (t = 0), clearInterval(r)));
            }, 1e3);
            o.addEventListener('click', () => {
              (t = 0), clearInterval(r);
            });
          }
          setTimeCounter(e) {
            clearInterval(this.interval),
              (this.interval = setInterval(() => {
                const t = document.querySelector('.exercise-block__current-quantity');
                if (t) {
                  const i = t.textContent;
                  let o = null == i ? void 0 : i.slice(0, 2),
                    r = null == i ? void 0 : i.slice(3);
                  0 === Number(r)
                    ? (0 === Number(o) && (clearInterval(this.interval), (document.querySelector('.exercise-block__button-next').style.display = 'block')),
                      Number(o) > 0 && Number(o) <= 10 && ((o = '0' + (Number(o) - 1)), (r = '59')))
                    : ((r = '' + (Number(r) - 1)), Number(r) < 10 && (r = `0${r}`)),
                    (t.textContent = `${o}:${r}`);
                  const a = document.querySelector('.exercise-block__time-bar');
                  if (a) {
                    const t = a.clientWidth;
                    document.querySelector('.exercise-block__track').style.width = (t / e) * Number(r) + 'px';
                  }
                }
              }, 1e3));
          }
          getExerciseDuration(e) {
            const t = Number(e.quantity.slice(0, 2)),
              i = Number(e.quantity.slice(3));
            return 0 !== t ? 60 * t + i : i;
          }
          createThreeCount() {
            const e = this.template.createElement('div', 'counter-three');
            document.querySelector('.exercise-block__counter').append(e);
            let t = 3;
            (e.textContent = `${t}`), e.classList.add('fading');
            const i = () => {
              (t -= 1), (e.textContent = `${t}`);
            };
            e.addEventListener('animationiteration', i), e.addEventListener('animationend', i);
          }
          closeModal() {
            document.querySelector('.pause-modal__backlayer').remove();
          }
          createSettingsModal(e) {
            const t = this.template.createElement('div', 'modal-addNewComplex__addName');
            t.classList.add('settings__modal');
            const i = this.template.createElement('h2', 'modal-addNewComplex__title', 'Workout Settings'),
              o = this.createSettingsTimeBlock(
                'Rest time, seconds',
                '20',
                '<?xml version="1.0" encoding="iso-8859-1"?>\n<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t viewBox="0 0 482.754 482.754" style="enable-background:new 0 0 482.754 482.754;" xml:space="preserve">\n<g>\n\t<g>\n\t\t<g>\n\t\t\t<path d="M416.941,216.222H338.24v-36.324v-1.768H47.651v1.768v242.157v12.108h0.702c6.441,53.953,57.875,48.431,120.376,48.431\n\t\t\t\th48.431c62.525,0,113.959,5.521,120.376-48.431h0.702v-12.108V347.64h78.701c10.05,0,18.162-7.87,18.162-17.629v-96.185\n\t\t\t\tC435.102,224.092,426.99,216.222,416.941,216.222z M410.887,310.203c0,7.313-6.756,13.222-15.135,13.222H338.24v-82.987h57.512\n\t\t\t\tc8.379,0,15.135,5.909,15.135,13.222V310.203z"/>\n\t\t</g>\n\t\t<g>\n\t\t\t<path d="M155.266,153.915l-7.555-9.468c8.136-6.514,27.993-26.686,22.327-41.554c-2.373-6.296-6.345-10.485-10.534-14.917\n\t\t\t\tc-5.158-5.449-10.994-11.599-13.851-21.939C138.46,40.004,167.713,4.02,171.055,0l9.299,7.749\n\t\t\t\tc-7.991,9.589-27.703,38.14-23.029,55.066c2.034,7.434,6.175,11.769,10.97,16.83c4.601,4.843,9.807,10.364,13.076,18.937\n\t\t\t\tC191.299,124.759,156.743,152.728,155.266,153.915z"/>\n\t\t</g>\n\t\t<g>\n\t\t\t<path d="M215.49,141.807l-7.555-9.468c4.746-3.802,17.605-16.66,14.263-25.402c-1.453-3.85-3.85-6.393-6.611-9.299\n\t\t\t\tc-3.584-3.802-7.676-8.112-9.71-15.474c-5.061-18.38,15.038-43.104,17.338-45.865l9.299,7.749\n\t\t\t\tc-7.144,8.572-17.508,25.62-14.965,34.871c1.235,4.456,3.705,7.047,6.829,10.364c3.196,3.39,6.829,7.216,9.154,13.319\n\t\t\t\tC240.554,121.103,218.081,139.749,215.49,141.807z"/>\n\t\t</g>\n\t</g>\n</g>\n',
                !1,
                'settings__rest'
              ),
              r = this.createSettingsTimeBlock(
                'Number of Workouts',
                '3',
                '<?xml version="1.0" encoding="iso-8859-1"?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t width="45px" height="45px" viewBox="0 0 286.9 286.9" style="enable-background:new 0 0 286.9 286.9;" xml:space="preserve"\n\t>\n<g>\n\t<polygon points="248.65,76.5 181.65,76.5 210.35,0 95.65,0 38.25,153 86.05,153 38.25,286.9 \t"/>\n</g>\n</svg>\n',
                !0,
                'settings_load'
              ),
              a = this.template.createElement('div', 'settings__button-wrap'),
              s = this.template.createBtn('modal-addNewComplex__create', 'Done');
            return (
              a.append(s),
              s.classList.add('settings__done-btn'),
              s.addEventListener('click', () =>
                se(this, void 0, void 0, function* () {
                  document.querySelector('.settingsModal').classList.add('invisible');
                  const t = document.querySelector('.settings__rest'),
                    i = document.querySelector('.settings_load');
                  t.value && (yield this.complex.updateRestTime(e, { timeRest: t.value })), i.value && (yield this.complex.updateLoad(e, { load: i.value }));
                })
              ),
              t.append(i, o, r, a),
              t
            );
          }
          createSettingsTimeBlock(e, t, i, o, r) {
            const a = this.template.createElement('div', 'settingsMiniBlock'),
              s = this.template.createElement('div', 'settings-square');
            s.innerHTML = i;
            const n = this.template.createElement('div', 'settings__text-wrapper'),
              l = this.template.createElement('div', 'settings__text-title', e),
              c = document.createElement('input');
            return (
              (c.placeholder = t),
              (c.className = 'settings__text-content'),
              c.classList.add(r),
              o
                ? c.addEventListener('input', () => {
                    (c.value = c.value.replace(/([^1-7]){1}/g, '')), c.value.length > 1 && (c.value = c.value.slice(0, 1));
                  })
                : c.addEventListener('input', () => {
                    c.value = c.value.replace(/([^0-9])/g, '');
                  }),
              n.append(l, c),
              a.append(s, n),
              a
            );
          }
          disableCounterBlock() {
            const e = document.querySelector('.exercise-block__counter');
            e && (e.style.pointerEvents = 'none');
          }
          enableCounterBlock() {
            const e = document.querySelector('.exercise-block__counter');
            e && (e.style.pointerEvents = '');
          }
        })(),
        ge = new (class {
          constructor(e, t) {
            (this.navigate = (e) => {
              window.history.pushState(null, '', this.root + e), this.action(e), (this.currentRout = e), this.startSubscribers();
            }),
              (this.routes = e),
              (this.subscribers = []),
              (this.subscribersOnce = []),
              (this.currentRout = ''),
              (this.root = '/rs-clone-deploy/'),
              (this.errorAction = t);
          }
          init() {
            const e = window.location.pathname.replace(this.root, '');
            (this.currentRout = e.replace(/\/$/, '')),
              this.action(e.replace(/\/$/, '')),
              window.addEventListener('popstate', (e) => {
                this.action(window.location.pathname.replace(this.root, ''));
              }),
              this.startSubscribers();
          }
          addSubscribers(e) {
            this.subscribers.push(e);
          }
          isActiveRout(e, t = !1) {
            return t ? e === this.currentRout : new RegExp(`^([\\w-]+\\/|)${e}(\\/[\\w-]*|)$`).test(this.currentRout);
          }
          startSubscribers() {
            this.subscribers.length &&
              this.subscribers.forEach((e) => {
                e();
              }),
              this.subscribersOnce.length &&
                this.subscribersOnce.forEach((e) => {
                  e();
                }),
              (this.subscribersOnce = []);
          }
          action(e) {
            const t = this.routes.find((t) => (-1 !== t.path.indexOf('/:') ? t.path.replace(/\/:.+$/, '') === e.replace(/\/[\w]+$/, '') : t.path === e));
            if (t) {
              const i = this.getParam(e, t.path);
              t.cb(i);
            } else this.errorAction();
          }
          getParam(e, t) {
            if (-1 === t.indexOf('/:')) return;
            const i = e.match(/\/.+$/);
            let o;
            return i && (o = i[0].replace('/', '')), o;
          }
        })(
          [
            { path: '', cb: ne.draw.bind(ne) },
            { path: 'workouts', cb: ce.draw.bind(ce) },
            { path: 'exercises', cb: ue.draw.bind(ue) },
            { path: 'profile', cb: he.draw.bind(he) },
            {
              path: 'workouts/:id',
              cb: (e) => {
                de.draw(e);
              },
            },
            { path: 'startTraining', cb: pe.draw.bind(pe) },
          ],
          le.draw
        );
      ge.addSubscribers(() => {
        new ye().draw();
      });
      const me = ge,
        ye = class {
          constructor() {
            (this.template = new e()),
              (this.mainClass = 'header'),
              (this.modalMobileMenu = new (class {
                constructor() {
                  (this.template = new e()), (this.mainClass = 'modal-mobile');
                }
                createModal(e, t, i) {
                  this.resizeWindowCloseMobModal();
                  const o = this.template.createElement('div', this.mainClass);
                  o.id = e;
                  const r = this.createBackDrop(e, i),
                    a = this.createModalInner(e, i);
                  return a.append(t), o.append(r, a), o;
                }
                resizeWindowCloseMobModal() {
                  window.addEventListener('resize', (e) => {
                    window.innerWidth > 768 && r('modal-mobile')();
                  });
                }
                createBackDrop(e, t) {
                  const i = this.template.createElement('div', `${this.mainClass}__backdrop`);
                  return t ? ((i.onclick = r(e)), i) : i;
                }
                createModalInner(e, t) {
                  const i = this.template.createElement('div', `${this.mainClass}__inner`);
                  if (t) {
                    const t = this.createIconClose(),
                      o = this.template.createBtn(`${this.mainClass}__btn-close`, t);
                    return (o.onclick = r(e)), i.append(o), i;
                  }
                  return i;
                }
                createIconClose() {
                  return this.template.createIcon(`${this.mainClass}__icon`, 'icon-close');
                }
              })());
          }
          draw() {
            const e = document.querySelector('header');
            if (!e) return;
            e.textContent = '';
            const t = !!localStorage.getItem('token');
            e.classList.add(`${this.mainClass}`);
            const i = this.createWrap();
            t
              ? (i.append(this.createListMenu(), this.createModal(), this.createBtnSignOut(), this.createBurgerBtn()), e.append(this.createLogo(), i))
              : (i.append(this.createButtons()), e.append(this.createLogo(), i));
          }
          createLogo() {
            const e = this.template.createLink('logo', '/'),
              t = this.template.createElement('span', 'logo__content', 'Women Workouts'),
              i = this.template.createElement('span', 'logo__content', 'Women Workouts'),
              o = this.template.createElement('span', 'logo__mobile', 'WW');
            return (
              e.append(t, i, o),
              e.addEventListener('click', (e) => {
                this.onclickHandlerLogo(e);
              }),
              e
            );
          }
          onclickHandlerLogo(e) {
            e.preventDefault(), me.navigate('');
          }
          createButtons() {
            const e = this.template.createElement('div', `${this.mainClass}__buttons`),
              t = a({ content: 'Sign In', className: [`${this.mainClass}__btn`], onClick: o('modal-sign-in') }),
              i = a({ content: 'Sign Up', className: [`${this.mainClass}__btn`], variant: 'second', onClick: o('modal-sign-up') });
            return e.append(t, i), e;
          }
          createBtnSignOut() {
            return a({ content: 'Sign Out', className: [`${this.mainClass}__btn`], onClick: this.exitApp.bind(this) });
          }
          createModal() {
            return this.modalMobileMenu.createModal('modal-mobile', this.createVerticalMenu(), !0);
          }
          createWrap() {
            return this.template.createElement('div', `${this.mainClass}__wrap`);
          }
          createBurgerBtn() {
            const e = this.template.createElement('button', `${this.mainClass}__mobile-btn`);
            e.addEventListener('click', () => {
              o('modal-mobile')();
            });
            const t = this.template.createIcon(`${this.mainClass}__mobile-icon`, 'icon-burger-btn');
            return e.append(t), e;
          }
          createVerticalMenu() {
            const e = this.template.createElement('div', 'vertical-menu');
            return e.append(this.createListMenu()), e;
          }
          createListMenu() {
            const e = this.template.createElement('ul', `${this.mainClass}__list`),
              t = this.createLinksMenu();
            return e.append(...t), e;
          }
          createLinksMenu() {
            const e = [];
            return (
              ['workouts', 'exercises', 'profile'].forEach((t) => {
                const i = this.template.createElement('li', `${this.mainClass}__list-item`),
                  o = this.createLink(t);
                i.append(o), e.push(i);
              }),
              e
            );
          }
          createLink(e) {
            const t = this.template.createLink(`${this.mainClass}__link`, '/', e);
            return (
              me.isActiveRout(e) && t.classList.add('active'),
              t.addEventListener('click', (t) => {
                this.onClickHandlerLinkMenu(t, e);
              }),
              t.append(this.createBorderLink()),
              t
            );
          }
          createBorderLink() {
            return this.template.createElement('span', `${this.mainClass}__link-border`);
          }
          onClickHandlerLinkMenu(e, t) {
            e.preventDefault(), me.navigate(t);
          }
          exitApp() {
            localStorage.removeItem('token'), localStorage.removeItem('userId'), this.draw(), me.navigate('');
          }
        };
      function fe({ className: i, attributes: o, classNameIcon: r, validate: a }) {
        const s = new e(),
          n = 'input',
          l = s.createElement('div', n);
        t(l, i);
        const c = (function (e, t) {
            const i = document.createElement('input');
            return (
              i.classList.add(`${e}__item`),
              (function (e, t) {
                for (const i in t) e.setAttribute(i, t[i]);
              })(i, t),
              i
            );
          })(n, o),
          d = s.createElement('span', `${n}__error`);
        a &&
          (c.onchange = () => {
            !(function (e, t, i) {
              const o = e(t.value);
              o.res ? (t.classList.remove('error'), (i.textContent = '')) : (t.classList.add('error'), (i.textContent = o.message || ''));
            })(a, c, d);
          });
        const u = s.createIcon(`${n}__icon`, r);
        return l.append(c, u, d), l;
      }
      const we = new e();
      function be() {
        const e = fe({ className: [], attributes: { type: 'password', placeholder: 'Enter your password', name: 'password', required: 'true' }, classNameIcon: 'icon-lock_outline', validate: X }),
          t = (function (e, t) {
            const i = we.createIcon(`${e}__right-icon`, 'icon-eye-blocked'),
              o = t.querySelector(`.${e}__item`);
            return (
              i.addEventListener('click', () => {
                !(function (e, t) {
                  t &&
                    (e.classList.contains('icon-eye-blocked')
                      ? (e.classList.remove('icon-eye-blocked'), e.classList.add('icon-eye'), (t.type = 'text'))
                      : (e.classList.remove('icon-eye'), e.classList.add('icon-eye-blocked'), (t.type = 'password')));
                })(i, o);
              }),
              i
            );
          })('input', e);
        return e.append(t), e;
      }
      const ke = new e();
      function ve(e, t) {
        return [
          (function ({ type: e, id: t, name: i, checked: o, className: r, value: a, onChange: s }) {
            const n = ke.createInput(r, { type: e, id: t, name: i, checked: o || '', value: a });
            return s && (n.onchange = s), n;
          })(e),
          (function ({ forName: e, content: t, className: i }) {
            return ke.createLabel(i, e, t);
          })(t),
        ];
      }
      const Ae = class {
        constructor() {
          (this.modal = new G()),
            (this.template = new e()),
            (this.mainClass = 'slider-questions'),
            (this.mainClassSecond = 'slide-info'),
            (this.slider = (function ({ slideCount: e, htmContainer: t, prevBtn: i, nextBtn: o, pointContainer: r }) {
              let a = 0;
              const s = (e) => {
                  t && ((t.style.transform = `translateX(-${100 * e}%)`), c(), d(), n());
                },
                n = () => {
                  if (!r) return;
                  const e = r.children;
                  let t = 0;
                  for (const i of e) l(i, t), t++;
                },
                l = (e, t) => {
                  t === a ? e.classList.add('active') : e.classList.remove('active');
                },
                c = () => {
                  i && (0 === a ? i.classList.add('disabled') : i.classList.remove('disabled'));
                },
                d = () => {
                  o && (u() ? o.classList.add('disabled') : o.classList.remove('disabled'));
                },
                u = () => a + 1 >= e;
              return {
                nextSlide: () => {
                  u() || ((a += 1), s(a));
                },
                prevSlide: () => {
                  a - 1 < 0 || ((a -= 1), s(a));
                },
                goToSlide: (t) => () => {
                  a < 0 || a >= e || ((a = t), s(a));
                },
                setContainer: (e) => {
                  t = e;
                },
                setPrevBtn: (e) => {
                  (i = e), c();
                },
                setNextBtn: (e) => {
                  (o = e), d();
                },
                setPointerContainer: (e) => {
                  (r = e), n();
                },
              };
            })({ slideCount: 3 })),
            (this.authorization = new h()),
            (this.unitsWeight = 'kg'),
            (this.unitsHeight = 'cm');
        }
        draw() {
          const e = this.createSliderWrap(),
            t = this.modal.createModal('modal-questions', e, !1);
          document.body.append(t);
        }
        createSliderWrap() {
          const e = this.template.createElement('div', 'slider-wrapper'),
            t = this.createSlider(),
            i = this.sliderControl();
          return e.append(t, i), e;
        }
        sliderControl() {
          const e = 'slider-control',
            t = this.template.createElement('div', e),
            i = this.template.createElement('i', `${e}__back`);
          i.classList.add('icon-arrow_back_ios'), (i.onclick = this.slider.prevSlide), this.slider.setPrevBtn(i);
          const o = this.createSliderPoints();
          this.slider.setPointerContainer(o);
          const r = this.template.createElement('i', `${e}__forward`);
          return r.classList.add('icon-arrow_forward_ios'), (r.onclick = this.slider.nextSlide), this.slider.setNextBtn(r), t.append(i, o, r), t;
        }
        createSlider() {
          const e = this.template.createElement('div', this.mainClass),
            t = this.createSliderForm();
          return e.append(t), e;
        }
        createSliderForm() {
          const e = this.template.createForm(`${this.mainClass}__form`, '/'),
            t = this.createSliderList();
          return (
            e.append(t),
            e.addEventListener('submit', (t) => {
              this.onSubmitHandlerForm(t, e);
            }),
            e
          );
        }
        formValidation(e) {
          var t, i, o;
          const r = null === (t = e.get('units')) || void 0 === t ? void 0 : t.toString().split('-'),
            a = null === (i = e.get('height')) || void 0 === i ? void 0 : i.toString(),
            s = null === (o = e.get('weight')) || void 0 === o ? void 0 : o.toString();
          if (!a || !s || !r) return !1;
          const n = ee(a, r[1]).res;
          return !(!te(s, r[0]).res || !n);
        }
        onSubmitHandlerForm(e, t) {
          e.preventDefault();
          const i = new FormData(t);
          if (!this.formValidation(i)) return;
          const o = {};
          ['goal', 'load', 'weight', 'height', 'units'].forEach((e) => {
            const t = i.get(e);
            t && (o[e] = t.toString());
          });
          const r = N();
          r && ((o.userId = r), this.sendInfoUser(o));
        }
        createSliderList() {
          const e = this.template.createElement('div', `${this.mainClass}__list`);
          this.slider.setContainer(e),
            [
              { title: 'Before we start', question: 'What is your goal?', name: 'goal', nameBtn: ['Keep Fit', 'Lose Weight', 'Get Stronger'], values: ['keep-fit', 'lose-weight', 'get-stronger'] },
              { title: 'Load', question: 'What load would you like?', name: 'load', nameBtn: ['Low', 'Middle', 'High'], values: ['1', '3', '5'] },
            ].forEach((t) => {
              const i = this.createSlide(t);
              e.append(i);
            });
          const t = this.createSlideAboutMe();
          return e.append(t), e;
        }
        createSlide({ title: e, question: t, name: i, nameBtn: o, values: r }) {
          const a = this.template.createElement('div', `${this.mainClass}__slide`),
            s = this.createSlideContent(e, t),
            n = this.createBtnWrap(i, o, r),
            l = this.template.createElement('span', `${this.mainClass}__message`);
          return a.append(...s, n, l), a;
        }
        createSlideContent(e, t) {
          return [this.template.createElement('div', `${this.mainClass}__title`, e), this.template.createElement('span', `${this.mainClass}__question`, t)];
        }
        createSlideAboutMe() {
          const e = this.template.createElement('div', `${this.mainClass}__slide`),
            t = this.template.createElement('div', `${this.mainClass}__title`, 'Tell us about yourself'),
            i = this.createSlideAboutMeInputWrap(),
            o = this.createSlideAboutMeBtnBlock(),
            r = this.template.createElement('span', `${this.mainClass}__message-form`),
            a = this.createBtnSubmitForm();
          return e.append(t, i, o, r, a), e;
        }
        createSlideAboutMeInputWrap() {
          const e = this.template.createElement('div', `${this.mainClassSecond}__input-wrap`),
            t = this.createInputsBlock();
          return e.append(...t), e;
        }
        createInputsBlock() {
          return [
            Q({
              mainClass: this.mainClassSecond,
              className: [],
              attributes: { id: 'weight', name: 'weight', type: 'number', placeholder: 'Enter weight', required: 'true' },
              imgSrc: '/rs-clone-deploy/assets/svg/scales.svg',
              imgAlt: 'scales-img',
              validate: te,
              units: this.unitsWeight,
              classNameUnits: `${this.mainClass}__units-weight`,
            }),
            Q({
              mainClass: this.mainClassSecond,
              className: [],
              attributes: { id: 'height', name: 'height', type: 'number', placeholder: 'Enter height', required: 'true' },
              imgSrc: '/rs-clone-deploy/assets/svg/height.svg',
              imgAlt: 'height-img',
              validate: ee,
              units: this.unitsHeight,
              classNameUnits: `${this.mainClass}__units-height`,
            }),
          ];
        }
        onChangeHandlerBtnRadio(e) {
          const t = e.currentTarget.value,
            i = document.querySelector('.slider-questions__units-weight'),
            o = document.querySelector('.slider-questions__units-height');
          i && o && 'Lbs-inches' === t && ((i.textContent = 'Lbs'), (o.textContent = 'inches')), i && o && 'kg-cm' === t && ((i.textContent = 'kg'), (o.textContent = 'cm'));
          const r = document.querySelector('.slide-info__input-wrap');
          if (r) {
            (this.unitsHeight = 'cm' === this.unitsHeight ? 'inches' : 'cm'), (this.unitsWeight = 'kg' === this.unitsWeight ? 'Lbs' : 'kg'), (r.textContent = '');
            const e = this.createInputsBlock();
            r.append(...e);
          }
        }
        createSlideAboutMeBtnBlock() {
          const e = this.template.createElement('div', `${this.mainClassSecond}__btn-wrap`),
            t = this.template.createElement('span', `${this.mainClassSecond}__message`),
            i = ve(
              { type: 'radio', id: 'kg-cm', name: 'units', className: `${this.mainClassSecond}__btn`, value: 'kg-cm', checked: 'checked', onChange: this.onChangeHandlerBtnRadio.bind(this) },
              { forName: 'kg-cm', content: 'kg/cm', className: `${this.mainClassSecond}__btn-title` }
            );
          e.append(...i, t);
          const o = this.template.createElement('div', `${this.mainClassSecond}__btn-wrap`),
            r = this.template.createElement('span', `${this.mainClassSecond}__message`),
            a = ve(
              { type: 'radio', id: 'Lbs-inches', name: 'units', className: `${this.mainClassSecond}__btn`, value: 'Lbs-inches', onChange: this.onChangeHandlerBtnRadio.bind(this) },
              { forName: 'Lbs-inches', content: 'Lbs/inches', className: `${this.mainClassSecond}__btn-title` }
            );
          o.append(...a, r);
          const s = this.template.createElement('div', `${this.mainClassSecond}__buttons`);
          return s.append(e, o), s;
        }
        createBtnWrap(e, t, i) {
          const o = this.template.createElement('div', `${this.mainClass}__buttons`);
          return (
            i.forEach((i, r) => {
              const a = ve(
                { type: 'radio', value: i, id: e + r, name: e, className: `${this.mainClass}__input`, checked: 1 === r ? 'checked' : '' },
                { forName: e + r, content: t[r], className: `${this.mainClass}__label` }
              );
              o.append(...a);
            }),
            o
          );
        }
        createBtnSubmitForm() {
          return a({ content: 'Submit', className: [`${this.mainClass}__btn-submit`, 'btn'], type: 'submit' });
        }
        createSliderPoints() {
          var e;
          const t = 'slider-points',
            i = this.template.createElement('div', `${t}`);
          for (let o = 0; o < 3; o++) {
            const r = this.createSliderPointsElements(t);
            (r.onclick = null === (e = this.slider) || void 0 === e ? void 0 : e.goToSlide(o)), i.append(r);
          }
          return i;
        }
        createSliderPointsElements(e) {
          return this.template.createElement('div', `${e}__item`);
        }
        sendInfoUser(e) {
          return (
            (t = this),
            (i = void 0),
            (a = function* () {
              const t = yield this.authorization.createUserInfo(e);
              if (t)
                if (t.errors && t.message) this.ErrorHandler(t);
                else {
                  const e = document.querySelector(`.${this.mainClass}__message-form`);
                  e && ((e.textContent = ''), e.classList.remove('error')), r('modal-questions')();
                }
            }),
            new ((o = void 0) || (o = Promise))(function (e, r) {
              function s(e) {
                try {
                  l(a.next(e));
                } catch (e) {
                  r(e);
                }
              }
              function n(e) {
                try {
                  l(a.throw(e));
                } catch (e) {
                  r(e);
                }
              }
              function l(t) {
                var i;
                t.done
                  ? e(t.value)
                  : ((i = t.value),
                    i instanceof o
                      ? i
                      : new o(function (e) {
                          e(i);
                        })).then(s, n);
              }
              l((a = a.apply(t, i || [])).next());
            })
          );
          var t, i, o, a;
        }
        ErrorHandler(e) {
          const t = document.querySelectorAll(`${this.mainClassSecond}__input`);
          Array.prototype.slice.call(t).forEach((e) => {
            e.classList.add('error');
          });
          const i = document.querySelector(`.${this.mainClass}__message-form`);
          i && ((i.textContent = e.message), i.classList.add('error'));
        }
      };
      new (class {
        constructor() {
          (this.template = new e()), (this.mainClass = 'preloader');
        }
        draw() {
          const e = this.createPreloader();
          document.body.classList.add('loaded'), document.body.prepend(e);
        }
        createPreloader() {
          const e = this.template.createElement('div', `${this.mainClass}`),
            t = this.createRow();
          return e.append(t), e;
        }
        createRow() {
          const e = this.template.createElement('div', `${this.mainClass}__row`);
          return e.append(this.createItem(), this.createItem()), e;
        }
        createItem() {
          return this.template.createElement('div', `${this.mainClass}__item`);
        }
      })().draw(),
        new ye().draw(),
        new (class {
          constructor() {
            (this.template = new e()), (this.footer = this.template.createElement('footer', 'footer'));
          }
          createGitHubs() {
            const e = this.template.createElement('div', 'footer__hubs'),
              t = this.template.createLink('footer__hubs-link', 'https://github.com/oolenkazolot');
            (t.target = '_blank'), (t.textContent = 'oolenkazolot');
            const i = this.template.createLink('footer__hubs-link', 'https://github.com/alisatonks');
            (i.target = '_blank'), (i.textContent = 'alisatonks');
            const o = this.template.createLink('footer__hubs-link', 'https://github.com/svetik-k');
            (o.target = '_blank'), (o.textContent = 'svetik-k'), e.append(t, i, o), this.footer.append(e);
          }
          draw() {
            (this.footer.textContent = ''), this.createGitHubs();
            const e = this.template.createElement('div', 'footer__year', '2023');
            this.footer.append(e);
            const t = this.template.createLink('footer__school', 'https://rs.school/js/');
            return (t.target = '_blank'), this.footer.append(t), document.body.append(this.footer), this.footer;
          }
        })().draw(),
        new (class {
          constructor() {
            (this.modal = new G()), (this.template = new e()), (this.mainClass = 'login-form'), (this.authorization = new h()), (this.header = new ye());
          }
          draw() {
            const e = this.createLoginForm(),
              t = this.modal.createModal('modal-sign-in', e, !0);
            document.body.append(t);
          }
          createLoginForm() {
            const e = this.template.createElement('div', this.mainClass),
              t = this.createTitle(),
              i = this.createForm(),
              o = this.createQuestion();
            return e.append(t, i, o), e;
          }
          createTitle() {
            return this.template.createElement('div', `${this.mainClass}__title`, 'Log in');
          }
          createForm() {
            const e = this.template.createForm(`${this.mainClass}__form`, '/'),
              t = fe({ className: [], attributes: { type: 'text', placeholder: 'Enter your email', name: 'email', required: 'true' }, classNameIcon: 'icon-mail_outline', validate: Z }),
              i = be(),
              o = this.createBtnWrap(),
              r = this.createMessageForm();
            return (
              e.addEventListener('submit', (t) => {
                this.onSubmitHandlerForm(t, e, r);
              }),
              e.append(t, i, r, o),
              e
            );
          }
          onSubmitHandlerForm(e, t, i) {
            var o, r;
            e.preventDefault();
            const a = new FormData(t),
              s = null === (o = a.get('email')) || void 0 === o ? void 0 : o.toString(),
              n = null === (r = a.get('password')) || void 0 === r ? void 0 : r.toString();
            s && n && this.sendAuth({ email: s, password: n }, i);
          }
          createMessageForm() {
            return this.template.createElement('span', `${this.mainClass}__message`);
          }
          createBtnWrap() {
            const e = 'btn-wrap',
              t = this.template.createElement('div', e),
              i = a({ content: 'Sign In', className: [`${e}__btn`], type: 'submit' });
            return t.append(i), t;
          }
          sendAuth(e, t) {
            return (
              (i = this),
              (o = void 0),
              (s = function* () {
                const i = yield this.authorization.authorization(e);
                i &&
                  (i.token && i.userId && ($({ token: i.token, userId: i.userId }), (t.textContent = ''), t.classList.remove('error'), this.header.draw(), r('modal-sign-in')()),
                  i.message && this.ErrorHandler(i, t));
              }),
              new ((a = void 0) || (a = Promise))(function (e, t) {
                function r(e) {
                  try {
                    l(s.next(e));
                  } catch (e) {
                    t(e);
                  }
                }
                function n(e) {
                  try {
                    l(s.throw(e));
                  } catch (e) {
                    t(e);
                  }
                }
                function l(t) {
                  var i;
                  t.done
                    ? e(t.value)
                    : ((i = t.value),
                      i instanceof a
                        ? i
                        : new a(function (e) {
                            e(i);
                          })).then(r, n);
                }
                l((s = s.apply(i, o || [])).next());
              })
            );
            var i, o, a, s;
          }
          ErrorHandler(e, t) {
            const i = document.querySelectorAll('.login-form .input__item');
            Array.prototype.slice.call(i).forEach((e) => {
              e.classList.add('error');
            }),
              t.classList.add('error'),
              e.message && (t.textContent = e.message);
          }
          createQuestion() {
            const e = this.template.createElement('div', `${this.mainClass}__question`),
              t = this.template.createElement('span', `${this.mainClass}__text`, "Don't have an account?"),
              i = this.template.createLink(`${this.mainClass}__link`, '/', 'Sing up');
            return (i.onclick = o('modal-sign-up', 'modal-sign-in')), e.append(t, i), e;
          }
        })().draw(),
        new (class {
          constructor() {
            (this.modal = new G()), (this.template = new e()), (this.mainClass = 'registration-form'), (this.authorization = new h()), (this.header = new ye()), (this.modalQuestions = new Ae());
          }
          draw() {
            const e = this.createRegistrationForm(),
              t = this.modal.createModal('modal-sign-up', e, !0);
            document.body.append(t);
          }
          createRegistrationForm() {
            const e = this.template.createElement('div', this.mainClass),
              t = this.createTitle(),
              i = this.createForm(),
              o = this.createQuestion();
            return e.append(t, i, o), e;
          }
          createTitle() {
            return this.template.createElement('div', `${this.mainClass}__title`, 'Welcome to Women Workouts');
          }
          createForm() {
            const e = this.template.createForm(`${this.mainClass}__form`, '/'),
              t = fe({ className: [], attributes: { type: 'text', placeholder: 'Enter your email', name: 'email', required: 'true' }, classNameIcon: 'icon-mail_outline', validate: Z }),
              i = be(),
              o = this.createBtnWrap(),
              r = this.createMessageEl();
            return (
              e.addEventListener('submit', (t) => {
                var i, o;
                t.preventDefault();
                const a = new FormData(e),
                  s = null === (i = a.get('email')) || void 0 === i ? void 0 : i.toString(),
                  n = null === (o = a.get('password')) || void 0 === o ? void 0 : o.toString();
                s && n && this.sendRegistration({ email: s, password: n }, r);
              }),
              e.append(t, i, r, o),
              e
            );
          }
          createMessageEl() {
            return this.template.createElement('span', `${this.mainClass}__message`);
          }
          createBtnWrap() {
            const e = 'btn-wrap',
              t = this.template.createElement('div', e),
              i = a({ content: 'Sign Up', className: [`${e}__btn`], type: 'submit' });
            return t.append(i), t;
          }
          sendRegistration(e, t) {
            return (
              (i = this),
              (r = void 0),
              (s = function* () {
                const i = yield this.authorization.registration(e);
                i &&
                  (i.token && i.userId && ($({ token: i.token, userId: i.userId }), (t.textContent = ''), t.classList.remove('error'), this.header.draw(), o('modal-questions', 'modal-sign-up')()),
                  i.message && this.ErrorHandler(i, t));
              }),
              new ((a = void 0) || (a = Promise))(function (e, t) {
                function o(e) {
                  try {
                    l(s.next(e));
                  } catch (e) {
                    t(e);
                  }
                }
                function n(e) {
                  try {
                    l(s.throw(e));
                  } catch (e) {
                    t(e);
                  }
                }
                function l(t) {
                  var i;
                  t.done
                    ? e(t.value)
                    : ((i = t.value),
                      i instanceof a
                        ? i
                        : new a(function (e) {
                            e(i);
                          })).then(o, n);
                }
                l((s = s.apply(i, r || [])).next());
              })
            );
            var i, r, a, s;
          }
          ErrorHandler(e, t) {
            const i = document.querySelectorAll('.registration-form .input__item');
            Array.prototype.slice.call(i).forEach((e) => {
              e.classList.add('error');
            }),
              t.classList.add('error'),
              e.message && (t.textContent = e.message);
          }
          createQuestion() {
            const e = this.template.createElement('div', `${this.mainClass}__question`),
              t = this.template.createElement('span', `${this.mainClass}__text`, 'Already have an account?'),
              i = this.template.createLink(`${this.mainClass}__link`, '/', 'Sing in');
            return (i.onclick = o('modal-sign-in', 'modal-sign-up')), e.append(t, i), e;
          }
        })().draw(),
        new Ae().draw(),
        me.init();
    })();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
