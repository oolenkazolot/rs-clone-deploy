(() => {
  var e = {
      545: function (e) {
        e.exports = (function () {
          'use strict';
          var e = {
              d: function (t, i) {
                for (var o in i) e.o(i, o) && !e.o(t, o) && Object.defineProperty(t, o, { enumerable: !0, get: i[o] });
              },
              o: function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
              },
            },
            t = {};
          e.d(t, {
            default: function () {
              return U;
            },
          });
          var i = {
              days: 'days',
              months: 'months',
              years: 'years',
              day: 'day',
              month: 'month',
              year: 'year',
              eventChangeViewDate: 'changeViewDate',
              eventChangeCurrentView: 'changeCurrentView',
              eventChangeFocusDate: 'changeFocusDate',
              eventChangeSelectedDate: 'changeSelectedDate',
              eventChangeTime: 'changeTime',
              eventChangeLastSelectedDate: 'changeLastSelectedDate',
              actionSelectDate: 'selectDate',
              actionUnselectDate: 'unselectDate',
              cssClassWeekend: '-weekend-',
            },
            o = {
              classes: '',
              inline: !1,
              locale: {
                days: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
                daysShort: ['Вос', 'Пон', 'Вто', 'Сре', 'Чет', 'Пят', 'Суб'],
                daysMin: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
                months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
                monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
                today: 'Сегодня',
                clear: 'Очистить',
                dateFormat: 'dd.MM.yyyy',
                timeFormat: 'HH:mm',
                firstDay: 1,
              },
              startDate: new Date(),
              firstDay: '',
              weekends: [6, 0],
              dateFormat: '',
              altField: '',
              altFieldDateFormat: 'T',
              toggleSelected: !0,
              keyboardNav: !0,
              selectedDates: !1,
              container: '',
              isMobile: !1,
              visible: !1,
              position: 'bottom left',
              offset: 12,
              view: i.days,
              minView: i.days,
              showOtherMonths: !0,
              selectOtherMonths: !0,
              moveToOtherMonthsOnSelect: !0,
              showOtherYears: !0,
              selectOtherYears: !0,
              moveToOtherYearsOnSelect: !0,
              minDate: '',
              maxDate: '',
              disableNavWhenOutOfRange: !0,
              multipleDates: !1,
              multipleDatesSeparator: ', ',
              range: !1,
              dynamicRange: !0,
              buttons: !1,
              monthsField: 'monthsShort',
              showEvent: 'focus',
              autoClose: !1,
              prevHtml: '<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',
              nextHtml: '<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',
              navTitles: { days: 'MMMM, <i>yyyy</i>', months: 'yyyy', years: 'yyyy1 - yyyy2' },
              timepicker: !1,
              onlyTimepicker: !1,
              dateTimeSeparator: ' ',
              timeFormat: '',
              minHours: 0,
              maxHours: 24,
              minMinutes: 0,
              maxMinutes: 59,
              hoursStep: 1,
              minutesStep: 1,
              onSelect: !1,
              onChangeViewDate: !1,
              onChangeView: !1,
              onRenderCell: !1,
              onShow: !1,
              onHide: !1,
              onClickDayName: !1,
            };
          function r(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : document;
            return 'string' == typeof e ? t.querySelector(e) : e;
          }
          function a() {
            let { tagName: e = 'div', className: t = '', innerHtml: i = '', id: o = '', attrs: r = {} } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
              a = document.createElement(e);
            return t && a.classList.add(...t.split(' ')), o && (a.id = o), i && (a.innerHTML = i), r && s(a, r), a;
          }
          function s(e, t) {
            for (let [i, o] of Object.entries(t)) void 0 !== o && e.setAttribute(i, o);
            return e;
          }
          function n(e) {
            return new Date(e.getFullYear(), e.getMonth() + 1, 0).getDate();
          }
          function l(e) {
            let t = e.getHours(),
              { hours: i, dayPeriod: o } = c(t);
            return {
              year: e.getFullYear(),
              month: e.getMonth(),
              fullMonth: e.getMonth() + 1 < 10 ? '0' + (e.getMonth() + 1) : e.getMonth() + 1,
              date: e.getDate(),
              fullDate: e.getDate() < 10 ? '0' + e.getDate() : e.getDate(),
              day: e.getDay(),
              hours: t,
              fullHours: d(t),
              hours12: i,
              dayPeriod: o,
              fullHours12: d(i),
              minutes: e.getMinutes(),
              fullMinutes: e.getMinutes() < 10 ? '0' + e.getMinutes() : e.getMinutes(),
            };
          }
          function c(e) {
            return { dayPeriod: e > 11 ? 'pm' : 'am', hours: e % 12 == 0 ? 12 : e % 12 };
          }
          function d(e) {
            return e < 10 ? '0' + e : e;
          }
          function u(e) {
            let t = 10 * Math.floor(e.getFullYear() / 10);
            return [t, t + 9];
          }
          function h() {
            let e = [];
            for (var t = arguments.length, i = new Array(t), o = 0; o < t; o++) i[o] = arguments[o];
            return (
              i.forEach((t) => {
                if ('object' == typeof t) for (let i in t) t[i] && e.push(i);
                else t && e.push(t);
              }),
              e.join(' ')
            );
          }
          function p(e, t) {
            let o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.days;
            if (!e || !t) return !1;
            let r = l(e),
              a = l(t);
            return { [i.days]: r.date === a.date && r.month === a.month && r.year === a.year, [i.months]: r.month === a.month && r.year === a.year, [i.years]: r.year === a.year }[o];
          }
          function g(e, t, i) {
            let o = y(e, !1).getTime(),
              r = y(t, !1).getTime();
            return i ? o >= r : o > r;
          }
          function m(e, t) {
            return !g(e, t, !0);
          }
          function y(e) {
            let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
              i = new Date(e.getTime());
            return 'boolean' != typeof t || t || w(i), i;
          }
          function w(e) {
            return e.setHours(0, 0, 0, 0), e;
          }
          function f(e, t, i) {
            e.length
              ? e.forEach((e) => {
                  e.addEventListener(t, i);
                })
              : e.addEventListener(t, i);
          }
          function b(e, t) {
            return !(!e || e === document || e instanceof DocumentFragment) && (e.matches(t) ? e : b(e.parentNode, t));
          }
          function k(e, t, i) {
            return e > i ? i : e < t ? t : e;
          }
          function v(e) {
            for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) i[o - 1] = arguments[o];
            return (
              i
                .filter((e) => e)
                .forEach((t) => {
                  for (let [i, o] of Object.entries(t))
                    if (void 0 !== o && '[object Object]' === o.toString()) {
                      let t = void 0 !== e[i] ? e[i].toString() : void 0,
                        r = o.toString(),
                        a = Array.isArray(o) ? [] : {};
                      (e[i] = e[i] ? (t !== r ? a : e[i]) : a), v(e[i], o);
                    } else e[i] = o;
                }),
              e
            );
          }
          function A(e) {
            let t = e;
            return e instanceof Date || (t = new Date(e)), isNaN(t.getTime()) && (console.log(`Unable to convert value "${e}" to Date object`), (t = !1)), t;
          }
          function x(e) {
            let t = '\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;';
            return new RegExp('(^|>|' + t + ')(' + e + ')($|<|' + t + ')', 'g');
          }
          function C(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          class _ {
            constructor() {
              let { type: e, date: t, dp: i, opts: o, body: r } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              C(this, 'focus', () => {
                this.$cell.classList.add('-focus-'), (this.focused = !0);
              }),
                C(this, 'removeFocus', () => {
                  this.$cell.classList.remove('-focus-'), (this.focused = !1);
                }),
                C(this, 'select', () => {
                  this.$cell.classList.add('-selected-'), (this.selected = !0);
                }),
                C(this, 'removeSelect', () => {
                  this.$cell.classList.remove('-selected-', '-range-from-', '-range-to-'), (this.selected = !1);
                }),
                C(this, 'onChangeSelectedDate', () => {
                  this.isDisabled || (this._handleSelectedStatus(), this.opts.range && this._handleRangeStatus());
                }),
                C(this, 'onChangeFocusDate', (e) => {
                  if (!e) return void (this.focused && this.removeFocus());
                  let t = p(e, this.date, this.type);
                  t ? this.focus() : !t && this.focused && this.removeFocus(), this.opts.range && this._handleRangeStatus();
                }),
                C(this, 'render', () => ((this.$cell.innerHTML = this._getHtml()), (this.$cell.adpCell = this), this.$cell)),
                (this.type = e),
                (this.singleType = this.type.slice(0, -1)),
                (this.date = t),
                (this.dp = i),
                (this.opts = o),
                (this.body = r),
                (this.customData = !1),
                this.init();
            }
            init() {
              let { range: e, onRenderCell: t } = this.opts;
              t && (this.customData = t({ date: this.date, cellType: this.singleType, datepicker: this.dp })),
                this._createElement(),
                this._bindDatepickerEvents(),
                this._handleInitialFocusStatus(),
                this.dp.hasSelectedDates && (this._handleSelectedStatus(), e && this._handleRangeStatus());
            }
            _bindDatepickerEvents() {
              this.dp.on(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.on(i.eventChangeFocusDate, this.onChangeFocusDate);
            }
            unbindDatepickerEvents() {
              this.dp.off(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.off(i.eventChangeFocusDate, this.onChangeFocusDate);
            }
            _createElement() {
              var e;
              let { year: t, month: i, date: o } = l(this.date),
                r = (null === (e = this.customData) || void 0 === e ? void 0 : e.attrs) || {};
              this.$cell = a({ className: this._getClassName(), attrs: { 'data-year': t, 'data-month': i, 'data-date': o, ...r } });
            }
            _getClassName() {
              var e, t;
              let o = new Date(),
                { selectOtherMonths: r, selectOtherYears: a } = this.opts,
                { minDate: s, maxDate: n } = this.dp,
                { day: c } = l(this.date),
                d = this._isOutOfMinMaxRange(),
                u = null === (e = this.customData) || void 0 === e ? void 0 : e.disabled,
                g = h('air-datepicker-cell', `-${this.singleType}-`, {
                  '-current-': p(o, this.date, this.type),
                  '-min-date-': s && p(s, this.date, this.type),
                  '-max-date-': n && p(n, this.date, this.type),
                }),
                m = '';
              switch (this.type) {
                case i.days:
                  m = h({ '-weekend-': this.dp.isWeekend(c), '-other-month-': this.isOtherMonth, '-disabled-': (this.isOtherMonth && !r) || d || u });
                  break;
                case i.months:
                  m = h({ '-disabled-': d || u });
                  break;
                case i.years:
                  m = h({ '-other-decade-': this.isOtherDecade, '-disabled-': d || (this.isOtherDecade && !a) || u });
              }
              return h(g, m, null === (t = this.customData) || void 0 === t ? void 0 : t.classes);
            }
            _getHtml() {
              var e;
              let { year: t, month: o, date: r } = l(this.date),
                { showOtherMonths: a, showOtherYears: s } = this.opts;
              if (null !== (e = this.customData) && void 0 !== e && e.html) return this.customData.html;
              switch (this.type) {
                case i.days:
                  return !a && this.isOtherMonth ? '' : r;
                case i.months:
                  return this.dp.locale[this.opts.monthsField][o];
                case i.years:
                  return !s && this.isOtherDecade ? '' : t;
              }
            }
            _isOutOfMinMaxRange() {
              let { minDate: e, maxDate: t } = this.dp,
                { type: o, date: r } = this,
                { month: a, year: s, date: n } = l(r),
                c = o === i.days,
                d = o === i.years,
                u = !!e && new Date(s, d ? e.getMonth() : a, c ? n : e.getDate()),
                h = !!t && new Date(s, d ? t.getMonth() : a, c ? n : t.getDate());
              return e && t ? m(u, e) || g(h, t) : e ? m(u, e) : t ? g(h, t) : void 0;
            }
            destroy() {
              this.unbindDatepickerEvents();
            }
            _handleRangeStatus() {
              let { rangeDateFrom: e, rangeDateTo: t } = this.dp,
                i = h({
                  '-in-range-': e && t && ((o = this.date), (r = e), (a = t), g(o, r) && m(o, a)),
                  '-range-from-': e && p(this.date, e, this.type),
                  '-range-to-': t && p(this.date, t, this.type),
                });
              var o, r, a;
              this.$cell.classList.remove('-range-from-', '-range-to-', '-in-range-'), i && this.$cell.classList.add(...i.split(' '));
            }
            _handleSelectedStatus() {
              let e = this.dp._checkIfDateIsSelected(this.date, this.type);
              e ? this.select() : !e && this.selected && this.removeSelect();
            }
            _handleInitialFocusStatus() {
              p(this.dp.focusDate, this.date, this.type) && this.focus();
            }
            get isDisabled() {
              return this.$cell.matches('.-disabled-');
            }
            get isOtherMonth() {
              return this.dp.isOtherMonth(this.date);
            }
            get isOtherDecade() {
              return this.dp.isOtherDecade(this.date);
            }
          }
          function E(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          let q = {
            [i.days]: `<div class="air-datepicker-body--day-names"></div><div class="air-datepicker-body--cells -${i.days}-"></div>`,
            [i.months]: `<div class="air-datepicker-body--cells -${i.months}-"></div>`,
            [i.years]: `<div class="air-datepicker-body--cells -${i.years}-"></div>`,
          };
          const S = '.air-datepicker-cell';
          class D {
            constructor(e) {
              let { dp: t, type: o, opts: r } = e;
              E(this, 'handleClick', (e) => {
                let t = e.target.closest(S).adpCell;
                if (t.isDisabled) return;
                if (!this.dp.isMinViewReached) return void this.dp.down();
                let i = this.dp._checkIfDateIsSelected(t.date, t.type);
                i ? this.dp._handleAlreadySelectedDates(i, t.date) : this.dp.selectDate(t.date);
              }),
                E(this, 'handleDayNameClick', (e) => {
                  let t = e.target.getAttribute('data-day-index');
                  this.opts.onClickDayName({ dayIndex: Number(t), datepicker: this.dp });
                }),
                E(this, 'onChangeCurrentView', (e) => {
                  e !== this.type ? this.hide() : (this.show(), this.render());
                }),
                E(this, 'onMouseOverCell', (e) => {
                  let t = b(e.target, S);
                  this.dp.setFocusDate(!!t && t.adpCell.date);
                }),
                E(this, 'onMouseOutCell', () => {
                  this.dp.setFocusDate(!1);
                }),
                E(this, 'onClickBody', (e) => {
                  let { onClickDayName: t } = this.opts,
                    i = e.target;
                  i.closest(S) && this.handleClick(e), t && i.closest('.air-datepicker-body--day-name') && this.handleDayNameClick(e);
                }),
                E(this, 'onMouseDown', (e) => {
                  this.pressed = !0;
                  let t = b(e.target, S),
                    i = t && t.adpCell;
                  p(i.date, this.dp.rangeDateFrom) && (this.rangeFromFocused = !0), p(i.date, this.dp.rangeDateTo) && (this.rangeToFocused = !0);
                }),
                E(this, 'onMouseMove', (e) => {
                  if (!this.pressed || !this.dp.isMinViewReached) return;
                  e.preventDefault();
                  let t = b(e.target, S),
                    i = t && t.adpCell,
                    { selectedDates: o, rangeDateTo: r, rangeDateFrom: a } = this.dp;
                  if (!i || i.isDisabled) return;
                  let { date: s } = i;
                  if (2 === o.length) {
                    if (this.rangeFromFocused && !g(s, r)) {
                      let { hours: e, minutes: t } = l(a);
                      s.setHours(e), s.setMinutes(t), (this.dp.rangeDateFrom = s), this.dp.replaceDate(a, s);
                    }
                    if (this.rangeToFocused && !m(s, a)) {
                      let { hours: e, minutes: t } = l(r);
                      s.setHours(e), s.setMinutes(t), (this.dp.rangeDateTo = s), this.dp.replaceDate(r, s);
                    }
                  }
                }),
                E(this, 'onMouseUp', () => {
                  (this.pressed = !1), (this.rangeFromFocused = !1), (this.rangeToFocused = !1);
                }),
                E(this, 'onChangeViewDate', (e, t) => {
                  if (!this.isVisible) return;
                  let o = u(e),
                    r = u(t);
                  switch (this.dp.currentView) {
                    case i.days:
                      if (p(e, t, i.months)) return;
                      break;
                    case i.months:
                      if (p(e, t, i.years)) return;
                      break;
                    case i.years:
                      if (o[0] === r[0] && o[1] === r[1]) return;
                  }
                  this.render();
                }),
                E(this, 'render', () => {
                  this.destroyCells(),
                    this._generateCells(),
                    this.cells.forEach((e) => {
                      this.$cells.appendChild(e.render());
                    });
                }),
                (this.dp = t),
                (this.type = o),
                (this.opts = r),
                (this.cells = []),
                (this.$el = ''),
                (this.pressed = !1),
                (this.isVisible = !0),
                this.init();
            }
            init() {
              this._buildBaseHtml(), this.type === i.days && this.renderDayNames(), this.render(), this._bindEvents(), this._bindDatepickerEvents();
            }
            _bindEvents() {
              let { range: e, dynamicRange: t } = this.opts;
              f(this.$el, 'mouseover', this.onMouseOverCell),
                f(this.$el, 'mouseout', this.onMouseOutCell),
                f(this.$el, 'click', this.onClickBody),
                e && t && (f(this.$el, 'mousedown', this.onMouseDown), f(this.$el, 'mousemove', this.onMouseMove), f(window.document, 'mouseup', this.onMouseUp));
            }
            _bindDatepickerEvents() {
              this.dp.on(i.eventChangeViewDate, this.onChangeViewDate), this.dp.on(i.eventChangeCurrentView, this.onChangeCurrentView);
            }
            _buildBaseHtml() {
              (this.$el = a({ className: `air-datepicker-body -${this.type}-`, innerHtml: q[this.type] })),
                (this.$names = r('.air-datepicker-body--day-names', this.$el)),
                (this.$cells = r('.air-datepicker-body--cells', this.$el));
            }
            _getDayNamesHtml() {
              let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.dp.locale.firstDay,
                t = '',
                o = this.dp.isWeekend,
                { onClickDayName: r } = this.opts,
                a = e,
                s = 0;
              for (; s < 7; ) {
                let e = a % 7;
                (t += `<div class="${h('air-datepicker-body--day-name', { [i.cssClassWeekend]: o(e), '-clickable-': !!r })}" data-day-index='${e}'>${this.dp.locale.daysMin[e]}</div>`), s++, a++;
              }
              return t;
            }
            _getDaysCells() {
              let {
                  viewDate: e,
                  locale: { firstDay: t },
                } = this.dp,
                i = n(e),
                { year: o, month: r } = l(e),
                a = new Date(o, r, 1),
                s = new Date(o, r, i),
                c = a.getDay() - t,
                d = 6 - s.getDay() + t;
              (c = c < 0 ? c + 7 : c), (d = d > 6 ? d - 7 : d);
              let u = (function (e, t) {
                  let { year: i, month: o, date: r } = l(e);
                  return new Date(i, o, r - t);
                })(a, c),
                h = i + c + d,
                p = u.getDate(),
                { year: g, month: m } = l(u),
                y = 0;
              for (; y < h; ) {
                let e = new Date(g, m, p + y);
                this._generateCell(e), y++;
              }
            }
            _generateCell(e) {
              let { type: t, dp: i, opts: o } = this,
                r = new _({ type: t, dp: i, opts: o, date: e, body: this });
              return this.cells.push(r), r;
            }
            _generateDayCells() {
              this._getDaysCells();
            }
            _generateMonthCells() {
              let { year: e } = this.dp.parsedViewDate,
                t = 0;
              for (; t < 12; ) this.cells.push(this._generateCell(new Date(e, t))), t++;
            }
            _generateYearCells() {
              let e = u(this.dp.viewDate),
                t = e[0] - 1,
                i = e[1] + 1,
                o = t;
              for (; o <= i; ) this.cells.push(this._generateCell(new Date(o, 0))), o++;
            }
            renderDayNames() {
              this.$names.innerHTML = this._getDayNamesHtml();
            }
            _generateCells() {
              switch (this.type) {
                case i.days:
                  this._generateDayCells();
                  break;
                case i.months:
                  this._generateMonthCells();
                  break;
                case i.years:
                  this._generateYearCells();
              }
            }
            show() {
              (this.isVisible = !0), this.$el.classList.remove('-hidden-');
            }
            hide() {
              (this.isVisible = !1), this.$el.classList.add('-hidden-');
            }
            destroyCells() {
              this.cells.forEach((e) => e.destroy()), (this.cells = []), (this.$cells.innerHTML = '');
            }
            destroy() {
              this.destroyCells(), this.dp.off(i.eventChangeViewDate, this.onChangeViewDate), this.dp.off(i.eventChangeCurrentView, this.onChangeCurrentView);
            }
          }
          function L(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          class B {
            constructor(e) {
              let { dp: t, opts: i } = e;
              L(this, 'onClickNav', (e) => {
                let t = b(e.target, '.air-datepicker-nav--action');
                if (!t) return;
                let i = t.dataset.action;
                this.dp[i]();
              }),
                L(this, 'onChangeViewDate', () => {
                  this.render(), this._resetNavStatus(), this.handleNavStatus();
                }),
                L(this, 'onChangeCurrentView', () => {
                  this.render(), this._resetNavStatus(), this.handleNavStatus();
                }),
                L(this, 'onClickNavTitle', () => {
                  this.dp.isFinalView || this.dp.up();
                }),
                L(this, 'update', () => {
                  let { prevHtml: e, nextHtml: t } = this.opts;
                  (this.$prev.innerHTML = e), (this.$next.innerHTML = t), this._resetNavStatus(), this.render(), this.handleNavStatus();
                }),
                L(this, 'renderDelay', () => {
                  setTimeout(this.render);
                }),
                L(this, 'render', () => {
                  (this.$title.innerHTML = this._getTitle()),
                    (function (e, t) {
                      for (let i in t) t[i] ? e.classList.add(i) : e.classList.remove(i);
                    })(this.$title, { '-disabled-': this.dp.isFinalView });
                }),
                (this.dp = t),
                (this.opts = i),
                this.init();
            }
            init() {
              this._createElement(), this._buildBaseHtml(), this._defineDOM(), this.render(), this.handleNavStatus(), this._bindEvents(), this._bindDatepickerEvents();
            }
            _defineDOM() {
              (this.$title = r('.air-datepicker-nav--title', this.$el)), (this.$prev = r('[data-action="prev"]', this.$el)), (this.$next = r('[data-action="next"]', this.$el));
            }
            _bindEvents() {
              this.$el.addEventListener('click', this.onClickNav), this.$title.addEventListener('click', this.onClickNavTitle);
            }
            _bindDatepickerEvents() {
              this.dp.on(i.eventChangeViewDate, this.onChangeViewDate),
                this.dp.on(i.eventChangeCurrentView, this.onChangeCurrentView),
                this.isNavIsFunction && (this.dp.on(i.eventChangeSelectedDate, this.renderDelay), this.dp.opts.timepicker && this.dp.on(i.eventChangeTime, this.render));
            }
            destroy() {
              this.dp.off(i.eventChangeViewDate, this.onChangeViewDate),
                this.dp.off(i.eventChangeCurrentView, this.onChangeCurrentView),
                this.isNavIsFunction && (this.dp.off(i.eventChangeSelectedDate, this.renderDelay), this.dp.opts.timepicker && this.dp.off(i.eventChangeTime, this.render));
            }
            _createElement() {
              this.$el = a({ tagName: 'nav', className: 'air-datepicker-nav' });
            }
            _getTitle() {
              let { dp: e, opts: t } = this,
                i = t.navTitles[e.currentView];
              return 'function' == typeof i ? i(e) : e.formatDate(e.viewDate, i);
            }
            handleNavStatus() {
              let { disableNavWhenOutOfRange: e } = this.opts,
                { minDate: t, maxDate: o } = this.dp;
              if ((!t && !o) || !e) return;
              let { year: r, month: a } = this.dp.parsedViewDate,
                s = !!t && l(t),
                n = !!o && l(o);
              switch (this.dp.currentView) {
                case i.days:
                  t && s.month >= a && s.year >= r && this._disableNav('prev'), o && n.month <= a && n.year <= r && this._disableNav('next');
                  break;
                case i.months:
                  t && s.year >= r && this._disableNav('prev'), o && n.year <= r && this._disableNav('next');
                  break;
                case i.years: {
                  let e = u(this.dp.viewDate);
                  t && s.year >= e[0] && this._disableNav('prev'), o && n.year <= e[1] && this._disableNav('next');
                  break;
                }
              }
            }
            _disableNav(e) {
              r('[data-action="' + e + '"]', this.$el).classList.add('-disabled-');
            }
            _resetNavStatus() {
              !(function (e) {
                for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) i[o - 1] = arguments[o];
                e.length
                  ? e.forEach((e) => {
                      e.classList.remove(...i);
                    })
                  : e.classList.remove(...i);
              })(this.$el.querySelectorAll('.air-datepicker-nav--action'), '-disabled-');
            }
            _buildBaseHtml() {
              let { prevHtml: e, nextHtml: t } = this.opts;
              this.$el.innerHTML = `<div class="air-datepicker-nav--action" data-action="prev">${e}</div><div class="air-datepicker-nav--title"></div><div class="air-datepicker-nav--action" data-action="next">${t}</div>`;
            }
            get isNavIsFunction() {
              let { navTitles: e } = this.opts;
              return Object.keys(e).find((t) => 'function' == typeof e[t]);
            }
          }
          var T = { today: { content: (e) => e.locale.today, onClick: (e) => e.setViewDate(new Date()) }, clear: { content: (e) => e.locale.clear, onClick: (e) => e.clear() } };
          class M {
            constructor(e) {
              let { dp: t, opts: i } = e;
              (this.dp = t), (this.opts = i), this.init();
            }
            init() {
              this.createElement(), this.render();
            }
            createElement() {
              this.$el = a({ className: 'air-datepicker-buttons' });
            }
            destroy() {
              this.$el.parentNode.removeChild(this.$el);
            }
            clearHtml() {
              return (this.$el.innerHTML = ''), this;
            }
            generateButtons() {
              let { buttons: e } = this.opts;
              Array.isArray(e) || (e = [e]),
                e.forEach((e) => {
                  let t = e;
                  'string' == typeof e && T[e] && (t = T[e]);
                  let i = this.createButton(t);
                  t.onClick && this.attachEventToButton(i, t.onClick), this.$el.appendChild(i);
                });
            }
            attachEventToButton(e, t) {
              e.addEventListener('click', () => {
                t(this.dp);
              });
            }
            createButton(e) {
              let { content: t, className: i, tagName: o = 'button', attrs: r = {} } = e;
              return a({ tagName: o, innerHtml: `<span tabindex='-1'>${'function' == typeof t ? t(this.dp) : t}</span>`, className: h('air-datepicker-button', i), attrs: r });
            }
            render() {
              this.generateButtons();
            }
          }
          function I(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          class $ {
            constructor() {
              let { opts: e, dp: t } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              I(this, 'toggleTimepickerIsActive', (e) => {
                this.dp.timepickerIsActive = e;
              }),
                I(this, 'onChangeSelectedDate', (e) => {
                  let { date: t, updateTime: i = !1 } = e;
                  t && (this.setMinMaxTime(t), this.setCurrentTime(!!i && t), this.addTimeToDate(t));
                }),
                I(this, 'onChangeLastSelectedDate', (e) => {
                  e && (this.setTime(e), this.render());
                }),
                I(this, 'onChangeInputRange', (e) => {
                  let t = e.target;
                  (this[t.getAttribute('name')] = t.value), this.updateText(), this.dp.trigger(i.eventChangeTime, { hours: this.hours, minutes: this.minutes });
                }),
                I(this, 'onMouseEnterLeave', (e) => {
                  let t = e.target.getAttribute('name'),
                    i = this.$minutesText;
                  'hours' === t && (i = this.$hoursText), i.classList.toggle('-focus-');
                }),
                I(this, 'onFocus', () => {
                  this.toggleTimepickerIsActive(!0);
                }),
                I(this, 'onBlur', () => {
                  this.toggleTimepickerIsActive(!1);
                }),
                (this.opts = e),
                (this.dp = t);
              let { timeFormat: o } = this.dp.locale;
              o && (o.match(x('h')) || o.match(x('hh'))) && (this.ampm = !0), this.init();
            }
            init() {
              this.setTime(this.dp.lastSelectedDate || this.dp.viewDate), this.createElement(), this.buildHtml(), this.defineDOM(), this.render(), this.bindDatepickerEvents(), this.bindDOMEvents();
            }
            bindDatepickerEvents() {
              this.dp.on(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.on(i.eventChangeLastSelectedDate, this.onChangeLastSelectedDate);
            }
            bindDOMEvents() {
              let e = 'input';
              navigator.userAgent.match(/trident/gi) && (e = 'change'),
                f(this.$ranges, e, this.onChangeInputRange),
                f(this.$ranges, 'mouseenter', this.onMouseEnterLeave),
                f(this.$ranges, 'mouseleave', this.onMouseEnterLeave),
                f(this.$ranges, 'focus', this.onFocus),
                f(this.$ranges, 'mousedown', this.onFocus),
                f(this.$ranges, 'blur', this.onBlur);
            }
            createElement() {
              this.$el = a({ className: h('air-datepicker-time', { '-am-pm-': this.dp.ampm }) });
            }
            destroy() {
              this.dp.off(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.off(i.eventChangeLastSelectedDate, this.onChangeLastSelectedDate), this.$el.parentNode.removeChild(this.$el);
            }
            buildHtml() {
              let {
                ampm: e,
                hours: t,
                displayHours: i,
                minutes: o,
                minHours: r,
                minMinutes: a,
                maxHours: s,
                maxMinutes: n,
                dayPeriod: l,
                opts: { hoursStep: c, minutesStep: u },
              } = this;
              this.$el.innerHTML =
                `<div class="air-datepicker-time--current">   <span class="air-datepicker-time--current-hours">${d(
                  i
                )}</span>   <span class="air-datepicker-time--current-colon">:</span>   <span class="air-datepicker-time--current-minutes">${d(o)}</span>   ` +
                (e ? `<span class='air-datepicker-time--current-ampm'>${l}</span>` : '') +
                '</div><div class="air-datepicker-time--sliders">   <div class="air-datepicker-time--row">' +
                `      <input type="range" name="hours" value="${t}" min="${r}" max="${s}" step="${c}"/>   </div>   <div class="air-datepicker-time--row">` +
                `      <input type="range" name="minutes" value="${o}" min="${a}" max="${n}" step="${u}"/>   </div></div>`;
            }
            defineDOM() {
              let e = (e) => r(e, this.$el);
              (this.$ranges = this.$el.querySelectorAll('[type="range"]')),
                (this.$hours = e('[name="hours"]')),
                (this.$minutes = e('[name="minutes"]')),
                (this.$hoursText = e('.air-datepicker-time--current-hours')),
                (this.$minutesText = e('.air-datepicker-time--current-minutes')),
                (this.$ampm = e('.air-datepicker-time--current-ampm'));
            }
            setTime(e) {
              this.setMinMaxTime(e), this.setCurrentTime(e);
            }
            addTimeToDate(e) {
              e && (e.setHours(this.hours), e.setMinutes(this.minutes));
            }
            setMinMaxTime(e) {
              if ((this.setMinMaxTimeFromOptions(), e)) {
                let { minDate: t, maxDate: i } = this.dp;
                t && p(e, t) && this.setMinTimeFromMinDate(t), i && p(e, i) && this.setMaxTimeFromMaxDate(i);
              }
            }
            setCurrentTime(e) {
              let { hours: t, minutes: i } = e ? l(e) : this;
              (this.hours = k(t, this.minHours, this.maxHours)), (this.minutes = k(i, this.minMinutes, this.maxMinutes));
            }
            setMinMaxTimeFromOptions() {
              let { minHours: e, minMinutes: t, maxHours: i, maxMinutes: o } = this.opts;
              (this.minHours = k(e, 0, 23)), (this.minMinutes = k(t, 0, 59)), (this.maxHours = k(i, 0, 23)), (this.maxMinutes = k(o, 0, 59));
            }
            setMinTimeFromMinDate(e) {
              let { lastSelectedDate: t } = this.dp;
              (this.minHours = e.getHours()), t && t.getHours() > e.getHours() ? (this.minMinutes = this.opts.minMinutes) : (this.minMinutes = e.getMinutes());
            }
            setMaxTimeFromMaxDate(e) {
              let { lastSelectedDate: t } = this.dp;
              (this.maxHours = e.getHours()), t && t.getHours() < e.getHours() ? (this.maxMinutes = this.opts.maxMinutes) : (this.maxMinutes = e.getMinutes());
            }
            updateSliders() {
              (s(this.$hours, { min: this.minHours, max: this.maxHours }).value = this.hours), (s(this.$minutes, { min: this.minMinutes, max: this.maxMinutes }).value = this.minutes);
            }
            updateText() {
              (this.$hoursText.innerHTML = d(this.displayHours)), (this.$minutesText.innerHTML = d(this.minutes)), this.ampm && (this.$ampm.innerHTML = this.dayPeriod);
            }
            set hours(e) {
              this._hours = e;
              let { hours: t, dayPeriod: i } = c(e);
              (this.displayHours = this.ampm ? t : e), (this.dayPeriod = i);
            }
            get hours() {
              return this._hours;
            }
            render() {
              this.updateSliders(), this.updateText();
            }
          }
          function N(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          class H {
            constructor(e) {
              let { dp: t, opts: i } = e;
              N(this, 'pressedKeys', new Set()),
                N(
                  this,
                  'hotKeys',
                  new Map([
                    [
                      [
                        ['Control', 'ArrowRight'],
                        ['Control', 'ArrowUp'],
                      ],
                      (e) => e.month++,
                    ],
                    [
                      [
                        ['Control', 'ArrowLeft'],
                        ['Control', 'ArrowDown'],
                      ],
                      (e) => e.month--,
                    ],
                    [
                      [
                        ['Shift', 'ArrowRight'],
                        ['Shift', 'ArrowUp'],
                      ],
                      (e) => e.year++,
                    ],
                    [
                      [
                        ['Shift', 'ArrowLeft'],
                        ['Shift', 'ArrowDown'],
                      ],
                      (e) => e.year--,
                    ],
                    [
                      [
                        ['Alt', 'ArrowRight'],
                        ['Alt', 'ArrowUp'],
                      ],
                      (e) => (e.year += 10),
                    ],
                    [
                      [
                        ['Alt', 'ArrowLeft'],
                        ['Alt', 'ArrowDown'],
                      ],
                      (e) => (e.year -= 10),
                    ],
                    [['Control', 'Shift', 'ArrowUp'], (e, t) => t.up()],
                  ])
                ),
                N(this, 'handleHotKey', (e) => {
                  let t = this.hotKeys.get(e),
                    i = l(this.getInitialFocusDate());
                  t(i, this.dp);
                  let { year: o, month: r, date: a } = i,
                    s = n(new Date(o, r));
                  s < a && (a = s);
                  let c = this.dp.getClampedDate(new Date(o, r, a));
                  this.dp.setFocusDate(c, { viewDateTransition: !0 });
                }),
                N(this, 'isHotKeyPressed', () => {
                  let e = !1,
                    t = this.pressedKeys.size,
                    i = (e) => this.pressedKeys.has(e);
                  for (let [o] of this.hotKeys) {
                    if (e) break;
                    if (Array.isArray(o[0]))
                      o.forEach((r) => {
                        e || t !== r.length || (e = r.every(i) && o);
                      });
                    else {
                      if (t !== o.length) continue;
                      e = o.every(i) && o;
                    }
                  }
                  return e;
                }),
                N(this, 'isArrow', (e) => e >= 37 && e <= 40),
                N(this, 'onKeyDown', (e) => {
                  let { key: t, which: i } = e,
                    {
                      dp: o,
                      dp: { focusDate: r },
                      opts: a,
                    } = this;
                  this.registerKey(t);
                  let s = this.isHotKeyPressed();
                  if (s) return e.preventDefault(), void this.handleHotKey(s);
                  if (this.isArrow(i)) return e.preventDefault(), void this.focusNextCell(t);
                  if ('Enter' === t) {
                    if (o.currentView !== a.minView) return void o.down();
                    if (r) {
                      let e = o._checkIfDateIsSelected(r);
                      return void (e ? o._handleAlreadySelectedDates(e, r) : o.selectDate(r));
                    }
                  }
                  'Escape' === t && this.dp.hide();
                }),
                N(this, 'onKeyUp', (e) => {
                  this.removeKey(e.key);
                }),
                (this.dp = t),
                (this.opts = i),
                this.init();
            }
            init() {
              this.bindKeyboardEvents();
            }
            bindKeyboardEvents() {
              let { $el: e } = this.dp;
              e.addEventListener('keydown', this.onKeyDown), e.addEventListener('keyup', this.onKeyUp);
            }
            destroy() {
              let { $el: e } = this.dp;
              e.removeEventListener('keydown', this.onKeyDown), e.removeEventListener('keyup', this.onKeyUp), (this.hotKeys = null), (this.pressedKeys = null);
            }
            getInitialFocusDate() {
              let {
                  focusDate: e,
                  currentView: t,
                  selectedDates: o,
                  parsedViewDate: { year: r, month: a },
                } = this.dp,
                s = e || o[o.length - 1];
              if (!s)
                switch (t) {
                  case i.days:
                    s = new Date(r, a, new Date().getDate());
                    break;
                  case i.months:
                    s = new Date(r, a, 1);
                    break;
                  case i.years:
                    s = new Date(r, 0, 1);
                }
              return s;
            }
            focusNextCell(e) {
              let t = this.getInitialFocusDate(),
                { currentView: o } = this.dp,
                { days: r, months: a, years: s } = i,
                n = l(t),
                c = n.year,
                d = n.month,
                u = n.date;
              switch (e) {
                case 'ArrowLeft':
                  o === r && (u -= 1), o === a && (d -= 1), o === s && (c -= 1);
                  break;
                case 'ArrowUp':
                  o === r && (u -= 7), o === a && (d -= 3), o === s && (c -= 4);
                  break;
                case 'ArrowRight':
                  o === r && (u += 1), o === a && (d += 1), o === s && (c += 1);
                  break;
                case 'ArrowDown':
                  o === r && (u += 7), o === a && (d += 3), o === s && (c += 4);
              }
              let h = this.dp.getClampedDate(new Date(c, d, u));
              this.dp.setFocusDate(h, { viewDateTransition: !0 });
            }
            registerKey(e) {
              this.pressedKeys.add(e);
            }
            removeKey(e) {
              this.pressedKeys.delete(e);
            }
          }
          let P = {
            on(e, t) {
              this.__events || (this.__events = {}), this.__events[e] ? this.__events[e].push(t) : (this.__events[e] = [t]);
            },
            off(e, t) {
              this.__events && this.__events[e] && (this.__events[e] = this.__events[e].filter((e) => e !== t));
            },
            removeAllEvents() {
              this.__events = {};
            },
            trigger(e) {
              for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) i[o - 1] = arguments[o];
              this.__events &&
                this.__events[e] &&
                this.__events[e].forEach((e) => {
                  e(...i);
                });
            },
          };
          function j(e, t, i) {
            return (
              (t = (function (e) {
                var t = (function (e, t) {
                  if ('object' != typeof e || null === e) return e;
                  var i = e[Symbol.toPrimitive];
                  if (void 0 !== i) {
                    var o = i.call(e, 'string');
                    if ('object' != typeof o) return o;
                    throw new TypeError('@@toPrimitive must return a primitive value.');
                  }
                  return String(e);
                })(e);
                return 'symbol' == typeof t ? t : String(t);
              })(t)) in e
                ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 })
                : (e[t] = i),
              e
            );
          }
          let V = '',
            z = '',
            F = !1;
          class U {
            static buildGlobalContainer(e) {
              (F = !0), (V = a({ className: e, id: e })), r('body').appendChild(V);
            }
            constructor(e, t) {
              var s = this;
              if (
                (j(this, 'viewIndexes', [i.days, i.months, i.years]),
                j(this, 'next', () => {
                  let { year: e, month: t } = this.parsedViewDate;
                  switch (this.currentView) {
                    case i.days:
                      this.setViewDate(new Date(e, t + 1, 1));
                      break;
                    case i.months:
                      this.setViewDate(new Date(e + 1, t, 1));
                      break;
                    case i.years:
                      this.setViewDate(new Date(e + 10, 0, 1));
                  }
                }),
                j(this, 'prev', () => {
                  let { year: e, month: t } = this.parsedViewDate;
                  switch (this.currentView) {
                    case i.days:
                      this.setViewDate(new Date(e, t - 1, 1));
                      break;
                    case i.months:
                      this.setViewDate(new Date(e - 1, t, 1));
                      break;
                    case i.years:
                      this.setViewDate(new Date(e - 10, 0, 1));
                  }
                }),
                j(this, '_finishHide', () => {
                  (this.hideAnimation = !1), this._destroyComponents(), this.$container.removeChild(this.$datepicker);
                }),
                j(this, 'setPosition', function (e) {
                  let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                  if ('function' == typeof (e = e || s.opts.position))
                    return void (s.customHide = e({ $datepicker: s.$datepicker, $target: s.$el, $pointer: s.$pointer, isViewChange: t, done: s._finishHide }));
                  let i,
                    o,
                    { isMobile: r } = s.opts,
                    a = s.$el.getBoundingClientRect(),
                    n = s.$el.getBoundingClientRect(),
                    l = s.$datepicker.offsetParent,
                    c = s.$el.offsetParent,
                    d = s.$datepicker.getBoundingClientRect(),
                    u = e.split(' '),
                    h = window.scrollY,
                    p = window.scrollX,
                    g = s.opts.offset,
                    m = u[0],
                    y = u[1];
                  if (r) s.$datepicker.style.cssText = 'left: 50%; top: 50%';
                  else {
                    if (
                      (l === c && l !== document.body && ((n = { top: s.$el.offsetTop, left: s.$el.offsetLeft, width: a.width, height: s.$el.offsetHeight }), (h = 0), (p = 0)),
                      l !== c && l !== document.body)
                    ) {
                      let e = l.getBoundingClientRect();
                      (n = { top: a.top - e.top, left: a.left - e.left, width: a.width, height: a.height }), (h = 0), (p = 0);
                    }
                    switch (m) {
                      case 'top':
                        i = n.top - d.height - g;
                        break;
                      case 'right':
                        o = n.left + n.width + g;
                        break;
                      case 'bottom':
                        i = n.top + n.height + g;
                        break;
                      case 'left':
                        o = n.left - d.width - g;
                    }
                    switch (y) {
                      case 'top':
                        i = n.top;
                        break;
                      case 'right':
                        o = n.left + n.width - d.width;
                        break;
                      case 'bottom':
                        i = n.top + n.height - d.height;
                        break;
                      case 'left':
                        o = n.left;
                        break;
                      case 'center':
                        /left|right/.test(m) ? (i = n.top + n.height / 2 - d.height / 2) : (o = n.left + n.width / 2 - d.width / 2);
                    }
                    s.$datepicker.style.cssText = `left: ${o + p}px; top: ${i + h}px`;
                  }
                }),
                j(this, '_setInputValue', () => {
                  let {
                      opts: e,
                      $altField: t,
                      locale: { dateFormat: i },
                    } = this,
                    { altFieldDateFormat: o, altField: r } = e;
                  r && t && (t.value = this._getInputValue(o)), (this.$el.value = this._getInputValue(i));
                }),
                j(this, '_getInputValue', (e) => {
                  let { selectedDates: t, opts: i } = this,
                    { multipleDates: o, multipleDatesSeparator: r } = i;
                  if (!t.length) return '';
                  let a = 'function' == typeof e,
                    s = a ? e(o ? t : t[0]) : t.map((t) => this.formatDate(t, e));
                  return (s = a ? s : s.join(r)), s;
                }),
                j(this, '_checkIfDateIsSelected', function (e) {
                  let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i.days,
                    o = !1;
                  return (
                    s.selectedDates.some((i) => {
                      let r = p(e, i, t);
                      return (o = r && i), r;
                    }),
                    o
                  );
                }),
                j(this, '_scheduleCallAfterTransition', (e) => {
                  this._cancelScheduledCall(),
                    e && e(!1),
                    (this._onTransitionEnd = () => {
                      e && e(!0);
                    }),
                    this.$datepicker.addEventListener('transitionend', this._onTransitionEnd, { once: !0 });
                }),
                j(this, '_cancelScheduledCall', () => {
                  this.$datepicker.removeEventListener('transitionend', this._onTransitionEnd);
                }),
                j(this, 'setViewDate', (e) => {
                  if (!((e = A(e)) instanceof Date)) return;
                  if (p(e, this.viewDate)) return;
                  let t = this.viewDate;
                  this.viewDate = e;
                  let { onChangeViewDate: o } = this.opts;
                  if (o) {
                    let { month: e, year: t } = this.parsedViewDate;
                    o({ month: e, year: t, decade: this.curDecade });
                  }
                  this.trigger(i.eventChangeViewDate, e, t);
                }),
                j(this, 'setFocusDate', function (e) {
                  let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                  (!e || (e = A(e)) instanceof Date) && ((s.focusDate = e), s.opts.range && e && s._handleRangeOnFocus(), s.trigger(i.eventChangeFocusDate, e, t));
                }),
                j(this, 'setCurrentView', (e) => {
                  if (this.viewIndexes.includes(e)) {
                    if (((this.currentView = e), this.elIsInput && this.visible && this.setPosition(void 0, !0), this.trigger(i.eventChangeCurrentView, e), !this.views[e])) {
                      let t = (this.views[e] = new D({ dp: this, opts: this.opts, type: e }));
                      this.shouldUpdateDOM && this.$content.appendChild(t.$el);
                    }
                    this.opts.onChangeView && this.opts.onChangeView(e);
                  }
                }),
                j(this, '_updateLastSelectedDate', (e) => {
                  (this.lastSelectedDate = e), this.trigger(i.eventChangeLastSelectedDate, e);
                }),
                j(this, 'destroy', () => {
                  let { showEvent: e, isMobile: t } = this.opts,
                    i = this.$datepicker.parentNode;
                  i && i.removeChild(this.$datepicker),
                    this.$el.removeEventListener(e, this._onFocus),
                    this.$el.removeEventListener('blur', this._onBlur),
                    window.removeEventListener('resize', this._onResize),
                    t && this._removeMobileAttributes(),
                    this.keyboardNav && this.keyboardNav.destroy(),
                    (this.views = null),
                    (this.nav = null),
                    (this.$datepicker = null),
                    (this.opts = null),
                    (this.$customContainer = null),
                    (this.viewDate = null),
                    (this.focusDate = null),
                    (this.selectedDates = null),
                    (this.rangeDateFrom = null),
                    (this.rangeDateTo = null);
                }),
                j(this, 'update', (e) => {
                  let t = v({}, this.opts);
                  v(this.opts, e);
                  let { timepicker: o, buttons: r, range: a, selectedDates: s, isMobile: n } = this.opts,
                    l = this.visible || this.treatAsInline;
                  this._createMinMaxDates(),
                    this._limitViewDateByMaxMinDates(),
                    this._handleLocale(),
                    !t.selectedDates && s && this.selectDate(s),
                    e.view && this.setCurrentView(e.view),
                    this._setInputValue(),
                    t.range && !a
                      ? ((this.rangeDateTo = !1), (this.rangeDateFrom = !1))
                      : !t.range && a && this.selectedDates.length && ((this.rangeDateFrom = this.selectedDates[0]), (this.rangeDateTo = this.selectedDates[1])),
                    t.timepicker && !o
                      ? (l && this.timepicker.destroy(), (this.timepicker = !1), this.$timepicker.parentNode.removeChild(this.$timepicker))
                      : !t.timepicker && o && this._addTimepicker(),
                    !t.buttons && r
                      ? this._addButtons()
                      : t.buttons && !r
                      ? (this.buttons.destroy(), this.$buttons.parentNode.removeChild(this.$buttons))
                      : l && t.buttons && r && this.buttons.clearHtml().render(),
                    !t.isMobile && n
                      ? (this.treatAsInline || z || this._createMobileOverlay(), this._addMobileAttributes(), this.visible && this._showMobileOverlay())
                      : t.isMobile && !n && (this._removeMobileAttributes(), this.visible && (z.classList.remove('-active-'), 'function' != typeof this.opts.position && this.setPosition())),
                    l && (this.nav.update(), this.views[this.currentView].render(), this.currentView === i.days && this.views[this.currentView].renderDayNames());
                }),
                j(this, 'isOtherMonth', (e) => {
                  let { month: t } = l(e);
                  return t !== this.parsedViewDate.month;
                }),
                j(this, 'isOtherYear', (e) => {
                  let { year: t } = l(e);
                  return t !== this.parsedViewDate.year;
                }),
                j(this, 'isOtherDecade', (e) => {
                  let { year: t } = l(e),
                    [i, o] = u(this.viewDate);
                  return t < i || t > o;
                }),
                j(this, '_onChangeSelectedDate', (e) => {
                  let { silent: t } = e;
                  setTimeout(() => {
                    this._setInputValue(), this.opts.onSelect && !t && this._triggerOnSelect();
                  });
                }),
                j(this, '_onChangeFocusedDate', function (e) {
                  let { viewDateTransition: t } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                  if (!e) return;
                  let i = !1;
                  t && (i = s.isOtherMonth(e) || s.isOtherYear(e) || s.isOtherDecade(e)), i && s.setViewDate(e);
                }),
                j(this, '_onChangeTime', (e) => {
                  let { hours: t, minutes: i } = e,
                    o = new Date(),
                    {
                      lastSelectedDate: r,
                      opts: { onSelect: a },
                    } = this,
                    s = r;
                  r || (s = o);
                  let n = this.getCell(s, this.currentViewSingular),
                    l = n && n.adpCell;
                  (l && l.isDisabled) || (s.setHours(t), s.setMinutes(i), r ? (this._setInputValue(), a && this._triggerOnSelect()) : this.selectDate(s));
                }),
                j(this, '_onFocus', (e) => {
                  this.visible || this.show();
                }),
                j(this, '_onBlur', (e) => {
                  this.inFocus || !this.visible || this.opts.isMobile || this.hide();
                }),
                j(this, '_onMouseDown', (e) => {
                  this.inFocus = !0;
                }),
                j(this, '_onMouseUp', (e) => {
                  (this.inFocus = !1), this.$el.focus();
                }),
                j(this, '_onResize', () => {
                  this.visible && 'function' != typeof this.opts.position && this.setPosition();
                }),
                j(this, '_onClickOverlay', () => {
                  this.visible && this.hide();
                }),
                j(this, 'isWeekend', (e) => this.opts.weekends.includes(e)),
                j(this, 'getClampedDate', (e) => {
                  let { minDate: t, maxDate: i } = this,
                    o = e;
                  return i && g(e, i) ? (o = i) : t && m(e, t) && (o = t), o;
                }),
                (this.$el = r(e)),
                !this.$el)
              )
                return;
              (this.$datepicker = a({ className: 'air-datepicker' })),
                (this.opts = v({}, o, t)),
                (this.$customContainer = !!this.opts.container && r(this.opts.container)),
                (this.$altField = r(this.opts.altField || !1));
              let { view: n, startDate: c } = this.opts;
              c || (this.opts.startDate = new Date()),
                'INPUT' === this.$el.nodeName && (this.elIsInput = !0),
                (this.inited = !1),
                (this.visible = !1),
                (this.viewDate = A(this.opts.startDate)),
                (this.focusDate = !1),
                (this.initialReadonly = this.$el.getAttribute('readonly')),
                (this.customHide = !1),
                (this.currentView = n),
                (this.selectedDates = []),
                (this.views = {}),
                (this.keys = []),
                (this.rangeDateFrom = ''),
                (this.rangeDateTo = ''),
                (this.timepickerIsActive = !1),
                (this.treatAsInline = this.opts.inline || !this.elIsInput),
                this.init();
            }
            init() {
              let {
                  opts: e,
                  treatAsInline: t,
                  opts: { inline: i, isMobile: o, selectedDates: a, keyboardNav: s, onlyTimepicker: n },
                } = this,
                l = r('body');
              (!F || (F && V && !l.contains(V))) && !i && this.elIsInput && !this.$customContainer && U.buildGlobalContainer(U.defaultGlobalContainerId),
                !o || z || t || this._createMobileOverlay(),
                this._handleLocale(),
                this._bindSubEvents(),
                this._createMinMaxDates(),
                this._limitViewDateByMaxMinDates(),
                this.elIsInput && (i || this._bindEvents(), s && !n && (this.keyboardNav = new H({ dp: this, opts: e }))),
                a && this.selectDate(a, { silent: !0 }),
                this.opts.visible && !t && this.show(),
                o && !t && this.$el.setAttribute('readonly', !0),
                t && this._createComponents();
            }
            _createMobileOverlay() {
              (z = a({ className: 'air-datepicker-overlay' })), V.appendChild(z);
            }
            _createComponents() {
              let {
                opts: e,
                treatAsInline: t,
                opts: { inline: i, buttons: o, timepicker: r, position: a, classes: s, onlyTimepicker: n, isMobile: l },
              } = this;
              this._buildBaseHtml(),
                this.elIsInput && (i || this._setPositionClasses(a)),
                (!i && this.elIsInput) || this.$datepicker.classList.add('-inline-'),
                s && this.$datepicker.classList.add(...s.split(' ')),
                n && this.$datepicker.classList.add('-only-timepicker-'),
                l && !t && this._addMobileAttributes(),
                (this.views[this.currentView] = new D({ dp: this, type: this.currentView, opts: e })),
                (this.nav = new B({ dp: this, opts: e })),
                r && this._addTimepicker(),
                o && this._addButtons(),
                this.$content.appendChild(this.views[this.currentView].$el),
                this.$nav.appendChild(this.nav.$el);
            }
            _destroyComponents() {
              for (let e in this.views) this.views[e].destroy();
              (this.views = {}), this.nav.destroy(), this.timepicker && this.timepicker.destroy();
            }
            _addMobileAttributes() {
              z.addEventListener('click', this._onClickOverlay), this.$datepicker.classList.add('-is-mobile-'), this.$el.setAttribute('readonly', !0);
            }
            _removeMobileAttributes() {
              z.removeEventListener('click', this._onClickOverlay),
                this.$datepicker.classList.remove('-is-mobile-'),
                this.initialReadonly || '' === this.initialReadonly || this.$el.removeAttribute('readonly');
            }
            _createMinMaxDates() {
              let { minDate: e, maxDate: t } = this.opts;
              (this.minDate = !!e && A(e)), (this.maxDate = !!t && A(t));
            }
            _addTimepicker() {
              (this.$timepicker = a({ className: 'air-datepicker--time' })),
                this.$datepicker.appendChild(this.$timepicker),
                (this.timepicker = new $({ dp: this, opts: this.opts })),
                this.$timepicker.appendChild(this.timepicker.$el);
            }
            _addButtons() {
              (this.$buttons = a({ className: 'air-datepicker--buttons' })),
                this.$datepicker.appendChild(this.$buttons),
                (this.buttons = new M({ dp: this, opts: this.opts })),
                this.$buttons.appendChild(this.buttons.$el);
            }
            _bindSubEvents() {
              this.on(i.eventChangeSelectedDate, this._onChangeSelectedDate), this.on(i.eventChangeFocusDate, this._onChangeFocusedDate), this.on(i.eventChangeTime, this._onChangeTime);
            }
            _buildBaseHtml() {
              let { inline: e } = this.opts;
              var t, i;
              this.elIsInput
                ? e
                  ? ((t = this.$datepicker), (i = this.$el).parentNode.insertBefore(t, i.nextSibling))
                  : this.$container.appendChild(this.$datepicker)
                : this.$el.appendChild(this.$datepicker),
                (this.$datepicker.innerHTML = '<i class="air-datepicker--pointer"></i><div class="air-datepicker--navigation"></div><div class="air-datepicker--content"></div>'),
                (this.$content = r('.air-datepicker--content', this.$datepicker)),
                (this.$pointer = r('.air-datepicker--pointer', this.$datepicker)),
                (this.$nav = r('.air-datepicker--navigation', this.$datepicker));
            }
            _handleLocale() {
              let { locale: e, dateFormat: t, firstDay: i, timepicker: o, onlyTimepicker: r, timeFormat: a, dateTimeSeparator: s } = this.opts;
              var n;
              (this.locale = ((n = e), JSON.parse(JSON.stringify(n)))), t && (this.locale.dateFormat = t), void 0 !== a && '' !== a && (this.locale.timeFormat = a);
              let { timeFormat: l } = this.locale;
              if (('' !== i && (this.locale.firstDay = i), o && 'function' != typeof t)) {
                let e = l ? s : '';
                this.locale.dateFormat = [this.locale.dateFormat, l || ''].join(e);
              }
              r && 'function' != typeof t && (this.locale.dateFormat = this.locale.timeFormat);
            }
            _setPositionClasses(e) {
              if ('function' == typeof e) return void this.$datepicker.classList.add('-custom-position-');
              let t = (e = e.split(' '))[0],
                i = `air-datepicker -${t}-${e[1]}- -from-${t}-`;
              this.$datepicker.classList.add(...i.split(' '));
            }
            _bindEvents() {
              this.$el.addEventListener(this.opts.showEvent, this._onFocus),
                this.$el.addEventListener('blur', this._onBlur),
                this.$datepicker.addEventListener('mousedown', this._onMouseDown),
                this.$datepicker.addEventListener('mouseup', this._onMouseUp),
                window.addEventListener('resize', this._onResize);
            }
            _limitViewDateByMaxMinDates() {
              let { viewDate: e, minDate: t, maxDate: i } = this;
              i && g(e, i) && this.setViewDate(i), t && m(e, t) && this.setViewDate(t);
            }
            formatDate() {
              let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.viewDate,
                t = arguments.length > 1 ? arguments[1] : void 0;
              if (((e = A(e)), !(e instanceof Date))) return;
              let i = t,
                o = this.locale,
                r = l(e),
                a = r.dayPeriod,
                s = u(e),
                n = U.replacer,
                c = {
                  T: e.getTime(),
                  m: r.minutes,
                  mm: r.fullMinutes,
                  h: r.hours12,
                  hh: r.fullHours12,
                  H: r.hours,
                  HH: r.fullHours,
                  aa: a,
                  AA: a.toUpperCase(),
                  E: o.daysShort[r.day],
                  EEEE: o.days[r.day],
                  d: r.date,
                  dd: r.fullDate,
                  M: r.month + 1,
                  MM: r.fullMonth,
                  MMM: o.monthsShort[r.month],
                  MMMM: o.months[r.month],
                  yy: r.year.toString().slice(-2),
                  yyyy: r.year,
                  yyyy1: s[0],
                  yyyy2: s[1],
                };
              for (let [e, t] of Object.entries(c)) i = n(i, x(e), t);
              return i;
            }
            down(e) {
              this._handleUpDownActions(e, 'down');
            }
            up(e) {
              this._handleUpDownActions(e, 'up');
            }
            selectDate(e) {
              let t,
                o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                { currentView: r, parsedViewDate: a, selectedDates: s } = this,
                { updateTime: n } = o,
                { moveToOtherMonthsOnSelect: l, moveToOtherYearsOnSelect: c, multipleDates: d, range: u, autoClose: h } = this.opts,
                p = s.length;
              if (Array.isArray(e))
                return (
                  e.forEach((e) => {
                    this.selectDate(e, o);
                  }),
                  new Promise((e) => {
                    setTimeout(e);
                  })
                );
              if ((e = A(e)) instanceof Date) {
                if (
                  (r === i.days && e.getMonth() !== a.month && l && (t = new Date(e.getFullYear(), e.getMonth(), 1)),
                  r === i.years && e.getFullYear() !== a.year && c && (t = new Date(e.getFullYear(), 0, 1)),
                  t && this.setViewDate(t),
                  d && !u)
                ) {
                  if (p === d) return;
                  this._checkIfDateIsSelected(e) || s.push(e);
                } else if (u)
                  switch (p) {
                    case 1:
                      s.push(e),
                        this.rangeDateTo || (this.rangeDateTo = e),
                        g(this.rangeDateFrom, this.rangeDateTo) && ((this.rangeDateTo = this.rangeDateFrom), (this.rangeDateFrom = e)),
                        (this.selectedDates = [this.rangeDateFrom, this.rangeDateTo]);
                      break;
                    case 2:
                      (this.selectedDates = [e]), (this.rangeDateFrom = e), (this.rangeDateTo = '');
                      break;
                    default:
                      (this.selectedDates = [e]), (this.rangeDateFrom = e);
                  }
                else this.selectedDates = [e];
                return (
                  this.trigger(i.eventChangeSelectedDate, { action: i.actionSelectDate, silent: null == o ? void 0 : o.silent, date: e, updateTime: n }),
                  this._updateLastSelectedDate(e),
                  h && !this.timepickerIsActive && this.visible && (d || u ? u && 1 === p && this.hide() : this.hide()),
                  new Promise((e) => {
                    setTimeout(e);
                  })
                );
              }
            }
            unselectDate(e) {
              let t = this.selectedDates,
                o = this;
              if ((e = A(e)) instanceof Date)
                return t.some((r, a) => {
                  if (p(r, e))
                    return (
                      t.splice(a, 1),
                      o.selectedDates.length ? o._updateLastSelectedDate(o.selectedDates[o.selectedDates.length - 1]) : ((o.rangeDateFrom = ''), (o.rangeDateTo = ''), o._updateLastSelectedDate(!1)),
                      this.trigger(i.eventChangeSelectedDate, { action: i.actionUnselectDate, date: e }),
                      !0
                    );
                });
            }
            replaceDate(e, t) {
              let o = this.selectedDates.find((t) => p(t, e, this.currentView)),
                r = this.selectedDates.indexOf(o);
              r < 0 ||
                p(this.selectedDates[r], t, this.currentView) ||
                ((this.selectedDates[r] = t), this.trigger(i.eventChangeSelectedDate, { action: i.actionSelectDate, date: t, updateTime: !0 }), this._updateLastSelectedDate(t));
            }
            clear() {
              let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              return (
                (this.selectedDates = []),
                (this.rangeDateFrom = !1),
                (this.rangeDateTo = !1),
                this.trigger(i.eventChangeSelectedDate, { action: i.actionUnselectDate, silent: e.silent }),
                new Promise((e) => {
                  setTimeout(e);
                })
              );
            }
            show() {
              let { onShow: e, isMobile: t } = this.opts;
              this._cancelScheduledCall(),
                this.visible || this.hideAnimation || this._createComponents(),
                this.setPosition(this.opts.position),
                this.$datepicker.classList.add('-active-'),
                (this.visible = !0),
                e && this._scheduleCallAfterTransition(e),
                t && this._showMobileOverlay();
            }
            hide() {
              let { onHide: e, isMobile: t } = this.opts,
                i = this._hasTransition();
              (this.visible = !1),
                (this.hideAnimation = !0),
                this.$datepicker.classList.remove('-active-'),
                this.customHide && this.customHide(),
                this.elIsInput && this.$el.blur(),
                this._scheduleCallAfterTransition((t) => {
                  !this.customHide && ((t && i) || (!t && !i)) && this._finishHide(), e && e(t);
                }),
                t && z.classList.remove('-active-');
            }
            _triggerOnSelect() {
              let e = [],
                t = [],
                {
                  selectedDates: i,
                  locale: o,
                  opts: { onSelect: r, multipleDates: a, range: s },
                } = this,
                n = a || s,
                l = 'function' == typeof o.dateFormat;
              i.length && ((e = i.map(y)), (t = l ? (a ? o.dateFormat(e) : e.map((e) => o.dateFormat(e))) : e.map((e) => this.formatDate(e, o.dateFormat)))),
                r({ date: n ? e : e[0], formattedDate: n ? t : t[0], datepicker: this });
            }
            _handleAlreadySelectedDates(e, t) {
              let { range: i, toggleSelected: o } = this.opts;
              i ? (o ? this.unselectDate(t) : 2 !== this.selectedDates.length && this.selectDate(t)) : o && this.unselectDate(t), o || this._updateLastSelectedDate(e);
            }
            _handleUpDownActions(e, t) {
              if (!((e = A(e || this.focusDate || this.viewDate)) instanceof Date)) return;
              let i = 'up' === t ? this.viewIndex + 1 : this.viewIndex - 1;
              i > 2 && (i = 2), i < 0 && (i = 0), this.setViewDate(new Date(e.getFullYear(), e.getMonth(), 1)), this.setCurrentView(this.viewIndexes[i]);
            }
            _handleRangeOnFocus() {
              1 === this.selectedDates.length &&
                (g(this.selectedDates[0], this.focusDate)
                  ? ((this.rangeDateTo = this.selectedDates[0]), (this.rangeDateFrom = this.focusDate))
                  : ((this.rangeDateTo = this.focusDate), (this.rangeDateFrom = this.selectedDates[0])));
            }
            getCell(e) {
              let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i.day;
              if (!((e = A(e)) instanceof Date)) return;
              let { year: o, month: r, date: a } = l(e),
                s = `[data-year="${o}"]`,
                n = `[data-month="${r}"]`,
                c = { [i.day]: `${s}${n}[data-date="${a}"]`, [i.month]: `${s}${n}`, [i.year]: `${s}` };
              return this.views[this.currentView].$el.querySelector(c[t]);
            }
            _showMobileOverlay() {
              z.classList.add('-active-');
            }
            _hasTransition() {
              return (
                window
                  .getComputedStyle(this.$datepicker)
                  .getPropertyValue('transition-duration')
                  .split(', ')
                  .reduce((e, t) => parseFloat(t) + e, 0) > 0
              );
            }
            get shouldUpdateDOM() {
              return this.visible || this.treatAsInline;
            }
            get parsedViewDate() {
              return l(this.viewDate);
            }
            get currentViewSingular() {
              return this.currentView.slice(0, -1);
            }
            get curDecade() {
              return u(this.viewDate);
            }
            get viewIndex() {
              return this.viewIndexes.indexOf(this.currentView);
            }
            get isFinalView() {
              return this.currentView === i.years;
            }
            get hasSelectedDates() {
              return this.selectedDates.length > 0;
            }
            get isMinViewReached() {
              return this.currentView === this.opts.minView || this.currentView === i.days;
            }
            get $container() {
              return this.$customContainer || V;
            }
            static replacer(e, t, i) {
              return e.replace(t, function (e, t, o, r) {
                return t + i + r;
              });
            }
          }
          var Y;
          return j(U, 'defaults', o), j(U, 'version', '3.3.5'), j(U, 'defaultGlobalContainerId', 'air-datepicker-global-container'), (Y = U.prototype), Object.assign(Y, P), t.default;
        })();
      },
      102: (e, t, i) => {
        'use strict';
        i.d(t, { Z: () => n });
        var o = i(15),
          r = i.n(o),
          a = i(645),
          s = i.n(a)()(r());
        s.push([
          e.id,
          '.air-datepicker-cell.-year-.-other-decade-,.air-datepicker-cell.-day-.-other-month-{color:var(--adp-color-other-month)}.air-datepicker-cell.-year-.-other-decade-:hover,.air-datepicker-cell.-day-.-other-month-:hover{color:var(--adp-color-other-month-hover)}.-disabled-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-disabled-.-focus-.air-datepicker-cell.-day-.-other-month-{color:var(--adp-color-other-month)}.-selected-.air-datepicker-cell.-year-.-other-decade-,.-selected-.air-datepicker-cell.-day-.-other-month-{color:#fff;background:var(--adp-background-color-selected-other-month)}.-selected-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-selected-.-focus-.air-datepicker-cell.-day-.-other-month-{background:var(--adp-background-color-selected-other-month-focused)}.-in-range-.air-datepicker-cell.-year-.-other-decade-,.-in-range-.air-datepicker-cell.-day-.-other-month-{background-color:var(--adp-background-color-in-range);color:var(--adp-color)}.-in-range-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-in-range-.-focus-.air-datepicker-cell.-day-.-other-month-{background-color:var(--adp-background-color-in-range-focused)}.air-datepicker-cell.-year-.-other-decade-:empty,.air-datepicker-cell.-day-.-other-month-:empty{background:none;border:none}.air-datepicker-cell{border-radius:var(--adp-cell-border-radius);box-sizing:border-box;cursor:pointer;display:flex;position:relative;align-items:center;justify-content:center;z-index:1}.air-datepicker-cell.-focus-{background:var(--adp-cell-background-color-hover)}.air-datepicker-cell.-current-{color:var(--adp-color-current-date)}.air-datepicker-cell.-current-.-focus-{color:var(--adp-color)}.air-datepicker-cell.-current-.-in-range-{color:var(--adp-color-current-date)}.air-datepicker-cell.-disabled-{cursor:default;color:var(--adp-color-disabled)}.air-datepicker-cell.-disabled-.-focus-{color:var(--adp-color-disabled)}.air-datepicker-cell.-disabled-.-in-range-{color:var(--adp-color-disabled-in-range)}.air-datepicker-cell.-disabled-.-current-.-focus-{color:var(--adp-color-disabled)}.air-datepicker-cell.-in-range-{background:var(--adp-cell-background-color-in-range);border-radius:0}.air-datepicker-cell.-in-range-:hover{background:var(--adp-cell-background-color-in-range-hover)}.air-datepicker-cell.-range-from-{border:1px solid var(--adp-cell-border-color-in-range);background-color:var(--adp-cell-background-color-in-range);border-radius:var(--adp-cell-border-radius) 0 0 var(--adp-cell-border-radius)}.air-datepicker-cell.-range-to-{border:1px solid var(--adp-cell-border-color-in-range);background-color:var(--adp-cell-background-color-in-range);border-radius:0 var(--adp-cell-border-radius) var(--adp-cell-border-radius) 0}.air-datepicker-cell.-range-to-.-range-from-{border-radius:var(--adp-cell-border-radius)}.air-datepicker-cell.-selected-{color:#fff;border:none;background:var(--adp-cell-background-color-selected)}.air-datepicker-cell.-selected-.-current-{color:#fff;background:var(--adp-cell-background-color-selected)}.air-datepicker-cell.-selected-.-focus-{background:var(--adp-cell-background-color-selected-hover)}\r\n.air-datepicker-body{transition:all var(--adp-transition-duration) var(--adp-transition-ease)}.air-datepicker-body.-hidden-{display:none}.air-datepicker-body--day-names{display:grid;grid-template-columns:repeat(7, var(--adp-day-cell-width));margin:8px 0 3px}.air-datepicker-body--day-name{color:var(--adp-day-name-color);display:flex;align-items:center;justify-content:center;flex:1;text-align:center;text-transform:uppercase;font-size:.8em}.air-datepicker-body--day-name.-clickable-{cursor:pointer}.air-datepicker-body--day-name.-clickable-:hover{color:var(--adp-day-name-color-hover)}.air-datepicker-body--cells{display:grid}.air-datepicker-body--cells.-days-{grid-template-columns:repeat(7, var(--adp-day-cell-width));grid-auto-rows:var(--adp-day-cell-height)}.air-datepicker-body--cells.-months-{grid-template-columns:repeat(3, 1fr);grid-auto-rows:var(--adp-month-cell-height)}.air-datepicker-body--cells.-years-{grid-template-columns:repeat(4, 1fr);grid-auto-rows:var(--adp-year-cell-height)}\r\n.air-datepicker-nav{display:flex;justify-content:space-between;border-bottom:1px solid var(--adp-border-color-inner);min-height:var(--adp-nav-height);padding:var(--adp-padding);box-sizing:content-box}.-only-timepicker- .air-datepicker-nav{display:none}.air-datepicker-nav--title,.air-datepicker-nav--action{display:flex;cursor:pointer;align-items:center;justify-content:center}.air-datepicker-nav--action{width:var(--adp-nav-action-size);border-radius:var(--adp-border-radius);-webkit-user-select:none;-moz-user-select:none;user-select:none}.air-datepicker-nav--action:hover{background:var(--adp-background-color-hover)}.air-datepicker-nav--action:active{background:var(--adp-background-color-active)}.air-datepicker-nav--action.-disabled-{visibility:hidden}.air-datepicker-nav--action svg{width:32px;height:32px}.air-datepicker-nav--action path{fill:none;stroke:var(--adp-nav-arrow-color);stroke-width:2px}.air-datepicker-nav--title{border-radius:var(--adp-border-radius);padding:0 8px}.air-datepicker-nav--title i{font-style:normal;color:var(--adp-nav-color-secondary);margin-left:.3em}.air-datepicker-nav--title:hover{background:var(--adp-background-color-hover)}.air-datepicker-nav--title:active{background:var(--adp-background-color-active)}.air-datepicker-nav--title.-disabled-{cursor:default;background:none}\r\n.air-datepicker-buttons{display:grid;grid-auto-columns:1fr;grid-auto-flow:column}.air-datepicker-button{display:inline-flex;color:var(--adp-btn-color);border-radius:var(--adp-btn-border-radius);cursor:pointer;height:var(--adp-btn-height);border:none;background:rgba(255,255,255,0)}.air-datepicker-button:hover{color:var(--adp-btn-color-hover);background:var(--adp-btn-background-color-hover)}.air-datepicker-button:focus{color:var(--adp-btn-color-hover);background:var(--adp-btn-background-color-hover);outline:none}.air-datepicker-button:active{background:var(--adp-btn-background-color-active)}.air-datepicker-button span{outline:none;display:flex;align-items:center;justify-content:center;width:100%;height:100%}\r\n.air-datepicker-time{display:grid;grid-template-columns:max-content 1fr;grid-column-gap:12px;align-items:center;position:relative;padding:0 var(--adp-time-padding-inner)}.-only-timepicker- .air-datepicker-time{border-top:none}.air-datepicker-time--current{display:flex;align-items:center;flex:1;font-size:14px;text-align:center}.air-datepicker-time--current-colon{margin:0 2px 3px;line-height:1}.air-datepicker-time--current-hours,.air-datepicker-time--current-minutes{line-height:1;font-size:19px;font-family:"Century Gothic",CenturyGothic,AppleGothic,sans-serif;position:relative;z-index:1}.air-datepicker-time--current-hours:after,.air-datepicker-time--current-minutes:after{content:"";background:var(--adp-background-color-hover);border-radius:var(--adp-border-radius);position:absolute;left:-2px;top:-3px;right:-2px;bottom:-2px;z-index:-1;opacity:0}.air-datepicker-time--current-hours.-focus-:after,.air-datepicker-time--current-minutes.-focus-:after{opacity:1}.air-datepicker-time--current-ampm{text-transform:uppercase;align-self:flex-end;color:var(--adp-time-day-period-color);margin-left:6px;font-size:11px;margin-bottom:1px}.air-datepicker-time--row{display:flex;align-items:center;font-size:11px;height:17px;background:linear-gradient(to right, var(--adp-time-track-color), var(--adp-time-track-color)) left 50%/100% var(--adp-time-track-height) no-repeat}.air-datepicker-time--row:first-child{margin-bottom:4px}.air-datepicker-time--row input[type=range]{background:none;cursor:pointer;flex:1;height:100%;width:100%;padding:0;margin:0;-webkit-appearance:none}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{-webkit-appearance:none}.air-datepicker-time--row input[type=range]::-ms-tooltip{display:none}.air-datepicker-time--row input[type=range]:hover::-webkit-slider-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:hover::-moz-range-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:hover::-ms-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:focus{outline:none}.air-datepicker-time--row input[type=range]:focus::-webkit-slider-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]:focus::-moz-range-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]:focus::-ms-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-webkit-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-moz-range-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-moz-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-ms-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-ms-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{margin-top:calc(var(--adp-time-thumb-size)/2*-1)}.air-datepicker-time--row input[type=range]::-webkit-slider-runnable-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-moz-range-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-fill-lower{background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-fill-upper{background:rgba(0,0,0,0)}\r\n.air-datepicker{--adp-font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";--adp-font-size: 14px;--adp-width: 246px;--adp-z-index: 100;--adp-padding: 4px;--adp-grid-areas: "nav" "body" "timepicker" "buttons";--adp-transition-duration: .3s;--adp-transition-ease: ease-out;--adp-transition-offset: 8px;--adp-background-color: #fff;--adp-background-color-hover: #f0f0f0;--adp-background-color-active: #eaeaea;--adp-background-color-in-range: rgba(92, 196, 239, .1);--adp-background-color-in-range-focused: rgba(92, 196, 239, .2);--adp-background-color-selected-other-month-focused: #8ad5f4;--adp-background-color-selected-other-month: #a2ddf6;--adp-color: #4a4a4a;--adp-color-secondary: #9c9c9c;--adp-accent-color: #4eb5e6;--adp-color-current-date: var(--adp-accent-color);--adp-color-other-month: #dedede;--adp-color-disabled: #aeaeae;--adp-color-disabled-in-range: #939393;--adp-color-other-month-hover: #c5c5c5;--adp-border-color: #dbdbdb;--adp-border-color-inner: #efefef;--adp-border-radius: 4px;--adp-border-color-inline: #d7d7d7;--adp-nav-height: 32px;--adp-nav-arrow-color: var(--adp-color-secondary);--adp-nav-action-size: 32px;--adp-nav-color-secondary: var(--adp-color-secondary);--adp-day-name-color: #ff9a19;--adp-day-name-color-hover: #8ad5f4;--adp-day-cell-width: 1fr;--adp-day-cell-height: 32px;--adp-month-cell-height: 42px;--adp-year-cell-height: 56px;--adp-pointer-size: 10px;--adp-poiner-border-radius: 2px;--adp-pointer-offset: 14px;--adp-cell-border-radius: 4px;--adp-cell-background-color-hover: var(--adp-background-color-hover);--adp-cell-background-color-selected: #5cc4ef;--adp-cell-background-color-selected-hover: #45bced;--adp-cell-background-color-in-range: rgba(92, 196, 239, 0.1);--adp-cell-background-color-in-range-hover: rgba(92, 196, 239, 0.2);--adp-cell-border-color-in-range: var(--adp-cell-background-color-selected);--adp-btn-height: 32px;--adp-btn-color: var(--adp-accent-color);--adp-btn-color-hover: var(--adp-color);--adp-btn-border-radius: var(--adp-border-radius);--adp-btn-background-color-hover: var(--adp-background-color-hover);--adp-btn-background-color-active: var(--adp-background-color-active);--adp-time-track-height: 1px;--adp-time-track-color: #dedede;--adp-time-track-color-hover: #b1b1b1;--adp-time-thumb-size: 12px;--adp-time-padding-inner: 10px;--adp-time-day-period-color: var(--adp-color-secondary);--adp-mobile-font-size: 16px;--adp-mobile-nav-height: 40px;--adp-mobile-width: 320px;--adp-mobile-day-cell-height: 38px;--adp-mobile-month-cell-height: 48px;--adp-mobile-year-cell-height: 64px}.air-datepicker-overlay{--adp-overlay-background-color: rgba(0, 0, 0, .3);--adp-overlay-transition-duration: .3s;--adp-overlay-transition-ease: ease-out;--adp-overlay-z-index: 99}\r\n.air-datepicker{background:var(--adp-background-color);border:1px solid var(--adp-border-color);box-shadow:0 4px 12px rgba(0,0,0,.15);border-radius:var(--adp-border-radius);box-sizing:content-box;display:grid;grid-template-columns:1fr;grid-template-rows:repeat(4, max-content);grid-template-areas:var(--adp-grid-areas);font-family:var(--adp-font-family),sans-serif;font-size:var(--adp-font-size);color:var(--adp-color);width:var(--adp-width);position:absolute;transition:opacity var(--adp-transition-duration) var(--adp-transition-ease),transform var(--adp-transition-duration) var(--adp-transition-ease);z-index:var(--adp-z-index)}.air-datepicker:not(.-custom-position-){opacity:0}.air-datepicker.-from-top-{transform:translateY(calc(var(--adp-transition-offset) * -1))}.air-datepicker.-from-right-{transform:translateX(var(--adp-transition-offset))}.air-datepicker.-from-bottom-{transform:translateY(var(--adp-transition-offset))}.air-datepicker.-from-left-{transform:translateX(calc(var(--adp-transition-offset) * -1))}.air-datepicker.-active-:not(.-custom-position-){transform:translate(0, 0);opacity:1}.air-datepicker.-active-.-custom-position-{transition:none}.air-datepicker.-inline-{border-color:var(--adp-border-color-inline);box-shadow:none;position:static;left:auto;right:auto;opacity:1;transform:none}.air-datepicker.-inline- .air-datepicker--pointer{display:none}.air-datepicker.-is-mobile-{--adp-font-size: var(--adp-mobile-font-size);--adp-day-cell-height: var(--adp-mobile-day-cell-height);--adp-month-cell-height: var(--adp-mobile-month-cell-height);--adp-year-cell-height: var(--adp-mobile-year-cell-height);--adp-nav-height: var(--adp-mobile-nav-height);--adp-nav-action-size: var(--adp-mobile-nav-height);position:fixed;width:var(--adp-mobile-width);border:none}.air-datepicker.-is-mobile- *{-webkit-tap-highlight-color:rgba(0,0,0,0)}.air-datepicker.-is-mobile- .air-datepicker--pointer{display:none}.air-datepicker.-is-mobile-:not(.-custom-position-){transform:translate(-50%, calc(-50% + var(--adp-transition-offset)))}.air-datepicker.-is-mobile-.-active-:not(.-custom-position-){transform:translate(-50%, -50%)}.air-datepicker.-custom-position-{transition:none}.air-datepicker-global-container{position:absolute;left:0;top:0}.air-datepicker--pointer{--pointer-half-size: calc(var(--adp-pointer-size) / 2);position:absolute;width:var(--adp-pointer-size);height:var(--adp-pointer-size);z-index:-1}.air-datepicker--pointer:after{content:"";position:absolute;background:#fff;border-top:1px solid var(--adp-border-color-inline);border-right:1px solid var(--adp-border-color-inline);border-top-right-radius:var(--adp-poiner-border-radius);width:var(--adp-pointer-size);height:var(--adp-pointer-size);box-sizing:border-box}.-top-left- .air-datepicker--pointer,.-top-center- .air-datepicker--pointer,.-top-right- .air-datepicker--pointer,[data-popper-placement^=top] .air-datepicker--pointer{top:calc(100% - var(--pointer-half-size) + 1px)}.-top-left- .air-datepicker--pointer:after,.-top-center- .air-datepicker--pointer:after,.-top-right- .air-datepicker--pointer:after,[data-popper-placement^=top] .air-datepicker--pointer:after{transform:rotate(135deg)}.-right-top- .air-datepicker--pointer,.-right-center- .air-datepicker--pointer,.-right-bottom- .air-datepicker--pointer,[data-popper-placement^=right] .air-datepicker--pointer{right:calc(100% - var(--pointer-half-size) + 1px)}.-right-top- .air-datepicker--pointer:after,.-right-center- .air-datepicker--pointer:after,.-right-bottom- .air-datepicker--pointer:after,[data-popper-placement^=right] .air-datepicker--pointer:after{transform:rotate(225deg)}.-bottom-left- .air-datepicker--pointer,.-bottom-center- .air-datepicker--pointer,.-bottom-right- .air-datepicker--pointer,[data-popper-placement^=bottom] .air-datepicker--pointer{bottom:calc(100% - var(--pointer-half-size) + 1px)}.-bottom-left- .air-datepicker--pointer:after,.-bottom-center- .air-datepicker--pointer:after,.-bottom-right- .air-datepicker--pointer:after,[data-popper-placement^=bottom] .air-datepicker--pointer:after{transform:rotate(315deg)}.-left-top- .air-datepicker--pointer,.-left-center- .air-datepicker--pointer,.-left-bottom- .air-datepicker--pointer,[data-popper-placement^=left] .air-datepicker--pointer{left:calc(100% - var(--pointer-half-size) + 1px)}.-left-top- .air-datepicker--pointer:after,.-left-center- .air-datepicker--pointer:after,.-left-bottom- .air-datepicker--pointer:after,[data-popper-placement^=left] .air-datepicker--pointer:after{transform:rotate(45deg)}.-top-left- .air-datepicker--pointer,.-bottom-left- .air-datepicker--pointer{left:var(--adp-pointer-offset)}.-top-right- .air-datepicker--pointer,.-bottom-right- .air-datepicker--pointer{right:var(--adp-pointer-offset)}.-top-center- .air-datepicker--pointer,.-bottom-center- .air-datepicker--pointer{left:calc(50% - var(--adp-pointer-size)/2)}.-left-top- .air-datepicker--pointer,.-right-top- .air-datepicker--pointer{top:var(--adp-pointer-offset)}.-left-bottom- .air-datepicker--pointer,.-right-bottom- .air-datepicker--pointer{bottom:var(--adp-pointer-offset)}.-left-center- .air-datepicker--pointer,.-right-center- .air-datepicker--pointer{top:calc(50% - var(--adp-pointer-size)/2)}.air-datepicker--navigation{grid-area:nav}.air-datepicker--content{box-sizing:content-box;padding:var(--adp-padding);grid-area:body}.-only-timepicker- .air-datepicker--content{display:none}.air-datepicker--time{grid-area:timepicker}.air-datepicker--buttons{grid-area:buttons}.air-datepicker--buttons,.air-datepicker--time{padding:var(--adp-padding);border-top:1px solid var(--adp-border-color-inner)}.air-datepicker-overlay{position:fixed;background:var(--adp-overlay-background-color);left:0;top:0;width:0;height:0;opacity:0;transition:opacity var(--adp-overlay-transition-duration) var(--adp-overlay-transition-ease),left 0s,height 0s,width 0s;transition-delay:0s,var(--adp-overlay-transition-duration),var(--adp-overlay-transition-duration),var(--adp-overlay-transition-duration);z-index:var(--adp-overlay-z-index)}.air-datepicker-overlay.-active-{opacity:1;width:100%;height:100%;transition:opacity var(--adp-overlay-transition-duration) var(--adp-overlay-transition-ease),height 0s,width 0s}\r\n',
          '',
          {
            version: 3,
            sources: ['webpack://./node_modules/air-datepicker/air-datepicker.css'],
            names: [],
            mappings:
              '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',
            sourcesContent: [
              '.air-datepicker-cell.-year-.-other-decade-,.air-datepicker-cell.-day-.-other-month-{color:var(--adp-color-other-month)}.air-datepicker-cell.-year-.-other-decade-:hover,.air-datepicker-cell.-day-.-other-month-:hover{color:var(--adp-color-other-month-hover)}.-disabled-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-disabled-.-focus-.air-datepicker-cell.-day-.-other-month-{color:var(--adp-color-other-month)}.-selected-.air-datepicker-cell.-year-.-other-decade-,.-selected-.air-datepicker-cell.-day-.-other-month-{color:#fff;background:var(--adp-background-color-selected-other-month)}.-selected-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-selected-.-focus-.air-datepicker-cell.-day-.-other-month-{background:var(--adp-background-color-selected-other-month-focused)}.-in-range-.air-datepicker-cell.-year-.-other-decade-,.-in-range-.air-datepicker-cell.-day-.-other-month-{background-color:var(--adp-background-color-in-range);color:var(--adp-color)}.-in-range-.-focus-.air-datepicker-cell.-year-.-other-decade-,.-in-range-.-focus-.air-datepicker-cell.-day-.-other-month-{background-color:var(--adp-background-color-in-range-focused)}.air-datepicker-cell.-year-.-other-decade-:empty,.air-datepicker-cell.-day-.-other-month-:empty{background:none;border:none}.air-datepicker-cell{border-radius:var(--adp-cell-border-radius);box-sizing:border-box;cursor:pointer;display:flex;position:relative;align-items:center;justify-content:center;z-index:1}.air-datepicker-cell.-focus-{background:var(--adp-cell-background-color-hover)}.air-datepicker-cell.-current-{color:var(--adp-color-current-date)}.air-datepicker-cell.-current-.-focus-{color:var(--adp-color)}.air-datepicker-cell.-current-.-in-range-{color:var(--adp-color-current-date)}.air-datepicker-cell.-disabled-{cursor:default;color:var(--adp-color-disabled)}.air-datepicker-cell.-disabled-.-focus-{color:var(--adp-color-disabled)}.air-datepicker-cell.-disabled-.-in-range-{color:var(--adp-color-disabled-in-range)}.air-datepicker-cell.-disabled-.-current-.-focus-{color:var(--adp-color-disabled)}.air-datepicker-cell.-in-range-{background:var(--adp-cell-background-color-in-range);border-radius:0}.air-datepicker-cell.-in-range-:hover{background:var(--adp-cell-background-color-in-range-hover)}.air-datepicker-cell.-range-from-{border:1px solid var(--adp-cell-border-color-in-range);background-color:var(--adp-cell-background-color-in-range);border-radius:var(--adp-cell-border-radius) 0 0 var(--adp-cell-border-radius)}.air-datepicker-cell.-range-to-{border:1px solid var(--adp-cell-border-color-in-range);background-color:var(--adp-cell-background-color-in-range);border-radius:0 var(--adp-cell-border-radius) var(--adp-cell-border-radius) 0}.air-datepicker-cell.-range-to-.-range-from-{border-radius:var(--adp-cell-border-radius)}.air-datepicker-cell.-selected-{color:#fff;border:none;background:var(--adp-cell-background-color-selected)}.air-datepicker-cell.-selected-.-current-{color:#fff;background:var(--adp-cell-background-color-selected)}.air-datepicker-cell.-selected-.-focus-{background:var(--adp-cell-background-color-selected-hover)}\r\n.air-datepicker-body{transition:all var(--adp-transition-duration) var(--adp-transition-ease)}.air-datepicker-body.-hidden-{display:none}.air-datepicker-body--day-names{display:grid;grid-template-columns:repeat(7, var(--adp-day-cell-width));margin:8px 0 3px}.air-datepicker-body--day-name{color:var(--adp-day-name-color);display:flex;align-items:center;justify-content:center;flex:1;text-align:center;text-transform:uppercase;font-size:.8em}.air-datepicker-body--day-name.-clickable-{cursor:pointer}.air-datepicker-body--day-name.-clickable-:hover{color:var(--adp-day-name-color-hover)}.air-datepicker-body--cells{display:grid}.air-datepicker-body--cells.-days-{grid-template-columns:repeat(7, var(--adp-day-cell-width));grid-auto-rows:var(--adp-day-cell-height)}.air-datepicker-body--cells.-months-{grid-template-columns:repeat(3, 1fr);grid-auto-rows:var(--adp-month-cell-height)}.air-datepicker-body--cells.-years-{grid-template-columns:repeat(4, 1fr);grid-auto-rows:var(--adp-year-cell-height)}\r\n.air-datepicker-nav{display:flex;justify-content:space-between;border-bottom:1px solid var(--adp-border-color-inner);min-height:var(--adp-nav-height);padding:var(--adp-padding);box-sizing:content-box}.-only-timepicker- .air-datepicker-nav{display:none}.air-datepicker-nav--title,.air-datepicker-nav--action{display:flex;cursor:pointer;align-items:center;justify-content:center}.air-datepicker-nav--action{width:var(--adp-nav-action-size);border-radius:var(--adp-border-radius);-webkit-user-select:none;-moz-user-select:none;user-select:none}.air-datepicker-nav--action:hover{background:var(--adp-background-color-hover)}.air-datepicker-nav--action:active{background:var(--adp-background-color-active)}.air-datepicker-nav--action.-disabled-{visibility:hidden}.air-datepicker-nav--action svg{width:32px;height:32px}.air-datepicker-nav--action path{fill:none;stroke:var(--adp-nav-arrow-color);stroke-width:2px}.air-datepicker-nav--title{border-radius:var(--adp-border-radius);padding:0 8px}.air-datepicker-nav--title i{font-style:normal;color:var(--adp-nav-color-secondary);margin-left:.3em}.air-datepicker-nav--title:hover{background:var(--adp-background-color-hover)}.air-datepicker-nav--title:active{background:var(--adp-background-color-active)}.air-datepicker-nav--title.-disabled-{cursor:default;background:none}\r\n.air-datepicker-buttons{display:grid;grid-auto-columns:1fr;grid-auto-flow:column}.air-datepicker-button{display:inline-flex;color:var(--adp-btn-color);border-radius:var(--adp-btn-border-radius);cursor:pointer;height:var(--adp-btn-height);border:none;background:rgba(255,255,255,0)}.air-datepicker-button:hover{color:var(--adp-btn-color-hover);background:var(--adp-btn-background-color-hover)}.air-datepicker-button:focus{color:var(--adp-btn-color-hover);background:var(--adp-btn-background-color-hover);outline:none}.air-datepicker-button:active{background:var(--adp-btn-background-color-active)}.air-datepicker-button span{outline:none;display:flex;align-items:center;justify-content:center;width:100%;height:100%}\r\n.air-datepicker-time{display:grid;grid-template-columns:max-content 1fr;grid-column-gap:12px;align-items:center;position:relative;padding:0 var(--adp-time-padding-inner)}.-only-timepicker- .air-datepicker-time{border-top:none}.air-datepicker-time--current{display:flex;align-items:center;flex:1;font-size:14px;text-align:center}.air-datepicker-time--current-colon{margin:0 2px 3px;line-height:1}.air-datepicker-time--current-hours,.air-datepicker-time--current-minutes{line-height:1;font-size:19px;font-family:"Century Gothic",CenturyGothic,AppleGothic,sans-serif;position:relative;z-index:1}.air-datepicker-time--current-hours:after,.air-datepicker-time--current-minutes:after{content:"";background:var(--adp-background-color-hover);border-radius:var(--adp-border-radius);position:absolute;left:-2px;top:-3px;right:-2px;bottom:-2px;z-index:-1;opacity:0}.air-datepicker-time--current-hours.-focus-:after,.air-datepicker-time--current-minutes.-focus-:after{opacity:1}.air-datepicker-time--current-ampm{text-transform:uppercase;align-self:flex-end;color:var(--adp-time-day-period-color);margin-left:6px;font-size:11px;margin-bottom:1px}.air-datepicker-time--row{display:flex;align-items:center;font-size:11px;height:17px;background:linear-gradient(to right, var(--adp-time-track-color), var(--adp-time-track-color)) left 50%/100% var(--adp-time-track-height) no-repeat}.air-datepicker-time--row:first-child{margin-bottom:4px}.air-datepicker-time--row input[type=range]{background:none;cursor:pointer;flex:1;height:100%;width:100%;padding:0;margin:0;-webkit-appearance:none}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{-webkit-appearance:none}.air-datepicker-time--row input[type=range]::-ms-tooltip{display:none}.air-datepicker-time--row input[type=range]:hover::-webkit-slider-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:hover::-moz-range-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:hover::-ms-thumb{border-color:var(--adp-time-track-color-hover)}.air-datepicker-time--row input[type=range]:focus{outline:none}.air-datepicker-time--row input[type=range]:focus::-webkit-slider-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]:focus::-moz-range-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]:focus::-ms-thumb{background:var(--adp-cell-background-color-selected);border-color:var(--adp-cell-background-color-selected)}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-webkit-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-moz-range-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-moz-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-ms-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid var(--adp-time-track-color);background:#fff;cursor:pointer;-ms-transition:background var(--adp-transition-duration);transition:background var(--adp-transition-duration)}.air-datepicker-time--row input[type=range]::-webkit-slider-thumb{margin-top:calc(var(--adp-time-thumb-size)/2*-1)}.air-datepicker-time--row input[type=range]::-webkit-slider-runnable-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-moz-range-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-track{border:none;height:var(--adp-time-track-height);cursor:pointer;color:rgba(0,0,0,0);background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-fill-lower{background:rgba(0,0,0,0)}.air-datepicker-time--row input[type=range]::-ms-fill-upper{background:rgba(0,0,0,0)}\r\n.air-datepicker{--adp-font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";--adp-font-size: 14px;--adp-width: 246px;--adp-z-index: 100;--adp-padding: 4px;--adp-grid-areas: "nav" "body" "timepicker" "buttons";--adp-transition-duration: .3s;--adp-transition-ease: ease-out;--adp-transition-offset: 8px;--adp-background-color: #fff;--adp-background-color-hover: #f0f0f0;--adp-background-color-active: #eaeaea;--adp-background-color-in-range: rgba(92, 196, 239, .1);--adp-background-color-in-range-focused: rgba(92, 196, 239, .2);--adp-background-color-selected-other-month-focused: #8ad5f4;--adp-background-color-selected-other-month: #a2ddf6;--adp-color: #4a4a4a;--adp-color-secondary: #9c9c9c;--adp-accent-color: #4eb5e6;--adp-color-current-date: var(--adp-accent-color);--adp-color-other-month: #dedede;--adp-color-disabled: #aeaeae;--adp-color-disabled-in-range: #939393;--adp-color-other-month-hover: #c5c5c5;--adp-border-color: #dbdbdb;--adp-border-color-inner: #efefef;--adp-border-radius: 4px;--adp-border-color-inline: #d7d7d7;--adp-nav-height: 32px;--adp-nav-arrow-color: var(--adp-color-secondary);--adp-nav-action-size: 32px;--adp-nav-color-secondary: var(--adp-color-secondary);--adp-day-name-color: #ff9a19;--adp-day-name-color-hover: #8ad5f4;--adp-day-cell-width: 1fr;--adp-day-cell-height: 32px;--adp-month-cell-height: 42px;--adp-year-cell-height: 56px;--adp-pointer-size: 10px;--adp-poiner-border-radius: 2px;--adp-pointer-offset: 14px;--adp-cell-border-radius: 4px;--adp-cell-background-color-hover: var(--adp-background-color-hover);--adp-cell-background-color-selected: #5cc4ef;--adp-cell-background-color-selected-hover: #45bced;--adp-cell-background-color-in-range: rgba(92, 196, 239, 0.1);--adp-cell-background-color-in-range-hover: rgba(92, 196, 239, 0.2);--adp-cell-border-color-in-range: var(--adp-cell-background-color-selected);--adp-btn-height: 32px;--adp-btn-color: var(--adp-accent-color);--adp-btn-color-hover: var(--adp-color);--adp-btn-border-radius: var(--adp-border-radius);--adp-btn-background-color-hover: var(--adp-background-color-hover);--adp-btn-background-color-active: var(--adp-background-color-active);--adp-time-track-height: 1px;--adp-time-track-color: #dedede;--adp-time-track-color-hover: #b1b1b1;--adp-time-thumb-size: 12px;--adp-time-padding-inner: 10px;--adp-time-day-period-color: var(--adp-color-secondary);--adp-mobile-font-size: 16px;--adp-mobile-nav-height: 40px;--adp-mobile-width: 320px;--adp-mobile-day-cell-height: 38px;--adp-mobile-month-cell-height: 48px;--adp-mobile-year-cell-height: 64px}.air-datepicker-overlay{--adp-overlay-background-color: rgba(0, 0, 0, .3);--adp-overlay-transition-duration: .3s;--adp-overlay-transition-ease: ease-out;--adp-overlay-z-index: 99}\r\n.air-datepicker{background:var(--adp-background-color);border:1px solid var(--adp-border-color);box-shadow:0 4px 12px rgba(0,0,0,.15);border-radius:var(--adp-border-radius);box-sizing:content-box;display:grid;grid-template-columns:1fr;grid-template-rows:repeat(4, max-content);grid-template-areas:var(--adp-grid-areas);font-family:var(--adp-font-family),sans-serif;font-size:var(--adp-font-size);color:var(--adp-color);width:var(--adp-width);position:absolute;transition:opacity var(--adp-transition-duration) var(--adp-transition-ease),transform var(--adp-transition-duration) var(--adp-transition-ease);z-index:var(--adp-z-index)}.air-datepicker:not(.-custom-position-){opacity:0}.air-datepicker.-from-top-{transform:translateY(calc(var(--adp-transition-offset) * -1))}.air-datepicker.-from-right-{transform:translateX(var(--adp-transition-offset))}.air-datepicker.-from-bottom-{transform:translateY(var(--adp-transition-offset))}.air-datepicker.-from-left-{transform:translateX(calc(var(--adp-transition-offset) * -1))}.air-datepicker.-active-:not(.-custom-position-){transform:translate(0, 0);opacity:1}.air-datepicker.-active-.-custom-position-{transition:none}.air-datepicker.-inline-{border-color:var(--adp-border-color-inline);box-shadow:none;position:static;left:auto;right:auto;opacity:1;transform:none}.air-datepicker.-inline- .air-datepicker--pointer{display:none}.air-datepicker.-is-mobile-{--adp-font-size: var(--adp-mobile-font-size);--adp-day-cell-height: var(--adp-mobile-day-cell-height);--adp-month-cell-height: var(--adp-mobile-month-cell-height);--adp-year-cell-height: var(--adp-mobile-year-cell-height);--adp-nav-height: var(--adp-mobile-nav-height);--adp-nav-action-size: var(--adp-mobile-nav-height);position:fixed;width:var(--adp-mobile-width);border:none}.air-datepicker.-is-mobile- *{-webkit-tap-highlight-color:rgba(0,0,0,0)}.air-datepicker.-is-mobile- .air-datepicker--pointer{display:none}.air-datepicker.-is-mobile-:not(.-custom-position-){transform:translate(-50%, calc(-50% + var(--adp-transition-offset)))}.air-datepicker.-is-mobile-.-active-:not(.-custom-position-){transform:translate(-50%, -50%)}.air-datepicker.-custom-position-{transition:none}.air-datepicker-global-container{position:absolute;left:0;top:0}.air-datepicker--pointer{--pointer-half-size: calc(var(--adp-pointer-size) / 2);position:absolute;width:var(--adp-pointer-size);height:var(--adp-pointer-size);z-index:-1}.air-datepicker--pointer:after{content:"";position:absolute;background:#fff;border-top:1px solid var(--adp-border-color-inline);border-right:1px solid var(--adp-border-color-inline);border-top-right-radius:var(--adp-poiner-border-radius);width:var(--adp-pointer-size);height:var(--adp-pointer-size);box-sizing:border-box}.-top-left- .air-datepicker--pointer,.-top-center- .air-datepicker--pointer,.-top-right- .air-datepicker--pointer,[data-popper-placement^=top] .air-datepicker--pointer{top:calc(100% - var(--pointer-half-size) + 1px)}.-top-left- .air-datepicker--pointer:after,.-top-center- .air-datepicker--pointer:after,.-top-right- .air-datepicker--pointer:after,[data-popper-placement^=top] .air-datepicker--pointer:after{transform:rotate(135deg)}.-right-top- .air-datepicker--pointer,.-right-center- .air-datepicker--pointer,.-right-bottom- .air-datepicker--pointer,[data-popper-placement^=right] .air-datepicker--pointer{right:calc(100% - var(--pointer-half-size) + 1px)}.-right-top- .air-datepicker--pointer:after,.-right-center- .air-datepicker--pointer:after,.-right-bottom- .air-datepicker--pointer:after,[data-popper-placement^=right] .air-datepicker--pointer:after{transform:rotate(225deg)}.-bottom-left- .air-datepicker--pointer,.-bottom-center- .air-datepicker--pointer,.-bottom-right- .air-datepicker--pointer,[data-popper-placement^=bottom] .air-datepicker--pointer{bottom:calc(100% - var(--pointer-half-size) + 1px)}.-bottom-left- .air-datepicker--pointer:after,.-bottom-center- .air-datepicker--pointer:after,.-bottom-right- .air-datepicker--pointer:after,[data-popper-placement^=bottom] .air-datepicker--pointer:after{transform:rotate(315deg)}.-left-top- .air-datepicker--pointer,.-left-center- .air-datepicker--pointer,.-left-bottom- .air-datepicker--pointer,[data-popper-placement^=left] .air-datepicker--pointer{left:calc(100% - var(--pointer-half-size) + 1px)}.-left-top- .air-datepicker--pointer:after,.-left-center- .air-datepicker--pointer:after,.-left-bottom- .air-datepicker--pointer:after,[data-popper-placement^=left] .air-datepicker--pointer:after{transform:rotate(45deg)}.-top-left- .air-datepicker--pointer,.-bottom-left- .air-datepicker--pointer{left:var(--adp-pointer-offset)}.-top-right- .air-datepicker--pointer,.-bottom-right- .air-datepicker--pointer{right:var(--adp-pointer-offset)}.-top-center- .air-datepicker--pointer,.-bottom-center- .air-datepicker--pointer{left:calc(50% - var(--adp-pointer-size)/2)}.-left-top- .air-datepicker--pointer,.-right-top- .air-datepicker--pointer{top:var(--adp-pointer-offset)}.-left-bottom- .air-datepicker--pointer,.-right-bottom- .air-datepicker--pointer{bottom:var(--adp-pointer-offset)}.-left-center- .air-datepicker--pointer,.-right-center- .air-datepicker--pointer{top:calc(50% - var(--adp-pointer-size)/2)}.air-datepicker--navigation{grid-area:nav}.air-datepicker--content{box-sizing:content-box;padding:var(--adp-padding);grid-area:body}.-only-timepicker- .air-datepicker--content{display:none}.air-datepicker--time{grid-area:timepicker}.air-datepicker--buttons{grid-area:buttons}.air-datepicker--buttons,.air-datepicker--time{padding:var(--adp-padding);border-top:1px solid var(--adp-border-color-inner)}.air-datepicker-overlay{position:fixed;background:var(--adp-overlay-background-color);left:0;top:0;width:0;height:0;opacity:0;transition:opacity var(--adp-overlay-transition-duration) var(--adp-overlay-transition-ease),left 0s,height 0s,width 0s;transition-delay:0s,var(--adp-overlay-transition-duration),var(--adp-overlay-transition-duration),var(--adp-overlay-transition-duration);z-index:var(--adp-overlay-z-index)}.air-datepicker-overlay.-active-{opacity:1;width:100%;height:100%;transition:opacity var(--adp-overlay-transition-duration) var(--adp-overlay-transition-ease),height 0s,width 0s}\r\n',
            ],
            sourceRoot: '',
          },
        ]);
        const n = s;
      },
      645: (e) => {
        'use strict';
        e.exports = function (e) {
          var t = [];
          return (
            (t.toString = function () {
              return this.map(function (t) {
                var i = e(t);
                return t[2] ? '@media '.concat(t[2], ' {').concat(i, '}') : i;
              }).join('');
            }),
            (t.i = function (e, i, o) {
              'string' == typeof e && (e = [[null, e, '']]);
              var r = {};
              if (o)
                for (var a = 0; a < this.length; a++) {
                  var s = this[a][0];
                  null != s && (r[s] = !0);
                }
              for (var n = 0; n < e.length; n++) {
                var l = [].concat(e[n]);
                (o && r[l[0]]) || (i && (l[2] ? (l[2] = ''.concat(i, ' and ').concat(l[2])) : (l[2] = i)), t.push(l));
              }
            }),
            t
          );
        };
      },
      15: (e) => {
        'use strict';
        function t(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var i = 0, o = new Array(t); i < t; i++) o[i] = e[i];
          return o;
        }
        e.exports = function (e) {
          var i,
            o,
            r =
              ((o = 4),
              (function (e) {
                if (Array.isArray(e)) return e;
              })((i = e)) ||
                (function (e, t) {
                  var i = e && (('undefined' != typeof Symbol && e[Symbol.iterator]) || e['@@iterator']);
                  if (null != i) {
                    var o,
                      r,
                      a = [],
                      s = !0,
                      n = !1;
                    try {
                      for (i = i.call(e); !(s = (o = i.next()).done) && (a.push(o.value), !t || a.length !== t); s = !0);
                    } catch (e) {
                      (n = !0), (r = e);
                    } finally {
                      try {
                        s || null == i.return || i.return();
                      } finally {
                        if (n) throw r;
                      }
                    }
                    return a;
                  }
                })(i, o) ||
                (function (e, i) {
                  if (e) {
                    if ('string' == typeof e) return t(e, i);
                    var o = Object.prototype.toString.call(e).slice(8, -1);
                    return (
                      'Object' === o && e.constructor && (o = e.constructor.name),
                      'Map' === o || 'Set' === o ? Array.from(e) : 'Arguments' === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o) ? t(e, i) : void 0
                    );
                  }
                })(i, o) ||
                (function () {
                  throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');
                })()),
            a = r[1],
            s = r[3];
          if (!s) return a;
          if ('function' == typeof btoa) {
            var n = btoa(unescape(encodeURIComponent(JSON.stringify(s)))),
              l = 'sourceMappingURL=data:application/json;charset=utf-8;base64,'.concat(n),
              c = '/*# '.concat(l, ' */'),
              d = s.sources.map(function (e) {
                return '/*# sourceURL='.concat(s.sourceRoot || '').concat(e, ' */');
              });
            return [a].concat(d).concat([c]).join('\n');
          }
          return [a].join('\n');
        };
      },
      379: (e, t, i) => {
        'use strict';
        var o,
          r = (function () {
            var e = {};
            return function (t) {
              if (void 0 === e[t]) {
                var i = document.querySelector(t);
                if (window.HTMLIFrameElement && i instanceof window.HTMLIFrameElement)
                  try {
                    i = i.contentDocument.head;
                  } catch (e) {
                    i = null;
                  }
                e[t] = i;
              }
              return e[t];
            };
          })(),
          a = [];
        function s(e) {
          for (var t = -1, i = 0; i < a.length; i++)
            if (a[i].identifier === e) {
              t = i;
              break;
            }
          return t;
        }
        function n(e, t) {
          for (var i = {}, o = [], r = 0; r < e.length; r++) {
            var n = e[r],
              l = t.base ? n[0] + t.base : n[0],
              c = i[l] || 0,
              d = ''.concat(l, ' ').concat(c);
            i[l] = c + 1;
            var u = s(d),
              h = { css: n[1], media: n[2], sourceMap: n[3] };
            -1 !== u ? (a[u].references++, a[u].updater(h)) : a.push({ identifier: d, updater: m(h, t), references: 1 }), o.push(d);
          }
          return o;
        }
        function l(e) {
          var t = document.createElement('style'),
            o = e.attributes || {};
          if (void 0 === o.nonce) {
            var a = i.nc;
            a && (o.nonce = a);
          }
          if (
            (Object.keys(o).forEach(function (e) {
              t.setAttribute(e, o[e]);
            }),
            'function' == typeof e.insert)
          )
            e.insert(t);
          else {
            var s = r(e.insert || 'head');
            if (!s) throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
            s.appendChild(t);
          }
          return t;
        }
        var c,
          d =
            ((c = []),
            function (e, t) {
              return (c[e] = t), c.filter(Boolean).join('\n');
            });
        function u(e, t, i, o) {
          var r = i ? '' : o.media ? '@media '.concat(o.media, ' {').concat(o.css, '}') : o.css;
          if (e.styleSheet) e.styleSheet.cssText = d(t, r);
          else {
            var a = document.createTextNode(r),
              s = e.childNodes;
            s[t] && e.removeChild(s[t]), s.length ? e.insertBefore(a, s[t]) : e.appendChild(a);
          }
        }
        function h(e, t, i) {
          var o = i.css,
            r = i.media,
            a = i.sourceMap;
          if (
            (r ? e.setAttribute('media', r) : e.removeAttribute('media'),
            a && 'undefined' != typeof btoa && (o += '\n/*# sourceMappingURL=data:application/json;base64,'.concat(btoa(unescape(encodeURIComponent(JSON.stringify(a)))), ' */')),
            e.styleSheet)
          )
            e.styleSheet.cssText = o;
          else {
            for (; e.firstChild; ) e.removeChild(e.firstChild);
            e.appendChild(document.createTextNode(o));
          }
        }
        var p = null,
          g = 0;
        function m(e, t) {
          var i, o, r;
          if (t.singleton) {
            var a = g++;
            (i = p || (p = l(t))), (o = u.bind(null, i, a, !1)), (r = u.bind(null, i, a, !0));
          } else
            (i = l(t)),
              (o = h.bind(null, i, t)),
              (r = function () {
                !(function (e) {
                  if (null === e.parentNode) return !1;
                  e.parentNode.removeChild(e);
                })(i);
              });
          return (
            o(e),
            function (t) {
              if (t) {
                if (t.css === e.css && t.media === e.media && t.sourceMap === e.sourceMap) return;
                o((e = t));
              } else r();
            }
          );
        }
        e.exports = function (e, t) {
          (t = t || {}).singleton || 'boolean' == typeof t.singleton || (t.singleton = (void 0 === o && (o = Boolean(window && document && document.all && !window.atob)), o));
          var i = n((e = e || []), t);
          return function (e) {
            if (((e = e || []), '[object Array]' === Object.prototype.toString.call(e))) {
              for (var o = 0; o < i.length; o++) {
                var r = s(i[o]);
                a[r].references--;
              }
              for (var l = n(e, t), c = 0; c < i.length; c++) {
                var d = s(i[c]);
                0 === a[d].references && (a[d].updater(), a.splice(d, 1));
              }
              i = l;
            }
          };
        };
      },
    },
    t = {};
  function i(o) {
    var r = t[o];
    if (void 0 !== r) return r.exports;
    var a = (t[o] = { id: o, exports: {} });
    return e[o].call(a.exports, a, a.exports, i), a.exports;
  }
  (i.n = (e) => {
    var t = e && e.__esModule ? () => e.default : () => e;
    return i.d(t, { a: t }), t;
  }),
    (i.d = (e, t) => {
      for (var o in t) i.o(t, o) && !i.o(e, o) && Object.defineProperty(e, o, { enumerable: !0, get: t[o] });
    }),
    (i.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
    (i.p = '/rs-clone-deploy/'),
    (i.nc = void 0),
    (() => {
      'use strict';
      const e = class {
        createElement(e, t, i) {
          const o = document.createElement(e);
          return o.classList.add(t), i && (o.textContent = i), o;
        }
        createLink(e, t, i) {
          const o = document.createElement('a');
          return o.classList.add(e), (o.href = t), i && (o.textContent = i), o;
        }
        createBtn(e, t, i) {
          const o = document.createElement('button');
          return o.classList.add(e), 'string' == typeof t && (o.textContent = t), t && 'string' != typeof t && o.append(t), i && (o.type = i), o;
        }
        createForm(e, t) {
          const i = document.createElement('form');
          return i.classList.add(e), (i.action = t), i;
        }
        createIcon(e, t) {
          const i = document.createElement('i');
          return i.classList.add(e), i.classList.add(t), i;
        }
        createVideo(e) {
          const t = document.createElement('video');
          return (t.src = e), (t.autoplay = !0), (t.muted = !0), (t.loop = !0), t;
        }
        createImage(e, t, i) {
          const o = document.createElement('img');
          return (o.src = e), (o.alt = t), (o.className = i), o;
        }
        createLabel(e, t, i) {
          const o = document.createElement('label');
          return t && o.setAttribute('for', t), e && o.classList.add(e), i && (o.textContent = i), o;
        }
        createInput(e, t) {
          const i = document.createElement('input');
          return i.classList.add(e), this.addAttributes(i, t), i;
        }
        addAttributes(e, t) {
          for (const i in t) t[i] && e.setAttribute(i, t[i]);
        }
      };
      function t(e, t) {
        t &&
          t.forEach((t) => {
            e.classList.add(t);
          });
      }
      function o(e, t) {
        return (i) => {
          i && i.preventDefault(), t && r(t)();
          const o = document.getElementById(e);
          o &&
            (t
              ? setTimeout(() => {
                  o.classList.add('open');
                }, 500)
              : o.classList.add('open'));
        };
      }
      function r(e) {
        return () => {
          const t = document.getElementById(e);
          t && t.classList.remove('open');
        };
      }
      const a = function ({ content: e, className: i, variant: o, onClick: r, type: a }) {
          const s = document.createElement('button');
          return (
            s.classList.add('btn'),
            a && (s.type = a),
            t(s, i),
            (function (e, t) {
              'string' == typeof t ? (e.textContent = t) : e.append(t);
            })(s, e),
            o && s.classList.add(`btn--${o}`),
            r && (s.onclick = r),
            s
          );
        },
        s = i.p + 'video/v11.mp4',
        n = i.p + 'video/v2.mp4',
        l = i.p + 'video/v3.mp4',
        c = i.p + 'video/v4.mp4',
        d = i.p + 'assets/pic1.jpg';
      var u = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const h = class {
        registration(e) {
          return u(this, void 0, void 0, function* () {
            try {
              const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/auth/register', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(e),
                }),
                i = yield t.json();
              if (i) return i;
            } catch (e) {
              if (e instanceof Error) throw new Error(e.message);
            }
          });
        }
        authorization(e) {
          return u(this, void 0, void 0, function* () {
            try {
              const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(e),
              });
              return yield t.json();
            } catch (e) {
              if (e instanceof Error) throw new Error(e.message);
            }
          });
        }
        createUserInfo(e) {
          return u(this, void 0, void 0, function* () {
            try {
              const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/user/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(e),
              });
              return yield t.json();
            } catch (e) {
              if (e instanceof Error) throw new Error(e.message);
            }
          });
        }
        getUserInfo(e) {
          return u(this, void 0, void 0, function* () {
            try {
              const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/user/get/${e}`);
              return yield t.json();
            } catch (e) {
              if (e instanceof Error) throw new Error(e.message);
            }
          });
        }
        updateUserInfo(e) {
          return u(this, void 0, void 0, function* () {
            try {
              const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/user/update/${e.id}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ weight: e.weight, height: e.height }),
                }),
                i = yield t.json();
              if (i) return i;
            } catch (e) {
              if (e instanceof Error) throw new Error(e.message);
            }
          });
        }
      };
      function p(e) {
        e.classList.add('loaded_hiding'),
          setTimeout(function () {
            e.classList.add('loaded'), e.classList.remove('loaded_hiding');
          }, 500);
      }
      function g(e) {
        (g.prototype.isLoaded += 1), 4 === g.prototype.isLoaded && ((g.prototype.isLoaded = 0), p(document.body)), e.currentTarget && e.currentTarget.removeEventListener('canplay', g);
      }
      g.prototype.isLoaded = 0;
      const m = [
          {
            title: 'ABS Workouts',
            image: '/rs-clone-deploy/assets/png/abs3.png',
            block: [
              {
                id: 1,
                title: 'ABS beginner',
                exercisesAmt: '19',
                exercisesTime: '15',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/abs3.png',
                color: 'linear-gradient(90deg, rgba(24,240,237,1) 0%, rgba(206,247,242,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'jumping jacks',
                    description:
                      'Stand upright with your legs together, arms at your sides. Bend your knees slightly, and jump into the air. As you jump, spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
                    youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
                    quantity: 'x30',
                  },
                  {
                    id: 2,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:22',
                  },
                  {
                    id: 3,
                    title: 'standing bicycle crunches',
                    description:
                      'Stand with feet together, knees slightly bent, hands behind head. Brace abs in tight and lift left knee up as right shoulder rotates towards knee (try to touch). Lower back to start.',
                    example: '/rs-clone-deploy/assets/gifs/standing_bicycle_crunch.gif',
                    youtube: 'https://www.youtube.com/watch?v=8lsAXzvVHrc',
                    quantity: 'x14',
                  },
                  {
                    id: 4,
                    title: 'russian twist',
                    description:
                      'Sit with your feet slightly lifted and back titled backwards. Then hold your hands together and twist from side to side. Keep your legs still when twisting and your neck neutral. Tighten your abs.',
                    example: '/rs-clone-deploy/assets/gifs/russian_twist.gif',
                    youtube: 'https://www.youtube.com/watch?v=DJQGX2J4IVw',
                    quantity: 'x16',
                  },
                  {
                    id: 5,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x18',
                  },
                  {
                    id: 6,
                    title: 'flutter kicks',
                    description:
                      'Lie on your back with your arms at your sides and legs slightly lifted. Then quickly raise your right leg up, and simultaneous lower your left hand. This exercise can increase core strength and improve your endurance.',
                    example: '/rs-clone-deploy/assets/gifs/flutter_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=K5wuM_gNWyw',
                    quantity: '00:15',
                  },
                  {
                    id: 7,
                    title: 'leg raisers',
                    description:
                      'Lie on your back, legs straight and together. Keep your legs straight and lift them all the way up to the ceiling until your butt comes off the floor. Slowly lower your legs back down till they are just above the floor. Hold for a moment. Raise your legs back up. Repeat.',
                    example: '/rs-clone-deploy/assets/gifs/leg_raisers.gif',
                    youtube: 'https://www.youtube.com/watch?v=dGKbTKLnym4',
                    quantity: 'x8',
                  },
                  {
                    id: 8,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x14',
                  },
                  {
                    id: 9,
                    title: 'skipping without rope',
                    description:
                      'This is a good warm-up exercise. Pretend to hold a skipping rope handle in each hand. Jump and alternately land on the balls of your feet, rotating your wrists at the same time as you as if you were spinning a rope.',
                    example: '/rs-clone-deploy/assets/gifs/skipping_without_rope.gif',
                    youtube: 'https://www.youtube.com/watch?v=CYGeazlNbU4',
                    quantity: '00:30',
                  },
                  {
                    id: 10,
                    title: 'standing bicycle crunches',
                    description:
                      'Stand with feet together, knees slightly bent, hands behind head. Brace abs in tight and lift left knee up as right shoulder rotates towards knee (try to touch). Lower back to start.',
                    example: '/rs-clone-deploy/assets/gifs/standing_bicycle_crunch.gif',
                    youtube: 'https://www.youtube.com/watch?v=8lsAXzvVHrc',
                    quantity: 'x12',
                  },
                  {
                    id: 11,
                    title: 'russian twist',
                    description:
                      'Sit with your feet slightly lifted and back titled backwards. Then hold your hands together and twist from side to side. Keep your legs still when twisting and your neck neutral. Tighten your abs.',
                    example: '/rs-clone-deploy/assets/gifs/russian_twist.gif',
                    youtube: 'https://www.youtube.com/watch?v=DJQGX2J4IVw',
                    quantity: 'x14',
                  },
                  {
                    id: 12,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x16',
                  },
                  {
                    id: 13,
                    title: 'flutter kicks',
                    description:
                      'Lie on your back with your arms at your sides and legs slightly lifted. Then quickly raise your right leg up, and simultaneous lower your left hand. This exercise can increase core strength and improve your endurance.',
                    example: '/rs-clone-deploy/assets/gifs/flutter_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=K5wuM_gNWyw',
                    quantity: '00:15',
                  },
                  {
                    id: 14,
                    title: 'leg raisers',
                    description:
                      'Lie on your back, legs straight and together. Keep your legs straight and lift them all the way up to the ceiling until your butt comes off the floor. Slowly lower your legs back down till they are just above the floor. Hold for a moment. Raise your legs back up. Repeat.',
                    example: '/rs-clone-deploy/assets/gifs/leg_raisers.gif',
                    youtube: 'https://www.youtube.com/watch?v=dGKbTKLnym4',
                    quantity: 'x6',
                  },
                  {
                    id: 15,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x12',
                  },
                  {
                    id: 16,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '00:30',
                  },
                  {
                    id: 17,
                    title: 'cobra stretch',
                    description:
                      'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
                    example: '/rs-clone-deploy/assets/png/cobra.png',
                    youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
                    quantity: '00:30',
                  },
                  {
                    id: 18,
                    title: 'lying twist stretch left',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the left. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                  {
                    id: 19,
                    title: 'lying twist stretch right',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the right. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 2,
                title: 'ABS intermediate',
                exercisesAmt: '20',
                exercisesTime: '17',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/abs3.png',
                color: 'linear-gradient(90deg, rgba(113,179,235,1) 0%, rgba(202,227,249,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'jumping jacks',
                    description:
                      'Stand upright with your legs together, arms at your sides Bend your knees slightly, and jump into the air. As you jump , spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
                    youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
                    quantity: 'x30',
                  },
                  {
                    id: 2,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x24',
                  },
                  {
                    id: 4,
                    title: 'reverse crunches',
                    description: 'Lie on your back with your knees up and hands behind your head. Lift your shoulders and thighs, and then stretch out.',
                    example: '/rs-clone-deploy/assets/gifs/reverse_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=UwRfRN5fYRg',
                    quantity: 'x18',
                  },
                  {
                    id: 5,
                    title: 'leg raisers',
                    description:
                      'Lie on your back, legs straight and together. Keep your legs straight and lift them all the way up to the ceiling until your butt comes off the floor. Slowly lower your legs back down till they are just above the floor. Hold for a moment. Raise your legs back up. Repeat.',
                    example: '/rs-clone-deploy/assets/gifs/leg_raisers.gif',
                    youtube: 'https://www.youtube.com/watch?v=dGKbTKLnym4',
                    quantity: 'x16',
                  },
                  {
                    id: 6,
                    title: 'heel touch',
                    description:
                      'Keep your back flat and bend your knees to a 90-degree angle with your feet firmly planted on the floor. Engage your core as you bend your spine to reach your right hand toward your right ankle. Repeat this movement on your left side. Keep your lower back on the floor.',
                    example: '/rs-clone-deploy/assets/gifs/heel_touch.gif',
                    youtube: 'https://www.youtube.com/watch?v=9bR-elyolBQ',
                    quantity: 'x20',
                  },
                  {
                    id: 7,
                    title: 'reclined oblique twist',
                    description:
                      'Lie on your back with your legs extended and your elbow directly under your shoulders. LIft your left leg up at a 45 degree angle while reaching your right arm over to your left side. Then slowly go back to the starting position. Repeat several times, and then switch to the other side.',
                    example: '/rs-clone-deploy/assets/gifs/reclined_oblique_twist.gif',
                    youtube: 'https://www.youtube.com/watch?v=XKW5jru5pGo',
                    quantity: 'x16',
                  },
                  {
                    id: 8,
                    title: 'heels to the heaven',
                    description: 'Lie on your back, position your arms out to your sides. From here, activate the lower abdominals and lift the legs until they are perpendicular to the ground.',
                    example: '/rs-clone-deploy/assets/gifs/heels_to_the heaven.gif',
                    youtube: 'https://www.youtube.com/watch?v=wdS2U6z0JGY',
                    quantity: 'x12',
                  },
                  {
                    id: 9,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '00:30',
                  },
                  {
                    id: 10,
                    title: 'skipping without rope',
                    description:
                      'This is a good warm-up exercise. Pretend to hold a skipping rope handle in each hand. Jump and alternately land on the balls of your feet, rotating your wrists at the same time as you as if you were spinning a rope.',
                    example: '/rs-clone-deploy/assets/gifs/skipping_without_rope.gif',
                    youtube: 'https://www.youtube.com/watch?v=CYGeazlNbU4',
                    quantity: '00:30',
                  },
                  {
                    id: 11,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x22',
                  },
                  {
                    id: 12,
                    title: 'reverse crunches',
                    description: 'Lie on your back with your knees up and hands behind your head. Lift your shoulders and thighs, and then stretch out.',
                    example: '/rs-clone-deploy/assets/gifs/reverse_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=UwRfRN5fYRg',
                    quantity: 'x16',
                  },
                  {
                    id: 13,
                    title: 'leg raisers',
                    description:
                      'Lie on your back, legs straight and together. Keep your legs straight and lift them all the way up to the ceiling until your butt comes off the floor. Slowly lower your legs back down till they are just above the floor. Hold for a moment. Raise your legs back up. Repeat.',
                    example: '/rs-clone-deploy/assets/gifs/leg_raisers.gif',
                    youtube: 'https://www.youtube.com/watch?v=dGKbTKLnym4',
                    quantity: 'x14',
                  },
                  {
                    id: 14,
                    title: 'heel touch',
                    description:
                      'Keep your back flat and bend your knees to a 90-degree angle with your feet firmly planted on the floor. Engage your core as you bend your spine to reach your right hand toward your right ankle. Repeat this movement on your left side. Keep your lower back on the floor.',
                    example: '/rs-clone-deploy/assets/gifs/heel_touch.gif',
                    youtube: 'https://www.youtube.com/watch?v=9bR-elyolBQ',
                    quantity: 'x18',
                  },
                  {
                    id: 15,
                    title: 'reclined oblique twist',
                    description:
                      'Lie on your back with your legs extended and your elbow directly under your shoulders. LIft your left leg up at a 45 degree angle while reaching your right arm over to your left side. Then slowly go back to the starting position. Repeat several times, and then switch to the other side.',
                    example: '/rs-clone-deploy/assets/gifs/reclined_oblique_twist.gif',
                    youtube: 'https://www.youtube.com/watch?v=XKW5jru5pGo',
                    quantity: 'x14',
                  },
                  {
                    id: 16,
                    title: 'heels to the heaven',
                    description: 'Lie on your back, position your arms out to your sides. From here, activate the lower abdominals and lift the legs until they are perpendicular to the ground.',
                    example: '/rs-clone-deploy/assets/gifs/heels_to_the heaven.gif',
                    youtube: 'https://www.youtube.com/watch?v=wdS2U6z0JGY',
                    quantity: 'x10',
                  },
                  {
                    id: 17,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '00:30',
                  },
                  {
                    id: 18,
                    title: 'cobra stretch',
                    description:
                      'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
                    example: '/rs-clone-deploy/assets/png/cobra.png',
                    youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
                    quantity: '00:30',
                  },
                  {
                    id: 19,
                    title: 'lying twist stretch left',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the left. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                  {
                    id: 20,
                    title: 'lying twist stretch right',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the right. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 3,
                title: 'ABS advanced',
                exercisesAmt: '26',
                exercisesTime: '13',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/abs3.png',
                color: 'linear-gradient(90deg, rgba(244,117,117,1) 0%, rgba(255,209,209,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'jumping jacks',
                    description:
                      'Stand upright with your legs together, arms at your sides Bend your knees slightly, and jump into the air. As you jump , spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
                    youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
                    quantity: 'x30',
                  },
                  {
                    id: 2,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'cross knee plank',
                    description:
                      'Get on the floor on all fours and assume a push up or ab plank position. To execute this move, squeeze the abs and bring your left leg up to your right elbow and back. Repeat with the opposite leg.',
                    example: '/rs-clone-deploy/assets/gifs/cross_knee_plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=O4fFIYpYySU',
                    quantity: 'x28',
                  },
                  {
                    id: 4,
                    title: 'cross arm crunches',
                    description:
                      'Lie flat on your back and cross your arms across your chest. Bend your knees and firmly plant your feet on the floor. Brace your core and lift your shoulders and upper back off of the floor. Hold at the top for a second and then retract back down to starting position.',
                    example: '/rs-clone-deploy/assets/gifs/cross_arm_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=Qz3ylqqJ90M',
                    quantity: 'x18',
                  },
                  {
                    id: 5,
                    title: 'heel touch',
                    description:
                      'Keep your back flat and bend your knees to a 90-degree angle with your feet firmly planted on the floor. Engage your core as you bend your spine to reach your right hand toward your right ankle. Repeat this movement on your left side. Keep your lower back on the floor.',
                    example: '/rs-clone-deploy/assets/gifs/heel_touch.gif',
                    youtube: 'https://www.youtube.com/watch?v=9bR-elyolBQ',
                    quantity: 'x24',
                  },
                  {
                    id: 6,
                    title: 'x man crunch',
                    description:
                      'Lie down on the floor. Take the x position, keeping your hands and feet off the ground. Bring your arms and legs together in the middle/ Go back to starting position.',
                    example: '/rs-clone-deploy/assets/gifs/x_man_crunch.gif',
                    youtube: 'https://www.youtube.com/watch?v=f_ZsJgaqFNE',
                    quantity: 'x18',
                  },
                  {
                    id: 7,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x20',
                  },
                  {
                    id: 8,
                    title: 'side crunches left',
                    description:
                      'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
                    example: '/rs-clone-deploy/assets/gifs/side_crunch_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
                    quantity: 'x16',
                  },
                  {
                    id: 9,
                    title: 'side crunches right',
                    description:
                      'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
                    example: '/rs-clone-deploy/assets/gifs/side_crunch_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
                    quantity: 'x16',
                  },
                  {
                    id: 10,
                    title: 'heels to the heaven',
                    description: 'Lie on your back, position your arms out to your sides. From here, activate the lower abdominals and lift the legs until they are perpendicular to the ground.',
                    example: '/rs-clone-deploy/assets/gifs/heels_to_the heaven.gif',
                    youtube: 'https://www.youtube.com/watch?v=wdS2U6z0JGY',
                    quantity: 'x20',
                  },
                  {
                    id: 11,
                    title: 'vhold',
                    description: 'Sit on the floor, lift your legs up at a 45 degree angle, and lean your upper body back at a 45 degree angle. Stretch your arms forward. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/vhold.jpg',
                    youtube: 'https://www.youtube.com/watch?v=WGwI629aTAY',
                    quantity: '00:30',
                  },
                  {
                    id: 12,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '01:00',
                  },
                  {
                    id: 13,
                    title: 'skipping without rope',
                    description:
                      'This is a good warm-up exercise. Pretend to hold a skipping rope handle in each hand. Jump and alternately land on the balls of your feet, rotating your wrists at the same time as you as if you were spinning a rope.',
                    example: '/rs-clone-deploy/assets/gifs/skipping_without_rope.gif',
                    youtube: 'https://www.youtube.com/watch?v=CYGeazlNbU4',
                    quantity: '00:30',
                  },
                  {
                    id: 14,
                    title: 'cross knee plank',
                    description:
                      'Get on the floor on all fours and assume a push up or ab plank position. To execute this move, squeeze the abs and bring your left leg up to your right elbow and back. Repeat with the opposite leg.',
                    example: '/rs-clone-deploy/assets/gifs/cross_knee_plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=O4fFIYpYySU',
                    quantity: 'x26',
                  },
                  {
                    id: 15,
                    title: 'cross arm crunches',
                    description:
                      'Lie flat on your back and cross your arms across your chest. Bend your knees and firmly plant your feet on the floor. Brace your core and lift your shoulders and upper back off of the floor. Hold at the top for a second and then retract back down to starting position.',
                    example: '/rs-clone-deploy/assets/gifs/cross_arm_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=Qz3ylqqJ90M',
                    quantity: 'x16',
                  },
                  {
                    id: 16,
                    title: 'heel touch',
                    description:
                      'Keep your back flat and bend your knees to a 90-degree angle with your feet firmly planted on the floor. Engage your core as you bend your spine to reach your right hand toward your right ankle. Repeat this movement on your left side. Keep your lower back on the floor.',
                    example: '/rs-clone-deploy/assets/gifs/heel_touch.gif',
                    youtube: 'https://www.youtube.com/watch?v=9bR-elyolBQ',
                    quantity: 'x22',
                  },
                  {
                    id: 17,
                    title: 'x man crunch',
                    description:
                      'Lie down on the floor. Take the x position, keeping your hands and feet off the ground. Bring your arms and legs together in the middle/ Go back to starting position.',
                    example: '/rs-clone-deploy/assets/gifs/x_man_crunch.gif',
                    youtube: 'https://www.youtube.com/watch?v=f_ZsJgaqFNE',
                    quantity: 'x16',
                  },
                  {
                    id: 18,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x18',
                  },
                  {
                    id: 19,
                    title: 'side crunches left',
                    description:
                      'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
                    example: '/rs-clone-deploy/assets/gifs/side_crunch_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
                    quantity: 'x14',
                  },
                  {
                    id: 20,
                    title: 'side crunches right',
                    description:
                      'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
                    example: '/rs-clone-deploy/assets/gifs/side_crunch_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
                    quantity: 'x14',
                  },
                  {
                    id: 21,
                    title: 'heels to the heaven',
                    description: 'Lie on your back, position your arms out to your sides. From here, activate the lower abdominals and lift the legs until they are perpendicular to the ground.',
                    example: '/rs-clone-deploy/assets/gifs/heels_to_the heaven.gif',
                    youtube: 'https://www.youtube.com/watch?v=wdS2U6z0JGY',
                    quantity: 'x18',
                  },
                  {
                    id: 22,
                    title: 'vhold',
                    description: 'Sit on the floor, lift your legs up at a 45 degree angle, and lean your upper body back at a 45 degree angle. Stretch your arms forward. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/vhold.jpg',
                    youtube: 'https://www.youtube.com/watch?v=WGwI629aTAY',
                    quantity: '00:25',
                  },
                  {
                    id: 23,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '00:30',
                  },
                  {
                    id: 24,
                    title: 'cobra stretch',
                    description:
                      'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
                    example: '/rs-clone-deploy/assets/png/cobra.png',
                    youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
                    quantity: '00:30',
                  },
                  {
                    id: 25,
                    title: 'lying twist stretch left',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the left. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                  {
                    id: 26,
                    title: 'lying twist stretch right',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the right. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                ],
              },
            ],
          },
          {
            title: 'BUTT Workouts',
            image: '/rs-clone-deploy/assets/png/butt.png',
            block: [
              {
                id: 4,
                title: 'BUTT beginner',
                exercisesAmt: '18',
                exercisesTime: '13',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/butt.png',
                color: 'linear-gradient(90deg, rgba(24,240,237,1) 0%, rgba(206,247,242,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'butt kicks',
                    description:
                      "Run in place while kicking your heel up to touch your butt with each step. Try to do it as fast as you can. Keep your chest up, tighten your abs. It's a great exercise for the gluteus and hamstrings.",
                    example: '/rs-clone-deploy/assets/gifs/butt_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=vXVPvY1UbJI',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x12',
                  },
                  {
                    id: 4,
                    title: 'standing glute kickbacks left',
                    description:
                      'Сontract your core muscles. Extend your left leg back and up. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
                    quantity: 'x10',
                  },
                  {
                    id: 5,
                    title: 'standing glute kickbacks right',
                    description:
                      'Get into all fours, with a straight spine, and contract your core muscles. Extend your right leg back and up until your thigh is parallel with the ground. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position without touching your knee to the ground and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
                    quantity: 'x10',
                  },
                  {
                    id: 6,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x10',
                  },
                  {
                    id: 7,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x14',
                  },
                  {
                    id: 8,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 9,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x10',
                  },
                  {
                    id: 10,
                    title: 'standing glute kickbacks right',
                    description:
                      'Get into all fours, with a straight spine, and contract your core muscles. Extend your right leg back and up until your thigh is parallel with the ground. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position without touching your knee to the ground and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
                    quantity: 'x8',
                  },
                  {
                    id: 11,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x8',
                  },
                  {
                    id: 12,
                    title: 'standing glute kickbacks left',
                    description:
                      'Сontract your core muscles. Extend your left leg back and up. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
                    quantity: 'x8',
                  },
                  {
                    id: 13,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x8',
                  },
                  {
                    id: 14,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x12',
                  },
                  {
                    id: 15,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 16,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 17,
                    title: 'knee to chest stretch left',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your left knee towards your chest as much as you can while keeping your right leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                  {
                    id: 18,
                    title: 'knee to chest stretch right',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your right knee towards your chest as much as you can while keeping your left leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 5,
                title: 'BUTT intermediate',
                exercisesAmt: '26',
                exercisesTime: '18',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/butt.png',
                color: 'linear-gradient(90deg, rgba(113,179,235,1) 0%, rgba(202,227,249,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'butt kicks',
                    description:
                      "Run in place while kicking your heel up to touch your butt with each step. Try to do it as fast as you can. Keep your chest up, tighten your abs. It's a great exercise for the gluteus and hamstrings.",
                    example: '/rs-clone-deploy/assets/gifs/butt_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=vXVPvY1UbJI',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'lunges',
                    description:
                      'Start in a standing position with your feet hip-width apart. Step forward longer than a walking stride so one leg is ahead of your torso and the other is behind. Your foot should land flat and remain flat while it is on the ground. Your rear heel will rise off of the ground. Bend your knees to approximately 90 degrees as you lower yourself. Remember to keep your trunk upright and core engaged. Then, forcefully push off from your front leg to return to the starting position.',
                    example: '/rs-clone-deploy/assets/gifs/lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=yIc1YbVLMZ8',
                    quantity: 'x14',
                  },
                  {
                    id: 4,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 5,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 6,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x12',
                  },
                  {
                    id: 7,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x12',
                  },
                  {
                    id: 8,
                    title: 'bottom leg lift left',
                    description: 'Lie on your left side with your head resting on your left hand. Then put your right foot forward on the floor Lift your left leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x12',
                  },
                  {
                    id: 9,
                    title: 'bottom leg lift right',
                    description: 'Lie on your right side with your head resting on your right hand. Then put your left foot forward on the floor Lift your right leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x12',
                  },
                  {
                    id: 10,
                    title: 'fire hydrant left',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your left leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x10',
                  },
                  {
                    id: 11,
                    title: 'fire hydrant right',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x10',
                  },
                  {
                    id: 12,
                    title: 'split squat left',
                    description:
                      'From a standing position, take a long step forward as if performing a lunge. The heel of your back foot should be raised. Keeping your torso straight, lower slowly until your back knee almost touches the floor, then push back up.',
                    example: '/rs-clone-deploy/assets/gifs/split_squat_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=SFSZVKzqnXA',
                    quantity: 'x10',
                  },
                  {
                    id: 13,
                    title: 'split squat right',
                    description:
                      'From a standing position, take a long step forward as if performing a lunge. The heel of your back foot should be raised. Keeping your torso straight, lower slowly until your back knee almost touches the floor, then push back up.',
                    example: '/rs-clone-deploy/assets/gifs/split_squat_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=SFSZVKzqnXA',
                    quantity: 'x10',
                  },
                  {
                    id: 14,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 15,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 16,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x10',
                  },
                  {
                    id: 17,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x10',
                  },
                  {
                    id: 18,
                    title: 'bottom leg lift left',
                    description: 'Lie on your left side with your head resting on your left hand. Then put your right foot forward on the floor Lift your left leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x10',
                  },
                  {
                    id: 19,
                    title: 'bottom leg lift right',
                    description: 'Lie on your right side with your head resting on your right hand. Then put your left foot forward on the floor Lift your right leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x10',
                  },
                  {
                    id: 20,
                    title: 'lunges',
                    description:
                      'Start in a standing position with your feet hip-width apart. Step forward longer than a walking stride so one leg is ahead of your torso and the other is behind. Your foot should land flat and remain flat while it is on the ground. Your rear heel will rise off of the ground. Bend your knees to approximately 90 degrees as you lower yourself. Remember to keep your trunk upright and core engaged. Then, forcefully push off from your front leg to return to the starting position.',
                    example: '/rs-clone-deploy/assets/gifs/lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=yIc1YbVLMZ8',
                    quantity: 'x12',
                  },
                  {
                    id: 21,
                    title: 'fire hydrant left',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your left leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x8',
                  },
                  {
                    id: 22,
                    title: 'fire hydrant right',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x8',
                  },
                  {
                    id: 23,
                    title: 'split squat left',
                    description:
                      'From a standing position, take a long step forward as if performing a lunge. The heel of your back foot should be raised. Keeping your torso straight, lower slowly until your back knee almost touches the floor, then push back up.',
                    example: '/rs-clone-deploy/assets/gifs/split_squat_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=SFSZVKzqnXA',
                    quantity: 'x8',
                  },
                  {
                    id: 24,
                    title: 'split squat right',
                    description:
                      'From a standing position, take a long step forward as if performing a lunge. The heel of your back foot should be raised. Keeping your torso straight, lower slowly until your back knee almost touches the floor, then push back up.',
                    example: '/rs-clone-deploy/assets/gifs/split_squat_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=SFSZVKzqnXA',
                    quantity: 'x8',
                  },
                  {
                    id: 25,
                    title: 'kneeling lunge stretch left',
                    description:
                      'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
                    example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
                    quantity: '00:30',
                  },
                  {
                    id: 26,
                    title: 'kneeling lunge stretch right',
                    description:
                      'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
                    example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 6,
                title: 'BUTT advanced',
                exercisesAmt: '32',
                exercisesTime: '24',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/butt.png',
                color: 'linear-gradient(90deg, rgba(244,117,117,1) 0%, rgba(255,209,209,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'butt kicks',
                    description:
                      "Run in place while kicking your heel up to touch your butt with each step. Try to do it as fast as you can. Keep your chest up, tighten your abs. It's a great exercise for the gluteus and hamstrings.",
                    example: '/rs-clone-deploy/assets/gifs/butt_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=vXVPvY1UbJI',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x15',
                  },
                  {
                    id: 4,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 5,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 6,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x15',
                  },
                  {
                    id: 7,
                    title: 'curtsy lunges',
                    description:
                      'Stand with your feet hip-width apart, hands on your hips. Take a big step back with your right leg, crossing it behind your left. Bend your knees and lower your hips until your left thigh is nearly parallel to the floor. Keep your torso upright and your hips and shoulders as square as possible to the wall in front of you. Then repeat on the other side.',
                    example: '/rs-clone-deploy/assets/gifs/curtsy_lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=-rTyKlHjYT8',
                    quantity: 'x14',
                  },
                  {
                    id: 8,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x14',
                  },
                  {
                    id: 9,
                    title: 'lunge knee hops right',
                    description:
                      'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
                    example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
                    quantity: 'x12',
                  },
                  {
                    id: 10,
                    title: 'lunge knee hops left',
                    description:
                      'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
                    example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
                    quantity: 'x12',
                  },
                  {
                    id: 11,
                    title: 'flutter kicks',
                    description:
                      'Lie on your back with your arms at your sides and legs slightly lifted. Then quickly raise your right leg up, and simultaneous lower your left hand. This exercise can increase core strength and improve your endurance.',
                    example: '/rs-clone-deploy/assets/gifs/flutter_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=K5wuM_gNWyw',
                    quantity: '00:30',
                  },
                  {
                    id: 12,
                    title: 'bench glute kick back left',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x16',
                  },
                  {
                    id: 13,
                    title: 'bench glute kick back right',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x16',
                  },
                  {
                    id: 14,
                    title: 'sumo squat',
                    description:
                      'Start in a traditional squat stance with your feet about shoulder-width apart and toes pointed forward. Clasp your hands together at your chest. Take a step to the side with your right foot until your stance is 3–4 feet wide, or wider than hip width. Wider is OK as long as you can perform the move correctly. Move your hips back slightly and bend your knees as you lower your body into a squat position. Draw your tailbone straight down to the floor. Be mindful to keep your spine neutral, core engaged, and eyes forward throughout the movement. Lower until your thighs are parallel to the floor. You can go lower or shorten the squat if parallel is too low or if you can’t maintain your leg alignmen. Pause in the squat position for a few seconds. Then, engaging your glutes, press up to standing, driving up through your heels.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=Z2F0bArQH5s',
                    quantity: 'x15',
                  },
                  {
                    id: 15,
                    title: 'single leg bridge left',
                    description:
                      'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
                    example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
                    quantity: 'x12',
                  },
                  {
                    id: 16,
                    title: 'single leg bridge right',
                    description:
                      'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
                    example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
                    quantity: 'x12',
                  },
                  {
                    id: 17,
                    title: 'jumping squats',
                    description: 'Stand with feet shoulder width and knees slightly bent. Start by doing a regular squat. engage your core, and jump up explosively.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_squats.webp',
                    youtube: 'https://www.youtube.com/watch?v=txLE-jOCEsc',
                    quantity: 'x12',
                  },
                  {
                    id: 18,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 19,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 20,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x12',
                  },
                  {
                    id: 21,
                    title: 'curtsy lunges',
                    description:
                      'Stand with your feet hip-width apart, hands on your hips. Take a big step back with your right leg, crossing it behind your left. Bend your knees and lower your hips until your left thigh is nearly parallel to the floor. Keep your torso upright and your hips and shoulders as square as possible to the wall in front of you. Then repeat on the other side.',
                    example: '/rs-clone-deploy/assets/gifs/curtsy_lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=-rTyKlHjYT8',
                    quantity: 'x12',
                  },
                  {
                    id: 22,
                    title: 'mountain climber',
                    description:
                      'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
                    example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
                    youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
                    quantity: 'x12',
                  },
                  {
                    id: 23,
                    title: 'lunge knee hops left',
                    description:
                      'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
                    example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
                    quantity: 'x10',
                  },
                  {
                    id: 24,
                    title: 'lunge knee hops right',
                    description:
                      'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
                    example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
                    quantity: 'x10',
                  },
                  {
                    id: 25,
                    title: 'flutter kicks',
                    description:
                      'Lie on your back with your arms at your sides and legs slightly lifted. Then quickly raise your right leg up, and simultaneous lower your left hand. This exercise can increase core strength and improve your endurance.',
                    example: '/rs-clone-deploy/assets/gifs/flutter_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=K5wuM_gNWyw',
                    quantity: '00:30',
                  },
                  {
                    id: 26,
                    title: 'bench glute kick back left',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x14',
                  },
                  {
                    id: 27,
                    title: 'bench glute kick back right',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x14',
                  },
                  {
                    id: 28,
                    title: 'sumo squat',
                    description:
                      'Start in a traditional squat stance with your feet about shoulder-width apart and toes pointed forward. Clasp your hands together at your chest. Take a step to the side with your right foot until your stance is 3–4 feet wide, or wider than hip width. Wider is OK as long as you can perform the move correctly. Move your hips back slightly and bend your knees as you lower your body into a squat position. Draw your tailbone straight down to the floor. Be mindful to keep your spine neutral, core engaged, and eyes forward throughout the movement. Lower until your thighs are parallel to the floor. You can go lower or shorten the squat if parallel is too low or if you can’t maintain your leg alignmen. Pause in the squat position for a few seconds. Then, engaging your glutes, press up to standing, driving up through your heels.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=Z2F0bArQH5s',
                    quantity: 'x12',
                  },
                  {
                    id: 29,
                    title: 'single leg bridge left',
                    description:
                      'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
                    example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
                    quantity: 'x10',
                  },
                  {
                    id: 30,
                    title: 'single leg bridge right',
                    description:
                      'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
                    example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
                    quantity: 'x10',
                  },
                  {
                    id: 31,
                    title: 'kneeling lunge stretch left',
                    description:
                      'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
                    example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
                    quantity: '00:30',
                  },
                  {
                    id: 32,
                    title: 'kneeling lunge stretch right',
                    description:
                      'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
                    example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
                    quantity: '00:30',
                  },
                ],
              },
            ],
          },
          {
            title: 'THIGH Workouts',
            image: '/rs-clone-deploy/assets/png/thigh.png',
            block: [
              {
                id: 7,
                title: 'THIGH beginner',
                exercisesAmt: '19',
                exercisesTime: '14',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/thigh.png',
                color: 'linear-gradient(90deg, rgba(24,240,237,1) 0%, rgba(206,247,242,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'jumping jacks',
                    description:
                      'Stand upright with your legs together, arms at your sides Bend your knees slightly, and jump into the air. As you jump , spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
                    youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
                    quantity: 'x30',
                  },
                  {
                    id: 3,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x12',
                  },
                  {
                    id: 4,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 5,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 6,
                    title: 'backward lunge',
                    description:
                      'Stand tall with your feet hip distance apart. Take a large step backward and lower your body toward the floor.  Both legs should be bent at a 90-degree angle at the bottom of the lunge.  Rise back to start and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/backward_lunge.gif',
                    youtube: 'https://www.youtube.com/watch?v=_LGpDtENZ5U',
                    quantity: 'x14',
                  },
                  {
                    id: 7,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 8,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 9,
                    title: 'burpees',
                    description:
                      'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
                    example: '/rs-clone-deploy/assets/gifs/burpees.gif',
                    youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
                    quantity: 'x5',
                  },
                  {
                    id: 10,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 11,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 12,
                    title: 'backward lunge',
                    description:
                      'Stand tall with your feet hip distance apart. Take a large step backward and lower your body toward the floor.  Both legs should be bent at a 90-degree angle at the bottom of the lunge.  Rise back to start and repeat.',
                    example: '/rs-clone-deploy/assets/gifs/backward_lunge.gif',
                    youtube: 'https://www.youtube.com/watch?v=_LGpDtENZ5U',
                    quantity: 'x12',
                  },
                  {
                    id: 13,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x8',
                  },
                  {
                    id: 14,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x8',
                  },
                  {
                    id: 15,
                    title: 'quad stretch left',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 16,
                    title: 'quad stretch right',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 17,
                    title: 'knee to chest stretch left',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your left knee towards your chest as much as you can while keeping your right leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                  {
                    id: 18,
                    title: 'knee to chest stretch right',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your right knee towards your chest as much as you can while keeping your left leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 8,
                title: 'THIGH intermediate',
                exercisesAmt: '26',
                exercisesTime: '19',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/thigh.png',
                color: 'linear-gradient(90deg, rgba(113,179,235,1) 0%, rgba(202,227,249,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'side hop',
                    description: 'Jump with both feet to the right and then to the left, in a quick, repetitive movement',
                    example: '/rs-clone-deploy/assets/gifs/side_hop.gif',
                    youtube: 'https://www.youtube.com/watch?v=nYmUEJIBj3c',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'lunges',
                    description:
                      'Start in a standing position with your feet hip-width apart. Step forward longer than a walking stride so one leg is ahead of your torso and the other is behind. Your foot should land flat and remain flat while it is on the ground. Your rear heel will rise off of the ground. Bend your knees to approximately 90 degrees as you lower yourself. Remember to keep your trunk upright and core engaged. Then, forcefully push off from your front leg to return to the starting position.',
                    example: '/rs-clone-deploy/assets/gifs/lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=yIc1YbVLMZ8',
                    quantity: 'x14',
                  },
                  {
                    id: 4,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 5,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x12',
                  },
                  {
                    id: 6,
                    title: 'sumo squat',
                    description:
                      'Start in a traditional squat stance with your feet about shoulder-width apart and toes pointed forward. Clasp your hands together at your chest. Take a step to the side with your right foot until your stance is 3–4 feet wide, or wider than hip width. Wider is OK as long as you can perform the move correctly. Move your hips back slightly and bend your knees as you lower your body into a squat position. Draw your tailbone straight down to the floor. Be mindful to keep your spine neutral, core engaged, and eyes forward throughout the movement. Lower until your thighs are parallel to the floor. You can go lower or shorten the squat if parallel is too low or if you can’t maintain your leg alignmen. Pause in the squat position for a few seconds. Then, engaging your glutes, press up to standing, driving up through your heels.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=Z2F0bArQH5s',
                    quantity: 'x12',
                  },
                  {
                    id: 7,
                    title: 'frog press',
                    description:
                      'Lie on your back with your knees bent to 90 degrees, turning them outwards like a frog. Make sure to keep your heels pressed together while flexing your feet towards you. Tighten your stomach and crunch up, lifting your head and shoulders off the floor, holding this position. Place your arms down by your side, hovering just above the floor. Straighten your legs away from your body at a 45-degree angle. Return to the starting position, completing the desired amount of repetitions.',
                    example: '/rs-clone-deploy/assets/gifs/frog_press.gif',
                    youtube: 'https://www.youtube.com/watch?v=JvA7t9xKWgg',
                    quantity: 'x12',
                  },
                  {
                    id: 8,
                    title: 'fire hydrant left',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your left leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x12',
                  },
                  {
                    id: 9,
                    title: 'fire hydrant right',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x12',
                  },
                  {
                    id: 10,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 11,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 12,
                    title: 'burpees',
                    description:
                      'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
                    example: '/rs-clone-deploy/assets/gifs/burpees.gif',
                    youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
                    quantity: 'x6',
                  },
                  {
                    id: 13,
                    title: 'lunges',
                    description:
                      'Start in a standing position with your feet hip-width apart. Step forward longer than a walking stride so one leg is ahead of your torso and the other is behind. Your foot should land flat and remain flat while it is on the ground. Your rear heel will rise off of the ground. Bend your knees to approximately 90 degrees as you lower yourself. Remember to keep your trunk upright and core engaged. Then, forcefully push off from your front leg to return to the starting position.',
                    example: '/rs-clone-deploy/assets/gifs/lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=yIc1YbVLMZ8',
                    quantity: 'x12',
                  },
                  {
                    id: 14,
                    title: 'donkey kicks left',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 15,
                    title: 'donkey kicks right',
                    description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
                    example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
                    quantity: 'x10',
                  },
                  {
                    id: 16,
                    title: 'sumo squat',
                    description:
                      'Start in a traditional squat stance with your feet about shoulder-width apart and toes pointed forward. Clasp your hands together at your chest. Take a step to the side with your right foot until your stance is 3–4 feet wide, or wider than hip width. Wider is OK as long as you can perform the move correctly. Move your hips back slightly and bend your knees as you lower your body into a squat position. Draw your tailbone straight down to the floor. Be mindful to keep your spine neutral, core engaged, and eyes forward throughout the movement. Lower until your thighs are parallel to the floor. You can go lower or shorten the squat if parallel is too low or if you can’t maintain your leg alignmen. Pause in the squat position for a few seconds. Then, engaging your glutes, press up to standing, driving up through your heels.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=Z2F0bArQH5s',
                    quantity: 'x10',
                  },
                  {
                    id: 17,
                    title: 'frog press',
                    description:
                      'Lie on your back with your knees bent to 90 degrees, turning them outwards like a frog. Make sure to keep your heels pressed together while flexing your feet towards you. Tighten your stomach and crunch up, lifting your head and shoulders off the floor, holding this position. Place your arms down by your side, hovering just above the floor. Straighten your legs away from your body at a 45-degree angle. Return to the starting position, completing the desired amount of repetitions.',
                    example: '/rs-clone-deploy/assets/gifs/frog_press.gif',
                    youtube: 'https://www.youtube.com/watch?v=JvA7t9xKWgg',
                    quantity: 'x10',
                  },
                  {
                    id: 18,
                    title: 'fire hydrant left',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your left leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x10',
                  },
                  {
                    id: 19,
                    title: 'fire hydrant right',
                    description:
                      'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
                    example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
                    quantity: 'x10',
                  },
                  {
                    id: 20,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x8',
                  },
                  {
                    id: 21,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x8',
                  },
                  {
                    id: 22,
                    title: 'burpees',
                    description:
                      'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
                    example: '/rs-clone-deploy/assets/gifs/burpees.gif',
                    youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
                    quantity: 'x5',
                  },
                  {
                    id: 23,
                    title: 'quad stretch left',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 24,
                    title: 'quad stretch right',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 25,
                    title: 'knee to chest stretch left',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your left knee towards your chest as much as you can while keeping your right leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                  {
                    id: 26,
                    title: 'knee to chest stretch right',
                    description:
                      'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your right knee towards your chest as much as you can while keeping your left leg straight on the ground. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/knee_to_chest_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
                    quantity: '00:30',
                  },
                ],
              },
              {
                id: 9,
                title: 'THIGH advanced',
                exercisesAmt: '29',
                exercisesTime: '21',
                complexityLevel: !0,
                image: '/rs-clone-deploy/assets/png/thigh.png',
                color: 'linear-gradient(90deg, rgba(244,117,117,1) 0%, rgba(255,209,209,1) 100%)',
                exercises: [
                  {
                    id: 1,
                    title: 'high stepping',
                    description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
                    example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
                    youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'burpees',
                    description:
                      'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
                    example: '/rs-clone-deploy/assets/gifs/burpees.gif',
                    youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
                    quantity: 'x10',
                  },
                  {
                    id: 3,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x15',
                  },
                  {
                    id: 4,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 5,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 6,
                    title: 'side lunges',
                    description:
                      'Start with your feet shoulder-width apart, toes pointed straight forward. Step out with your right foot as wide as possible. Engage through the right heel as you drop your hips down and back while keeping the left leg straight, stretching the groin on the left leg and keeping both soles of the feet on the ground and toes pointed straight forward. Make sure your right knee is tracking over your right foot the whole motion. Powerfully your right heel into the floor to push yourself back to the full standing start position. This exercise strengthens your glutes and thighs.',
                    example: '/rs-clone-deploy/assets/gifs/side_lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=tlUg1DXhHm8',
                    quantity: 'x14',
                  },
                  {
                    id: 7,
                    title: 'bottom leg lift left',
                    description: 'Lie on your left side with your head resting on your left hand. Then put your right foot forward on the floor Lift your left leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x12',
                  },
                  {
                    id: 8,
                    title: 'bottom leg lift right',
                    description: 'Lie on your right side with your head resting on your right hand. Then put your left foot forward on the floor Lift your right leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x12',
                  },
                  {
                    id: 9,
                    title: 'jumping squats',
                    description: 'Stand with feet shoulder width and knees slightly bent. Start by doing a regular squat. engage your core, and jump up explosively.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_squats.webp',
                    youtube: 'https://www.youtube.com/watch?v=txLE-jOCEsc',
                    quantity: 'x12',
                  },
                  {
                    id: 10,
                    title: 'side leg circles left',
                    description:
                      'Lie on your side, with one leg stacked on top of the other. Extend your bottom arm straight and rest your head on it, while you place your other hand on the floor in front of your body for support. Lift the top leg up and perform leg circles.',
                    example: '/rs-clone-deploy/assets/gifs/side_leg_circles_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VgysBPnVJWg',
                    quantity: 'x12',
                  },
                  {
                    id: 11,
                    title: 'side leg circles right',
                    description:
                      'Lie on your side, with one leg stacked on top of the other. Extend your bottom arm straight and rest your head on it, while you place your other hand on the floor in front of your body for support. Lift the top leg up and perform leg circles.',
                    example: '/rs-clone-deploy/assets/gifs/side_leg_circles_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VgysBPnVJWg',
                    quantity: 'x12',
                  },
                  {
                    id: 12,
                    title: 'bench glute kick back left',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x15',
                  },
                  {
                    id: 13,
                    title: 'bench glute kick back right',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x15',
                  },
                  {
                    id: 14,
                    title: 'burpees',
                    description:
                      'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
                    example: '/rs-clone-deploy/assets/gifs/burpees.gif',
                    youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
                    quantity: 'x6',
                  },
                  {
                    id: 15,
                    title: 'squats',
                    description:
                      'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
                    example: '/rs-clone-deploy/assets/gifs/squats.gif',
                    youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
                    quantity: 'x12',
                  },
                  {
                    id: 16,
                    title: 'side lying leg lift left',
                    description:
                      'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 17,
                    title: 'side lying leg lift right',
                    description:
                      'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
                    example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
                    quantity: 'x10',
                  },
                  {
                    id: 18,
                    title: 'side lunges',
                    description:
                      'Start with your feet shoulder-width apart, toes pointed straight forward. Step out with your right foot as wide as possible. Engage through the right heel as you drop your hips down and back while keeping the left leg straight, stretching the groin on the left leg and keeping both soles of the feet on the ground and toes pointed straight forward. Make sure your right knee is tracking over your right foot the whole motion. Powerfully your right heel into the floor to push yourself back to the full standing start position. This exercise strengthens your glutes and thighs.',
                    example: '/rs-clone-deploy/assets/gifs/side_lunges.gif',
                    youtube: 'https://www.youtube.com/watch?v=tlUg1DXhHm8',
                    quantity: 'x12',
                  },
                  {
                    id: 19,
                    title: 'bottom leg lift left',
                    description: 'Lie on your left side with your head resting on your left hand. Then put your right foot forward on the floor Lift your left leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x10',
                  },
                  {
                    id: 20,
                    title: 'bottom leg lift right',
                    description: 'Lie on your right side with your head resting on your right hand. Then put your left foot forward on the floor Lift your right leg up and down.',
                    example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
                    quantity: 'x10',
                  },
                  {
                    id: 21,
                    title: 'jumping squats',
                    description: 'Stand with feet shoulder width and knees slightly bent. Start by doing a regular squat. engage your core, and jump up explosively.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_squats.webp',
                    youtube: 'https://www.youtube.com/watch?v=txLE-jOCEsc',
                    quantity: 'x10',
                  },
                  {
                    id: 22,
                    title: 'side leg circles left',
                    description:
                      'Lie on your side, with one leg stacked on top of the other. Extend your bottom arm straight and rest your head on it, while you place your other hand on the floor in front of your body for support. Lift the top leg up and perform leg circles.',
                    example: '/rs-clone-deploy/assets/gifs/side_leg_circles_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VgysBPnVJWg',
                    quantity: 'x10',
                  },
                  {
                    id: 23,
                    title: 'side leg circles right',
                    description:
                      'Lie on your side, with one leg stacked on top of the other. Extend your bottom arm straight and rest your head on it, while you place your other hand on the floor in front of your body for support. Lift the top leg up and perform leg circles.',
                    example: '/rs-clone-deploy/assets/gifs/side_leg_circles_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=VgysBPnVJWg',
                    quantity: 'x10',
                  },
                  {
                    id: 24,
                    title: 'bench glute kick back left',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x12',
                  },
                  {
                    id: 25,
                    title: 'bench glute kick back right',
                    description: 'Same with glute kickbacks, just work with a bench.',
                    example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
                    quantity: 'x12',
                  },
                  {
                    id: 26,
                    title: 'wall sit',
                    description:
                      "Stand with your back to a wall, feet hip-width apart and slightly in front of you. Lean back into the wall, and slide down like you're sitting down onto a chair. Your knees should bent at 90 degrees with the knees above your ankles. Hold this position for 30 seconds.",
                    example: '/rs-clone-deploy/assets/png/wall_sit.png',
                    youtube: 'https://www.youtube.com/watch?v=Yp3ZwACK9v4',
                    quantity: '00:40',
                  },
                  {
                    id: 27,
                    title: 'quad stretch left',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 28,
                    title: 'quad stretch right',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 29,
                    title: 'lying butterfly stretch',
                    description: 'Lie on the floor with your feet together. Open your knees to the sides. Hold this position.',
                    example: '/rs-clone-deploy/assets/png/lying_butterfly_stretch.png',
                    youtube: 'https://www.youtube.com/watch?v=bzfY0Zr3sUE',
                    quantity: '00:30',
                  },
                ],
              },
            ],
          },
          {
            title: 'Routines',
            image: '/rs-clone-deploy/assets/images/morning_evening.jpg',
            block: [
              {
                id: 10,
                title: 'Morning Warmup',
                exercisesAmt: '11',
                exercisesTime: '10',
                image: '/rs-clone-deploy/assets/images/morning_evening.jpg',
                color: 'linear-gradient(90deg, rgba(128,27,150,0.7567401960784313) 0%, rgba(214,189,221,1) 78%)',
                exercises: [
                  {
                    id: 1,
                    title: 'bridge',
                    description:
                      'Lie on your back with your knees bent. Tighten the muscles in your stomach. Raise your hips off the floor until they line up with your knees and shoulders. Hold for three deep breaths. Return to the starting position and repeat.',
                    example: '/rs-clone-deploy/assets/images/bridge.jpg',
                    youtube: 'https://www.youtube.com/watch?v=-KKADnBsPzw',
                    quantity: '00:20',
                  },
                  {
                    id: 2,
                    title: 'reverse crunches',
                    description: 'Lie on your back with your knees up and hands behind your head. Lift your shoulders and thighs, and then stretch out.',
                    example: '/rs-clone-deploy/assets/gifs/reverse_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=UwRfRN5fYRg',
                    quantity: 'x20',
                  },
                  {
                    id: 3,
                    title: 'abdominal crunches',
                    description:
                      'Keep your knees comfortably apart. Fold your arms on your chest and tighten your abdominal muscles. Raise your head and shoulders off of the floor. Hold for three deep breaths, then return to starting position.',
                    example: '/rs-clone-deploy/assets/gifs/abdominal_crunches.gif',
                    youtube: 'https://www.youtube.com/watch?v=RUNrHkbP4Pc',
                    quantity: 'x20',
                  },
                  {
                    id: 4,
                    title: 'butt bridge',
                    description:
                      'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
                    example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
                    youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
                    quantity: 'x30',
                  },
                  {
                    id: 5,
                    title: 'bird dog',
                    description:
                      'Begin on all fours in the tabletop position. Then stretch your right leg and left arm at the same time. Hold for a few seconds, then go back and repeat with the other side.',
                    example: '/rs-clone-deploy/assets/gifs/bird_dog.gif',
                    youtube: 'https://www.youtube.com/watch?v=v0oCYe8__bU',
                    quantity: 'x25',
                  },
                  {
                    id: 6,
                    title: 'plank',
                    description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
                    example: '/rs-clone-deploy/assets/gifs/plank.gif',
                    youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
                    quantity: '00:30',
                  },
                  {
                    id: 7,
                    title: 'cobra stretch',
                    description:
                      'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
                    example: '/rs-clone-deploy/assets/png/cobra.png',
                    youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
                    quantity: '00:30',
                  },
                  {
                    id: 8,
                    title: 'shoulder stretch left',
                    description: 'Bring one arm across your upper body and hold it straight. Grasp the elbow with the other arm and gently pull toward your chest. Hold.',
                    example: '/rs-clone-deploy/assets/gifs/shoulders_stretch_left.gif',
                    youtube: 'https://www.youtube.com/watch?v=9k0EN2RCGgU',
                    quantity: '00:20',
                  },
                  {
                    id: 9,
                    title: 'shoulder stretch right',
                    description: 'Bring one arm across your upper body and hold it straight. Grasp the elbow with the other arm and gently pull toward your chest. Hold.',
                    example: '/rs-clone-deploy/assets/gifs/shoulders_stretch_right.gif',
                    youtube: 'https://www.youtube.com/watch?v=9k0EN2RCGgU',
                    quantity: '00:20',
                  },
                  {
                    id: 10,
                    title: 'butt kicks',
                    description:
                      "Run in place while kicking your heel up to touch your butt with each step. Try to do it as fast as you can. Keep your chest up, tighten your abs. It's a great exercise for the gluteus and hamstrings.",
                    example: '/rs-clone-deploy/assets/gifs/butt_kicks.gif',
                    youtube: 'https://www.youtube.com/watch?v=vXVPvY1UbJI',
                    quantity: '00:30',
                  },
                  {
                    id: 11,
                    title: 'jumping jacks',
                    description:
                      'Stand upright with your legs together, arms at your sides Bend your knees slightly, and jump into the air. As you jump , spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
                    example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
                    youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
                    quantity: 'x30',
                  },
                ],
              },
              {
                id: 11,
                title: 'Sleepy Time Stretch',
                exercisesAmt: '13',
                exercisesTime: '13',
                image: '/rs-clone-deploy/assets/images/morning_evening2.jpg',
                color: 'linear-gradient(90deg, rgba(128,27,150,0.7567401960784313) 0%, rgba(214,189,221,1) 78%)',
                exercises: [
                  {
                    id: 1,
                    title: 'quad stretch left',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 2,
                    title: 'quad stretch right',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 3,
                    title: 'quad stretch left',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 4,
                    title: 'quad stretch right',
                    description:
                      'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
                    example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
                    quantity: '00:30',
                  },
                  {
                    id: 5,
                    title: 'triceps stretch left',
                    description:
                      'Stand with your arms relaxed at your sides. With your affected arm, gently bend your elbow up toward you as far as possible. Your palm should face up. Then straighten your arm as much as you can.',
                    example: '/rs-clone-deploy/assets/images/triceps_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=L9IGOcrdcFk',
                    quantity: '00:30',
                  },
                  {
                    id: 6,
                    title: 'triceps stretch right',
                    description:
                      'Stand with your arms relaxed at your sides. With your affected arm, gently bend your elbow up toward you as far as possible. Your palm should face up. Then straighten your arm as much as you can.',
                    example: '/rs-clone-deploy/assets/images/tricep_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=L9IGOcrdcFk',
                    quantity: '00:30',
                  },
                  {
                    id: 7,
                    title: 'cobra stretch',
                    description:
                      'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
                    example: '/rs-clone-deploy/assets/png/cobra.png',
                    youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
                    quantity: '00:30',
                  },
                  {
                    id: 8,
                    title: 'child pose',
                    description:
                      'Keep on the floor with your toes together and your knees hip-width apart. Rest your palms on top of your thighs. On an exhale lower your torso between your knees. Extend your arms alongside your torso with your palms facing down. Relax your shoulders towards the ground. Rest in the pose for as long as you needed.',
                    example: '/rs-clone-deploy/assets/png/child_pose.png',
                    youtube: 'https://www.youtube.com/watch?v=DMwRPGMPB10',
                    quantity: '00:30',
                  },
                  {
                    id: 9,
                    title: 'cat cow pose',
                    description:
                      'Keep your hands shoulder-width apart and your knees directly below your hips. Inhale deeply while curving your lower back and bringing your head up, tilting your pelvis up like a cow. Exhale deeply and bring your abdomen in, arching your spine and bringing your head and pelvis down like a cat. Repeat several times.',
                    example: '/rs-clone-deploy/assets/gifs/cat_cow_pose.gif',
                    youtube: 'https://www.youtube.com/watch?v=w_UKcI1Ftn8',
                    quantity: '00:30',
                  },
                  {
                    id: 10,
                    title: 'lying butterfly stretch',
                    description: 'Lie on the floor with your feet together. Open your knees to the sides. Hold this position.',
                    example: '/rs-clone-deploy/assets/png/lying_butterfly_stretch.png',
                    youtube: 'https://www.youtube.com/watch?v=bzfY0Zr3sUE',
                    quantity: '00:30',
                  },
                  {
                    id: 11,
                    title: 'bridge',
                    description:
                      'Lie on your back with your knees bent. Tighten the muscles in your stomach. Raise your hips off the floor until they line up with your knees and shoulders. Hold for three deep breaths. Return to the starting position and repeat.',
                    example: '/rs-clone-deploy/assets/images/bridge.jpg',
                    youtube: 'https://www.youtube.com/watch?v=-KKADnBsPzw',
                    quantity: '00:30',
                  },
                  {
                    id: 12,
                    title: 'lying twist stretch left',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the left. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_left.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                  {
                    id: 13,
                    title: 'lying twist stretch right',
                    description:
                      'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the right. Hold this position. This exercise stretches your obliques and lower back.',
                    example: '/rs-clone-deploy/assets/images/lying_twist_stretch_right.jpg',
                    youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
                    quantity: '00:30',
                  },
                ],
              },
            ],
          },
        ],
        y = i.p + 'assets/abs3.png',
        w = i.p + 'assets/butt.png',
        f = i.p + 'assets/thigh.png',
        b = i.p + 'assets/whole_body2.png',
        k = i.p + 'assets/morning_evening.jpg',
        v = i.p + 'assets/morning_evening2.jpg',
        A =
          '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2,17H5.638l5.722,4.769A1,1,0,0,0,12,22a.989.989,0,0,0,.424-.095A1,1,0,0,0,13,21V3a1,1,0,0,0-1.64-.769L5.638,7H2A1,1,0,0,0,1,8v8A1,1,0,0,0,2,17ZM3,9H6a1,1,0,0,0,.64-.231L11,5.135v13.73L6.64,15.231A1,1,0,0,0,6,15H3Zm20,3a7.008,7.008,0,0,1-7,7,1,1,0,0,1,0-2A5,5,0,0,0,16,7a1,1,0,0,1,0-2A7.008,7.008,0,0,1,23,12Zm-5,0a2,2,0,0,0-2-2,1,1,0,0,1,0-2,4,4,0,0,1,0,8,1,1,0,0,1,0-2A2,2,0,0,0,18,12Z"/></svg>',
        x =
          '<?xml version="1.0" ?><svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><defs><style>.cls-1{fill:#101820;}</style></defs><title/><g data-name="Layer 35" id="Layer_35"><path class="cls-1" d="M18,29a1,1,0,0,1-.57-.18l-10-7A1,1,0,0,1,7,21V11a1,1,0,0,1,.43-.82l10-7a1,1,0,0,1,1-.07A1,1,0,0,1,19,4V28a1,1,0,0,1-.54.89A1,1,0,0,1,18,29ZM9,20.48l8,5.6V5.92l-8,5.6Z"/><path class="cls-1" d="M8,22H4a3,3,0,0,1-3-3V13a3,3,0,0,1,3-3H8a1,1,0,0,1,1,1V21A1,1,0,0,1,8,22ZM4,12a1,1,0,0,0-1,1v6a1,1,0,0,0,1,1H7V12Z"/><rect class="cls-1" height="12" transform="translate(-3.77 22.9) rotate(-45)" width="2" x="24.76" y="10"/><rect class="cls-1" height="2" transform="translate(-3.77 22.9) rotate(-45)" width="12" x="19.76" y="15"/></g></svg>',
        C = class {
          constructor(t) {
            (this.template = new e()),
              (this.exercise = t),
              (this.backLayer = this.template.createElement('div', 'exercise-modal__backlayer')),
              (this.modal = this.template.createElement('div', 'exercise-modal'));
          }
          draw() {
            this.backLayer.append(this.modal);
            const e = this.template.createBtn('exercise-modal__button-close');
            this.modal.append(e);
            const t = document.createElement('img');
            t.className = 'exercise-modal__gif';
            const i = this.exercise.example;
            (t.src = i), this.modal.append(t), this.createExerciseInfo();
            const o = this.template.createElement('p', 'exercise-modal__description', this.exercise.description);
            this.modal.append(o),
              document.body.prepend(this.backLayer),
              e.addEventListener('click', () => {
                this.closeExerciseModal();
              }),
              window.addEventListener('click', (e) => {
                e.target.classList.contains('exercise-modal__backlayer') && this.closeExerciseModal();
              });
          }
          closeExerciseModal() {
            document.body.removeChild(this.backLayer);
          }
          createExerciseInfo() {
            const e = this.template.createElement('div', 'exercise-modal__info'),
              t = this.template.createElement('span', 'exercise-modal__name', this.exercise.title),
              i = this.template.createElement('span', 'exercise-modal__quantity', this.exercise.quantity),
              o = this.template.createLink('exercise-modal__link', this.exercise.youtube);
            (o.target = '_blank'), e.append(t, i, o), this.modal.append(e);
          }
        };
      var _ = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const E = class {
          createUserInfo(e) {
            return _(this, void 0, void 0, function* () {
              try {
                const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/complex/create', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(e),
                });
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          getComplex(e) {
            return _(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/complex/get-all/${e}`);
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          deleteComplex(e) {
            return _(this, void 0, void 0, function* () {
              try {
                yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/complex/delete/${e}`, { method: 'DELETE' });
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          createExercise(e) {
            return _(this, void 0, void 0, function* () {
              try {
                const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/exercise/create', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(e),
                });
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          getExercises(e) {
            return _(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/exercise/get-all/${e}`);
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          deleteExercise(e) {
            return _(this, void 0, void 0, function* () {
              try {
                yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/exercise/delete/${e}`, { method: 'DELETE' });
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          updateExercise(e, t) {
            return _(this, void 0, void 0, function* () {
              try {
                const i = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/exercise/update/${e}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(t),
                });
                return yield i.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          fulfilledComplex(e) {
            return _(this, void 0, void 0, function* () {
              try {
                const t = yield fetch('https://rs-clone-back-production-b4b7.up.railway.app/api/completed/create', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(e),
                });
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          getCompletedComplexes(e) {
            return _(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/completed/get-all/${e}`);
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          getWeeklyStatistic(e) {
            return _(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/completed/weekly-workouts/${e}`);
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          getUserSettings(e) {
            return _(this, void 0, void 0, function* () {
              try {
                const t = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/user/get/${e}`);
                return yield t.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          updateRestTime(e, t) {
            return _(this, void 0, void 0, function* () {
              try {
                const i = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/user/update-rest/${e}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(t),
                });
                return yield i.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
          updateLoad(e, t) {
            return _(this, void 0, void 0, function* () {
              try {
                const i = yield fetch(`https://rs-clone-back-production-b4b7.up.railway.app/api/user/update-load/${e}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(t),
                });
                return yield i.json();
              } catch (e) {
                if (e instanceof Error) throw new Error(e.message);
              }
            });
          }
        },
        q = {
          trainings: [
            {
              id: 1,
              title: 'high stepping',
              description: 'Run in place while pulling you knees as high as possible with each step. Do it as fast as you can. Keep your back straight',
              example: '/rs-clone-deploy/assets/gifs/high_stepping.gif',
              youtube: 'https://www.youtube.com/watch?v=Cmxr9xcNhgU',
              quantity: '00:22',
            },
            {
              id: 2,
              title: 'side hop',
              description: 'Jump with both feet to the right and then to the left, in a quick, repetitive movement',
              example: '/rs-clone-deploy/assets/gifs/side_hop.gif',
              youtube: 'https://www.youtube.com/watch?v=nYmUEJIBj3c',
              quantity: '00:30',
            },
            {
              id: 3,
              title: 'squats',
              description:
                'Stand with feet a little wider than hip width, then lower your body until your thighs are parallel with the floor. Your knees should be extended in the same direction as your toes. This exercise works the thighs hips buttocks, quads, hamstrings and lower body.',
              example: '/rs-clone-deploy/assets/gifs/squats.gif',
              youtube: 'https://www.youtube.com/watch?v=42bFodPahBU',
              quantity: 'x12',
            },
            {
              id: 4,
              title: 'wall push ups',
              description:
                "While facing the wall, stand just over one arm's length away. Your body should create a 45-degree angle when you place your hands against the wall. Keep your feet shoulder-width apart. Lower yourself against the wall. Keep your body straight.",
              example: '/rs-clone-deploy/assets/gifs/wall_push_ups.gif',
              youtube: 'https://www.youtube.com/watch?v=EOf3cGIQpA4',
              quantity: 'x15',
            },
            {
              id: 5,
              title: 'butt bridge',
              description:
                'Lie on your back with knees bent, feet flat on the floor and arms at your sides. Push your hips up, hold for one second and slowly lower down. This exercise works your glutes.',
              example: '/rs-clone-deploy/assets/gifs/butt_bridge.gif',
              youtube: 'https://www.youtube.com/watch?v=9qo48CYN06w',
              quantity: 'x14',
            },
            {
              id: 6,
              title: 'fire hydrant left',
              description:
                'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your left leg to the side at a 90 degree angle.',
              example: '/rs-clone-deploy/assets/gifs/fire_hydrand_left.gif',
              youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
              quantity: 'x10',
            },
            {
              id: 7,
              title: 'plank',
              description: 'Keep your abs tight and look at the space between your hands to ensure a neutral spine position. Hold the position. Hold the position for as long as you can',
              example: '/rs-clone-deploy/assets/gifs/plank.gif',
              youtube: 'https://www.youtube.com/watch?v=Fcbw82ykBvY',
              quantity: '00:30',
            },
            {
              id: 8,
              title: 'butt kicks',
              description:
                "Run in place while kicking your heel up to touch your butt with each step. Try to do it as fast as you can. Keep your chest up, tighten your abs. It's a great exercise for the gluteus and hamstrings.",
              example: '/rs-clone-deploy/assets/gifs/butt_kicks.gif',
              youtube: 'https://www.youtube.com/watch?v=vXVPvY1UbJI',
              quantity: '00:30',
            },
            {
              id: 9,
              title: 'cobra stretch',
              description:
                'Lie on your belly. Bend your elbows and place your hands on the floor next to your ribs, stacking your wrist and elbow. On an inhale, begin to peel your chest away from the floor, lifting into spinal extension. Hold this position. Breathe naturally.',
              example: '/rs-clone-deploy/assets/png/cobra.png',
              youtube: 'https://www.youtube.com/watch?v=z21McHHOpAg',
              quantity: '00:30',
            },
            {
              id: 10,
              title: 'child pose',
              description:
                'Keep on the floor with your toes together and your knees hip-width apart. Rest your palms on top of your thighs. On an exhale lower your torso between your knees. Extend your arms alongside your torso with your palms facing down. Relax your shoulders towards the ground. Rest in the pose for as long as you needed.',
              example: '/rs-clone-deploy/assets/png/child_pose.png',
              youtube: 'https://www.youtube.com/watch?v=DMwRPGMPB10',
              quantity: '00:30',
            },
            {
              id: 11,
              title: 'knee to chest stretch left',
              description:
                'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your left knee towards your chest as much as you can while keeping your right leg straight on the ground. Hold this position.',
              example: '/rs-clone-deploy/assets/images/knee_to_chest_left.jpg',
              youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
              quantity: '00:30',
            },
            {
              id: 12,
              title: 'knee to chest stretch right',
              description:
                'Lie on your back with your legs extended and back straight. Keep your hips level and your lower back down on the floor. Pull your right knee towards your chest as much as you can while keeping your left leg straight on the ground. Hold this position.',
              example: '/rs-clone-deploy/assets/images/knee_to_chest_right.jpg',
              youtube: 'https://www.youtube.com/watch?v=bJms9YyjoBI',
              quantity: '00:30',
            },
            {
              id: 13,
              title: 'jumping jacks',
              description:
                'Stand upright with your legs together, arms at your sides Bend your knees slightly, and jump into the air. As you jump , spread your legs to be shoulder-width apart. Stretch your arms out and over your head. Jump back to standing position.',
              example: '/rs-clone-deploy/assets/gifs/jumping_jacks.gif',
              youtube: 'https://www.youtube.com/watch?v=2W4ZNSwoW_4',
              quantity: 'x30',
            },
            {
              id: 14,
              title: 'heel touch',
              description:
                'Keep your back flat and bend your knees to a 90-degree angle with your feet firmly planted on the floor. Engage your core as you bend your spine to reach your right hand toward your right ankle. Repeat this movement on your left side. Keep your lower back on the floor.',
              example: '/rs-clone-deploy/assets/gifs/heel_touch.gif',
              youtube: 'https://www.youtube.com/watch?v=9bR-elyolBQ',
              quantity: 'x20',
            },
            {
              id: 15,
              title: 'bird dog',
              description:
                'Begin on all fours in the tabletop position. Then stretch your right leg and left arm at the same time. Hold for a few seconds, then go back and repeat with the other side.',
              example: '/rs-clone-deploy/assets/gifs/bird_dog.gif',
              youtube: 'https://www.youtube.com/watch?v=v0oCYe8__bU',
              quantity: 'x25',
            },
            {
              id: 16,
              title: 'reverse crunches',
              description: 'Lie on your back with your knees up and hands behind your head. Lift your shoulders and thighs, and then stretch out.',
              example: '/rs-clone-deploy/assets/gifs/reverse_crunches.gif',
              youtube: 'https://www.youtube.com/watch?v=UwRfRN5fYRg',
              quantity: 'x18',
            },
            {
              id: 17,
              title: 'leg raisers',
              description:
                'Lie on your back, legs straight and together. Keep your legs straight and lift them all the way up to the ceiling until your butt comes off the floor. Slowly lower your legs back down till they are just above the floor. Hold for a moment. Raise your legs back up. Repeat.',
              example: '/rs-clone-deploy/assets/gifs/leg_raisers.gif',
              youtube: 'https://www.youtube.com/watch?v=dGKbTKLnym4',
              quantity: 'x8',
            },
            {
              id: 18,
              title: 'lying twist stretch left',
              description:
                'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the left. Hold this position. This exercise stretches your obliques and lower back.',
              example: '/rs-clone-deploy/assets/images/lying_twist_stretch_left.jpg',
              youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
              quantity: '00:30',
            },
            {
              id: 19,
              title: 'lying twist stretch right',
              description:
                'Lie on your back with your arms extended at your sides. Bend your legs and twist your legs to the right. Hold this position. This exercise stretches your obliques and lower back.',
              example: '/rs-clone-deploy/assets/images/lying_twist_stretch_right.jpg',
              youtube: 'https://www.youtube.com/watch?v=ZI-j_POtzlU',
              quantity: '00:30',
            },
            {
              id: 20,
              title: 'mountain climber',
              description:
                'Put both hands and knees on the floor. Place your right foot near your right hand and extend your left leg behind you. In one smooth motion switch your legs, keeping your arms in the same position. Switch your legs back and forth twice, such that your right leg is again close to your right hand.',
              example: '/rs-clone-deploy/assets/gifs/mountain_climber.gif',
              youtube: 'https://www.youtube.com/watch?v=wQq3ybaLZeA',
              quantity: 'x18',
            },
            {
              id: 21,
              title: 'donkey kicks left',
              description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your left leg and squeeze your butt as much as you can. Keep your core tight.',
              example: '/rs-clone-deploy/assets/gifs/donkey_kicks_left.gif',
              youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
              quantity: 'x12',
            },
            {
              id: 22,
              title: 'donkey kicks right',
              description: 'Start with your knees under your butt and your hands under your shoulders. Then lift your right leg and squeeze your butt as much as you can. Keep your core tight.',
              example: '/rs-clone-deploy/assets/gifs/donkey_kicks_right.gif',
              youtube: 'https://www.youtube.com/watch?v=4ranVQDqlaU',
              quantity: 'x12',
            },
            {
              id: 23,
              title: 'burpees',
              description:
                'Stand with your feet shoulder-width apart and your arms by your sides. Lower into a squat position and place your hands on the floor. Kick or step your legs back into a plank position. Jump or step your legs forward to return to a squat position. Return to the standing position.',
              example: '/rs-clone-deploy/assets/gifs/burpees.gif',
              youtube: 'https://www.youtube.com/watch?v=818SkLAPyKY',
              quantity: 'x5',
            },
            {
              id: 24,
              title: 'flutter kicks',
              description:
                'Lie on your back with your arms at your sides and legs slightly lifted. Then quickly raise your right leg up, and simultaneous lower your left hand. This exercise can increase core strength and improve your endurance.',
              example: '/rs-clone-deploy/assets/gifs/flutter_kicks.gif',
              youtube: 'https://www.youtube.com/watch?v=K5wuM_gNWyw',
              quantity: '00:15',
            },
            {
              id: 25,
              title: 'fire hydrant right',
              description:
                'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
              example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
              youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
              quantity: 'x10',
            },
            {
              id: 26,
              title: 'inchworms',
              description:
                'Start with your feet shoulder width apart. Hinge your body forward and walk your hands out in front of you along the floor, keeping your feet in place. Continue walking your arms out past the plank position. Your arms should be above your head and your feet should still be at the back of the mat. Start walking your feet towards your hands in small steps. Continue inching your body up until your feet meet your palms, then repeat the movement.',
              example: '/rs-clone-deploy/assets/gifs/inchworms.gif',
              youtube: 'https://www.youtube.com/watch?v=ZY2ji_Ho0dA',
              quantity: 'x10',
            },
            {
              id: 27,
              title: 'skipping without rope',
              description:
                'This is a good warm-up exercise. Pretend to hold a skipping rope handle in each hand. Jump and alternately land on the balls of your feet, rotating your wrists at the same time as you as if you were spinning a rope.',
              example: '/rs-clone-deploy/assets/gifs/skipping_without_rope.gif',
              youtube: 'https://www.youtube.com/watch?v=CYGeazlNbU4',
              quantity: '00:30',
            },
            {
              id: 28,
              title: 'lying butterfly stretch',
              description: 'Lie on the floor with your feet together. Open your knees to the sides. Hold this position.',
              example: '/rs-clone-deploy/assets/png/lying_butterfly_stretch.png',
              youtube: 'https://www.youtube.com/watch?v=bzfY0Zr3sUE',
              quantity: '00:30',
            },
            {
              id: 29,
              title: 'lunges',
              description:
                'Start in a standing position with your feet hip-width apart. Step forward longer than a walking stride so one leg is ahead of your torso and the other is behind. Your foot should land flat and remain flat while it is on the ground. Your rear heel will rise off of the ground. Bend your knees to approximately 90 degrees as you lower yourself. Remember to keep your trunk upright and core engaged. Then, forcefully push off from your front leg to return to the starting position.',
              example: '/rs-clone-deploy/assets/gifs/lunges.gif',
              youtube: 'https://www.youtube.com/watch?v=yIc1YbVLMZ8',
              quantity: 'x14',
            },
            {
              id: 30,
              title: 'claps over head',
              description: 'Stand with your feet shoulder width apart and arms extended to the sides. Raise your arms and clap over your head. Keep your arms straight during the exercise.',
              example: '/rs-clone-deploy/assets/gifs/claps_over_head.gif',
              youtube: 'https://www.youtube.com/watch?v=2i80fjp5saU',
              quantity: 'x15',
            },
            {
              id: 31,
              title: 'adductor stretch in standing',
              description:
                'Stand tall with your chest up and your core tight. Step directly to the left, leaving your right foot in place. Bend the left knee and pause once the upper left thigh is parallel to the ground. your right leg should be completely straight. Toes on both feet should be pointed straight ahead. Hold this stretch for 20 to 40 seconds. Return to the starting position and repeat on the other side.',
              example: '/rs-clone-deploy/assets/gifs/adductor_stretch_in_standing.gif',
              youtube: 'https://www.youtube.com/watch?v=MjFb2MyaNjs',
              quantity: 'x15',
            },
            {
              id: 32,
              title: 'standing bicycle crunches',
              description:
                'Stand with feet together, knees slightly bent, hands behind head. Brace abs in tight and lift left knee up as right shoulder rotates towards knee (try to touch). Lower back to start.',
              example: '/rs-clone-deploy/assets/gifs/standing_bicycle_crunch.gif',
              youtube: 'https://www.youtube.com/watch?v=8lsAXzvVHrc',
              quantity: 'x14',
            },
            {
              id: 33,
              title: 'arm scissors',
              description:
                'Begin by standing with good posture and raising your arms straight out in front of your body. Keeping your arms parallel to the ground, retract them until they are even with your torso. Return to the start position allowing your arms to cross over. Repeat the movement, alternating the rop and bottom hand on each forward pass.',
              example: '/rs-clone-deploy/assets/gifs/arm_scissors.gif',
              youtube: 'https://www.youtube.com/watch?v=pFrJQ-MyL10',
              quantity: '00:15',
            },
            {
              id: 34,
              title: 'side lunges',
              description:
                'Start with your feet shoulder-width apart, toes pointed straight forward. Step out with your right foot as wide as possible. Engage through the right heel as you drop your hips down and back while keeping the left leg straight, stretching the groin on the left leg and keeping both soles of the feet on the ground and toes pointed straight forward. Make sure your right knee is tracking over your right foot the whole motion. Powerfully your right heel into the floor to push yourself back to the full standing start position. This exercise strengthens your glutes and thighs.',
              example: '/rs-clone-deploy/assets/gifs/side_lunges.gif',
              youtube: 'https://www.youtube.com/watch?v=tlUg1DXhHm8',
              quantity: 'x14',
            },
            {
              id: 35,
              title: 'side lying leg lift left',
              description:
                'Lie down on your right side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your left hand out front for extra support or let it rest on your leg or hip.',
              example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_left.gif',
              youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
              quantity: 'x10',
            },
            {
              id: 36,
              title: 'side lying leg lift right',
              description:
                'Lie down on your left side on a mat or the floor. Your body should be in a straight line with your legs extended and feet stacked on top of each other. Place your arm straight on the floor under your head or bend your elbow and cradle your head for support. Place your right hand out front for extra support or let it rest on your leg or hip.',
              example: '/rs-clone-deploy/assets/gifs/side_lying_leg_lift_right.gif',
              youtube: 'https://www.youtube.com/watch?v=VlwBJE1WtOQ',
              quantity: 'x10',
            },
            {
              id: 37,
              title: 'clapping crunches',
              description:
                'Sit on the floor with your knees bent, feet lifted a little bit and back titled backwards. Alternately lift your legs and clap under your knees. Exhale when you lift your legs and clap under your knees. Keep your upper body still and your neck neutral.',
              example: '/rs-clone-deploy/assets/png/clapping_crunches.png',
              youtube: 'https://www.youtube.com/watch?v=LUQt2wSOFNM',
              quantity: 'x10',
            },
            {
              id: 38,
              title: 'bicycle crunches',
              description:
                'Lie flat on an exercise mat with your face up, your legs straight, your feet on the floor, and your head and shoulders slightly raised off the mat. Place both of your hands on the back of your head without interlocking your fingers. Raise your knees toward your chest until your shins are parallel to the floor.',
              example: '/rs-clone-deploy/assets/gifs/bicycle_crunches.gif',
              youtube: 'https://www.youtube.com/watch?v=-nJkAJpQemI',
              quantity: 'x14',
            },
            {
              id: 39,
              title: 'russian twist',
              description:
                'Sit with your feet slightly lifted and back titled backwards. Then hold your hands together and twist from side to side. Keep your legs still when twisting and your neck neutral. Tighten your abs.',
              example: '/rs-clone-deploy/assets/gifs/russian_twist.gif',
              youtube: 'https://www.youtube.com/watch?v=DJQGX2J4IVw',
              quantity: 'x16',
            },
            {
              id: 40,
              title: 'reclined oblique twist',
              description:
                'Lie on your back with your legs extended and your elbow directly under your shoulders. LIft your left leg up at a 45 degree angle while reaching your right arm over to your left side. Then slowly go back to the starting position. Repeat several times, and then switch to the other side.',
              example: '/rs-clone-deploy/assets/gifs/reclined_oblique_twist.gif',
              youtube: 'https://www.youtube.com/watch?v=XKW5jru5pGo',
              quantity: 'x16',
            },
            {
              id: 41,
              title: 'heels to the heaven',
              description: 'Lie on your back, position your arms out to your sides. From here, activate the lower abdominals and lift the legs until they are perpendicular to the ground.',
              example: '/rs-clone-deploy/assets/gifs/heels_to_the heaven.gif',
              youtube: 'https://www.youtube.com/watch?v=wdS2U6z0JGY',
              quantity: 'x12',
            },
            {
              id: 42,
              title: 'cross knee plank',
              description:
                'Get on the floor on all fours and assume a push up or ab plank position. To execute this move, squeeze the abs and bring your left leg up to your right elbow and back. Repeat with the opposite leg.',
              example: '/rs-clone-deploy/assets/gifs/cross_knee_plank.gif',
              youtube: 'https://www.youtube.com/watch?v=O4fFIYpYySU',
              quantity: 'x28',
            },
            {
              id: 43,
              title: 'cross arm crunches',
              description:
                'Lie flat on your back and cross your arms across your chest. Bend your knees and firmly plant your feet on the floor. Brace your core and lift your shoulders and upper back off of the floor. Hold at the top for a second and then retract back down to starting position.',
              example: '/rs-clone-deploy/assets/gifs/cross_arm_crunches.gif',
              youtube: 'https://www.youtube.com/watch?v=Qz3ylqqJ90M',
              quantity: 'x18',
            },
            {
              id: 44,
              title: 'x man crunch',
              description: 'Lie down on the floor. Take the x position, keeping your hands and feet off the ground. Bring your arms and legs together in the middle/ Go back to starting position.',
              example: '/rs-clone-deploy/assets/gifs/x_man_crunch.gif',
              youtube: 'https://www.youtube.com/watch?v=f_ZsJgaqFNE',
              quantity: 'x18',
            },
            {
              id: 45,
              title: 'side crunches left',
              description:
                'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
              example: '/rs-clone-deploy/assets/gifs/side_crunch_left.gif',
              youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
              quantity: 'x16',
            },
            {
              id: 46,
              title: 'side crunches right',
              description:
                'Lie on your side with your legs straight and arm closest to the floor extended out in front of you for support , with your other hand resting on your head for balance. Crunch your obliques.',
              example: '/rs-clone-deploy/assets/gifs/side_crunch_right.gif',
              youtube: 'https://www.youtube.com/watch?v=w0OWFjfI3zM',
              quantity: 'x16',
            },
            {
              id: 47,
              title: 'vhold',
              description: 'Sit on the floor, lift your legs up at a 45 degree angle, and lean your upper body back at a 45 degree angle. Stretch your arms forward. Hold this position.',
              example: '/rs-clone-deploy/assets/images/vhold.jpg',
              youtube: 'https://www.youtube.com/watch?v=WGwI629aTAY',
              quantity: '00:30',
            },
            {
              id: 48,
              title: 'standing glute kickbacks left',
              description:
                'Сontract your core muscles. Extend your left leg back and up. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position and repeat.',
              example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_left.gif',
              youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
              quantity: 'x10',
            },
            {
              id: 49,
              title: 'standing glute kickbacks right',
              description:
                'Get into all fours, with a straight spine, and contract your core muscles. Extend your right leg back and up until your thigh is parallel with the ground. The sole of your right foot should be facing the ceiling. Contract your glute at the top of the move and hold for a bit. Return to your starting position without touching your knee to the ground and repeat.',
              example: '/rs-clone-deploy/assets/gifs/standing_glute_kickbacks_right.gif',
              youtube: 'https://www.youtube.com/watch?v=pn2EZjEE_ZU',
              quantity: 'x10',
            },
            {
              id: 50,
              title: 'kneeling lunge stretch left',
              description:
                'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
              example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_left.gif',
              youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
              quantity: '00:30',
            },
            {
              id: 51,
              title: 'kneeling lunge stretch right',
              description:
                'Kneel on a mat with both knees, then place one foot forward so that you have a 90-degree angle at the hip and knee. Place your hands on the front knee for support (if needed). This is the start position of the kneeling hip flexor stretch. Keeping the torso upright, slowly lean forward until you feel a comfortable stretch through the groin and top of the thigh (rear leg).',
              example: '/rs-clone-deploy/assets/gifs/kneeling_lunge_stretch_right.gif',
              youtube: 'https://www.youtube.com/watch?v=3wthmvKWoOU',
              quantity: '00:30',
            },
            {
              id: 52,
              title: 'bottom leg lift left',
              description: 'Lie on your left side with your head resting on your left hand. Then put your right foot forward on the floor Lift your left leg up and down.',
              example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_left.gif',
              youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
              quantity: 'x12',
            },
            {
              id: 53,
              title: 'bottom leg lift right',
              description: 'Lie on your right side with your head resting on your right hand. Then put your left foot forward on the floor Lift your right leg up and down.',
              example: '/rs-clone-deploy/assets/gifs/bottom_leg_lift_right.gif',
              youtube: 'https://www.youtube.com/watch?v=Dm1GSX1vItY',
              quantity: 'x12',
            },
            {
              id: 54,
              title: 'split squat left',
              description:
                'From a standing position, take a long step forward as if performing a lunge. The heel of your back foot should be raised. Keeping your torso straight, lower slowly until your back knee almost touches the floor, then push back up.',
              example: '/rs-clone-deploy/assets/gifs/split_squat_left.gif',
              youtube: 'https://www.youtube.com/watch?v=SFSZVKzqnXA',
              quantity: 'x10',
            },
            {
              id: 55,
              title: 'curtsy lunges',
              description:
                'Stand with your feet hip-width apart, hands on your hips. Take a big step back with your right leg, crossing it behind your left. Bend your knees and lower your hips until your left thigh is nearly parallel to the floor. Keep your torso upright and your hips and shoulders as square as possible to the wall in front of you. Then repeat on the other side.',
              example: '/rs-clone-deploy/assets/gifs/curtsy_lunges.gif',
              youtube: 'https://www.youtube.com/watch?v=-rTyKlHjYT8',
              quantity: 'x14',
            },
            {
              id: 56,
              title: 'lunge knee hops right',
              description:
                'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
              example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_right.gif',
              youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
              quantity: 'x12',
            },
            {
              id: 57,
              title: 'lunge knee hops left',
              description:
                'From a standing position, step back into a lunge. Bring same leg in front with knee bent. Hop off the ground, bringing knees as hight as you can. Repeat with same leg for this segment. Switch legs for each following segment.',
              example: '/rs-clone-deploy/assets/gifs/lunge_knee_hops_left.gif',
              youtube: 'https://www.youtube.com/watch?v=NSy3QKsZ7uI',
              quantity: 'x12',
            },
            {
              id: 58,
              title: 'bench glute kick back left',
              description: 'Same with glute kickbacks, just work with a bench.',
              example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_left.gif',
              youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
              quantity: 'x16',
            },
            {
              id: 59,
              title: 'bench glute kick back right',
              description: 'Same with glute kickbacks, just work with a bench.',
              example: '/rs-clone-deploy/assets/gifs/bench_glute_kick_back_right.gif',
              youtube: 'https://www.youtube.com/watch?v=Mi4H6YUVMCQ',
              quantity: 'x16',
            },
            {
              id: 60,
              title: 'sumo squat',
              description:
                'Start in a traditional squat stance with your feet about shoulder-width apart and toes pointed forward. Clasp your hands together at your chest. Take a step to the side with your right foot until your stance is 3–4 feet wide, or wider than hip width. Wider is OK as long as you can perform the move correctly. Move your hips back slightly and bend your knees as you lower your body into a squat position. Draw your tailbone straight down to the floor. Be mindful to keep your spine neutral, core engaged, and eyes forward throughout the movement. Lower until your thighs are parallel to the floor. You can go lower or shorten the squat if parallel is too low or if you can’t maintain your leg alignmen. Pause in the squat position for a few seconds. Then, engaging your glutes, press up to standing, driving up through your heels.',
              example: '/rs-clone-deploy/assets/gifs/squats.gif',
              youtube: 'https://www.youtube.com/watch?v=Z2F0bArQH5s',
              quantity: 'x15',
            },
            {
              id: 61,
              title: 'single leg bridge left',
              description:
                'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
              example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_left.gif',
              youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
              quantity: 'x12',
            },
            {
              id: 62,
              title: 'single leg bridge right',
              description:
                'Raise your hips, tightening your abdominals and buttock muscles to support the lift, until your shoulders and knees are in a straight line. Squeeze your core at the same time, as if trying to pull your belly button back toward your spine. Hold this position for a count of one or two. Lower the hips to the floor slowly and with control, keeping the leg extended, to return to the starting position. Repeat on the same leg for the desired number of reps.',
              example: '/rs-clone-deploy/assets/gifs/single_leg_bridge_right.gif',
              youtube: 'https://www.youtube.com/watch?v=ZgvzRn-16zI',
              quantity: 'x12',
            },
            {
              id: 63,
              title: 'jumping squats',
              description: 'Stand with feet shoulder width and knees slightly bent. Start by doing a regular squat. engage your core, and jump up explosively.',
              example: '/rs-clone-deploy/assets/gifs/jumping_squats.webp',
              youtube: 'https://www.youtube.com/watch?v=txLE-jOCEsc',
              quantity: 'x12',
            },
            {
              id: 64,
              title: 'backward lunge',
              description:
                'Stand tall with your feet hip distance apart. Take a large step backward and lower your body toward the floor.  Both legs should be bent at a 90-degree angle at the bottom of the lunge.  Rise back to start and repeat.',
              example: '/rs-clone-deploy/assets/gifs/backward_lunge.gif',
              youtube: 'https://www.youtube.com/watch?v=_LGpDtENZ5U',
              quantity: 'x14',
            },
            {
              id: 65,
              title: 'quad stretch left',
              description:
                'Stand up tall and shift your weight to the right leg. Lift your left foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
              example: '/rs-clone-deploy/assets/images/quad_stretch_left.jpg',
              youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
              quantity: '00:30',
            },
            {
              id: 66,
              title: 'quad stretch right',
              description:
                'Stand up tall and shift your weight to the right leg. Lift your right foot and grasp it with your left hand. Pull the left foot toward your butt until you feel the stretch in your quads. Hold this position.',
              example: '/rs-clone-deploy/assets/images/quad_stretch_right.jpg',
              youtube: 'https://www.youtube.com/watch?v=TfcRyYf7WLg',
              quantity: '00:30',
            },
            {
              id: 67,
              title: 'frog press',
              description:
                'Lie on your back with your knees bent to 90 degrees, turning them outwards like a frog. Make sure to keep your heels pressed together while flexing your feet towards you. Tighten your stomach and crunch up, lifting your head and shoulders off the floor, holding this position. Place your arms down by your side, hovering just above the floor. Straighten your legs away from your body at a 45-degree angle. Return to the starting position, completing the desired amount of repetitions.',
              example: '/rs-clone-deploy/assets/gifs/frog_press.gif',
              youtube: 'https://www.youtube.com/watch?v=JvA7t9xKWgg',
              quantity: 'x12',
            },
            {
              id: 68,
              title: 'side leg circles left',
              description:
                'Lie on your side, with one leg stacked on top of the other. Extend your bottom arm straight and rest your head on it, while you place your other hand on the floor in front of your body for support. Lift the top leg up and perform leg circles.',
              example: '/rs-clone-deploy/assets/gifs/side_leg_circles_left.gif',
              youtube: 'https://www.youtube.com/watch?v=VgysBPnVJWg',
              quantity: 'x12',
            },
            {
              id: 69,
              title: 'wall sit',
              description:
                "Stand with your back to a wall, feet hip-width apart and slightly in front of you. Lean back into the wall, and slide down like you're sitting down onto a chair. Your knees should bent at 90 degrees with the knees above your ankles. Hold this position for 30 seconds.",
              example: '/rs-clone-deploy/assets/png/wall_sit.png',
              youtube: 'https://www.youtube.com/watch?v=Yp3ZwACK9v4',
              quantity: '00:40',
            },
            {
              id: 70,
              title: 'bridge',
              description:
                'Lie on your back with your knees bent. Tighten the muscles in your stomach. Raise your hips off the floor until they line up with your knees and shoulders. Hold for three deep breaths. Return to the starting position and repeat.',
              example: '/rs-clone-deploy/assets/images/bridge.jpg',
              youtube: 'https://www.youtube.com/watch?v=-KKADnBsPzw',
              quantity: 'x14',
            },
            {
              id: 71,
              title: 'abdominal crunches',
              description:
                'Keep your knees comfortably apart. Fold your arms on your chest and tighten your abdominal muscles. Raise your head and shoulders off of the floor. Hold for three deep breaths, then return to starting position.',
              example: '/rs-clone-deploy/assets/gifs/abdominal_crunches.gif',
              youtube: 'https://www.youtube.com/watch?v=RUNrHkbP4Pc',
              quantity: 'x20',
            },
            {
              id: 72,
              title: 'shoulder stretch left',
              description: 'Bring one arm across your upper body and hold it straight. Grasp the elbow with the other arm and gently pull toward your chest. Hold.',
              example: '/rs-clone-deploy/assets/gifs/shoulders_stretch_left.gif',
              youtube: 'https://www.youtube.com/watch?v=9k0EN2RCGgU',
              quantity: '00:20',
            },
            {
              id: 73,
              title: 'shoulder stretch right',
              description: 'Bring one arm across your upper body and hold it straight. Grasp the elbow with the other arm and gently pull toward your chest. Hold.',
              example: '/rs-clone-deploy/assets/gifs/shoulders_stretch_right.gif',
              youtube: 'https://www.youtube.com/watch?v=9k0EN2RCGgU',
              quantity: '00:20',
            },
            {
              id: 74,
              title: 'triceps stretch left',
              description:
                'Stand with your arms relaxed at your sides. With your affected arm, gently bend your elbow up toward you as far as possible. Your palm should face up. Then straighten your arm as much as you can.',
              example: '/rs-clone-deploy/assets/images/triceps_stretch_left.jpg',
              youtube: 'https://www.youtube.com/watch?v=L9IGOcrdcFk',
              quantity: '00:30',
            },
            {
              id: 75,
              title: 'triceps stretch right',
              description:
                'Stand with your arms relaxed at your sides. With your affected arm, gently bend your elbow up toward you as far as possible. Your palm should face up. Then straighten your arm as much as you can.',
              example: '/rs-clone-deploy/assets/images/tricep_stretch_right.jpg',
              youtube: 'https://www.youtube.com/watch?v=L9IGOcrdcFk',
              quantity: '00:30',
            },
            {
              id: 76,
              title: 'cat cow pose',
              description:
                'Keep your hands shoulder-width apart and your knees directly below your hips. Inhale deeply while curving your lower back and bringing your head up, tilting your pelvis up like a cow. Exhale deeply and bring your abdomen in, arching your spine and bringing your head and pelvis down like a cat. Repeat several times.',
              example: '/rs-clone-deploy/assets/gifs/cat_cow_pose.gif',
              youtube: 'https://www.youtube.com/watch?v=w_UKcI1Ftn8',
              quantity: '00:30',
            },
            {
              id: 77,
              title: 'fire hydrant right',
              description:
                'Begin on your hands and knees on the floor, your hands directly beneath the shoulders, and knees under the hips. Then try to lift your right leg to the side at a 90 degree angle.',
              example: '/rs-clone-deploy/assets/gifs/fire_hydrand_right.gif',
              youtube: 'https://www.youtube.com/watch?v=7LnuhLi-78I',
              quantity: 'x10',
            },
          ],
        };
      var S = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const D = class {
        constructor() {
          (this.template = new e()),
            (this.exQuantity = ''),
            (this.exTime = ''),
            (this.color = ''),
            (this.image = ''),
            (this.title = ''),
            this.workout,
            (this.workoutBlock = new z()),
            (this.addNewComplex = new V()),
            (this.complex = new E());
        }
        draw(e) {
          var t, i;
          return S(this, void 0, void 0, function* () {
            document.body.classList.remove('loaded');
            const o = document.querySelector('main');
            if (!o) return;
            o.classList.add('main'), (o.textContent = '');
            const r = document.createElement('div');
            r.classList.add('training'), o.append(r);
            const a = yield this.addNewComplex.creatingArrayFromData();
            if (e) {
              const o = yield this.transformExercises(e);
              for (let t = 0; t < a[0].block.length; t++) e === a[0].block[t].id && a[0].block[t].exercises.push(...o);
              [...a, ...m].forEach((t) => {
                t.block.forEach((t) => {
                  String(t.id) === e && (this.workout = t);
                });
              });
              const s = yield this.createHeader(e);
              r.append(s);
              const n = document.createElement('div');
              if (
                ((n.className = 'training__exercises exercises'),
                r.append(n),
                null === (t = this.workout) ||
                  void 0 === t ||
                  t.exercises.forEach((t) => {
                    if (e.length > 2) {
                      const e = new N(t, !0);
                      n.append(e.draw());
                    } else {
                      const e = new N(t, !1);
                      n.append(e.draw());
                    }
                  }),
                e.length > 2)
              ) {
                const e = this.workoutBlock.createAddWorkoutPlanCont('Add new exercises', !1);
                e.classList.add('singl-train__plus'),
                  n.append(e),
                  (null === (i = this.workout) || void 0 === i ? void 0 : i.exercises.length) || n.append(this.template.createElement('div', 'singl-train__empty-text', 'Exercise list is empty')),
                  n.classList.add('addit');
              }
              r.append(this.createDetailsModal()), p(document.body);
            }
          });
        }
        createHeader(e) {
          return S(this, void 0, void 0, function* () {
            const t = yield this.addNewComplex.creatingArrayFromData(),
              i = yield this.transformExercises(e);
            for (let o = 0; o < t[0].block.length; o++) e === t[0].block[o].id && t[0].block[o].exercises.push(...i);
            [...t, ...m].forEach((t) => {
              t.block.forEach((t) => {
                String(t.id) === e &&
                  ((this.exQuantity = String(t.exercises.length)),
                  (this.exTime = String(Math.round((45 * t.exercises.length) / 60))),
                  (this.color = t.color),
                  (this.image = t.image),
                  (this.title = t.title));
              });
            });
            const o = this.template.createElement('div', 'training__header');
            10 === Number(e)
              ? ((o.style.background = `url(${this.image})`), (o.style.backgroundRepeat = 'no-repeat'), (o.style.backgroundPosition = 'top'), (o.style.backgroundSize = 'cover'))
              : 11 === Number(e)
              ? ((o.style.background = `url(${this.image})`), (o.style.backgroundRepeat = 'no-repeat'), (o.style.backgroundPosition = 'center'), (o.style.backgroundSize = 'cover'))
              : ((o.style.background = `url(${this.image}), ${this.color}`),
                (o.style.backgroundRepeat = 'no-repeat'),
                (o.style.backgroundPosition = 'right bottom'),
                e.length > 2 && (o.style.backgroundPosition = '90% bottom'),
                (o.style.backgroundSize = 'contain'));
            const r = this.template.createElement('div', 'header-upper');
            (r.style.backgroundColor = 'transparent'), o.append(r);
            const a = this.template.createLink('header-upper__return', '/workouts');
            a.addEventListener('click', (e) => {
              e.preventDefault();
              const t = document.querySelector('main');
              t && ((t.innerHTML = ''), we.navigate('workouts'));
            });
            const s = document.createElement('span');
            (s.className = 'header-upper__name'), (s.textContent = this.title);
            const n = this.template.createIcon('header-upper__icon', 'icon-trash');
            n.setAttribute('id', e),
              n.addEventListener('click', () =>
                S(this, void 0, void 0, function* () {
                  yield this.deleteComplex(n);
                  const e = document.querySelector('main');
                  e && ((e.innerHTML = ''), we.navigate('workouts'));
                })
              ),
              r.append(a, s),
              e.length > 2 && r.append(n);
            const l = this.template.createElement('div', 'header-bottom');
            o.append(l);
            const c = this.template.createElement('p', 'header-bottom__name', this.title),
              d = this.template.createElement('p', 'header-bottom__quantity', `${this.exQuantity} exercises`),
              u = this.template.createElement('p', 'header-bottom__time', `${this.exTime} minutes`);
            l.append(c, d, u);
            const h = this.template.createBtn('training__button-start', 'Start now');
            return (
              '0' === this.exTime && (h.disabled = !0),
              h.addEventListener('click', (e) => {
                e.preventDefault();
                const t = document.querySelector('main');
                t && ((t.innerHTML = ''), we.navigate('startTraining'));
              }),
              o.append(h),
              o
            );
          });
        }
        deleteComplex(e) {
          return S(this, void 0, void 0, function* () {
            const t = e.getAttribute('id');
            if (t) {
              yield this.complex.deleteComplex(t);
              const e = yield this.complex.getExercises(t);
              e &&
                e.forEach((e) =>
                  S(this, void 0, void 0, function* () {
                    yield this.complex.deleteExercise(e._id);
                  })
                );
            }
          });
        }
        createDetailsModal() {
          const e = this.template.createElement('div', 'modal-addNewComplex');
          return e.classList.add('invisible'), e;
        }
        transformExercises(e) {
          return S(this, void 0, void 0, function* () {
            const t = yield this.complex.getExercises(e),
              i = [];
            return (
              null == t ||
                t.forEach((e) => {
                  for (let t = 0; t < q.trainings.length; t++)
                    if (e.idExercise === String(q.trainings[t].id)) {
                      const o = {
                        id: q.trainings[t].id,
                        title: q.trainings[t].title,
                        description: q.trainings[t].description,
                        example: q.trainings[t].example,
                        youtube: q.trainings[t].youtube,
                        quantity: e.count,
                        serverId: e._id,
                      };
                      i.push(o);
                    }
                }),
              i
            );
          });
        }
      };
      var L = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      class B {
        constructor() {
          (this.template = new e()), (this.complex = new E());
        }
        createNextPrevBtns(e, t, i, o) {
          const r = this.template.createElement('div', 'buttons-cont'),
            a = this.template.createBtn('next-btn'),
            s = this.template.createIcon('prev-btn__icon', 'icon-arrow_forward_ios');
          a.append(s), e <= 1 && !i && (a.disabled = !0);
          const n = this.template.createBtn('prev-btn'),
            l = this.template.createIcon('prev-btn__icon', 'icon-arrow_back_ios');
          return n.append(l), i || (n.disabled = !0), r.append(n, a), i ? this.slide(a, n, t, e, o) : this.slider(a, n, t, e, i), i && T.changeExerciseContent(n, a), r;
        }
        slider(e, t, i, o, r) {
          !(function () {
            let a = 0;
            e.addEventListener('click', () => {
              if (a < o - 1) {
                (e.disabled = !1), a++, T.changeImgSise(r, a, o), (t.disabled = !1);
                const s = (100 / o) * a;
                (i.style.justifyContent = 'flex-start'), (i.style.transform = `translate(-${s}%)`);
              }
              a >= o - 1 && (e.disabled = !0);
            }),
              t.addEventListener('click', () => {
                if ((a <= o - 1 && (e.disabled = !1), a > 0)) {
                  a--, T.changeImgSise(r, a, o);
                  const e = (100 / o) * a;
                  (i.style.justifyContent = 'flex-start'), (i.style.transform = `translate(-${e}%)`);
                }
                0 === a && (t.disabled = !0);
              });
          })();
        }
        changeImgSise(e, t, i) {
          const o = document.querySelectorAll('.workout-content-container'),
            r = document.querySelectorAll('.workout-plans-png');
          e &&
            (o.forEach((e) => {
              e.classList.remove('largerImg'), e.classList.remove('smallerImg'), e.classList.remove('blur');
            }),
            r.forEach((e) => e.classList.remove('largerPng')),
            o[t].classList.add('smallerImg'),
            o[t].classList.add('blur'),
            t < i - 1 && (r[1 + t].classList.add('largerPng'), o[1 + t].classList.add('largerImg'), t < i - 2 && (o[2 + t].classList.add('smallerImg'), o[2 + t].classList.add('blur'))));
        }
        slide(e, t, i, o, r) {
          let a;
          const s = 100 / o;
          e.addEventListener('click', function () {
            (a = -1), (e.disabled = !0), (i.style.transform = `translate(-${s}%)`), T.changeImgSizeInf('forward');
          }),
            t.addEventListener('click', function () {
              (a = 1), (t.disabled = !0), (i.style.transform = `translate(${s}%)`), T.changeImgSizeInf('backward');
            }),
            i.addEventListener('transitionend', function () {
              -1 === a
                ? e.disabled && (i.firstElementChild && i.appendChild(i.firstElementChild), (e.disabled = !1))
                : 1 === a && t.disabled && (i.lastElementChild && i.prepend(i.lastElementChild), (t.disabled = !1)),
                (i.style.transition = 'none'),
                (i.style.transform = 'translate(0)'),
                setTimeout(function () {
                  i.style.transition = 'ease 0.3s';
                });
            });
        }
        changeImgSizeInf(e) {
          const t = document.querySelectorAll('.workout-content-container'),
            i = document.querySelectorAll('.workout-plans-png');
          t.forEach((e) => {
            e.classList.remove('largerImg'), e.classList.remove('smallerImg');
          }),
            i.forEach((e) => {
              e.classList.remove('largerPng');
            }),
            'forward' === e
              ? (t[3].classList.add('largerImg'),
                i[3].classList.add('largerPng'),
                t[3].classList.remove('blur'),
                t[2].classList.add('smallerImg'),
                t[2].classList.add('blur'),
                t[4].classList.add('smallerImg'),
                t[4].classList.add('blur'))
              : (t[1].classList.add('largerImg'),
                i[1].classList.add('largerPng'),
                t[1].classList.remove('blur'),
                t[0].classList.add('smallerImg'),
                t[0].classList.add('blur'),
                t[2].classList.add('smallerImg'),
                t[2].classList.add('blur'));
        }
        createExercises(e, t) {
          return L(this, void 0, void 0, function* () {
            const i = this.template.createElement('div', 'exercises-container'),
              o = new V(),
              r = yield o.creatingArrayFromData();
            let a = [];
            const s = new D(),
              n = localStorage.getItem('complexId');
            if (n) {
              const e = yield s.transformExercises(JSON.parse(n));
              for (let t = 0; t < r[0].block.length; t++) JSON.parse(n) === r[0].block[t].id && r[0].block[t].exercises.push(...e);
            }
            a = r.length && r[0].block.length ? [...r, ...m] : [...m];
            const l = a[e].block[t];
            if (l.exercises.length)
              for (let e = 0; e < l.exercises.length; e++) {
                const t = l.exercises[e],
                  o = new N(t, !1).draw();
                i.append(o);
              }
            else
              setTimeout(() => {
                document.querySelector('.exercises__startNow-btn').disabled = !0;
              }, 0);
            return i;
          });
        }
        changeExerciseContent(e, t) {
          return L(this, void 0, void 0, function* () {
            const i = new V(),
              o = yield i.creatingArrayFromData();
            let r = [];
            r = o.length && o[0].block.length ? [...o, ...m] : [...m];
            let a = 0,
              s = 0;
            1 === r[a].block.length ? ((a = 1), (s = 1)) : 2 === r[a].block.length ? ((a = 1), (s = 0)) : 0 === r[a].block.length ? ((a = 1), (s = 2)) : ((a = 0), (s = 2)),
              localStorage.setItem('complexId', JSON.stringify(r[a].block[s].id)),
              t.addEventListener('click', () =>
                L(this, void 0, void 0, function* () {
                  (document.querySelector('.exercises__startNow-btn').disabled = !1),
                    s < r[a].block.length - 1 ? s++ : a < r.length - 1 ? ((s = 0), a++) : ((a = 0), (s = 0)),
                    localStorage.setItem('complexId', JSON.stringify(r[a].block[s].id));
                  const e = document.querySelector('.exercises-wrapper'),
                    t = yield T.createExercises(a, s);
                  (e.innerHTML = ''), e.append(t);
                })
              ),
              e.addEventListener('click', () =>
                L(this, void 0, void 0, function* () {
                  (document.querySelector('.exercises__startNow-btn').disabled = !1),
                    s > 0 ? s-- : a > 0 ? (a--, (s = r[a].block.length - 1)) : ((a = r.length - 1), (s = r[a].block.length - 1)),
                    localStorage.setItem('complexId', JSON.stringify(r[a].block[s].id));
                  const e = document.querySelector('.exercises-wrapper'),
                    t = yield T.createExercises(a, s);
                  (e.innerHTML = ''), e.append(t);
                })
              );
          });
        }
        getComplexParam(e) {
          return L(this, void 0, void 0, function* () {
            const t = new V(),
              i = [...(yield t.creatingArrayFromData()), ...m],
              o = [];
            for (let t = 0; t < i.length; t++) for (let r = 0; r < i[t].block.length; r++) i[t].block[r].id === e && o.push(t, r);
            return o;
          });
        }
      }
      const T = new B(),
        M = B;
      var I = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const $ = class {
          constructor(t) {
            (this.template = new e()),
              (this.exercise = t),
              (this.backLayer = this.template.createElement('div', 'exercise-modal__backlayer')),
              (this.modal = this.template.createElement('div', 'exercise-modal')),
              (this.addNewComplex = new V()),
              (this.slider = new M()),
              (this.workoutBlock = new z()),
              (this.complex = new E());
          }
          draw(e, t, i) {
            return I(this, void 0, void 0, function* () {
              this.backLayer.append(this.modal);
              const o = localStorage.getItem('complexId'),
                r = this.template.createElement('div', 'dateils__trash-icon');
              r.setAttribute('id', String(e.id)),
                e.serverId && r.setAttribute('serverId', e.serverId),
                (r.innerHTML =
                  '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>trash</title><g id="trash"><path d="M3.883,22.125a2,2,0,0,0,2,1.875H18.121a2,2,0,0,0,2-1.875L21,8H3ZM21,4H18V3a3,3,0,0,0-3-3H9A3,3,0,0,0,6,3V4H3A1,1,0,0,0,3,6H21a1,1,0,0,0,0-2ZM16,4H8V3A1,1,0,0,1,9,2h6a1,1,0,0,1,1,1Z"/></g></svg>'),
                r.addEventListener('click', () =>
                  I(this, void 0, void 0, function* () {
                    if (e.serverId) {
                      yield this.complex.deleteExercise(e.serverId);
                      const t = yield this.complex.getExercises(JSON.parse(String(o)));
                      t && !t.length && (document.querySelector('.training__button-start').disabled = !0);
                    }
                    this.forClickOnDelBtn(), this.createServerExercises(JSON.parse(String(o)));
                  })
                );
              const a = this.template.createBtn('exercise-modal__button-close');
              i || this.modal.append(r), this.modal.append(a);
              const s = document.createElement('img');
              s.className = 'exercise-modal__gif';
              const n = this.exercise.example;
              (s.src = n), this.modal.append(s), this.createExerciseInfo();
              const l = this.template.createElement('p', 'exercise-modal__description', this.exercise.description);
              return (
                this.modal.append(l),
                this.createChangeBlock(t),
                document.body.prepend(this.backLayer),
                a.addEventListener('click', () => {
                  this.closeExerciseModal(), document.querySelector('.modal-addNewComplex').classList.add('invisible');
                }),
                window.addEventListener('click', (e) => {
                  e.target.classList.contains('exercise-modal__backlayer') && this.closeExerciseModal();
                }),
                this.backLayer
              );
            });
          }
          closeExerciseModal() {
            (this.backLayer.style.display = 'none'), document.body.removeChild(this.backLayer);
          }
          createExerciseInfo() {
            const e = this.template.createElement('div', 'exercise-modal__info'),
              t = this.template.createElement('span', 'exercise-modal__name', this.exercise.title),
              i = this.template.createElement('span', 'exercise-modal__quantity', this.exercise.quantity),
              o = this.template.createLink('exercise-modal__link', this.exercise.youtube);
            (o.target = '_blank'), e.append(t, i, o), this.modal.append(e);
          }
          createChangeBlock(e) {
            return I(this, void 0, void 0, function* () {
              const t = this.template.createElement('div', 'exercise-modal__change'),
                i = this.template.createElement('div', 'exercise-modal__counter');
              t.append(i);
              const o = this.template.createBtn('exercise-modal__button-minus', '-'),
                r = this.template.createElement('span', 'exercise-modal__current-quantity', this.exercise.quantity),
                a = this.template.createBtn('exercise-modal__button-plus', '+');
              i.append(o, r, a);
              const s = this.template.createElement('div', 'exercise-modal__buttons'),
                n = this.template.createBtn('exercise-modal__button-cancel', 'cancel'),
                l = this.template.createBtn('exercise-modal__button-save', 'save');
              l.setAttribute('id', String(this.exercise.id)),
                l.addEventListener('click', () =>
                  I(this, void 0, void 0, function* () {
                    const t = document.querySelector('.exercise-modal__current-quantity'),
                      i = document.querySelector('.dateils__trash-icon');
                    document.querySelector('.training__button-start').disabled = !1;
                    const o = l.getAttribute('id'),
                      r = JSON.parse(String(localStorage.getItem('complexId')));
                    if (e) o && r && (yield this.complex.createExercise({ idComplex: r, idExercise: o, count: t.innerHTML }));
                    else {
                      const e = i.getAttribute('serverId');
                      o && r && e && (yield this.complex.updateExercise(e, { idComplex: r, idExercise: o, count: t.innerHTML }));
                    }
                    this.forClickOnSaveBtn(), this.createServerExercises(r);
                  })
                ),
                s.append(n, l),
                t.append(s),
                n.addEventListener('click', (e) => {
                  e.preventDefault(), this.closeExerciseModal();
                }),
                a.addEventListener('click', this.addExerciseQuantity),
                o.addEventListener('click', this.reduceExerciseQuantity),
                this.modal.append(t);
            });
          }
          reduceExerciseQuantity() {
            const e = document.querySelector('.exercise-modal__current-quantity'),
              t = e.textContent;
            if (t.toLowerCase().includes('x')) {
              const i = Number(t.slice(1));
              if (1 === i) return;
              e.textContent = 'X' + (i - 1);
            } else {
              let i = t.slice(0, 2),
                o = t.slice(3);
              if (1 === Number(o) && 0 === Number(i)) return;
              0 === Number(o) ? ((i = Number(i) < 10 ? '0' + (Number(i) - 1) : '' + (Number(i) - 1)), (o = '59')) : (o = Number(o) <= 10 ? '0' + (Number(o) - 1) : '' + (Number(o) - 1)),
                (e.textContent = `${i}:${o}`);
            }
          }
          addExerciseQuantity() {
            const e = document.querySelector('.exercise-modal__current-quantity'),
              t = e.textContent;
            if (t.toLowerCase().includes('x')) {
              const i = Number(t.slice(1));
              e.textContent = `X${i + 1}`;
            } else {
              let i = t.slice(0, 2),
                o = t.slice(3);
              59 === Number(o) ? ((i = Number(i) < 10 ? `0${Number(i) + 1}` : `${Number(i) + 1}`), (o = '00')) : (o = Number(o) < 9 ? `0${Number(o) + 1}` : `${Number(o) + 1}`),
                (e.textContent = `${i}:${o}`);
            }
          }
          forClickOnSaveBtn() {
            return I(this, void 0, void 0, function* () {
              this.closeExerciseModal();
            });
          }
          forClickOnDelBtn() {
            return I(this, void 0, void 0, function* () {
              this.closeExerciseModal();
            });
          }
          createServerExercises(e) {
            return I(this, void 0, void 0, function* () {
              const t = yield this.complex.getExercises(e),
                i = document.querySelector('.header-bottom__quantity'),
                o = document.querySelector('.header-bottom__time'),
                r = (document.querySelector('.exercises-wrapper'), document.querySelector('.training__exercises'));
              if (((r.innerHTML = ''), t)) {
                (i.innerHTML = String(`${t.length} exercises`)), (o.innerHTML = String(`${Math.round((45 * t.length) / 60)} minutes`));
                for (let e = 0; e < t.length; e++) {
                  const i = t[e].idExercise,
                    o = t[e]._id,
                    a = t[e].count;
                  q.trainings.forEach((e) => {
                    if (String(e.id) === i) {
                      const t = new N(this.createObj(e, o, a), !0).draw();
                      r.append(t);
                    }
                  });
                }
                const e = this.workoutBlock.createAddWorkoutPlanCont('Add new exercises', !1);
                r.append(e);
              }
            });
          }
          createObj(e, t, i) {
            return { id: e.id, title: e.title, description: e.description, example: e.example, youtube: e.youtube, quantity: i, serverId: t };
          }
        },
        N = class {
          constructor(t, i) {
            (this.template = new e()), (this.container = this.template.createElement('div', 'exercise')), (this.container.id = `${t.id}`), (this.exercise = t), (this.flag = i);
          }
          draw() {
            const e = this.template.createElement('div', 'exercise__info');
            this.container.append(e);
            const t = this.template.createElement('p', 'exercise__name', this.exercise.title);
            e.append(t);
            const i = this.template.createElement('p', 'exercise__quantity', this.exercise.quantity);
            e.append(i);
            const o = this.template.createElement('div', 'exercise__gif');
            this.container.append(o);
            const r = document.createElement('img'),
              a = this.exercise.example;
            return (
              (r.src = a),
              o.append(r),
              this.container.addEventListener('click', (e) => {
                e.preventDefault(), this.flag ? new $(this.exercise).draw(this.exercise, !1) : new C(this.exercise).draw();
              }),
              this.container
            );
          }
        };
      function H(e) {
        localStorage.setItem('token', e.token), localStorage.setItem('userId', e.userId);
      }
      function P() {
        const e = localStorage.getItem('userId');
        if (e) return e;
      }
      var j = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const V = class {
          constructor() {
            (this.template = new e()), (this.complex = new E());
          }
          showExercises(e) {
            const t = this.template.createElement('div', 'exercises-wrapper');
            for (let i = 0; i < q.trainings.length; i++) {
              const o = this.template.createElement('div', 'wrap-exercise'),
                r = q.trainings[i],
                a = new N(r, e).draw();
              o.append(a), t.append(o);
              const s = this.template.createBtn('add-exerc-btn', 'add');
              s.addEventListener('click', () => {
                new $(r).draw(q.trainings[i], !0, !0);
              }),
                o.append(s);
            }
            return t;
          }
          createExercisesArray(e) {
            const t = e.getAttribute('id');
            null == t || t.split(' ')[0], null == t || t.split(' ')[1], null == t || t.split(' ')[2];
          }
          createComplexNameModal() {
            const e = this.template.createElement('div', 'complex-name-overlay');
            return document.querySelector('.main').append(e), e;
          }
          addComplexInLocalStore() {
            return j(this, void 0, void 0, function* () {
              const e = document.querySelector('.modal-addNewComplex__input'),
                t = P();
              t && (yield this.complex.createUserInfo({ userId: t, name: e.value || 'no name' }));
            });
          }
          createSelectExercises() {
            return this.template.createElement('div', 'singl-train__empty-text', 'Select An Exercise');
          }
          getComplexes() {
            return j(this, void 0, void 0, function* () {
              const e = P();
              if (e) return yield this.complex.getComplex(e);
            });
          }
          creatingArrayFromData() {
            return j(this, void 0, void 0, function* () {
              const e = yield this.getComplexes(),
                t = [{ title: 'Workouts you created', image: '', block: [] }];
              if (void 0 !== e)
                for (let i = 0; i < Number(e.length); i++) {
                  const o = {
                    id: e[i]._id,
                    title: e[i].name,
                    exercisesAmt: '0',
                    exercisesTime: '0',
                    image: '/rs-clone-deploy/assets/png/whole_body2.png',
                    color: 'linear-gradient(90deg, rgb(241, 147, 215) 0%, rgb(245, 237, 238) 100%)',
                    exercises: [],
                  };
                  t[0].block.push(o);
                }
              return t;
            });
          }
        },
        z = class {
          constructor() {
            (this.template = new e()), (this.addNewComplex = new V());
          }
          createWorkoutBlockCont(e) {
            const t = this.template.createElement('div', 'workout-block-cont');
            return t.append(this.createTitle(e)), t;
          }
          createTitle(e) {
            const t = this.template.createElement('div', 'workout-block-title'),
              i = this.template.createElement('span', 'span', e);
            return t.append(i), t;
          }
          createWorkoutContent(e, t, i, o, r) {
            const a = this.template.createElement('div', 'workout-content-container');
            a.setAttribute('name', e.title), a.append(this.createTextBlock(e.title, String(e.exercises.length), String(Math.round((45 * e.exercises.length) / 60)), i, e.complexityLevel));
            const s = e.title.split(' ')[0];
            return (
              ('sleepy time stretch' !== a.getAttribute('name') && 'morning warmup' !== a.getAttribute('name')) || (a.style.background = '#fff'),
              t < 5 && a.append(this.createPngImage(t, i, s, o, r)),
              a
            );
          }
          createTextBlock(e, t, i, o, r) {
            const a = this.template.createElement('div', 'text-block'),
              s = this.template.createElement('p', 'workout-content-title', e);
            return a.append(s, this.createExercCont(t), this.createTimeCont(i)), !0 === r && a.append(this.createLightnings(o)), a;
          }
          createPngImage(e, t, i, o, r) {
            let a;
            a = r - 1 - e == 3 ? y : r - 1 - e == 2 ? w : r - 1 - e == 1 ? f : r - 1 - e == 0 ? (0 === t ? k : v) : b;
            const s = this.template.createImage(a, 'abs image', 'workout-plans-png');
            return s.classList.add(i), s.src === b && (s.style.right = '-2px'), o && s.classList.add('adaptPng'), s;
          }
          createExercCont(e) {
            const t = this.template.createElement('div', 'descr-cont'),
              i = this.template.createElement('div', 'barbell');
            i.innerHTML =
              '<?xml version="1.0" encoding="UTF-8" standalone="no" ?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="60" height="60" viewBox="0 0 400 400" xml:space="preserve">\n<desc>Created with Fabric.js 3.6.2</desc>\n<defs>\n</defs>\n<g transform="matrix(0.42 0 0 0.42 200 200)"  >\n<path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(58, 57, 58); fill-rule: nonzero; opacity: 1;"  transform=" translate(-256, -256)" d="M 467 176 a 29.94 29.94 0 0 0 -25.32 12.5 a 2 2 0 0 1 -3.64 -1.14 V 150.71 c 0 -20.75 -16.34 -38.21 -37.08 -38.7 A 38 38 0 0 0 362 150 v 82 a 2 2 0 0 1 -2 2 H 152 a 2 2 0 0 1 -2 -2 V 150.71 c 0 -20.75 -16.34 -38.21 -37.08 -38.7 A 38 38 0 0 0 74 150 v 37.38 a 2 2 0 0 1 -3.64 1.14 A 29.94 29.94 0 0 0 45 176 c -16.3 0.51 -29 14.31 -29 30.62 v 98.72 c 0 16.31 12.74 30.11 29 30.62 a 29.94 29.94 0 0 0 25.32 -12.5 A 2 2 0 0 1 74 324.62 v 36.67 C 74 382 90.34 399.5 111.08 400 A 38 38 0 0 0 150 362 V 280 a 2 2 0 0 1 2 -2 H 360 a 2 2 0 0 1 2 2 v 81.29 c 0 20.75 16.34 38.21 37.08 38.7 A 38 38 0 0 0 438 362 V 324.62 a 2 2 0 0 1 3.64 -1.14 A 29.94 29.94 0 0 0 467 336 c 16.3 -0.51 29 -14.31 29 -30.62 V 206.64 C 496 190.33 483.26 176.53 467 176 Z" stroke-linecap="round" />\n</g>\n</svg>';
            const o = this.template.createElement('p', 'desctiption-text', `${e} exercises`);
            return t.append(i, o), t;
          }
          createTimeCont(e) {
            const t = this.template.createElement('div', 'descr-cont'),
              i = this.template.createElement('div', 'descr-time');
            (i.innerHTML =
              '<?xml version="1.0" encoding="iso-8859-1"?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t width="35px" height="35px" viewBox="0 0 510 510" style="enable-background:new 0 0 510 510;" xml:space="preserve">\n<g>\n\t<g id="access-time">\n\t\t<path style="fill-opacity:0.9;" d="M255,0C114.75,0,0,114.75,0,255s114.75,255,255,255s255-114.75,255-255S395.25,0,255,0z\n\t\t\t M255,459c-112.2,0-204-91.8-204-204S142.8,51,255,51s204,91.8,204,204S367.2,459,255,459z"/>\n\t\t<polygon style="fill-opacity:0.9;" points="267.75,127.5 229.5,127.5 229.5,280.5 362.1,362.1 382.5,328.95 267.75,260.1"/>\n\t</g>\n</g>\n</svg>\n'),
              (i.style.fill = 'rgb(58, 57, 58)');
            const o = this.template.createElement('p', 'desctiption-text', `${e} minutes`);
            return t.append(i, o), t;
          }
          createLightnings(e) {
            const t = this.template.createElement('div', 'lightnings-cont');
            for (let i = 0; i < 4; i++) {
              const o = this.template.createElement('div', 'lightning');
              (o.innerHTML =
                '<?xml version="1.0" encoding="iso-8859-1"?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t width="30px" height="30px" viewBox="0 0 286.9 286.9" style="enable-background:new 0 0 286.9 286.9;" xml:space="preserve"\n\t>\n<g>\n\t<polygon points="248.65,76.5 181.65,76.5 210.35,0 95.65,0 38.25,153 86.05,153 38.25,286.9 \t"/>\n</g>\n</svg>\n'),
                (o.style.fill = i <= e ? 'rgb(58, 57, 58)' : 'rgb(158, 156, 158)'),
                t.append(o);
            }
            return t;
          }
          colorBackground(e) {
            const t = e.getAttribute('name');
            let i = '';
            t && (i = t.split(' ')[1]),
              (e.style.background =
                'beginner' === i
                  ? 'linear-gradient(90deg, rgba(135,254,252,1) 0%, rgba(233,244,243,1) 100%)'
                  : 'intermediate' === i
                  ? 'linear-gradient(90deg, rgba(135,195,254,1) 0%, rgba(233,244,243,1) 100%)'
                  : 'advanced' === i
                  ? 'linear-gradient(90deg, rgba(254,151,135,1) 0%, rgba(247,242,242,1) 100%)'
                  : 'Warmup' === i || 'Time' === i
                  ? 'linear-gradient(90deg, rgba(128,27,150,0.75674019604313) 0%, rgba(214,189,221,1) 78%)'
                  : ' linear-gradient(90deg, rgba(241,147,215,1) 0%, rgba(245,237,238,1) 100%)');
          }
          createAddWorkoutPlanCont(e, t) {
            const i = this.template.createElement('div', 'add-workout-plans-cont'),
              o = this.template.createElement('p', 'add-workouts-text', e),
              r = this.template.createElement('div', 'plus-in-circle');
            return (
              (r.innerHTML =
                '<?xml version="1.0" encoding="utf-8"?>\n<svg width="45px" height="45px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n<path d="M13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8V11H8C7.44772 11 7 11.4477 7 12C7 12.5523 7.44772 13 8 13H11V16C11 16.5523 11.4477 17 12 17C12.5523 17 13 16.5523 13 16V13H16C16.5523 13 17 12.5523 17 12C17 11.4477 16.5523 11 16 11H13V8Z"/>\n<path fill-rule="evenodd" clip-rule="evenodd" d="M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2ZM4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12Z"/>\n</svg>'),
              i.append(o, r),
              r.addEventListener('click', () => {
                this.clickOnPlus(t);
              }),
              i
            );
          }
          clickOnPlus(e) {
            const t = document.querySelector('.modal-addNewComplex');
            if (e) (document.querySelector('.modal-addNewComplex__input').value = ''), t.classList.remove('invisible');
            else {
              const e = document.querySelector('.training__exercises');
              (e.innerHTML = ''), e.append(this.addNewComplex.createSelectExercises(), this.addNewComplex.showExercises(!1));
            }
          }
        };
      var F = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      var U = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      var Y = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      var O = i(545);
      const R = i.n(O)();
      var K = i(379),
        W = i.n(K),
        G = i(102);
      W()(G.Z, { insert: 'head', singleton: !1 }), G.Z.locals;
      var J = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const Q = class {
          constructor() {
            (this.template = new e()), (this.mainClass = 'modal');
          }
          createModal(e, t, i) {
            const o = this.template.createElement('div', this.mainClass);
            o.id = e;
            const r = this.createBackDrop(e, i),
              a = this.createModalInner(e, i);
            return a.append(t), o.append(r, a), o;
          }
          createBackDrop(e, t) {
            const i = this.template.createElement('div', `${this.mainClass}__backdrop`);
            return t ? ((i.onclick = r(e)), i) : i;
          }
          createModalInner(e, t) {
            const i = this.template.createElement('div', `${this.mainClass}__inner`);
            if (t) {
              const t = this.createIconClose(),
                o = this.template.createBtn('btn-close', t);
              return (o.onclick = r(e)), i.append(o), i;
            }
            return i;
          }
          createIconClose() {
            return this.template.createElement('i', 'icon-close');
          }
        },
        Z = new e();
      function X({ mainClass: e, className: i, attributes: o, imgSrc: r, imgAlt: a, validate: s, units: n, classNameUnits: l }) {
        const c = Z.createElement('div', `${e}__input`);
        t(c, i);
        const d = Z.createElement('div', `${e}__wrapper`),
          u = (function (e, t) {
            const i = document.createElement('input');
            return (
              i.classList.add(`${e}__input-item`),
              (function (e, t) {
                for (const i in t) e.setAttribute(i, t[i]);
              })(i, t),
              i
            );
          })(e, o),
          h = Z.createElement('span', `${e}__error`),
          p = (function (e, t) {
            return Z.createElement('span', `${t}`, e);
          })(n, l);
        s &&
          (u.onchange = () => {
            const e = s(u.value, n);
            e.res ? (u.classList.remove('error'), (h.textContent = '')) : (u.classList.add('error'), (h.textContent = e.message || ''));
          });
        const g = Z.createImage(r, a, `${e}__img`);
        return d.append(g, u, p), c.append(d, h), c;
      }
      function ee(e) {
        return /.+@.+\..+/i.test(e) ? { res: !0 } : { res: !1, message: 'Please enter a valid email' };
      }
      function te(e) {
        return e.length < 6 ? { res: !1, message: 'Password must not be less than 6 characters' } : e.includes(' ') ? { res: !1, message: 'Password must not contain spaces' } : { res: !0 };
      }
      function ie(e, t) {
        const i = 'inches' === t ? 2.54 * Number(e) : Number(e);
        return i < 50 || i > 600 ? { res: !1, message: 'Enter the correct height' } : { res: !0 };
      }
      function oe(e, t) {
        const i = 'Lbs' === t ? 0.45 * Number(e) : Number(e);
        return i < 1 || i > 1500 ? { res: !1, message: 'Enter the correct weight' } : { res: !0 };
      }
      var re = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      var ae = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const se = class {
        constructor(t) {
          (this.template = new e()),
            (this.exerciseBlock = this.template.createElement('div', 'exercise-block')),
            (this.counter = this.template.createElement('div', 'exercise-block__counter')),
            (this.exercise = t),
            this.interval;
        }
        draw() {
          this.createBlocksHeader();
          const e = document.createElement('img');
          e.className = 'exercise-block__gif';
          const t = this.exercise.example;
          return (e.src = t), this.exerciseBlock.append(e), this.createExerciseInfo(), this.createCounter(), this.createNavigationButtons(), this.exerciseBlock;
        }
        createBlocksHeader() {
          const e = this.template.createElement('div', 'exercise-block__header');
          this.exerciseBlock.append(e);
          const t = this.template.createBtn('exercise-block__button-return');
          t.addEventListener('click', (e) => {
            e.preventDefault();
            const t = document.querySelector('main');
            t && ((t.innerHTML = ''), we.navigate('exercises'));
          });
          const i = this.template.createElement('div', 'exercise-block__settings-block'),
            o = this.template.createBtn('exercise-block__volume'),
            r = localStorage.getItem('sound');
          (o.style.background = 'muted' === r ? 'url(/rs-clone-deploy/assets/svg/mute.svg)' : 'url(/rs-clone-deploy/assets/svg/volume.svg)'),
            o.addEventListener('click', () => {
              this.sound(o);
            });
          const a = this.template.createBtn('exercise-block__settings');
          a.addEventListener('click', () => {
            document.querySelector('.settingsModal').classList.remove('invisible');
          }),
            i.append(o, a),
            e.append(t, i);
        }
        createExerciseInfo() {
          const e = this.template.createElement('div', 'exercise-block__info'),
            t = this.template.createElement('div', 'exercise-block__name', this.exercise.title),
            i = this.template.createElement('div', 'exercise-block__extra'),
            o = this.template.createLink('exercise-block__info-link', '#', 'Info');
          o.addEventListener('click', (e) => {
            e.preventDefault(), new C(this.exercise).draw();
          });
          const r = this.template.createLink('exercise-block__youtube', this.exercise.youtube, 'Watch');
          (r.target = '_blank'), i.append(o, r), e.append(t, i), this.exerciseBlock.append(e, i);
        }
        createCounter() {
          const e = this.template.createElement('span', 'exercise-block__current-quantity', this.exercise.quantity);
          if ((this.counter.append(e), this.exercise.quantity.toLowerCase().includes('x'))) {
            const e = this.template.createBtn('exercise-block__button-done', 'Done');
            e.addEventListener('click', () => {
              this.playDoneBtn();
            }),
              this.counter.append(e);
          } else {
            const e = this.createCountdownBar();
            this.counter.append(e), (this.counter.style.pointerEvents = 'none');
          }
          this.exerciseBlock.append(this.counter);
        }
        createCountdownBar() {
          const e = this.template.createElement('div', 'exercise-block__time-bar'),
            t = this.template.createElement('div', 'exercise-block__track'),
            i = this.template.createBtn('exercise-block__button-pause', 'Pause'),
            o = this.template.createBtn('exercise-block__button-next', 'Next');
          return e.append(t, i, o), e;
        }
        createNavigationButtons() {
          const e = this.template.createElement('div', 'exercise-block__buttons'),
            t = this.template.createBtn('exercise-block__button-prev', 'Previous'),
            i = this.template.createElement('div', 'exercise-block__delim'),
            o = this.template.createBtn('exercise-block__button-skip', 'Skip');
          e.append(t, i, o), this.exerciseBlock.append(e);
        }
        hideExerciseLinks() {
          document.querySelector('.exercise-block__extra').style.visibility = 'hidden';
        }
        showExerciseLinks() {
          const e = document.querySelector('.exercise-block__extra');
          e && (e.style.visibility = 'visible');
        }
        showNextButton() {
          const e = document.querySelector('.exercise-block__button-next');
          e && (e.style.display = 'block');
        }
        disablePreviousButton() {
          const e = document.querySelector('.exercise-block__button-prev');
          e && (e.classList.add('inactive'), (e.disabled = !0));
        }
        enablePreviousButton() {
          const e = document.querySelector('.exercise-block__button-prev');
          e && (e.classList.remove('inactive'), (e.disabled = !1));
        }
        disableSkipButton() {
          const e = document.querySelector('.exercise-block__button-skip');
          e && (e.classList.add('inactive'), (e.disabled = !0));
        }
        enableSkipButton() {
          const e = document.querySelector('.exercise-block__button-skip');
          e && (e.classList.remove('inactive'), (e.disabled = !1));
        }
        disablePauseButton() {
          const e = document.querySelector('.exercise-block__button-pause');
          e && (e.classList.add('inactive'), (e.disabled = !0));
        }
        enablePauseButton() {
          const e = document.querySelector('.exercise-block__button-pause');
          e && (e.classList.remove('inactive'), (e.disabled = !1));
        }
        createThreeCount() {
          const e = this.template.createElement('div', 'counter-three');
          this.counter.append(e);
          let t = 3;
          (e.textContent = `${t}`), e.classList.add('fading');
          const i = () => {
            (t -= 1), (e.textContent = `${t}`);
          };
          e.addEventListener('animationiteration', i), e.addEventListener('animationend', i);
        }
        createCountDown() {
          const e = this.template.createElement('div', 'ready-text', 'ready to go'),
            t = this.template.createElement('div', 'countdown');
          this.counter.append(e, t);
          const i = this.template.createElement('div', 'countdown__circle');
          t.append(i);
          const o = this.template.createElement('div', 'countdown__dot'),
            r = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),
            a = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
          a.setAttribute('cx', '70'), a.setAttribute('cy', '70'), a.setAttribute('r', '70');
          const s = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
          s.setAttribute('cx', '70'), s.setAttribute('cy', '70'), s.setAttribute('r', '70'), r.append(a, s);
          const n = this.template.createElement('div', 'countdown__number', '10');
          i.append(o, r, n);
          const l = setInterval(() => {
            const i = Number(n.textContent) - 1;
            0 === i && (clearInterval(l), (t.style.display = 'none'), (e.style.display = 'none'), this.showExerciseLinks(), this.enableSkipButton(), document.querySelector('main')),
              (n.textContent = `${i}`),
              (s.style.strokeDashoffset = '' + (440 - (440 * i) / 10)),
              (o.style.transform = `rotateZ(${36 * i}deg)`);
          }, 1e3);
        }
        sound(e) {
          'muted' === localStorage.getItem('sound')
            ? ((e.style.background = 'url(/rs-clone-deploy/assets/svg/volume.svg)'), localStorage.setItem('sound', 'unmuted'))
            : ((e.style.background = 'url(/rs-clone-deploy/assets/svg/mute.svg)'), localStorage.setItem('sound', 'muted'));
        }
        playDoneBtn() {
          const e = new Audio(),
            t = localStorage.getItem('sound');
          (e.src = '/rs-clone-deploy/assets/sounds/done.mp3'), ('unmuted' !== t && t) || e.play();
        }
      };
      var ne = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      var le = function (e, t, i, o) {
        return new (i || (i = Promise))(function (r, a) {
          function s(e) {
            try {
              l(o.next(e));
            } catch (e) {
              a(e);
            }
          }
          function n(e) {
            try {
              l(o.throw(e));
            } catch (e) {
              a(e);
            }
          }
          function l(e) {
            var t;
            e.done
              ? r(e.value)
              : ((t = e.value),
                t instanceof i
                  ? t
                  : new i(function (e) {
                      e(t);
                    })).then(s, n);
          }
          l((o = o.apply(e, t || [])).next());
        });
      };
      const ce = new (class {
          constructor() {
            (this.authorization = new h()), (this.mainPageElement = document.createElement('div')), this.mainPageElement.classList.add('main-page'), (this.template = new e()), (this.isLoaded = 0);
          }
          createIntroSection() {
            document.body.classList.remove('loaded');
            const e = 'intro',
              t = this.template.createElement('section', `main__${e}`);
            t.classList.add(e);
            const i = this.template.createElement('div', `${e}__wrapper`),
              o = this.createVideoBlock([s, n], `${e}__left`),
              r = this.createVideoBlock([l, c], `${e}__left`),
              a = this.template.createElement('div', `${e}__center`),
              d = this.template.createElement('h2', `${e}__text`);
            (d.innerHTML = 'Find Your Inner Energy and Strength.<br> Join Our Comunity for Support.'), i.append(o, a, r);
            const u = this.template.createLink(`${e}__link`, 'https://play.google.com/store/apps/details?id=com.betterlifewithapps.womenworkouts&hl=en&gl=US');
            (u.target = '_blank'), a.append(d, u), t.append(i), this.mainPageElement.append(t);
          }
          createVideoBlock(e, t) {
            const i = this.template.createElement('div', t);
            return (
              e.map((e) => {
                const t = this.template.createVideo(e);
                return t.addEventListener('canplay', g), i.append(t);
              }),
              i
            );
          }
          createAboutSection() {
            const e = document.createElement('section');
            e.className = 'main__about about';
            const t = this.template.createElement('div', 'about__wrapper');
            e.append(t);
            const i = this.template.createElement('div', 'about__info');
            t.append(i);
            const o = this.template.createElement('h3', 'about__title', 'Why Our App?');
            i.append(o);
            const r = document.createElement('p');
            (r.className = 'about__text'),
              (r.innerHTML =
                "The best way to loose wight and burn fat is to choose exercise routines that incorporate many muscle groups and will spike your heart rate.<br> \n      In our application we have chosen the best exercises that can surve this goal.<br>\n      They burn your fat and tone your entire body, and the best part - <b>you don't need any exercise equipment at all!</b>"),
              i.append(r);
            const a = this.template.createElement('div', 'about__picture');
            t.append(a);
            const s = document.createElement('img');
            (s.src = d), a.append(s), this.mainPageElement.append(e);
          }
          createFeaturesSection() {
            const e = document.createElement('section');
            e.className = 'main__features features';
            const t = this.template.createElement('div', 'features__wrapper');
            e.append(t);
            const i = document.createElement('ul');
            (i.className = 'features__list'),
              t.append(i),
              [
                'The best app for female fitness, weight loss and health',
                'Beginner, Intermediate and Advanced routines',
                'Workout at home & get your body fit on',
                'Track your weight and bmi',
              ].forEach((e) => {
                const t = document.createElement('li');
                (t.className = 'features__list-item'), (t.textContent = e), i.append(t);
              }),
              this.mainPageElement.append(e);
          }
          draw() {
            const e = document.querySelector('main');
            e &&
              (e.classList.add('main'),
              (e.innerHTML = ''),
              (this.mainPageElement.textContent = ''),
              this.createIntroSection(),
              this.createAboutSection(),
              this.createFeaturesSection(),
              e.append(this.mainPageElement));
          }
        })(),
        de = new (class {
          draw() {
            const e = document.querySelector('main');
            if (!e) return;
            e.textContent = '';
            const t = document.createElement('div');
            e.append(t), (t.className = 'error-wrapper');
          }
        })(),
        ue = new (class {
          constructor() {
            (this.template = new e()), (this.workoutBlock = new z()), (this.slider = new M()), (this.addNewComplex = new V()), (this.complex = new E());
          }
          draw() {
            return F(this, void 0, void 0, function* () {
              document.body.classList.remove('loaded');
              const e = document.querySelector('main');
              if (!e) return;
              e.classList.add('main'), (e.textContent = '');
              const t = document.createElement('div');
              t.classList.add('workout-plans-page'),
                e.append(t),
                t.append(this.createTitle(), this.workoutBlock.createAddWorkoutPlanCont('Add new workout', !0), yield this.createWrapper(), yield this.createModal()),
                p(document.body);
            });
          }
          createTitle() {
            return this.template.createElement('h1', 'page-title', 'Workout Plans');
          }
          createWrapper() {
            return F(this, void 0, void 0, function* () {
              const e = this.template.createElement('div', 'trainings__content-wrapper');
              return e.append(yield this.createContent()), e;
            });
          }
          createContent() {
            return F(this, void 0, void 0, function* () {
              const e = this.template.createElement('div', 'workout-content-cont'),
                t = yield this.addNewComplex.creatingArrayFromData();
              for (let e = 0; e < t[0].block.length; e++) {
                const i = String(t[0].block[e].id),
                  o = new D(),
                  r = yield o.transformExercises(i);
                for (let e = 0; e < t[0].block.length; e++) i === t[0].block[e].id && t[0].block[e].exercises.push(...r);
              }
              let i = [];
              i = t.length && t[0].block.length ? [...t, ...m] : [...m];
              for (let t = 0; t < i.length; t++) {
                const o = this.workoutBlock.createWorkoutBlockCont(i[t].title),
                  r = this.template.createElement('div', 'workout-wrapper');
                o.append(r), e.append(o);
                const a = this.slider.createNextPrevBtns(i[t].block.length, r, !1, r);
                o.append(a);
                for (let e = 0; e < i[t].block.length; e++) {
                  const o = this.template.createElement('a', 'link-to-exerc'),
                    a = i[t].block[e].id;
                  o.addEventListener('click', (e) => {
                    e.preventDefault();
                    const t = document.querySelector('main');
                    t && ((t.innerHTML = ''), we.navigate(`workouts/${a}`)), localStorage.setItem('complexId', JSON.stringify(a));
                  });
                  const s = i[t].block[e],
                    n = this.workoutBlock.createWorkoutContent(s, t, e, !1, i.length);
                  this.workoutBlock.colorBackground(n), o.append(n), r.append(o);
                }
              }
              return e;
            });
          }
          createModal() {
            return F(this, void 0, void 0, function* () {
              const e = this.template.createElement('div', 'modal-addNewComplex');
              e.classList.add('invisible');
              const t = this.template.createElement('div', 'modal-addNewComplex__addName'),
                i = this.template.createElement('h2', 'modal-addNewComplex__title', 'Create New Workout'),
                o = document.createElement('input');
              (o.placeholder = 'Workout Name'), (o.className = 'modal-addNewComplex__input');
              const r = this.template.createElement('div', 'modal-addNewComplex__btns'),
                a = this.template.createBtn('modal-addNewComplex__cancel', 'Cancel');
              a.classList.add('btn'),
                a.classList.add('btn--second'),
                a.addEventListener('click', () => {
                  e.classList.add('invisible');
                });
              const s = this.template.createBtn('modal-addNewComplex__create', 'Create');
              return (
                s.classList.add('btn'),
                s.addEventListener('click', () =>
                  F(this, void 0, void 0, function* () {
                    document.body.classList.remove('loaded'), yield this.addNewComplex.addComplexInLocalStore(), e.classList.add('invisible');
                    const t = document.querySelector('.trainings__content-wrapper');
                    (t.innerHTML = ''), t.append(yield this.createContent()), p(document.body);
                  })
                ),
                r.append(a, s),
                t.append(i, o, r),
                e.append(t),
                e
              );
            });
          }
        })(),
        he = new D(),
        pe = new (class {
          constructor() {
            (this.template = new e()), (this.workoutBlock = new z()), (this.slider = new M()), (this.addNewComplex = new V()), (this.complex = new E());
          }
          draw() {
            return U(this, void 0, void 0, function* () {
              document.body.classList.remove('loaded'), this.getDayOfAWeek();
              const e = document.querySelector('main');
              if (!e) return;
              e.classList.add('main'), (e.textContent = '');
              const t = this.template.createElement('div', 'for-decor'),
                i = document.createElement('div');
              i.classList.add('exercises-page');
              const o = yield this.createMiniHeader(),
                r = yield this.createWeekGoalCont();
              t.append(this.createDecorationEl()), o && i.append(o), r && i.append(r);
              const a = yield this.createExercisesBlock(),
                s = this.createStartBtn(),
                n = yield this.createExercisesCont();
              i.append(a, s, n), t.append(i), e.append(t), p(document.body);
            });
          }
          createMiniHeader() {
            return U(this, void 0, void 0, function* () {
              const e = yield this.getCompletesExercisesStat(),
                t = this.template.createElement('div', 'mini-header-cont');
              if (e) {
                const i = this.miniHeaderBlock('/rs-clone-deploy/assets/png/weight2.png', String(e.totalCompletedComplexes), 'Workouts'),
                  o = this.miniHeaderBlock('/rs-clone-deploy/assets/png/stopwatch.png', String(e.totalTime.hours), 'h'),
                  r = this.template.createElement('div', 'stat-wrapper'),
                  a = this.template.createElement('div', 'stat-number', String(e.totalTime.minutes)),
                  s = this.template.createElement('p', 'stat-title', 'min');
                return r.append(a, s), o.append(r), t.append(i, o), t;
              }
            });
          }
          miniHeaderBlock(e, t, i) {
            const o = this.template.createElement('div', 'mini-workouts-cont'),
              r = this.template.createImage(e, 'barbell', 'mini-cont-img'),
              a = this.template.createElement('div', 'stat-wrapper'),
              s = this.template.createElement('div', 'stat-number', t),
              n = this.template.createElement('p', 'stat-title', i);
            return a.append(s, n), o.append(r, a), o;
          }
          createWeekGoalCont() {
            return U(this, void 0, void 0, function* () {
              const e = P();
              if (!e) return;
              const t = yield this.complex.getWeeklyStatistic(e),
                i = this.template.createElement('div', 'week-goal-cont'),
                o = this.template.createElement('div', 'week-goal-stat'),
                r = this.template.createElement('p', 'week-goal-text', 'Week Goal'),
                a = this.template.createElement('div', 'week-goal-num', `${null == t ? void 0 : t.weeklyWorkouts.length}/${null == t ? void 0 : t.load}`);
              o.append(r, a);
              const s = yield this.createDaysCont();
              return i.append(o), s && i.append(s), i;
            });
          }
          createDaysCont() {
            return U(this, void 0, void 0, function* () {
              const e = P();
              if (!e) return;
              const t = yield this.complex.getWeeklyStatistic(e),
                i = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                o = this.template.createElement('div', 'days-cont'),
                r = this.getDayOfAWeek();
              for (let e = 0; e < 7; e++) {
                const a = this.template.createElement('div', 'days-circle', i[e]);
                a.classList.remove('days-circle-pink'), r === e + 1 && a.classList.add('days-circle-pink'), o.append(a);
                const s = this.template.createElement('div', 'check-mark');
                s.classList.add('hidden'), (null == t ? void 0 : t.weeklyWorkouts.includes(e + 1)) && s.classList.remove('hidden'), a.append(s);
              }
              return o;
            });
          }
          createExercisesBlock() {
            return U(this, void 0, void 0, function* () {
              const e = this.template.createElement('div', 'exerc-block'),
                t = this.template.createElement('div', 'exerc-slider');
              let i = 0;
              const o = yield this.addNewComplex.creatingArrayFromData();
              for (let e = 0; e < o[0].block.length; e++) {
                const t = String(o[0].block[e].id),
                  i = new D(),
                  r = yield i.transformExercises(t);
                for (let e = 0; e < o[0].block.length; e++) t === o[0].block[e].id && o[0].block[e].exercises.push(...r);
              }
              const r = [...o, ...m];
              for (let e = 0; e < r.length; e++)
                for (let o = 0; o < r[e].block.length; o++) {
                  i++;
                  const a = r[e].block[o],
                    s = this.workoutBlock.createWorkoutContent(a, e, o, !0, r.length);
                  s.classList.add('adapt'),
                    this.workoutBlock.colorBackground(s),
                    s.classList.add('blur'),
                    (2 !== i && 4 !== i) || s.classList.add('smallerImg'),
                    3 === i && (s.classList.add('largerImg'), s.classList.remove('blur'), s.children[1].classList.add('largerPng')),
                    t.append(s);
                }
              const a = this.slider.createNextPrevBtns(i, t, !0, e);
              return e.append(t, a), e;
            });
          }
          createDecorationEl() {
            return this.template.createElement('div', 'decor-circle');
          }
          createExercisesCont() {
            return U(this, void 0, void 0, function* () {
              const e = this.template.createElement('div', 'exercises-wrapper'),
                t = [...(yield this.addNewComplex.creatingArrayFromData()), ...m];
              let i = 0,
                o = 0;
              1 === t[i].block.length ? ((i = 1), (o = 1)) : 2 === t[i].block.length ? ((i = 1), (o = 0)) : 0 === t[i].block.length ? ((i = 1), (o = 2)) : ((i = 0), (o = 2));
              const r = yield this.slider.createExercises(i, o);
              return localStorage.setItem('complexId', JSON.stringify(t[i].block[o].id)), e.append(r), e;
            });
          }
          createStartBtn() {
            const e = this.template.createBtn('exercises__startNow-btn', 'start now'),
              t = this.template.createElement('a', 'link-to-exerc');
            return (
              t.addEventListener('click', (e) => {
                e.preventDefault();
                const t = document.querySelector('main');
                t && ((t.innerHTML = ''), we.navigate('startTraining'));
              }),
              t.append(e),
              t
            );
          }
          getDayOfAWeek() {
            return [7, 1, 2, 3, 4, 5, 6][new Date().getDay()];
          }
          getCompletesExercisesStat() {
            return U(this, void 0, void 0, function* () {
              const e = P();
              if (e) return yield this.complex.getCompletedComplexes(e);
            });
          }
        })(),
        ge = new (class {
          constructor() {
            (this.template = new e()),
              (this.calendar = new (class {
                constructor() {
                  this.template = new e();
                }
                createCalendar() {
                  const e = this.template.createElement('section', 'calendar'),
                    t = this.createCalendarWrap();
                  return e.append(t), e;
                }
                createCalendarWrap() {
                  const e = this.template.createElement('div', 'calendar-wrap');
                  return (e.id = 'airdatepicker'), e;
                }
              })()),
              (this.info = new (class {
                constructor() {
                  (this.template = new e()), (this.mainClass = 'info'), (this.authorization = new h());
                }
                createInfo() {
                  return Y(this, void 0, void 0, function* () {
                    const e = this.template.createElement('section', `${this.mainClass}`),
                      t = yield this.createItems(),
                      i = this.createBtnWrap();
                    if (t) return e.append(...t, i), e;
                  });
                }
                createItems() {
                  return Y(this, void 0, void 0, function* () {
                    const e = P();
                    if (!e) return;
                    const t = yield this.authorization.getUserInfo(e);
                    if (!t) return;
                    const i = [],
                      o = t.units.split('-');
                    for (const e in t)
                      switch (e) {
                        case 'goal': {
                          const o = this.createItem(`${e}:`, t.goal);
                          i.push(o);
                          break;
                        }
                        case 'load': {
                          const o = this.createItem(`${e}:`, `${t.load} workouts per week`);
                          i.push(o);
                          break;
                        }
                        case 'weight': {
                          const r = this.createItem(`${e}:`, `${t.weight} ${o[0]}`);
                          i.push(r);
                          break;
                        }
                        case 'height': {
                          const r = this.createItem(`${e}:`, `${t.height} ${o[1]}`);
                          i.push(r);
                          break;
                        }
                      }
                    return i;
                  });
                }
                createItem(e, t) {
                  const i = this.template.createElement('div', `${this.mainClass}__item`),
                    o = this.createContent(e, t);
                  return i.append(o), i;
                }
                createContent(e, t) {
                  const i = this.template.createElement('div', `${this.mainClass}__item-content`),
                    o = this.template.createElement('div', `${this.mainClass}__item-title`, e),
                    r = this.template.createElement('div', `${this.mainClass}__item-description`, t);
                  return i.append(o, r), i;
                }
                createBtnWrap() {
                  const e = this.template.createElement('div', `${this.mainClass}__btn-wrap`),
                    t = this.createBtnEdit();
                  return e.append(t), e;
                }
                createBtnEdit() {
                  const e = this.template.createBtn(`${this.mainClass}__edit`, 'Edit');
                  return e.classList.add('btn'), e.addEventListener('click', o('modal-edit-profile')), e;
                }
              })()),
              (this.mainClass = 'profile-page'),
              (this.modalEditProfile = new (class {
                constructor() {
                  (this.modal = new Q()), (this.template = new e()), (this.mainClass = 'edit-form'), (this.authorization = new h());
                }
                createModal(e) {
                  return re(this, void 0, void 0, function* () {
                    const t = yield this.createEditForm(e);
                    if (t) return this.modal.createModal('modal-edit-profile', t, !0);
                  });
                }
                createEditForm(e) {
                  return re(this, void 0, void 0, function* () {
                    const t = this.template.createElement('div', this.mainClass),
                      i = this.createTitle(),
                      o = yield this.createForm(e);
                    if (o) return t.append(i, o), t;
                  });
                }
                getUserInfo() {
                  return re(this, void 0, void 0, function* () {
                    const e = P();
                    if (e) return (yield this.authorization.getUserInfo(e)) || void 0;
                  });
                }
                createTitle() {
                  return this.template.createElement('div', `${this.mainClass}__title`, 'Edit your weight/height');
                }
                createForm(e) {
                  return re(this, void 0, void 0, function* () {
                    const t = yield this.getUserInfo();
                    if (!t) return;
                    const i = t.units.split('-'),
                      o = this.template.createForm(`${this.mainClass}__form`, '/'),
                      r = this.template.createElement('div', `${this.mainClass}__input-wrap`),
                      a = X({
                        mainClass: this.mainClass,
                        className: [],
                        attributes: { id: 'weight', name: 'weight', type: 'number', placeholder: 'Enter weight', value: t.weight },
                        imgSrc: '/rs-clone-deploy/assets/svg/scales.svg',
                        imgAlt: 'scales-img',
                        validate: oe,
                        units: i[0],
                        classNameUnits: `${this.mainClass}__units-weight`,
                      }),
                      s = X({
                        mainClass: this.mainClass,
                        className: [],
                        attributes: { id: 'height', name: 'height', type: 'number', placeholder: 'Enter height', value: t.height },
                        imgSrc: '/rs-clone-deploy/assets/svg/height.svg',
                        imgAlt: 'height-img',
                        validate: ie,
                        units: i[1],
                        classNameUnits: `${this.mainClass}__units-height`,
                      });
                    r.append(a, s);
                    const n = this.createMessage(),
                      l = this.createBtnUpdate();
                    return (
                      o.addEventListener('submit', (t) => {
                        this.onSubmitHandlerForm(t, o, e, i);
                      }),
                      o.append(r, n, l),
                      o
                    );
                  });
                }
                createMessage() {
                  return this.template.createElement('span', `${this.mainClass}__message-form`);
                }
                createBtnUpdate() {
                  return a({ content: 'update', className: [`${this.mainClass}__btn`, 'btn'], type: 'submit' });
                }
                onSubmitHandlerForm(e, t, i, o) {
                  var r, a;
                  e.preventDefault();
                  const s = new FormData(t),
                    n = null === (r = s.get('weight')) || void 0 === r ? void 0 : r.toString(),
                    l = null === (a = s.get('height')) || void 0 === a ? void 0 : a.toString();
                  if (!n || !l) return;
                  const c = ie(l, o[1]).res;
                  if (!oe(n, o[0]).res || !c) return;
                  const d = P();
                  d && this.updateInfoUser({ id: d, weight: n, height: l }, i);
                }
                updateInfoUser(e, t) {
                  return re(this, void 0, void 0, function* () {
                    const i = yield this.authorization.updateUserInfo(e);
                    if (i)
                      if (i.errors && i.message) this.ErrorHandler(i);
                      else {
                        const e = document.querySelector(`.${this.mainClass}__message-form`);
                        e && ((e.textContent = ''), e.classList.remove('error')), r('modal-edit-profile')(), t();
                      }
                  });
                }
                ErrorHandler(e) {
                  const t = document.querySelectorAll(`${this.mainClass}__input`);
                  Array.prototype.slice.call(t).forEach((e) => {
                    e.classList.add('error');
                  });
                  const i = document.querySelector(`.${this.mainClass}__message-form`);
                  i && ((i.textContent = e.message), i.classList.add('error'));
                }
              })()),
              (this.progress = new (class {
                constructor() {
                  (this.template = new e()),
                    (this.mainClass = 'progress'),
                    (this.mainClassTwo = 'bmi'),
                    (this.authorization = new h()),
                    (this.bmiValue = 0),
                    (this.bmiContent = ''),
                    (this.bmiClassName = '');
                }
                createProgress() {
                  return J(this, void 0, void 0, function* () {
                    yield this.calculateBmi();
                    const e = this.template.createElement('section', `${this.mainClass}`),
                      t = this.createBmiBlock();
                    return e.append(t), e;
                  });
                }
                calculateBmi() {
                  return J(this, void 0, void 0, function* () {
                    const e = P();
                    if (!e) return;
                    const t = yield this.authorization.getUserInfo(e);
                    if (!t) return;
                    let i = Number(t.height),
                      o = Number(t.weight);
                    'Lbs-inches' === t.units && ((i = 2.54 * Number(t.height)), (o = 0.45 * Number(t.weight))),
                      (this.bmiValue = parseFloat((o / Math.pow(i / 100, 2)).toFixed(1))),
                      this.createBmiData();
                  });
                }
                createBmiData() {
                  this.bmiValue <= 18.5
                    ? ((this.bmiContent = 'underweight'), (this.bmiClassName = `${this.mainClassTwo}__line-underweight`))
                    : this.bmiValue > 18.5 && this.bmiValue <= 25
                    ? ((this.bmiContent = 'normal'), (this.bmiClassName = `${this.mainClassTwo}__line-normal`))
                    : this.bmiValue > 25 && this.bmiValue <= 30
                    ? ((this.bmiContent = 'overweight'), (this.bmiClassName = `${this.mainClassTwo}__line-overweight`))
                    : this.bmiValue > 30 && this.bmiValue <= 35
                    ? (console.log('ggg'), (this.bmiContent = 'obesity 1 degree'), (this.bmiClassName = `${this.mainClassTwo}__line-obesity1`))
                    : this.bmiValue > 35 && this.bmiValue <= 40
                    ? ((this.bmiContent = 'obesity 2 degree'), (this.bmiClassName = `${this.mainClassTwo}__line-obesity2`))
                    : this.bmiValue > 40 && ((this.bmiContent = 'obesity 3 degree'), (this.bmiClassName = `${this.mainClassTwo}__line-obesity3`));
                }
                createBmiBlock() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}`),
                    t = this.createBmiTitle(),
                    i = this.createBmiContainer();
                  return e.append(t, i), e;
                }
                createBmiTitle() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}__title-container`),
                    t = this.template.createElement('h2', `${this.mainClassTwo}__title`, 'Body Mass Index');
                  return e.append(t), e;
                }
                createBmiContainer() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}__container`),
                    t = this.createParametersBlock(),
                    i = this.createBmiLine(),
                    o = this.createBmiParametersTitle(this.bmiContent, this.bmiClassName);
                  return e.append(t, i, o), e;
                }
                createParametersBlock() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}__parameters`),
                    t = this.createTitles(this.bmiValue.toString());
                  return e.append(...t), e;
                }
                createTitles(e) {
                  return [this.template.createElement('div', `${this.mainClassTwo}__parameters-title`, 'BMI:'), this.template.createElement('div', `${this.mainClassTwo}__parameters-subtitle`, e)];
                }
                createBmiLine() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}__line`);
                  [
                    { className: 'blue', value: ['15'] },
                    { className: 'green', value: ['18.5'] },
                    { className: 'yellow', value: ['25'] },
                    { className: 'orange', value: ['30'] },
                    { className: 'red', value: ['35', '40'] },
                  ].forEach((t) => {
                    const i = this.createLineItem(t);
                    e.append(i);
                  });
                  const t = this.createLineThumb();
                  return e.append(t), e;
                }
                createLineItem(e) {
                  const t = this.template.createElement('div', `${this.mainClassTwo}__line-item`);
                  return (
                    t.classList.add(e.className),
                    e.value.forEach((e) => {
                      const i = this.template.createElement('div', `${this.mainClassTwo}__line-number`, e);
                      t.append(i);
                    }),
                    t
                  );
                }
                createLineThumb() {
                  const e = this.template.createElement('div', `${this.mainClassTwo}__line-thumb`);
                  if (this.bmiValue < 15) return (e.style.left = '0%'), e;
                  if (this.bmiValue > 40) return (e.style.left = '100%'), e;
                  const t = (100 * (this.bmiValue - 15)) / 25;
                  return (e.style.left = t.toString() + '%'), e;
                }
                createBmiParametersTitle(e, t) {
                  return this.template.createElement('div', t, e);
                }
              })());
          }
          draw() {
            return (
              (e = this),
              (t = void 0),
              (o = function* () {
                document.body.classList.remove('loaded');
                const e = document.querySelector('.main');
                if (!e) return;
                e.textContent = '';
                const t = this.template.createElement('div', `${this.mainClass}`),
                  i = this.template.createElement('h2', `${this.mainClass}__title`, 'My profile'),
                  o = this.createDecorEl(),
                  r = this.calendar.createCalendar(),
                  a = yield this.info.createInfo();
                if (!a) return;
                const s = this.template.createElement('div', `${this.mainClass}__container`),
                  n = yield this.progress.createProgress();
                s.append(r, a);
                const l = yield this.modalEditProfile.createModal(this.draw.bind(this));
                l && (p(document.body), t.append(o, i, s, n, l), e.append(t), new R('#airdatepicker'));
              }),
              new ((i = void 0) || (i = Promise))(function (r, a) {
                function s(e) {
                  try {
                    l(o.next(e));
                  } catch (e) {
                    a(e);
                  }
                }
                function n(e) {
                  try {
                    l(o.throw(e));
                  } catch (e) {
                    a(e);
                  }
                }
                function l(e) {
                  var t;
                  e.done
                    ? r(e.value)
                    : ((t = e.value),
                      t instanceof i
                        ? t
                        : new i(function (e) {
                            e(t);
                          })).then(s, n);
                }
                l((o = o.apply(e, t || [])).next());
              })
            );
            var e, t, i, o;
          }
          createDecorEl() {
            return this.template.createElement('div', 'decor');
          }
        })(),
        me = new (class {
          constructor() {
            (this.template = new e()),
              (this.takeARest = new (class {
                constructor() {
                  this.template = new e();
                }
                draw(e, t) {
                  return ae(this, void 0, void 0, function* () {
                    const i = this.template.createElement('div', 'exercisesModals');
                    document.body.append(i);
                    const o = yield this.createTakeARest(t, e);
                    return o && i.append(o), i;
                  });
                }
                createTakeARest(e, t) {
                  return ae(this, void 0, void 0, function* () {
                    const i = this.template.createElement('div', 'rest__wrapper'),
                      o = P();
                    if (!o) return;
                    const r = new E(),
                      a = yield r.getUserSettings(o);
                    return (
                      i.append(
                        this.createSetiingsCont(),
                        this.createTitle(),
                        this.createCountDown(Number(null == a ? void 0 : a.timeRest) || 20),
                        this.createButtons(),
                        this.nextExerciseText(e, t),
                        this.createNextExerciseWrapper(e, t)
                      ),
                      i
                    );
                  });
                }
                createSetiingsCont() {
                  const e = this.template.createElement('div', 'rest__header'),
                    t = this.template.createElement('div', 'rest__arrow-left');
                  (t.innerHTML =
                    '<?xml version="1.0" ?><!DOCTYPE svg  PUBLIC \'-//W3C//DTD SVG 1.1//EN\'  \'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\'><svg  id="Layer_1" style="enable-background:new 0 0 32 32;" version="1.1" viewBox="0 0 32 32"  xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M28,14H8.8l4.62-4.62C13.814,8.986,14,8.516,14,8c0-0.984-0.813-2-2-2c-0.531,0-0.994,0.193-1.38,0.58l-7.958,7.958  C2.334,14.866,2,15.271,2,16s0.279,1.08,0.646,1.447l7.974,7.973C11.006,25.807,11.469,26,12,26c1.188,0,2-1.016,2-2  c0-0.516-0.186-0.986-0.58-1.38L8.8,18H28c1.104,0,2-0.896,2-2S29.104,14,28,14z"/></svg>'),
                    t.addEventListener('click', (e) => {
                      e.preventDefault();
                      const t = document.querySelector('main');
                      t && ((t.innerHTML = ''), we.navigate('exercises'));
                    });
                  const i = this.template.createElement('div', 'rest__settings-cont'),
                    o = this.template.createElement('div', 'rest__volume'),
                    r = localStorage.getItem('sound');
                  (o.innerHTML = 'muted' === r ? x : A),
                    o.addEventListener('click', () => {
                      const e = localStorage.getItem('sound');
                      o.innerHTML = 'unmuted' !== e && e ? A : x;
                    });
                  const a = this.template.createElement('div', 'rest__settings');
                  return (
                    a.addEventListener('click', () => {
                      document.querySelector('.settingsModal').classList.remove('invisible');
                    }),
                    (a.innerHTML =
                      '<?xml version="1.0" encoding="iso-8859-1"?>\n<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n viewBox="0 0 507.451 507.45" style="enable-background:new 0 0 507.451 507.45;"\n\t xml:space="preserve">\n<g>\n\t<g id="settings">\n\t\t<path d="M440.813,280.5c0-7.65,2.55-15.3,2.55-25.5s0-17.85-2.55-25.5l53.55-43.35c5.1-5.1,5.1-10.2,2.55-15.3l-51-89.25\n\t\t\tc-2.55-2.55-7.649-5.1-15.3-2.55l-63.75,25.5c-12.75-10.2-28.05-17.85-43.35-25.5l-10.2-66.3C315.863,5.1,308.212,0,303.113,0\n\t\t\th-102c-5.101,0-12.75,5.1-12.75,10.2l-10.2,68.85c-15.3,5.1-28.05,15.3-43.35,25.5l-61.2-25.5c-7.65-2.55-12.75,0-17.851,5.1\n\t\t\tl-51,89.25c-2.55,2.55,0,10.2,5.1,15.3l53.55,40.8c0,7.65-2.55,15.3-2.55,25.5s0,17.85,2.55,25.5l-53.55,43.35\n\t\t\tc-5.1,5.101-5.1,10.2-2.55,15.301l51,89.25c2.55,2.55,7.649,5.1,15.3,2.55l63.75-25.5c12.75,10.2,28.05,17.85,43.35,25.5\n\t\t\tl10.2,66.3c0,5.1,5.1,10.2,12.75,10.2h102c5.101,0,12.75-5.101,12.75-10.2l10.2-66.3c15.3-7.65,30.6-15.3,43.35-25.5l63.75,25.5\n\t\t\tc5.101,2.55,12.75,0,15.301-5.101l51-89.25c2.55-5.1,2.55-12.75-2.551-15.3L440.813,280.5z M252.113,344.25\n\t\t\tc-48.45,0-89.25-40.8-89.25-89.25s40.8-89.25,89.25-89.25s89.25,40.8,89.25,89.25S300.563,344.25,252.113,344.25z"/>\n\t</g>\n</g>\n</svg>'),
                    i.append(o, a),
                    e.append(t, i),
                    e
                  );
                }
                createTitle() {
                  return this.template.createElement('h2', 'rest__title', 'take a rest');
                }
                createButtons() {
                  const e = this.template.createElement('div', 'rest__buttons'),
                    t = this.template.createBtn('rest__add-btn', '+20');
                  t.classList.add('exercises__startNow-btn');
                  const i = this.template.createBtn('rest__skip-btn', 'skip');
                  return (
                    i.classList.add('exercises__startNow-btn'),
                    e.append(t, i),
                    t.addEventListener('click', () => {
                      this.addSeconds();
                    }),
                    e
                  );
                }
                nextExerciseText(e, t) {
                  const i = this.template.createElement('p', 'rest__text');
                  return (i.innerHTML = `next exercise ${t + 2} / ${e.length}`), i;
                }
                createNextExerciseWrapper(e, t) {
                  const i = this.template.createElement('div', 'rest__exerc-wrapper');
                  return i.append(this.nextExercTitle(e, t), this.createNextExerciseInfo(e, t)), i;
                }
                nextExercTitle(e, t) {
                  const i = this.template.createElement('div', 'next-exercise__cont'),
                    o = this.template.createElement('div', 'next-exercise__title');
                  o.innerHTML = `${e[t + 1].title} ${e[t + 1].quantity}`;
                  const r = this.template.createLink('next-exercise__link', e[t + 1].youtube),
                    a = this.template.createElement('div', 'next-exercise__tv');
                  return (
                    r.append(a),
                    (a.innerHTML =
                      '<?xml version="1.0" encoding="utf-8"?>\n\x3c!-- Svg Vector Icons : http://www.onlinewebfonts.com/icon --\x3e\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 1000 1000" enable-background="new 0 0 1000 1000" xml:space="preserve">\n<metadata> Svg Vector Icons : http://www.onlinewebfonts.com/icon </metadata>\n<g><g><g id="play_movie"><g><path d="M624.9,404.8l-168.6-83.4c-8.6-4.2-17-6.3-25-6.3c-21.2,0-42.6,15.8-42.6,51.3v155.9c0,35.5,21.6,51.3,43.1,51.3c8,0,16.5-2.1,25.3-6.4l166.6-83.3c18.8-9.2,29.6-23.8,29.6-40.1C653.3,427.8,642.9,413.6,624.9,404.8z M431.7,551.3l0-22.3h0V551.3z M437.3,527.3c-1.4,0.7-2.6,1.1-3.5,1.4c-0.3-1.4-0.6-3.5-0.6-6.4V366.4c0-2.8,0.3-4.8,0.6-6.2c0.8,0.3,1.7,0.6,2.9,1.2L603.7,444L437.3,527.3z M923.2,99.1H76.8c-36.8,0-66.8,30-66.8,66.8v534.5c0,36.8,30,66.8,66.8,66.8h334.1v89.1h-89.1v44.5h356.4v-44.5h-89.1v-89.1h334.1c36.8,0,66.8-30,66.8-66.8V165.9C990,129.1,960,99.1,923.2,99.1z M544.5,856.4h-89.1v-89.1h89.1V856.4z M945.5,700.5c0,12.3-10,22.3-22.3,22.3H76.8c-12.3,0-22.3-10-22.3-22.3V165.9c0-12.3,10-22.3,22.3-22.3h846.4c12.3,0,22.3,10,22.3,22.3L945.5,700.5L945.5,700.5z"/></g></g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></g>\n</svg>'),
                    i.append(o, r),
                    i
                  );
                }
                createNextExerciseInfo(e, t) {
                  const i = this.template.createElement('div', 'next-exercise__info'),
                    o = this.template.createElement('div', 'next-exercise__img-wrapper'),
                    r = this.template.createImage(e[t + 1].example, 'exercise', 'next-exercise__gif');
                  o.append(r);
                  const a = this.template.createElement('div', 'next-exercise__description', e[t + 1].description);
                  return (a.innerHTML = e[t + 1].description.replace(/\. /g, ". <br><span class='new-line'></span>")), i.append(o, a), i;
                }
                createCountDown(e) {
                  const t = this.template.createElement('div', 'rest__timer'),
                    i = this.template.createElement('div', 'rest__timer-line-before');
                  i.style.animation = `overlay_left ${e}s steps(1, end) forwards`;
                  const o = this.template.createElement('div', 'rest__timer-line');
                  o.style.animation = `rotate ${e}s linear forwards`;
                  const r = this.template.createElement('div', 'rest__timer-line-after');
                  r.style.animation = `overlay_right ${e}s steps(1, end) forwards`;
                  const a = this.template.createElement('div', 'rest__timer-body');
                  return (a.innerHTML = String(e)), this.countSeconds(a, t), t.append(i, o, r, a), t;
                }
                countSeconds(e, t) {
                  const i = new Audio(),
                    o = localStorage.getItem('sound');
                  (i.src = '/rs-clone-deploy/assets/sounds/tiktak.mp3'), ('unmuted' !== o && o) || i.play();
                  const r = setInterval(() => {
                    Number(e.innerHTML) > 0 && ((e.innerHTML = String(Number(e.innerHTML) - 1)), 0 === Number(e.innerHTML) && i.pause());
                  }, 1e3);
                  we.subscribersOnce.push(() => {
                    i.pause();
                  }),
                    setTimeout(() => {
                      const e = document.querySelector('.rest__skip-btn'),
                        t = document.querySelector('.rest__volume'),
                        o = document.querySelector('.rest__arrow-left');
                      e.addEventListener('click', () => {
                        clearInterval(r), i.pause();
                      }),
                        o.addEventListener('click', () => {
                          clearInterval(r), i.pause();
                        }),
                        t.addEventListener('click', () => {
                          const e = localStorage.getItem('sound');
                          'unmuted' !== e && e ? 'muted' === e && (i.play(), localStorage.setItem('sound', 'unmuted')) : (i.pause(), localStorage.setItem('sound', 'muted'));
                        });
                    }, 0);
                }
                addSeconds() {
                  const e = document.querySelector('.rest__timer-body');
                  e.innerHTML = String(Number(e.innerHTML) + 20);
                  const t = document.querySelector('.rest__timer-line'),
                    i = document.querySelector('.rest__timer-line-before'),
                    o = window.getComputedStyle(t).animation.match(/\d{2,}/g),
                    r = document.querySelector('.rest__timer-line-after');
                  o &&
                    ((r.style.animation = `overlay_right ${Number(o[0]) + 20}s steps(1, end) forwards`),
                    (i.style.animation = `overlay_left ${Number(o[0]) + 20}s steps(1, end) forwards`),
                    (t.style.animation = `rotate ${Number(o[0]) + 20}s linear forwards`));
                }
              })()),
              (this.exerciseArray = []),
              (this.currentExerciseIndex = 0),
              (this.counter = 0),
              this.interval,
              this.timeout,
              (this.resultMins = 0),
              (this.complex = new E());
          }
          draw() {
            return le(this, void 0, void 0, function* () {
              document.body.classList.remove('loaded');
              const t = document.querySelector('main');
              if (!t) return;
              t.classList.add('main'), (t.textContent = '');
              const i = document.createElement('div');
              i.classList.add('startTraining-page');
              const o = this.template.createElement('div', 'settingsModal'),
                r = P();
              if (!r) return;
              o.classList.add('invisible'),
                o.addEventListener('click', (e) => {
                  e.target.classList.contains('settingsModal') && o.classList.add('invisible');
                }),
                o.classList.add('modal-addNewComplex'),
                o.append(this.createSettingsModal(r)),
                t.append(i, o);
              const a = new V(),
                s = yield a.creatingArrayFromData();
              let n = [];
              const l = new D(),
                c = JSON.parse(String(localStorage.getItem('complexId')));
              if (c) {
                const e = yield l.transformExercises(c);
                for (let t = 0; t < s[0].block.length; t++) c === s[0].block[t].id && s[0].block[t].exercises.push(...e);
              }
              (n = s.length && s[0].block.length ? [...s, ...m] : [...m]),
                n.forEach((e) => {
                  e.block.forEach((e) => {
                    String(e.id) === String(c) && (this.exerciseArray = e.exercises);
                  });
                }),
                (this.resultMins = 0),
                (this.counter = 0),
                (this.currentExerciseIndex = 0);
              const d = new se(this.exerciseArray[this.currentExerciseIndex]);
              i.append(d.draw()),
                0 === this.currentExerciseIndex && this.exerciseArray[this.currentExerciseIndex].quantity.toLowerCase().includes('x')
                  ? (clearTimeout(this.timeout), clearInterval(this.interval), d.createCountDown(), d.hideExerciseLinks(), d.disablePreviousButton(), d.disableSkipButton())
                  : (clearInterval(this.interval),
                    clearTimeout(this.timeout),
                    d.createThreeCount(),
                    (this.timeout = setTimeout(() => {
                      const e = this.getExerciseDuration(this.exerciseArray[this.currentExerciseIndex]);
                      this.setTimeCounter(e), this.enableCounterBlock();
                    }, 3e3)),
                    d.disablePreviousButton());
              const u = Date.now();
              i.addEventListener('click', (t) => {
                const o = t.target;
                if (
                  (o.classList.contains('exercise-block__button-done') &&
                    (this.currentExerciseIndex === this.exerciseArray.length - 1
                      ? (clearInterval(this.interval),
                        clearTimeout(this.timeout),
                        this.counter++,
                        (this.resultMins = this.getResultMinutes(u)),
                        0 === this.resultMins && (this.resultMins = 1),
                        this.showCongrats(this.counter, this.resultMins))
                      : (clearInterval(this.interval), clearTimeout(this.timeout), this.showRestModal(), this.counter++)),
                  o.classList.contains('exercise-block__button-next') &&
                    (this.currentExerciseIndex === this.exerciseArray.length - 1
                      ? (clearInterval(this.interval),
                        this.counter++,
                        (this.resultMins = this.getResultMinutes(u)),
                        0 === this.resultMins && (this.resultMins = 1),
                        this.showCongrats(this.counter, this.resultMins))
                      : (clearInterval(this.interval), this.showRestModal(), this.counter++)),
                  o.classList.contains('exercise-block__button-skip') &&
                    (this.currentExerciseIndex === this.exerciseArray.length - 1
                      ? (clearInterval(this.interval),
                        clearTimeout(this.timeout),
                        (this.resultMins = this.getResultMinutes(u)),
                        0 === this.resultMins && (this.resultMins = 1),
                        this.showCongrats(this.counter, this.resultMins))
                      : (clearTimeout(this.timeout), clearInterval(this.interval), this.loadNextExercise())),
                  o.classList.contains('rest__skip-btn') && (clearInterval(this.interval), this.loadNextExercise()),
                  o.classList.contains('exercise-block__button-prev'))
                ) {
                  if (0 === this.currentExerciseIndex) return;
                  clearInterval(this.interval), clearTimeout(this.timeout), this.loadPreviousExercise();
                }
                if (
                  (o.classList.contains('pause-modal__button-restart') &&
                    (this.closeModal(), clearTimeout(this.timeout), clearInterval(this.interval), (document.body.style.overflow = ''), this.restartExercise()),
                  o.classList.contains('exercise-block__button-pause'))
                ) {
                  clearInterval(this.interval), (document.body.style.overflow = 'hidden');
                  const t = new (class {
                    constructor(t) {
                      (this.template = new e()),
                        (this.exercise = t),
                        (this.backLayer = this.template.createElement('div', 'pause-modal__backlayer')),
                        (this.modal = this.template.createElement('div', 'pause-modal'));
                    }
                    draw() {
                      this.backLayer.append(this.modal);
                      const e = this.template.createElement('div', 'pause-modal__title', 'pause'),
                        t = this.template.createElement('div', 'pause-modal__info'),
                        i = this.template.createElement('div', 'pause-modal__exercise-name', this.exercise.title),
                        o = document.createElement('img');
                      return (o.className = 'pause-modal__exercise-gif'), (o.src = this.exercise.example), t.append(i, o), this.modal.append(e, t), this.createModalButtons(), this.backLayer;
                    }
                    createModalButtons() {
                      const e = this.template.createElement('div', 'pause-modal__buttons'),
                        t = this.template.createBtn('pause-modal__button-restart', 'Restart Exercise'),
                        i = this.template.createBtn('pause-modal__button-continue', 'Continue');
                      e.append(t, i), this.modal.append(e);
                    }
                  })(this.exerciseArray[this.currentExerciseIndex]);
                  i.prepend(t.draw());
                }
                o.classList.contains('pause-modal__button-continue') &&
                  (this.closeModal(),
                  (document.body.style.overflow = ''),
                  this.disableCounterBlock(),
                  clearInterval(this.interval),
                  clearTimeout(this.timeout),
                  this.createThreeCount(),
                  (this.timeout = setTimeout(() => {
                    const e = this.getExerciseDuration(this.exerciseArray[this.currentExerciseIndex]);
                    this.setTimeCounter(e), this.enableCounterBlock();
                  }, 3e3)));
              }),
                p(document.body);
            });
          }
          getResultMinutes(e) {
            const t = Date.now() - e;
            return new Date(t).getMinutes();
          }
          loadNextExercise() {
            (this.currentExerciseIndex = this.currentExerciseIndex + 1), this.showExercise();
          }
          loadPreviousExercise() {
            (this.currentExerciseIndex = this.currentExerciseIndex - 1), this.showExercise();
          }
          restartExercise() {
            this.showExercise();
          }
          showExercise() {
            clearInterval(this.interval), clearTimeout(this.timeout);
            const e = document.querySelector('.startTraining-page'),
              t = new se(this.exerciseArray[this.currentExerciseIndex]);
            if (!this.exerciseArray[this.currentExerciseIndex].quantity.toLowerCase().includes('x')) {
              if ((clearInterval(this.interval), t.createThreeCount(), !we.isActiveRout('startTraining'))) return;
              this.timeout = setTimeout(() => {
                const e = this.getExerciseDuration(this.exerciseArray[this.currentExerciseIndex]);
                this.setTimeCounter(e), this.enableCounterBlock();
              }, 3e3);
            }
            e && ((e.innerHTML = ''), e.append(t.draw()));
          }
          showRestModal() {
            return le(this, void 0, void 0, function* () {
              const e = document.querySelector('.startTraining-page');
              (e.innerHTML = ''), e.append(yield this.takeARest.draw(this.currentExerciseIndex, this.exerciseArray));
              const t = P();
              if (!t) return;
              const i = yield this.complex.getUserSettings(t);
              this.autoChange(Number(null == i ? void 0 : i.timeRest) || 20);
            });
          }
          showCongrats(t, i) {
            return le(this, void 0, void 0, function* () {
              const o = document.querySelector('.startTraining-page'),
                r = new (class {
                  constructor(t, i) {
                    (this.template = new e()), (this.container = this.template.createElement('div', 'congrats')), (this.counter = t), (this.time = i);
                  }
                  draw() {
                    return ne(this, void 0, void 0, function* () {
                      yield this.saveCompletedComplex();
                      const e = this.template.createElement('div', 'congrats__text', 'well done!'),
                        t = this.template.createElement('div', 'congrats__icons'),
                        i = this.template.createElement('div', 'congrats__exercises-result'),
                        o = this.template.createElement('div', 'congrats__exercises-number', `${this.counter}`),
                        r = this.template.createElement('div', 'congrats__exercises-text', 'Exercises');
                      i.append(o, r);
                      const a = this.template.createElement('div', 'congrats__minutes-result'),
                        s = this.template.createElement('div', 'congrats__minutes-number', `${this.time}`),
                        n = this.template.createElement('div', 'congrats__minutes-text', 'Minutes');
                      a.append(s, n), t.append(i, a);
                      const l = this.template.createLink('congrats__button-complete', '/exercises', 'Complete'),
                        c = new Audio();
                      return (c.src = '/rs-clone-deploy/assets/sounds/finish.mp3'), 'unmuted' === localStorage.getItem('sound') && c.play(), this.container.append(e, t, l), this.container;
                    });
                  }
                  saveCompletedComplex() {
                    return ne(this, void 0, void 0, function* () {
                      const e = new E(),
                        t = P();
                      if (!t) return;
                      const i = localStorage.getItem('complexId');
                      yield e.fulfilledComplex({ userId: t, idComplex: JSON.parse(String(i)), time: String(this.time) });
                    });
                  }
                })(t, i);
              (o.innerHTML = ''),
                o.append(yield r.draw()),
                document.querySelector('.congrats__button-complete').addEventListener('click', (e) => {
                  e.preventDefault(), document.querySelector('main') && we.navigate('exercises');
                });
            });
          }
          autoChange(e) {
            let t = 0;
            const i = document.querySelector('.rest__add-btn'),
              o = document.querySelector('.rest__skip-btn');
            i.addEventListener('click', () => {
              t -= 20;
            });
            const r = setInterval(() => {
              t < e && (t++, t === e && (this.loadNextExercise(), (t = 0), clearInterval(r)));
            }, 1e3);
            o.addEventListener('click', () => {
              (t = 0), clearInterval(r);
            });
          }
          setTimeCounter(e) {
            clearInterval(this.interval),
              (this.interval = setInterval(() => {
                const t = document.querySelector('.exercise-block__current-quantity');
                if (t) {
                  const i = t.textContent;
                  let o = null == i ? void 0 : i.slice(0, 2),
                    r = null == i ? void 0 : i.slice(3);
                  0 === Number(r)
                    ? (0 === Number(o) && (clearInterval(this.interval), (document.querySelector('.exercise-block__button-next').style.display = 'block')),
                      Number(o) > 0 && Number(o) <= 10 && ((o = '0' + (Number(o) - 1)), (r = '59')))
                    : ((r = '' + (Number(r) - 1)), Number(r) < 10 && (r = `0${r}`)),
                    (t.textContent = `${o}:${r}`);
                  const a = document.querySelector('.exercise-block__time-bar');
                  if (a) {
                    const t = a.clientWidth;
                    document.querySelector('.exercise-block__track').style.width = (t / e) * Number(r) + 'px';
                  }
                }
              }, 1e3));
          }
          getExerciseDuration(e) {
            const t = Number(e.quantity.slice(0, 2)),
              i = Number(e.quantity.slice(3));
            return 0 !== t ? 60 * t + i : i;
          }
          createThreeCount() {
            const e = this.template.createElement('div', 'counter-three');
            document.querySelector('.exercise-block__counter').append(e);
            let t = 3;
            (e.textContent = `${t}`), e.classList.add('fading');
            const i = () => {
              (t -= 1), (e.textContent = `${t}`);
            };
            e.addEventListener('animationiteration', i), e.addEventListener('animationend', i);
          }
          closeModal() {
            document.querySelector('.pause-modal__backlayer').remove();
          }
          createSettingsModal(e) {
            const t = this.template.createElement('div', 'modal-addNewComplex__addName');
            t.classList.add('settings__modal');
            const i = this.template.createElement('h2', 'modal-addNewComplex__title', 'Workout Settings'),
              o = this.createSettingsTimeBlock(
                'Rest time, seconds',
                'Enter seconds',
                '<?xml version="1.0" encoding="iso-8859-1"?>\n<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t viewBox="0 0 482.754 482.754" style="enable-background:new 0 0 482.754 482.754;" xml:space="preserve">\n<g>\n\t<g>\n\t\t<g>\n\t\t\t<path d="M416.941,216.222H338.24v-36.324v-1.768H47.651v1.768v242.157v12.108h0.702c6.441,53.953,57.875,48.431,120.376,48.431\n\t\t\t\th48.431c62.525,0,113.959,5.521,120.376-48.431h0.702v-12.108V347.64h78.701c10.05,0,18.162-7.87,18.162-17.629v-96.185\n\t\t\t\tC435.102,224.092,426.99,216.222,416.941,216.222z M410.887,310.203c0,7.313-6.756,13.222-15.135,13.222H338.24v-82.987h57.512\n\t\t\t\tc8.379,0,15.135,5.909,15.135,13.222V310.203z"/>\n\t\t</g>\n\t\t<g>\n\t\t\t<path d="M155.266,153.915l-7.555-9.468c8.136-6.514,27.993-26.686,22.327-41.554c-2.373-6.296-6.345-10.485-10.534-14.917\n\t\t\t\tc-5.158-5.449-10.994-11.599-13.851-21.939C138.46,40.004,167.713,4.02,171.055,0l9.299,7.749\n\t\t\t\tc-7.991,9.589-27.703,38.14-23.029,55.066c2.034,7.434,6.175,11.769,10.97,16.83c4.601,4.843,9.807,10.364,13.076,18.937\n\t\t\t\tC191.299,124.759,156.743,152.728,155.266,153.915z"/>\n\t\t</g>\n\t\t<g>\n\t\t\t<path d="M215.49,141.807l-7.555-9.468c4.746-3.802,17.605-16.66,14.263-25.402c-1.453-3.85-3.85-6.393-6.611-9.299\n\t\t\t\tc-3.584-3.802-7.676-8.112-9.71-15.474c-5.061-18.38,15.038-43.104,17.338-45.865l9.299,7.749\n\t\t\t\tc-7.144,8.572-17.508,25.62-14.965,34.871c1.235,4.456,3.705,7.047,6.829,10.364c3.196,3.39,6.829,7.216,9.154,13.319\n\t\t\t\tC240.554,121.103,218.081,139.749,215.49,141.807z"/>\n\t\t</g>\n\t</g>\n</g>\n',
                !1,
                'settings__rest'
              ),
              r = this.createSettingsTimeBlock(
                'Number of Workouts',
                'Enter number of workouts',
                '<?xml version="1.0" encoding="iso-8859-1"?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n\t width="45px" height="45px" viewBox="0 0 286.9 286.9" style="enable-background:new 0 0 286.9 286.9;" xml:space="preserve"\n\t>\n<g>\n\t<polygon points="248.65,76.5 181.65,76.5 210.35,0 95.65,0 38.25,153 86.05,153 38.25,286.9 \t"/>\n</g>\n</svg>\n',
                !0,
                'settings_load'
              ),
              a = this.template.createElement('div', 'settings__button-wrap'),
              s = this.template.createBtn('modal-addNewComplex__create', 'Done');
            return (
              a.append(s),
              s.classList.add('settings__done-btn'),
              s.classList.add('btn'),
              s.addEventListener('click', () =>
                le(this, void 0, void 0, function* () {
                  document.querySelector('.settingsModal').classList.add('invisible');
                  const t = document.querySelector('.settings__rest'),
                    i = document.querySelector('.settings_load');
                  t.value && (yield this.complex.updateRestTime(e, { timeRest: t.value })), i.value && (yield this.complex.updateLoad(e, { load: i.value }));
                })
              ),
              t.append(i, o, r, a),
              t
            );
          }
          createSettingsTimeBlock(e, t, i, o, r) {
            const a = this.template.createElement('div', 'settingsMiniBlock'),
              s = this.template.createElement('div', 'settings-square');
            s.innerHTML = i;
            const n = this.template.createElement('div', 'settings__text-wrapper'),
              l = this.template.createElement('div', 'settings__text-title', e),
              c = document.createElement('input');
            return (
              (c.placeholder = t),
              (c.className = 'settings__text-content'),
              c.classList.add(r),
              o
                ? c.addEventListener('input', () => {
                    (c.value = c.value.replace(/([^1-7]){1}/g, '')), c.value.length > 1 && (c.value = c.value.slice(0, 1));
                  })
                : c.addEventListener('input', () => {
                    c.value = c.value.replace(/([^0-9])/g, '');
                  }),
              n.append(l, c),
              a.append(s, n),
              a
            );
          }
          disableCounterBlock() {
            const e = document.querySelector('.exercise-block__counter');
            e && (e.style.pointerEvents = 'none');
          }
          enableCounterBlock() {
            const e = document.querySelector('.exercise-block__counter');
            e && (e.style.pointerEvents = '');
          }
        })(),
        ye = new (class {
          constructor(e, t) {
            (this.navigate = (e) => {
              window.history.pushState(null, '', this.root + e), this.action(e), (this.currentRout = e), this.startSubscribers();
            }),
              (this.routes = e),
              (this.subscribers = []),
              (this.subscribersOnce = []),
              (this.currentRout = ''),
              (this.root = '/rs-clone-deploy/'),
              (this.errorAction = t);
          }
          init() {
            const e = window.location.pathname.replace(this.root, '');
            (this.currentRout = e.replace(/\/$/, '')),
              this.action(e.replace(/\/$/, '')),
              window.addEventListener('popstate', (e) => {
                this.action(window.location.pathname.replace(this.root, ''));
              }),
              this.startSubscribers();
          }
          addSubscribers(e) {
            this.subscribers.push(e);
          }
          isActiveRout(e, t = !1) {
            return t ? e === this.currentRout : new RegExp(`^([\\w-]+\\/|)${e}(\\/[\\w-]*|)$`).test(this.currentRout);
          }
          startSubscribers() {
            this.subscribers.length &&
              this.subscribers.forEach((e) => {
                e();
              }),
              this.subscribersOnce.length &&
                this.subscribersOnce.forEach((e) => {
                  e();
                }),
              (this.subscribersOnce = []);
          }
          action(e) {
            const t = this.routes.find((t) => (-1 !== t.path.indexOf('/:') ? t.path.replace(/\/:.+$/, '') === e.replace(/\/[\w]+$/, '') : t.path === e));
            if (t) {
              const i = this.getParam(e, t.path);
              t.cb(i);
            } else this.errorAction();
          }
          getParam(e, t) {
            if (-1 === t.indexOf('/:')) return;
            const i = e.match(/\/.+$/);
            let o;
            return i && (o = i[0].replace('/', '')), o;
          }
        })(
          [
            { path: '', cb: ce.draw.bind(ce) },
            { path: 'workouts', cb: ue.draw.bind(ue) },
            { path: 'exercises', cb: pe.draw.bind(pe) },
            { path: 'profile', cb: ge.draw.bind(ge) },
            {
              path: 'workouts/:id',
              cb: (e) => {
                he.draw(e);
              },
            },
            { path: 'startTraining', cb: me.draw.bind(me) },
          ],
          de.draw
        );
      ye.addSubscribers(() => {
        new fe().draw();
      });
      const we = ye,
        fe = class {
          constructor() {
            (this.template = new e()),
              (this.mainClass = 'header'),
              (this.modalMobileMenu = new (class {
                constructor() {
                  (this.template = new e()), (this.mainClass = 'modal-mobile');
                }
                createModal(e, t, i) {
                  this.resizeWindowCloseMobModal();
                  const o = this.template.createElement('div', this.mainClass);
                  o.id = e;
                  const r = this.createBackDrop(e, i),
                    a = this.createModalInner(e, i);
                  return a.append(t), o.append(r, a), o;
                }
                resizeWindowCloseMobModal() {
                  window.addEventListener('resize', (e) => {
                    window.innerWidth > 768 && r('modal-mobile')();
                  });
                }
                createBackDrop(e, t) {
                  const i = this.template.createElement('div', `${this.mainClass}__backdrop`);
                  return t ? ((i.onclick = r(e)), i) : i;
                }
                createModalInner(e, t) {
                  const i = this.template.createElement('div', `${this.mainClass}__inner`);
                  if (t) {
                    const t = this.createIconClose(),
                      o = this.template.createBtn(`${this.mainClass}__btn-close`, t);
                    return (o.onclick = r(e)), i.append(o), i;
                  }
                  return i;
                }
                createIconClose() {
                  return this.template.createIcon(`${this.mainClass}__icon`, 'icon-close');
                }
              })());
          }
          draw() {
            const e = document.querySelector('header');
            if (!e) return;
            e.textContent = '';
            const t = !!localStorage.getItem('token');
            e.classList.add(`${this.mainClass}`);
            const i = this.createWrap();
            t
              ? (i.append(this.createListMenu(), this.createModal(), this.createBtnSignOut(), this.createBurgerBtn()), e.append(this.createLogo(), i))
              : (i.append(this.createButtons()), e.append(this.createLogo(), i));
          }
          createLogo() {
            const e = this.template.createLink('logo', '/'),
              t = this.template.createElement('span', 'logo__content', 'Women Workouts'),
              i = this.template.createElement('span', 'logo__content', 'Women Workouts'),
              o = this.template.createElement('span', 'logo__mobile', 'WW');
            return (
              e.append(t, i, o),
              e.addEventListener('click', (e) => {
                this.onclickHandlerLogo(e);
              }),
              e
            );
          }
          onclickHandlerLogo(e) {
            e.preventDefault(), we.navigate('');
          }
          createButtons() {
            const e = this.template.createElement('div', `${this.mainClass}__buttons`),
              t = a({ content: 'Sign In', className: [`${this.mainClass}__btn`], onClick: o('modal-sign-in') }),
              i = a({ content: 'Sign Up', className: [`${this.mainClass}__btn`], variant: 'second', onClick: o('modal-sign-up') });
            return e.append(t, i), e;
          }
          createBtnSignOut() {
            return a({ content: 'Sign Out', className: [`${this.mainClass}__btn`], onClick: this.exitApp.bind(this) });
          }
          createModal() {
            return this.modalMobileMenu.createModal('modal-mobile', this.createVerticalMenu(), !0);
          }
          createWrap() {
            return this.template.createElement('div', `${this.mainClass}__wrap`);
          }
          createBurgerBtn() {
            const e = this.template.createElement('button', `${this.mainClass}__mobile-btn`);
            e.addEventListener('click', () => {
              o('modal-mobile')();
            });
            const t = this.template.createIcon(`${this.mainClass}__mobile-icon`, 'icon-burger-btn');
            return e.append(t), e;
          }
          createVerticalMenu() {
            const e = this.template.createElement('div', 'vertical-menu');
            return e.append(this.createListMenu()), e;
          }
          createListMenu() {
            const e = this.template.createElement('ul', `${this.mainClass}__list`),
              t = this.createLinksMenu();
            return e.append(...t), e;
          }
          createLinksMenu() {
            const e = [];
            return (
              ['workouts', 'exercises', 'profile'].forEach((t) => {
                const i = this.template.createElement('li', `${this.mainClass}__list-item`),
                  o = this.createLink(t);
                i.append(o), e.push(i);
              }),
              e
            );
          }
          createLink(e) {
            const t = this.template.createLink(`${this.mainClass}__link`, '/', e);
            return (
              we.isActiveRout(e) && t.classList.add('active'),
              t.addEventListener('click', (t) => {
                this.onClickHandlerLinkMenu(t, e);
              }),
              t.append(this.createBorderLink()),
              t
            );
          }
          createBorderLink() {
            return this.template.createElement('span', `${this.mainClass}__link-border`);
          }
          onClickHandlerLinkMenu(e, t) {
            e.preventDefault(), we.navigate(t);
          }
          exitApp() {
            localStorage.removeItem('token'), localStorage.removeItem('userId'), this.draw(), we.navigate('');
          }
        };
      function be({ className: i, attributes: o, classNameIcon: r, validate: a }) {
        const s = new e(),
          n = 'input',
          l = s.createElement('div', n);
        t(l, i);
        const c = (function (e, t) {
            const i = document.createElement('input');
            return (
              i.classList.add(`${e}__item`),
              (function (e, t) {
                for (const i in t) e.setAttribute(i, t[i]);
              })(i, t),
              i
            );
          })(n, o),
          d = s.createElement('span', `${n}__error`);
        a &&
          (c.onchange = () => {
            !(function (e, t, i) {
              const o = e(t.value);
              o.res ? (t.classList.remove('error'), (i.textContent = '')) : (t.classList.add('error'), (i.textContent = o.message || ''));
            })(a, c, d);
          });
        const u = s.createIcon(`${n}__icon`, r);
        return l.append(c, u, d), l;
      }
      const ke = new e();
      function ve() {
        const e = be({ className: [], attributes: { type: 'password', placeholder: 'Enter your password', name: 'password', required: 'true' }, classNameIcon: 'icon-lock_outline', validate: te }),
          t = (function (e, t) {
            const i = ke.createIcon(`${e}__right-icon`, 'icon-eye-blocked'),
              o = t.querySelector(`.${e}__item`);
            return (
              i.addEventListener('click', () => {
                !(function (e, t) {
                  t &&
                    (e.classList.contains('icon-eye-blocked')
                      ? (e.classList.remove('icon-eye-blocked'), e.classList.add('icon-eye'), (t.type = 'text'))
                      : (e.classList.remove('icon-eye'), e.classList.add('icon-eye-blocked'), (t.type = 'password')));
                })(i, o);
              }),
              i
            );
          })('input', e);
        return e.append(t), e;
      }
      const Ae = new e();
      function xe(e, t) {
        return [
          (function ({ type: e, id: t, name: i, checked: o, className: r, value: a, onChange: s }) {
            const n = Ae.createInput(r, { type: e, id: t, name: i, checked: o || '', value: a });
            return s && (n.onchange = s), n;
          })(e),
          (function ({ forName: e, content: t, className: i }) {
            return Ae.createLabel(i, e, t);
          })(t),
        ];
      }
      const Ce = class {
        constructor() {
          (this.modal = new Q()),
            (this.template = new e()),
            (this.mainClass = 'slider-questions'),
            (this.mainClassSecond = 'slide-info'),
            (this.slider = (function ({ slideCount: e, htmContainer: t, prevBtn: i, nextBtn: o, pointContainer: r }) {
              let a = 0;
              const s = (e) => {
                  t && ((t.style.transform = `translateX(-${100 * e}%)`), c(), d(), n());
                },
                n = () => {
                  if (!r) return;
                  const e = r.children;
                  let t = 0;
                  for (const i of e) l(i, t), t++;
                },
                l = (e, t) => {
                  t === a ? e.classList.add('active') : e.classList.remove('active');
                },
                c = () => {
                  i && (0 === a ? i.classList.add('disabled') : i.classList.remove('disabled'));
                },
                d = () => {
                  o && (u() ? o.classList.add('disabled') : o.classList.remove('disabled'));
                },
                u = () => a + 1 >= e;
              return {
                nextSlide: () => {
                  u() || ((a += 1), s(a));
                },
                prevSlide: () => {
                  a - 1 < 0 || ((a -= 1), s(a));
                },
                goToSlide: (t) => () => {
                  a < 0 || a >= e || ((a = t), s(a));
                },
                setContainer: (e) => {
                  t = e;
                },
                setPrevBtn: (e) => {
                  (i = e), c();
                },
                setNextBtn: (e) => {
                  (o = e), d();
                },
                setPointerContainer: (e) => {
                  (r = e), n();
                },
              };
            })({ slideCount: 3 })),
            (this.authorization = new h()),
            (this.unitsWeight = 'kg'),
            (this.unitsHeight = 'cm');
        }
        draw() {
          const e = this.createSliderWrap(),
            t = this.modal.createModal('modal-questions', e, !1);
          document.body.append(t);
        }
        createSliderWrap() {
          const e = this.template.createElement('div', 'slider-wrapper'),
            t = this.createSlider(),
            i = this.sliderControl();
          return e.append(t, i), e;
        }
        sliderControl() {
          const e = 'slider-control',
            t = this.template.createElement('div', e),
            i = this.template.createElement('i', `${e}__back`);
          i.classList.add('icon-arrow_back_ios'), (i.onclick = this.slider.prevSlide), this.slider.setPrevBtn(i);
          const o = this.createSliderPoints();
          this.slider.setPointerContainer(o);
          const r = this.template.createElement('i', `${e}__forward`);
          return r.classList.add('icon-arrow_forward_ios'), (r.onclick = this.slider.nextSlide), this.slider.setNextBtn(r), t.append(i, o, r), t;
        }
        createSlider() {
          const e = this.template.createElement('div', this.mainClass),
            t = this.createSliderForm();
          return e.append(t), e;
        }
        createSliderForm() {
          const e = this.template.createForm(`${this.mainClass}__form`, '/'),
            t = this.createSliderList();
          return (
            e.append(t),
            e.addEventListener('submit', (t) => {
              this.onSubmitHandlerForm(t, e);
            }),
            e
          );
        }
        formValidation(e) {
          var t, i, o;
          const r = null === (t = e.get('units')) || void 0 === t ? void 0 : t.toString().split('-'),
            a = null === (i = e.get('height')) || void 0 === i ? void 0 : i.toString(),
            s = null === (o = e.get('weight')) || void 0 === o ? void 0 : o.toString();
          if (!a || !s || !r) return !1;
          const n = ie(a, r[1]).res;
          return !(!oe(s, r[0]).res || !n);
        }
        onSubmitHandlerForm(e, t) {
          e.preventDefault();
          const i = new FormData(t);
          if (!this.formValidation(i)) return;
          const o = {};
          ['goal', 'load', 'weight', 'height', 'units'].forEach((e) => {
            const t = i.get(e);
            t && (o[e] = t.toString());
          });
          const r = P();
          r && ((o.userId = r), this.sendInfoUser(o));
        }
        createSliderList() {
          const e = this.template.createElement('div', `${this.mainClass}__list`);
          this.slider.setContainer(e),
            [
              { title: 'Before we start', question: 'What is your goal?', name: 'goal', nameBtn: ['Keep Fit', 'Lose Weight', 'Get Stronger'], values: ['keep-fit', 'lose-weight', 'get-stronger'] },
              { title: 'Load', question: 'What load would you like?', name: 'load', nameBtn: ['Low', 'Middle', 'High'], values: ['1', '3', '5'] },
            ].forEach((t) => {
              const i = this.createSlide(t);
              e.append(i);
            });
          const t = this.createSlideAboutMe();
          return e.append(t), e;
        }
        createSlide({ title: e, question: t, name: i, nameBtn: o, values: r }) {
          const a = this.template.createElement('div', `${this.mainClass}__slide`),
            s = this.createSlideContent(e, t),
            n = this.createBtnWrap(i, o, r),
            l = this.template.createElement('span', `${this.mainClass}__message`);
          return a.append(...s, n, l), a;
        }
        createSlideContent(e, t) {
          return [this.template.createElement('div', `${this.mainClass}__title`, e), this.template.createElement('span', `${this.mainClass}__question`, t)];
        }
        createSlideAboutMe() {
          const e = this.template.createElement('div', `${this.mainClass}__slide`),
            t = this.template.createElement('div', `${this.mainClass}__title`, 'Tell us about yourself'),
            i = this.createSlideAboutMeInputWrap(),
            o = this.createSlideAboutMeBtnBlock(),
            r = this.template.createElement('span', `${this.mainClass}__message-form`),
            a = this.createBtnSubmitForm();
          return e.append(t, i, o, r, a), e;
        }
        createSlideAboutMeInputWrap() {
          const e = this.template.createElement('div', `${this.mainClassSecond}__input-wrap`),
            t = this.createInputsBlock();
          return e.append(...t), e;
        }
        createInputsBlock() {
          return [
            X({
              mainClass: this.mainClassSecond,
              className: [],
              attributes: { id: 'weight', name: 'weight', type: 'number', placeholder: 'Enter weight', required: 'true' },
              imgSrc: '/rs-clone-deploy/assets/svg/scales.svg',
              imgAlt: 'scales-img',
              validate: oe,
              units: this.unitsWeight,
              classNameUnits: `${this.mainClass}__units-weight`,
            }),
            X({
              mainClass: this.mainClassSecond,
              className: [],
              attributes: { id: 'height', name: 'height', type: 'number', placeholder: 'Enter height', required: 'true' },
              imgSrc: '/rs-clone-deploy/assets/svg/height.svg',
              imgAlt: 'height-img',
              validate: ie,
              units: this.unitsHeight,
              classNameUnits: `${this.mainClass}__units-height`,
            }),
          ];
        }
        onChangeHandlerBtnRadio(e) {
          const t = e.currentTarget.value,
            i = document.querySelector('.slider-questions__units-weight'),
            o = document.querySelector('.slider-questions__units-height');
          i && o && 'Lbs-inches' === t && ((i.textContent = 'Lbs'), (o.textContent = 'inches')), i && o && 'kg-cm' === t && ((i.textContent = 'kg'), (o.textContent = 'cm'));
          const r = document.querySelector('.slide-info__input-wrap');
          if (r) {
            (this.unitsHeight = 'cm' === this.unitsHeight ? 'inches' : 'cm'), (this.unitsWeight = 'kg' === this.unitsWeight ? 'Lbs' : 'kg'), (r.textContent = '');
            const e = this.createInputsBlock();
            r.append(...e);
          }
        }
        createSlideAboutMeBtnBlock() {
          const e = this.template.createElement('div', `${this.mainClassSecond}__btn-wrap`),
            t = this.template.createElement('span', `${this.mainClassSecond}__message`),
            i = xe(
              { type: 'radio', id: 'kg-cm', name: 'units', className: `${this.mainClassSecond}__btn`, value: 'kg-cm', checked: 'checked', onChange: this.onChangeHandlerBtnRadio.bind(this) },
              { forName: 'kg-cm', content: 'kg/cm', className: `${this.mainClassSecond}__btn-title` }
            );
          e.append(...i, t);
          const o = this.template.createElement('div', `${this.mainClassSecond}__btn-wrap`),
            r = this.template.createElement('span', `${this.mainClassSecond}__message`),
            a = xe(
              { type: 'radio', id: 'Lbs-inches', name: 'units', className: `${this.mainClassSecond}__btn`, value: 'Lbs-inches', onChange: this.onChangeHandlerBtnRadio.bind(this) },
              { forName: 'Lbs-inches', content: 'Lbs/inches', className: `${this.mainClassSecond}__btn-title` }
            );
          o.append(...a, r);
          const s = this.template.createElement('div', `${this.mainClassSecond}__buttons`);
          return s.append(e, o), s;
        }
        createBtnWrap(e, t, i) {
          const o = this.template.createElement('div', `${this.mainClass}__buttons`);
          return (
            i.forEach((i, r) => {
              const a = xe(
                { type: 'radio', value: i, id: e + r, name: e, className: `${this.mainClass}__input`, checked: 1 === r ? 'checked' : '' },
                { forName: e + r, content: t[r], className: `${this.mainClass}__label` }
              );
              o.append(...a);
            }),
            o
          );
        }
        createBtnSubmitForm() {
          return a({ content: 'Submit', className: [`${this.mainClass}__btn-submit`, 'btn'], type: 'submit' });
        }
        createSliderPoints() {
          var e;
          const t = 'slider-points',
            i = this.template.createElement('div', `${t}`);
          for (let o = 0; o < 3; o++) {
            const r = this.createSliderPointsElements(t);
            (r.onclick = null === (e = this.slider) || void 0 === e ? void 0 : e.goToSlide(o)), i.append(r);
          }
          return i;
        }
        createSliderPointsElements(e) {
          return this.template.createElement('div', `${e}__item`);
        }
        sendInfoUser(e) {
          return (
            (t = this),
            (i = void 0),
            (a = function* () {
              const t = yield this.authorization.createUserInfo(e);
              if (t)
                if (t.errors && t.message) this.ErrorHandler(t);
                else {
                  const e = document.querySelector(`.${this.mainClass}__message-form`);
                  e && ((e.textContent = ''), e.classList.remove('error')), r('modal-questions')();
                }
            }),
            new ((o = void 0) || (o = Promise))(function (e, r) {
              function s(e) {
                try {
                  l(a.next(e));
                } catch (e) {
                  r(e);
                }
              }
              function n(e) {
                try {
                  l(a.throw(e));
                } catch (e) {
                  r(e);
                }
              }
              function l(t) {
                var i;
                t.done
                  ? e(t.value)
                  : ((i = t.value),
                    i instanceof o
                      ? i
                      : new o(function (e) {
                          e(i);
                        })).then(s, n);
              }
              l((a = a.apply(t, i || [])).next());
            })
          );
          var t, i, o, a;
        }
        ErrorHandler(e) {
          const t = document.querySelectorAll(`${this.mainClassSecond}__input`);
          Array.prototype.slice.call(t).forEach((e) => {
            e.classList.add('error');
          });
          const i = document.querySelector(`.${this.mainClass}__message-form`);
          i && ((i.textContent = e.message), i.classList.add('error'));
        }
      };
      new (class {
        constructor() {
          (this.template = new e()), (this.mainClass = 'preloader');
        }
        draw() {
          const e = this.createPreloader();
          document.body.classList.add('loaded'), document.body.prepend(e);
        }
        createPreloader() {
          const e = this.template.createElement('div', `${this.mainClass}`),
            t = this.createRow();
          return e.append(t), e;
        }
        createRow() {
          const e = this.template.createElement('div', `${this.mainClass}__row`);
          return e.append(this.createItem(), this.createItem()), e;
        }
        createItem() {
          return this.template.createElement('div', `${this.mainClass}__item`);
        }
      })().draw(),
        new fe().draw(),
        new (class {
          constructor() {
            (this.template = new e()), (this.footer = this.template.createElement('footer', 'footer'));
          }
          createGitHubs() {
            const e = this.template.createElement('div', 'footer__hubs'),
              t = this.template.createLink('footer__hubs-link', 'https://github.com/oolenkazolot');
            (t.target = '_blank'), (t.textContent = 'oolenkazolot');
            const i = this.template.createLink('footer__hubs-link', 'https://github.com/alisatonks');
            (i.target = '_blank'), (i.textContent = 'alisatonks');
            const o = this.template.createLink('footer__hubs-link', 'https://github.com/svetik-k');
            (o.target = '_blank'), (o.textContent = 'svetik-k'), e.append(t, i, o), this.footer.append(e);
          }
          draw() {
            (this.footer.textContent = ''), this.createGitHubs();
            const e = this.template.createElement('div', 'footer__year', '2023');
            this.footer.append(e);
            const t = this.template.createLink('footer__school', 'https://rs.school/js/');
            return (t.target = '_blank'), this.footer.append(t), document.body.append(this.footer), this.footer;
          }
        })().draw(),
        new (class {
          constructor() {
            (this.modal = new Q()), (this.template = new e()), (this.mainClass = 'login-form'), (this.authorization = new h()), (this.header = new fe());
          }
          draw() {
            const e = this.createLoginForm(),
              t = this.modal.createModal('modal-sign-in', e, !0);
            document.body.append(t);
          }
          createLoginForm() {
            const e = this.template.createElement('div', this.mainClass),
              t = this.createTitle(),
              i = this.createForm(),
              o = this.createQuestion();
            return e.append(t, i, o), e;
          }
          createTitle() {
            return this.template.createElement('div', `${this.mainClass}__title`, 'Log in');
          }
          createForm() {
            const e = this.template.createForm(`${this.mainClass}__form`, '/'),
              t = be({ className: [], attributes: { type: 'text', placeholder: 'Enter your email', name: 'email', required: 'true' }, classNameIcon: 'icon-mail_outline', validate: ee }),
              i = ve(),
              o = this.createBtnWrap(),
              r = this.createMessageForm();
            return (
              e.addEventListener('submit', (t) => {
                this.onSubmitHandlerForm(t, e, r);
              }),
              e.append(t, i, r, o),
              e
            );
          }
          onSubmitHandlerForm(e, t, i) {
            var o, r;
            e.preventDefault();
            const a = new FormData(t),
              s = null === (o = a.get('email')) || void 0 === o ? void 0 : o.toString(),
              n = null === (r = a.get('password')) || void 0 === r ? void 0 : r.toString();
            s && n && this.sendAuth({ email: s, password: n }, i);
          }
          createMessageForm() {
            return this.template.createElement('span', `${this.mainClass}__message`);
          }
          createBtnWrap() {
            const e = 'btn-wrap',
              t = this.template.createElement('div', e),
              i = a({ content: 'Sign In', className: [`${e}__btn`], type: 'submit' });
            return t.append(i), t;
          }
          sendAuth(e, t) {
            return (
              (i = this),
              (o = void 0),
              (s = function* () {
                const i = yield this.authorization.authorization(e);
                i &&
                  (i.token && i.userId && (H({ token: i.token, userId: i.userId }), (t.textContent = ''), t.classList.remove('error'), this.header.draw(), r('modal-sign-in')()),
                  i.message && this.ErrorHandler(i, t));
              }),
              new ((a = void 0) || (a = Promise))(function (e, t) {
                function r(e) {
                  try {
                    l(s.next(e));
                  } catch (e) {
                    t(e);
                  }
                }
                function n(e) {
                  try {
                    l(s.throw(e));
                  } catch (e) {
                    t(e);
                  }
                }
                function l(t) {
                  var i;
                  t.done
                    ? e(t.value)
                    : ((i = t.value),
                      i instanceof a
                        ? i
                        : new a(function (e) {
                            e(i);
                          })).then(r, n);
                }
                l((s = s.apply(i, o || [])).next());
              })
            );
            var i, o, a, s;
          }
          ErrorHandler(e, t) {
            const i = document.querySelectorAll('.login-form .input__item');
            Array.prototype.slice.call(i).forEach((e) => {
              e.classList.add('error');
            }),
              t.classList.add('error'),
              e.message && (t.textContent = e.message);
          }
          createQuestion() {
            const e = this.template.createElement('div', `${this.mainClass}__question`),
              t = this.template.createElement('span', `${this.mainClass}__text`, "Don't have an account?"),
              i = this.template.createLink(`${this.mainClass}__link`, '/', 'Sing up');
            return (i.onclick = o('modal-sign-up', 'modal-sign-in')), e.append(t, i), e;
          }
        })().draw(),
        new (class {
          constructor() {
            (this.modal = new Q()), (this.template = new e()), (this.mainClass = 'registration-form'), (this.authorization = new h()), (this.header = new fe()), (this.modalQuestions = new Ce());
          }
          draw() {
            const e = this.createRegistrationForm(),
              t = this.modal.createModal('modal-sign-up', e, !0);
            document.body.append(t);
          }
          createRegistrationForm() {
            const e = this.template.createElement('div', this.mainClass),
              t = this.createTitle(),
              i = this.createForm(),
              o = this.createQuestion();
            return e.append(t, i, o), e;
          }
          createTitle() {
            return this.template.createElement('div', `${this.mainClass}__title`, 'Welcome to Women Workouts');
          }
          createForm() {
            const e = this.template.createForm(`${this.mainClass}__form`, '/'),
              t = be({ className: [], attributes: { type: 'text', placeholder: 'Enter your email', name: 'email', required: 'true' }, classNameIcon: 'icon-mail_outline', validate: ee }),
              i = ve(),
              o = this.createBtnWrap(),
              r = this.createMessageEl();
            return (
              e.addEventListener('submit', (t) => {
                var i, o;
                t.preventDefault();
                const a = new FormData(e),
                  s = null === (i = a.get('email')) || void 0 === i ? void 0 : i.toString(),
                  n = null === (o = a.get('password')) || void 0 === o ? void 0 : o.toString();
                s && n && this.sendRegistration({ email: s, password: n }, r);
              }),
              e.append(t, i, r, o),
              e
            );
          }
          createMessageEl() {
            return this.template.createElement('span', `${this.mainClass}__message`);
          }
          createBtnWrap() {
            const e = 'btn-wrap',
              t = this.template.createElement('div', e),
              i = a({ content: 'Sign Up', className: [`${e}__btn`], type: 'submit' });
            return t.append(i), t;
          }
          sendRegistration(e, t) {
            return (
              (i = this),
              (r = void 0),
              (s = function* () {
                const i = yield this.authorization.registration(e);
                i &&
                  (i.token && i.userId && (H({ token: i.token, userId: i.userId }), (t.textContent = ''), t.classList.remove('error'), this.header.draw(), o('modal-questions', 'modal-sign-up')()),
                  i.message && this.ErrorHandler(i, t));
              }),
              new ((a = void 0) || (a = Promise))(function (e, t) {
                function o(e) {
                  try {
                    l(s.next(e));
                  } catch (e) {
                    t(e);
                  }
                }
                function n(e) {
                  try {
                    l(s.throw(e));
                  } catch (e) {
                    t(e);
                  }
                }
                function l(t) {
                  var i;
                  t.done
                    ? e(t.value)
                    : ((i = t.value),
                      i instanceof a
                        ? i
                        : new a(function (e) {
                            e(i);
                          })).then(o, n);
                }
                l((s = s.apply(i, r || [])).next());
              })
            );
            var i, r, a, s;
          }
          ErrorHandler(e, t) {
            const i = document.querySelectorAll('.registration-form .input__item');
            Array.prototype.slice.call(i).forEach((e) => {
              e.classList.add('error');
            }),
              t.classList.add('error'),
              e.message && (t.textContent = e.message);
          }
          createQuestion() {
            const e = this.template.createElement('div', `${this.mainClass}__question`),
              t = this.template.createElement('span', `${this.mainClass}__text`, 'Already have an account?'),
              i = this.template.createLink(`${this.mainClass}__link`, '/', 'Sing in');
            return (i.onclick = o('modal-sign-in', 'modal-sign-up')), e.append(t, i), e;
          }
        })().draw(),
        new Ce().draw(),
        we.init();
    })();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dnBDLEtBQUtvZixTQUFTNWpCLGNBQ2pELE9BQ0EsR0FBR3dFLEtBQUtxYyxrQkFDUiw0QkFFSXl0QixFQUFnQzlwQyxLQUFLb2YsU0FBU3RFLFdBQ2xELEdBQUc5YSxLQUFLcWMsa0JBQ1IsSUFDQSxXQU1GLE9BSEF5dEIsRUFBVzVzQixRQUFVUixFQUFZLGdCQUFpQixpQkFFbEQwcEIsRUFBU2xyQixPQUFPcXVCLEVBQWlCTyxHQUMxQjFELENBQ1QsSUgzSlU5bUIsUUFFNEIsSUFBSSxJQUM3QkEsT0FFZixTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9ub2RlX21vZHVsZXMvYWlyLWRhdGVwaWNrZXIvYWlyLWRhdGVwaWNrZXIuanMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9ub2RlX21vZHVsZXMvYWlyLWRhdGVwaWNrZXIvYWlyLWRhdGVwaWNrZXIuY3NzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy90ZW1wbGF0ZXMvdGVtcGxhdGUudHMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvdXRpbHMvY29tcG9uZW50LXV0aWxzLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2NvbXBvbmVudHMvbW9kYWxNb2JpbGVNZW51LnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2NvbXBvbmVudHMvQnV0dG9uLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2Fzc2V0cy92aWRlby92MTEubXA0Iiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2Fzc2V0cy92aWRlby92Mi5tcDQiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvYXNzZXRzL3ZpZGVvL3YzLm1wNCIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9hc3NldHMvdmlkZW8vdjQubXA0Iiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2Fzc2V0cy9pbWFnZXMvcGljMS5qcGciLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvdXRpbHMvYXV0aC5yb3V0ZXMudHMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvdXRpbHMvcHJlbG9hZGVyLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL3BhZ2VzL21haW4udHMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvdXRpbHMvd29ya291dC1wbGFucy1lbi50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9hc3NldHMvcG5nL2FiczMucG5nIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2Fzc2V0cy9wbmcvYnV0dC5wbmciLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvYXNzZXRzL3BuZy90aGlnaC5wbmciLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvYXNzZXRzL3BuZy93aG9sZV9ib2R5Mi5wbmciLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvYXNzZXRzL2ltYWdlcy9tb3JuaW5nX2V2ZW5pbmcuanBnIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2Fzc2V0cy9pbWFnZXMvbW9ybmluZ19ldmVuaW5nMi5qcGciLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvY29tcG9uZW50cy9zdmcudHMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZU1vZGFsLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL3V0aWxzL9GBb21wbGV4LnJvdXRlcy50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy91dGlscy90cmFpbmluZ3MtZGF0YS1lbi50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9wYWdlcy9zaW5nbGVUcmFpbmluZy50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL3NsaWRlci50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL2V4ZXJjaXNlRGV0YWlscy50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL2V4ZXJjaXNlLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL3V0aWxzL2F1dGgudHMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvY29tcG9uZW50cy9hZGROZXdDb21wbGV4LnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2NvbXBvbmVudHMvd29ya291dEJsb2NrLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vbm9kZV9tb2R1bGVzL2Fpci1kYXRlcGlja2VyL2luZGV4LmVzLmpzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vbm9kZV9tb2R1bGVzL2Fpci1kYXRlcGlja2VyL2Fpci1kYXRlcGlja2VyLmNzcz83Yzc2Iiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2NvbXBvbmVudHMvcHJvZ3Jlc3MudHMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvY29tcG9uZW50cy9tb2RhbC50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL0lucHV0SW1nLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL3V0aWxzL3ZhbGlkYXRlLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2NvbXBvbmVudHMvdGFrZWFSZXN0LnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2NvbXBvbmVudHMvZXhlcmNpc2VCbG9jay50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9wYWdlcy9zdGFydFRyYWluaW5nLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2NvbXBvbmVudHMvcm91dGVyQ29tcG9uZW50LnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL3BhZ2VzL2Vycm9yLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL3BhZ2VzL3RyYWluaW5ncy50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9wYWdlcy9leGVyY2lzZXMudHMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvcGFnZXMvcHJvZmlsZS50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2NvbXBvbmVudHMvaW5mby50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL21vZGFsRWRpdFByb2ZpbGUudHMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvY29tcG9uZW50cy9wYXVzZU1vZGFsLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2NvbXBvbmVudHMvY29uZ3JhdHMudHMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvdXRpbHMvUm91dGluZy50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL2hlYWRlci50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL0lucHV0SWNvbi50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL1Bhc3N3b3JkSW5wdXQudHMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvY29tcG9uZW50cy9tb2RhbFNpZ25Jbi50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL0J1dHRvblJhZGlvLnRzIiwid2VicGFjazovL3dvbWVuLXdvcmtvdXRzLWNsb25lLy4vc3JjL2NvbXBvbmVudHMvbW9kYWxRdWVzdGlvbnMudHMiLCJ3ZWJwYWNrOi8vd29tZW4td29ya291dHMtY2xvbmUvLi9zcmMvdXRpbHMvZm9ybVNsaWRlci50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL3ByZWxvYWRlci50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL2Zvb3Rlci50cyIsIndlYnBhY2s6Ly93b21lbi13b3Jrb3V0cy1jbG9uZS8uL3NyYy9jb21wb25lbnRzL21vZGFsU2lnblVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuQWlyRGF0ZXBpY2tlcj10KCk6ZS5BaXJEYXRlcGlja2VyPXQoKX0odGhpcywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgZT17ZDpmdW5jdGlvbih0LGkpe2Zvcih2YXIgcyBpbiBpKWUubyhpLHMpJiYhZS5vKHQscykmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHMse2VudW1lcmFibGU6ITAsZ2V0Omlbc119KX0sbzpmdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX19LHQ9e307ZS5kKHQse2RlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gS319KTt2YXIgaT17ZGF5czpcImRheXNcIixtb250aHM6XCJtb250aHNcIix5ZWFyczpcInllYXJzXCIsZGF5OlwiZGF5XCIsbW9udGg6XCJtb250aFwiLHllYXI6XCJ5ZWFyXCIsZXZlbnRDaGFuZ2VWaWV3RGF0ZTpcImNoYW5nZVZpZXdEYXRlXCIsZXZlbnRDaGFuZ2VDdXJyZW50VmlldzpcImNoYW5nZUN1cnJlbnRWaWV3XCIsZXZlbnRDaGFuZ2VGb2N1c0RhdGU6XCJjaGFuZ2VGb2N1c0RhdGVcIixldmVudENoYW5nZVNlbGVjdGVkRGF0ZTpcImNoYW5nZVNlbGVjdGVkRGF0ZVwiLGV2ZW50Q2hhbmdlVGltZTpcImNoYW5nZVRpbWVcIixldmVudENoYW5nZUxhc3RTZWxlY3RlZERhdGU6XCJjaGFuZ2VMYXN0U2VsZWN0ZWREYXRlXCIsYWN0aW9uU2VsZWN0RGF0ZTpcInNlbGVjdERhdGVcIixhY3Rpb25VbnNlbGVjdERhdGU6XCJ1bnNlbGVjdERhdGVcIixjc3NDbGFzc1dlZWtlbmQ6XCItd2Vla2VuZC1cIn0scz17Y2xhc3NlczpcIlwiLGlubGluZTohMSxsb2NhbGU6e2RheXM6W1wi0JLQvtGB0LrRgNC10YHQtdC90YzQtVwiLFwi0J/QvtC90LXQtNC10LvRjNC90LjQulwiLFwi0JLRgtC+0YDQvdC40LpcIixcItCh0YDQtdC00LBcIixcItCn0LXRgtCy0LXRgNCzXCIsXCLQn9GP0YLQvdC40YbQsFwiLFwi0KHRg9Cx0LHQvtGC0LBcIl0sZGF5c1Nob3J0OltcItCS0L7RgVwiLFwi0J/QvtC9XCIsXCLQktGC0L5cIixcItCh0YDQtVwiLFwi0KfQtdGCXCIsXCLQn9GP0YJcIixcItCh0YPQsVwiXSxkYXlzTWluOltcItCS0YFcIixcItCf0L1cIixcItCS0YJcIixcItCh0YBcIixcItCn0YJcIixcItCf0YJcIixcItCh0LFcIl0sbW9udGhzOltcItCv0L3QstCw0YDRjFwiLFwi0KTQtdCy0YDQsNC70YxcIixcItCc0LDRgNGCXCIsXCLQkNC/0YDQtdC70YxcIixcItCc0LDQuVwiLFwi0JjRjtC90YxcIixcItCY0Y7Qu9GMXCIsXCLQkNCy0LPRg9GB0YJcIixcItCh0LXQvdGC0Y/QsdGA0YxcIixcItCe0LrRgtGP0LHRgNGMXCIsXCLQndC+0Y/QsdGA0YxcIixcItCU0LXQutCw0LHRgNGMXCJdLG1vbnRoc1Nob3J0OltcItCv0L3QslwiLFwi0KTQtdCyXCIsXCLQnNCw0YBcIixcItCQ0L/RgFwiLFwi0JzQsNC5XCIsXCLQmNGO0L1cIixcItCY0Y7Qu1wiLFwi0JDQstCzXCIsXCLQodC10L1cIixcItCe0LrRglwiLFwi0J3QvtGPXCIsXCLQlNC10LpcIl0sdG9kYXk6XCLQodC10LPQvtC00L3Rj1wiLGNsZWFyOlwi0J7Rh9C40YHRgtC40YLRjFwiLGRhdGVGb3JtYXQ6XCJkZC5NTS55eXl5XCIsdGltZUZvcm1hdDpcIkhIOm1tXCIsZmlyc3REYXk6MX0sc3RhcnREYXRlOm5ldyBEYXRlLGZpcnN0RGF5OlwiXCIsd2Vla2VuZHM6WzYsMF0sZGF0ZUZvcm1hdDpcIlwiLGFsdEZpZWxkOlwiXCIsYWx0RmllbGREYXRlRm9ybWF0OlwiVFwiLHRvZ2dsZVNlbGVjdGVkOiEwLGtleWJvYXJkTmF2OiEwLHNlbGVjdGVkRGF0ZXM6ITEsY29udGFpbmVyOlwiXCIsaXNNb2JpbGU6ITEsdmlzaWJsZTohMSxwb3NpdGlvbjpcImJvdHRvbSBsZWZ0XCIsb2Zmc2V0OjEyLHZpZXc6aS5kYXlzLG1pblZpZXc6aS5kYXlzLHNob3dPdGhlck1vbnRoczohMCxzZWxlY3RPdGhlck1vbnRoczohMCxtb3ZlVG9PdGhlck1vbnRoc09uU2VsZWN0OiEwLHNob3dPdGhlclllYXJzOiEwLHNlbGVjdE90aGVyWWVhcnM6ITAsbW92ZVRvT3RoZXJZZWFyc09uU2VsZWN0OiEwLG1pbkRhdGU6XCJcIixtYXhEYXRlOlwiXCIsZGlzYWJsZU5hdldoZW5PdXRPZlJhbmdlOiEwLG11bHRpcGxlRGF0ZXM6ITEsbXVsdGlwbGVEYXRlc1NlcGFyYXRvcjpcIiwgXCIscmFuZ2U6ITEsZHluYW1pY1JhbmdlOiEwLGJ1dHRvbnM6ITEsbW9udGhzRmllbGQ6XCJtb250aHNTaG9ydFwiLHNob3dFdmVudDpcImZvY3VzXCIsYXV0b0Nsb3NlOiExLHByZXZIdG1sOic8c3ZnPjxwYXRoIGQ9XCJNIDE3LDEyIGwgLTUsNSBsIDUsNVwiPjwvcGF0aD48L3N2Zz4nLG5leHRIdG1sOic8c3ZnPjxwYXRoIGQ9XCJNIDE0LDEyIGwgNSw1IGwgLTUsNVwiPjwvcGF0aD48L3N2Zz4nLG5hdlRpdGxlczp7ZGF5czpcIk1NTU0sIDxpPnl5eXk8L2k+XCIsbW9udGhzOlwieXl5eVwiLHllYXJzOlwieXl5eTEgLSB5eXl5MlwifSx0aW1lcGlja2VyOiExLG9ubHlUaW1lcGlja2VyOiExLGRhdGVUaW1lU2VwYXJhdG9yOlwiIFwiLHRpbWVGb3JtYXQ6XCJcIixtaW5Ib3VyczowLG1heEhvdXJzOjI0LG1pbk1pbnV0ZXM6MCxtYXhNaW51dGVzOjU5LGhvdXJzU3RlcDoxLG1pbnV0ZXNTdGVwOjEsb25TZWxlY3Q6ITEsb25DaGFuZ2VWaWV3RGF0ZTohMSxvbkNoYW5nZVZpZXc6ITEsb25SZW5kZXJDZWxsOiExLG9uU2hvdzohMSxvbkhpZGU6ITEsb25DbGlja0RheU5hbWU6ITF9O2Z1bmN0aW9uIGEoZSl7bGV0IHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmRvY3VtZW50O3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP3QucXVlcnlTZWxlY3RvcihlKTplfWZ1bmN0aW9uIG4oKXtsZXR7dGFnTmFtZTplPVwiZGl2XCIsY2xhc3NOYW1lOnQ9XCJcIixpbm5lckh0bWw6aT1cIlwiLGlkOnM9XCJcIixhdHRyczphPXt9fT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpO3JldHVybiB0JiZuLmNsYXNzTGlzdC5hZGQoLi4udC5zcGxpdChcIiBcIikpLHMmJihuLmlkPXMpLGkmJihuLmlubmVySFRNTD1pKSxhJiZyKG4sYSksbn1mdW5jdGlvbiByKGUsdCl7Zm9yKGxldFtpLHNdb2YgT2JqZWN0LmVudHJpZXModCkpdm9pZCAwIT09cyYmZS5zZXRBdHRyaWJ1dGUoaSxzKTtyZXR1cm4gZX1mdW5jdGlvbiBoKGUpe3JldHVybiBuZXcgRGF0ZShlLmdldEZ1bGxZZWFyKCksZS5nZXRNb250aCgpKzEsMCkuZ2V0RGF0ZSgpfWZ1bmN0aW9uIG8oZSl7bGV0IHQ9ZS5nZXRIb3VycygpLHtob3VyczppLGRheVBlcmlvZDpzfT1sKHQpO3JldHVybnt5ZWFyOmUuZ2V0RnVsbFllYXIoKSxtb250aDplLmdldE1vbnRoKCksZnVsbE1vbnRoOmUuZ2V0TW9udGgoKSsxPDEwP1wiMFwiKyhlLmdldE1vbnRoKCkrMSk6ZS5nZXRNb250aCgpKzEsZGF0ZTplLmdldERhdGUoKSxmdWxsRGF0ZTplLmdldERhdGUoKTwxMD9cIjBcIitlLmdldERhdGUoKTplLmdldERhdGUoKSxkYXk6ZS5nZXREYXkoKSxob3Vyczp0LGZ1bGxIb3VyczpkKHQpLGhvdXJzMTI6aSxkYXlQZXJpb2Q6cyxmdWxsSG91cnMxMjpkKGkpLG1pbnV0ZXM6ZS5nZXRNaW51dGVzKCksZnVsbE1pbnV0ZXM6ZS5nZXRNaW51dGVzKCk8MTA/XCIwXCIrZS5nZXRNaW51dGVzKCk6ZS5nZXRNaW51dGVzKCl9fWZ1bmN0aW9uIGwoZSl7cmV0dXJue2RheVBlcmlvZDplPjExP1wicG1cIjpcImFtXCIsaG91cnM6ZSUxMj09MD8xMjplJTEyfX1mdW5jdGlvbiBkKGUpe3JldHVybiBlPDEwP1wiMFwiK2U6ZX1mdW5jdGlvbiBjKGUpe2xldCB0PTEwKk1hdGguZmxvb3IoZS5nZXRGdWxsWWVhcigpLzEwKTtyZXR1cm5bdCx0KzldfWZ1bmN0aW9uIHUoKXtsZXQgZT1bXTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxpPW5ldyBBcnJheSh0KSxzPTA7czx0O3MrKylpW3NdPWFyZ3VtZW50c1tzXTtyZXR1cm4gaS5mb3JFYWNoKCh0PT57aWYoXCJvYmplY3RcIj09dHlwZW9mIHQpZm9yKGxldCBpIGluIHQpdFtpXSYmZS5wdXNoKGkpO2Vsc2UgdCYmZS5wdXNoKHQpfSkpLGUuam9pbihcIiBcIil9ZnVuY3Rpb24gcChlLHQpe2xldCBzPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTppLmRheXM7aWYoIWV8fCF0KXJldHVybiExO2xldCBhPW8oZSksbj1vKHQpLHI9e1tpLmRheXNdOmEuZGF0ZT09PW4uZGF0ZSYmYS5tb250aD09PW4ubW9udGgmJmEueWVhcj09PW4ueWVhcixbaS5tb250aHNdOmEubW9udGg9PT1uLm1vbnRoJiZhLnllYXI9PT1uLnllYXIsW2kueWVhcnNdOmEueWVhcj09PW4ueWVhcn07cmV0dXJuIHJbc119ZnVuY3Rpb24gbShlLHQsaSl7bGV0IHM9ZyhlLCExKS5nZXRUaW1lKCksYT1nKHQsITEpLmdldFRpbWUoKTtyZXR1cm4gaT9zPj1hOnM+YX1mdW5jdGlvbiB2KGUsdCl7cmV0dXJuIW0oZSx0LCEwKX1mdW5jdGlvbiBnKGUpe2xldCB0PSEoYXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0pfHxhcmd1bWVudHNbMV0saT1uZXcgRGF0ZShlLmdldFRpbWUoKSk7cmV0dXJuXCJib29sZWFuXCIhPXR5cGVvZiB0fHx0fHxEKGkpLGl9ZnVuY3Rpb24gRChlKXtyZXR1cm4gZS5zZXRIb3VycygwLDAsMCwwKSxlfWZ1bmN0aW9uIHkoZSx0LGkpe2UubGVuZ3RoP2UuZm9yRWFjaCgoZT0+e2UuYWRkRXZlbnRMaXN0ZW5lcih0LGkpfSkpOmUuYWRkRXZlbnRMaXN0ZW5lcih0LGkpfWZ1bmN0aW9uIGYoZSx0KXtyZXR1cm4hKCFlfHxlPT09ZG9jdW1lbnR8fGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSYmKGUubWF0Y2hlcyh0KT9lOmYoZS5wYXJlbnROb2RlLHQpKX1mdW5jdGlvbiB3KGUsdCxpKXtyZXR1cm4gZT5pP2k6ZTx0P3Q6ZX1mdW5jdGlvbiBiKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KHQ+MT90LTE6MCkscz0xO3M8dDtzKyspaVtzLTFdPWFyZ3VtZW50c1tzXTtyZXR1cm4gaS5maWx0ZXIoKGU9PmUpKS5mb3JFYWNoKCh0PT57Zm9yKGxldFtpLHNdb2YgT2JqZWN0LmVudHJpZXModCkpaWYodm9pZCAwIT09cyYmXCJbb2JqZWN0IE9iamVjdF1cIj09PXMudG9TdHJpbmcoKSl7bGV0IHQ9dm9pZCAwIT09ZVtpXT9lW2ldLnRvU3RyaW5nKCk6dm9pZCAwLGE9cy50b1N0cmluZygpLG49QXJyYXkuaXNBcnJheShzKT9bXTp7fTtlW2ldPWVbaV0/dCE9PWE/bjplW2ldOm4sYihlW2ldLHMpfWVsc2UgZVtpXT1zfSkpLGV9ZnVuY3Rpb24gayhlKXtsZXQgdD1lO3JldHVybiBlIGluc3RhbmNlb2YgRGF0ZXx8KHQ9bmV3IERhdGUoZSkpLGlzTmFOKHQuZ2V0VGltZSgpKSYmKGNvbnNvbGUubG9nKGBVbmFibGUgdG8gY29udmVydCB2YWx1ZSBcIiR7ZX1cIiB0byBEYXRlIG9iamVjdGApLHQ9ITEpLHR9ZnVuY3Rpb24gQyhlKXtsZXQgdD1cIlxcXFxzfFxcXFwufC18L3xcXFxcXFxcXHwsfFxcXFwkfFxcXFwhfFxcXFw/fDp8O1wiO3JldHVybiBuZXcgUmVnRXhwKFwiKF58PnxcIit0K1wiKShcIitlK1wiKSgkfDx8XCIrdCtcIilcIixcImdcIil9ZnVuY3Rpb24gJChlLHQsaSl7cmV0dXJuKHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuIGU7dmFyIGk9ZVtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PWkpe3ZhciBzPWkuY2FsbChlLHQpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBzKXJldHVybiBzO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKGUpfShlLFwic3RyaW5nXCIpO3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiB0P3Q6U3RyaW5nKHQpfSh0KSlpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOmksZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPWksZX1jbGFzcyBfe2NvbnN0cnVjdG9yKCl7bGV0e3R5cGU6ZSxkYXRlOnQsZHA6aSxvcHRzOnMsYm9keTphfT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307JCh0aGlzLFwiZm9jdXNcIiwoKCk9Pnt0aGlzLiRjZWxsLmNsYXNzTGlzdC5hZGQoXCItZm9jdXMtXCIpLHRoaXMuZm9jdXNlZD0hMH0pKSwkKHRoaXMsXCJyZW1vdmVGb2N1c1wiLCgoKT0+e3RoaXMuJGNlbGwuY2xhc3NMaXN0LnJlbW92ZShcIi1mb2N1cy1cIiksdGhpcy5mb2N1c2VkPSExfSkpLCQodGhpcyxcInNlbGVjdFwiLCgoKT0+e3RoaXMuJGNlbGwuY2xhc3NMaXN0LmFkZChcIi1zZWxlY3RlZC1cIiksdGhpcy5zZWxlY3RlZD0hMH0pKSwkKHRoaXMsXCJyZW1vdmVTZWxlY3RcIiwoKCk9Pnt0aGlzLiRjZWxsLmNsYXNzTGlzdC5yZW1vdmUoXCItc2VsZWN0ZWQtXCIsXCItcmFuZ2UtZnJvbS1cIixcIi1yYW5nZS10by1cIiksdGhpcy5zZWxlY3RlZD0hMX0pKSwkKHRoaXMsXCJvbkNoYW5nZVNlbGVjdGVkRGF0ZVwiLCgoKT0+e3RoaXMuaXNEaXNhYmxlZHx8KHRoaXMuX2hhbmRsZVNlbGVjdGVkU3RhdHVzKCksdGhpcy5vcHRzLnJhbmdlJiZ0aGlzLl9oYW5kbGVSYW5nZVN0YXR1cygpKX0pKSwkKHRoaXMsXCJvbkNoYW5nZUZvY3VzRGF0ZVwiLChlPT57aWYoIWUpcmV0dXJuIHZvaWQodGhpcy5mb2N1c2VkJiZ0aGlzLnJlbW92ZUZvY3VzKCkpO2xldCB0PXAoZSx0aGlzLmRhdGUsdGhpcy50eXBlKTt0P3RoaXMuZm9jdXMoKTohdCYmdGhpcy5mb2N1c2VkJiZ0aGlzLnJlbW92ZUZvY3VzKCksdGhpcy5vcHRzLnJhbmdlJiZ0aGlzLl9oYW5kbGVSYW5nZVN0YXR1cygpfSkpLCQodGhpcyxcInJlbmRlclwiLCgoKT0+KHRoaXMuJGNlbGwuaW5uZXJIVE1MPXRoaXMuX2dldEh0bWwoKSx0aGlzLiRjZWxsLmFkcENlbGw9dGhpcyx0aGlzLiRjZWxsKSkpLHRoaXMudHlwZT1lLHRoaXMuc2luZ2xlVHlwZT10aGlzLnR5cGUuc2xpY2UoMCwtMSksdGhpcy5kYXRlPXQsdGhpcy5kcD1pLHRoaXMub3B0cz1zLHRoaXMuYm9keT1hLHRoaXMuY3VzdG9tRGF0YT0hMSx0aGlzLmluaXQoKX1pbml0KCl7bGV0e3JhbmdlOmUsb25SZW5kZXJDZWxsOnR9PXRoaXMub3B0czt0JiYodGhpcy5jdXN0b21EYXRhPXQoe2RhdGU6dGhpcy5kYXRlLGNlbGxUeXBlOnRoaXMuc2luZ2xlVHlwZSxkYXRlcGlja2VyOnRoaXMuZHB9KSksdGhpcy5fY3JlYXRlRWxlbWVudCgpLHRoaXMuX2JpbmREYXRlcGlja2VyRXZlbnRzKCksdGhpcy5faGFuZGxlSW5pdGlhbEZvY3VzU3RhdHVzKCksdGhpcy5kcC5oYXNTZWxlY3RlZERhdGVzJiYodGhpcy5faGFuZGxlU2VsZWN0ZWRTdGF0dXMoKSxlJiZ0aGlzLl9oYW5kbGVSYW5nZVN0YXR1cygpKX1fYmluZERhdGVwaWNrZXJFdmVudHMoKXt0aGlzLmRwLm9uKGkuZXZlbnRDaGFuZ2VTZWxlY3RlZERhdGUsdGhpcy5vbkNoYW5nZVNlbGVjdGVkRGF0ZSksdGhpcy5kcC5vbihpLmV2ZW50Q2hhbmdlRm9jdXNEYXRlLHRoaXMub25DaGFuZ2VGb2N1c0RhdGUpfXVuYmluZERhdGVwaWNrZXJFdmVudHMoKXt0aGlzLmRwLm9mZihpLmV2ZW50Q2hhbmdlU2VsZWN0ZWREYXRlLHRoaXMub25DaGFuZ2VTZWxlY3RlZERhdGUpLHRoaXMuZHAub2ZmKGkuZXZlbnRDaGFuZ2VGb2N1c0RhdGUsdGhpcy5vbkNoYW5nZUZvY3VzRGF0ZSl9X2NyZWF0ZUVsZW1lbnQoKXt2YXIgZTtsZXR7eWVhcjp0LG1vbnRoOmksZGF0ZTpzfT1vKHRoaXMuZGF0ZSksYT0obnVsbD09PShlPXRoaXMuY3VzdG9tRGF0YSl8fHZvaWQgMD09PWU/dm9pZCAwOmUuYXR0cnMpfHx7fTt0aGlzLiRjZWxsPW4oe2NsYXNzTmFtZTp0aGlzLl9nZXRDbGFzc05hbWUoKSxhdHRyczp7XCJkYXRhLXllYXJcIjp0LFwiZGF0YS1tb250aFwiOmksXCJkYXRhLWRhdGVcIjpzLC4uLmF9fSl9X2dldENsYXNzTmFtZSgpe3ZhciBlLHQ7bGV0IHM9bmV3IERhdGUse3NlbGVjdE90aGVyTW9udGhzOmEsc2VsZWN0T3RoZXJZZWFyczpufT10aGlzLm9wdHMse21pbkRhdGU6cixtYXhEYXRlOmh9PXRoaXMuZHAse2RheTpsfT1vKHRoaXMuZGF0ZSksZD10aGlzLl9pc091dE9mTWluTWF4UmFuZ2UoKSxjPW51bGw9PT0oZT10aGlzLmN1c3RvbURhdGEpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmRpc2FibGVkLG09dShcImFpci1kYXRlcGlja2VyLWNlbGxcIixgLSR7dGhpcy5zaW5nbGVUeXBlfS1gLHtcIi1jdXJyZW50LVwiOnAocyx0aGlzLmRhdGUsdGhpcy50eXBlKSxcIi1taW4tZGF0ZS1cIjpyJiZwKHIsdGhpcy5kYXRlLHRoaXMudHlwZSksXCItbWF4LWRhdGUtXCI6aCYmcChoLHRoaXMuZGF0ZSx0aGlzLnR5cGUpfSksdj1cIlwiO3N3aXRjaCh0aGlzLnR5cGUpe2Nhc2UgaS5kYXlzOnY9dSh7XCItd2Vla2VuZC1cIjp0aGlzLmRwLmlzV2Vla2VuZChsKSxcIi1vdGhlci1tb250aC1cIjp0aGlzLmlzT3RoZXJNb250aCxcIi1kaXNhYmxlZC1cIjp0aGlzLmlzT3RoZXJNb250aCYmIWF8fGR8fGN9KTticmVhaztjYXNlIGkubW9udGhzOnY9dSh7XCItZGlzYWJsZWQtXCI6ZHx8Y30pO2JyZWFrO2Nhc2UgaS55ZWFyczp2PXUoe1wiLW90aGVyLWRlY2FkZS1cIjp0aGlzLmlzT3RoZXJEZWNhZGUsXCItZGlzYWJsZWQtXCI6ZHx8dGhpcy5pc090aGVyRGVjYWRlJiYhbnx8Y30pfXJldHVybiB1KG0sdixudWxsPT09KHQ9dGhpcy5jdXN0b21EYXRhKXx8dm9pZCAwPT09dD92b2lkIDA6dC5jbGFzc2VzKX1fZ2V0SHRtbCgpe3ZhciBlO2xldHt5ZWFyOnQsbW9udGg6cyxkYXRlOmF9PW8odGhpcy5kYXRlKSx7c2hvd090aGVyTW9udGhzOm4sc2hvd090aGVyWWVhcnM6cn09dGhpcy5vcHRzO2lmKG51bGwhPT0oZT10aGlzLmN1c3RvbURhdGEpJiZ2b2lkIDAhPT1lJiZlLmh0bWwpcmV0dXJuIHRoaXMuY3VzdG9tRGF0YS5odG1sO3N3aXRjaCh0aGlzLnR5cGUpe2Nhc2UgaS5kYXlzOnJldHVybiFuJiZ0aGlzLmlzT3RoZXJNb250aD9cIlwiOmE7Y2FzZSBpLm1vbnRoczpyZXR1cm4gdGhpcy5kcC5sb2NhbGVbdGhpcy5vcHRzLm1vbnRoc0ZpZWxkXVtzXTtjYXNlIGkueWVhcnM6cmV0dXJuIXImJnRoaXMuaXNPdGhlckRlY2FkZT9cIlwiOnR9fV9pc091dE9mTWluTWF4UmFuZ2UoKXtsZXR7bWluRGF0ZTplLG1heERhdGU6dH09dGhpcy5kcCx7dHlwZTpzLGRhdGU6YX09dGhpcyx7bW9udGg6bix5ZWFyOnIsZGF0ZTpofT1vKGEpLGw9cz09PWkuZGF5cyxkPXM9PT1pLnllYXJzLGM9ISFlJiZuZXcgRGF0ZShyLGQ/ZS5nZXRNb250aCgpOm4sbD9oOmUuZ2V0RGF0ZSgpKSx1PSEhdCYmbmV3IERhdGUocixkP3QuZ2V0TW9udGgoKTpuLGw/aDp0LmdldERhdGUoKSk7cmV0dXJuIGUmJnQ/dihjLGUpfHxtKHUsdCk6ZT92KGMsZSk6dD9tKHUsdCk6dm9pZCAwfWRlc3Ryb3koKXt0aGlzLnVuYmluZERhdGVwaWNrZXJFdmVudHMoKX1faGFuZGxlUmFuZ2VTdGF0dXMoKXtsZXR7cmFuZ2VEYXRlRnJvbTplLHJhbmdlRGF0ZVRvOnR9PXRoaXMuZHAsaT11KHtcIi1pbi1yYW5nZS1cIjplJiZ0JiYocz10aGlzLmRhdGUsYT1lLG49dCxtKHMsYSkmJnYocyxuKSksXCItcmFuZ2UtZnJvbS1cIjplJiZwKHRoaXMuZGF0ZSxlLHRoaXMudHlwZSksXCItcmFuZ2UtdG8tXCI6dCYmcCh0aGlzLmRhdGUsdCx0aGlzLnR5cGUpfSk7dmFyIHMsYSxuO3RoaXMuJGNlbGwuY2xhc3NMaXN0LnJlbW92ZShcIi1yYW5nZS1mcm9tLVwiLFwiLXJhbmdlLXRvLVwiLFwiLWluLXJhbmdlLVwiKSxpJiZ0aGlzLiRjZWxsLmNsYXNzTGlzdC5hZGQoLi4uaS5zcGxpdChcIiBcIikpfV9oYW5kbGVTZWxlY3RlZFN0YXR1cygpe2xldCBlPXRoaXMuZHAuX2NoZWNrSWZEYXRlSXNTZWxlY3RlZCh0aGlzLmRhdGUsdGhpcy50eXBlKTtlP3RoaXMuc2VsZWN0KCk6IWUmJnRoaXMuc2VsZWN0ZWQmJnRoaXMucmVtb3ZlU2VsZWN0KCl9X2hhbmRsZUluaXRpYWxGb2N1c1N0YXR1cygpe3AodGhpcy5kcC5mb2N1c0RhdGUsdGhpcy5kYXRlLHRoaXMudHlwZSkmJnRoaXMuZm9jdXMoKX1nZXQgaXNEaXNhYmxlZCgpe3JldHVybiB0aGlzLiRjZWxsLm1hdGNoZXMoXCIuLWRpc2FibGVkLVwiKX1nZXQgaXNPdGhlck1vbnRoKCl7cmV0dXJuIHRoaXMuZHAuaXNPdGhlck1vbnRoKHRoaXMuZGF0ZSl9Z2V0IGlzT3RoZXJEZWNhZGUoKXtyZXR1cm4gdGhpcy5kcC5pc090aGVyRGVjYWRlKHRoaXMuZGF0ZSl9fWZ1bmN0aW9uIE0oZSx0LGkpe3JldHVybih0PWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVybiBlO3ZhciBpPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1pKXt2YXIgcz1pLmNhbGwoZSx0KTtpZihcIm9iamVjdFwiIT10eXBlb2YgcylyZXR1cm4gczt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyhlKX0oZSxcInN0cmluZ1wiKTtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgdD90OlN0cmluZyh0KX0odCkpaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTppLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1pLGV9bGV0IFM9e1tpLmRheXNdOmA8ZGl2IGNsYXNzPVwiYWlyLWRhdGVwaWNrZXItYm9keS0tZGF5LW5hbWVzXCI+PC9kaXY+PGRpdiBjbGFzcz1cImFpci1kYXRlcGlja2VyLWJvZHktLWNlbGxzIC0ke2kuZGF5c30tXCI+PC9kaXY+YCxbaS5tb250aHNdOmA8ZGl2IGNsYXNzPVwiYWlyLWRhdGVwaWNrZXItYm9keS0tY2VsbHMgLSR7aS5tb250aHN9LVwiPjwvZGl2PmAsW2kueWVhcnNdOmA8ZGl2IGNsYXNzPVwiYWlyLWRhdGVwaWNrZXItYm9keS0tY2VsbHMgLSR7aS55ZWFyc30tXCI+PC9kaXY+YH07Y29uc3QgVD1cIi5haXItZGF0ZXBpY2tlci1jZWxsXCI7Y2xhc3MgRntjb25zdHJ1Y3RvcihlKXtsZXR7ZHA6dCx0eXBlOnMsb3B0czphfT1lO00odGhpcyxcImhhbmRsZUNsaWNrXCIsKGU9PntsZXQgdD1lLnRhcmdldC5jbG9zZXN0KFQpLmFkcENlbGw7aWYodC5pc0Rpc2FibGVkKXJldHVybjtpZighdGhpcy5kcC5pc01pblZpZXdSZWFjaGVkKXJldHVybiB2b2lkIHRoaXMuZHAuZG93bigpO2xldCBpPXRoaXMuZHAuX2NoZWNrSWZEYXRlSXNTZWxlY3RlZCh0LmRhdGUsdC50eXBlKTtpP3RoaXMuZHAuX2hhbmRsZUFscmVhZHlTZWxlY3RlZERhdGVzKGksdC5kYXRlKTp0aGlzLmRwLnNlbGVjdERhdGUodC5kYXRlKX0pKSxNKHRoaXMsXCJoYW5kbGVEYXlOYW1lQ2xpY2tcIiwoZT0+e2xldCB0PWUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtZGF5LWluZGV4XCIpO3RoaXMub3B0cy5vbkNsaWNrRGF5TmFtZSh7ZGF5SW5kZXg6TnVtYmVyKHQpLGRhdGVwaWNrZXI6dGhpcy5kcH0pfSkpLE0odGhpcyxcIm9uQ2hhbmdlQ3VycmVudFZpZXdcIiwoZT0+e2UhPT10aGlzLnR5cGU/dGhpcy5oaWRlKCk6KHRoaXMuc2hvdygpLHRoaXMucmVuZGVyKCkpfSkpLE0odGhpcyxcIm9uTW91c2VPdmVyQ2VsbFwiLChlPT57bGV0IHQ9ZihlLnRhcmdldCxUKTt0aGlzLmRwLnNldEZvY3VzRGF0ZSghIXQmJnQuYWRwQ2VsbC5kYXRlKX0pKSxNKHRoaXMsXCJvbk1vdXNlT3V0Q2VsbFwiLCgoKT0+e3RoaXMuZHAuc2V0Rm9jdXNEYXRlKCExKX0pKSxNKHRoaXMsXCJvbkNsaWNrQm9keVwiLChlPT57bGV0e29uQ2xpY2tEYXlOYW1lOnR9PXRoaXMub3B0cyxpPWUudGFyZ2V0O2kuY2xvc2VzdChUKSYmdGhpcy5oYW5kbGVDbGljayhlKSx0JiZpLmNsb3Nlc3QoXCIuYWlyLWRhdGVwaWNrZXItYm9keS0tZGF5LW5hbWVcIikmJnRoaXMuaGFuZGxlRGF5TmFtZUNsaWNrKGUpfSkpLE0odGhpcyxcIm9uTW91c2VEb3duXCIsKGU9Pnt0aGlzLnByZXNzZWQ9ITA7bGV0IHQ9ZihlLnRhcmdldCxUKSxpPXQmJnQuYWRwQ2VsbDtwKGkuZGF0ZSx0aGlzLmRwLnJhbmdlRGF0ZUZyb20pJiYodGhpcy5yYW5nZUZyb21Gb2N1c2VkPSEwKSxwKGkuZGF0ZSx0aGlzLmRwLnJhbmdlRGF0ZVRvKSYmKHRoaXMucmFuZ2VUb0ZvY3VzZWQ9ITApfSkpLE0odGhpcyxcIm9uTW91c2VNb3ZlXCIsKGU9PntpZighdGhpcy5wcmVzc2VkfHwhdGhpcy5kcC5pc01pblZpZXdSZWFjaGVkKXJldHVybjtlLnByZXZlbnREZWZhdWx0KCk7bGV0IHQ9ZihlLnRhcmdldCxUKSxpPXQmJnQuYWRwQ2VsbCx7c2VsZWN0ZWREYXRlczpzLHJhbmdlRGF0ZVRvOmEscmFuZ2VEYXRlRnJvbTpufT10aGlzLmRwO2lmKCFpfHxpLmlzRGlzYWJsZWQpcmV0dXJuO2xldHtkYXRlOnJ9PWk7aWYoMj09PXMubGVuZ3RoKXtpZih0aGlzLnJhbmdlRnJvbUZvY3VzZWQmJiFtKHIsYSkpe2xldHtob3VyczplLG1pbnV0ZXM6dH09byhuKTtyLnNldEhvdXJzKGUpLHIuc2V0TWludXRlcyh0KSx0aGlzLmRwLnJhbmdlRGF0ZUZyb209cix0aGlzLmRwLnJlcGxhY2VEYXRlKG4scil9aWYodGhpcy5yYW5nZVRvRm9jdXNlZCYmIXYocixuKSl7bGV0e2hvdXJzOmUsbWludXRlczp0fT1vKGEpO3Iuc2V0SG91cnMoZSksci5zZXRNaW51dGVzKHQpLHRoaXMuZHAucmFuZ2VEYXRlVG89cix0aGlzLmRwLnJlcGxhY2VEYXRlKGEscil9fX0pKSxNKHRoaXMsXCJvbk1vdXNlVXBcIiwoKCk9Pnt0aGlzLnByZXNzZWQ9ITEsdGhpcy5yYW5nZUZyb21Gb2N1c2VkPSExLHRoaXMucmFuZ2VUb0ZvY3VzZWQ9ITF9KSksTSh0aGlzLFwib25DaGFuZ2VWaWV3RGF0ZVwiLCgoZSx0KT0+e2lmKCF0aGlzLmlzVmlzaWJsZSlyZXR1cm47bGV0IHM9YyhlKSxhPWModCk7c3dpdGNoKHRoaXMuZHAuY3VycmVudFZpZXcpe2Nhc2UgaS5kYXlzOmlmKHAoZSx0LGkubW9udGhzKSlyZXR1cm47YnJlYWs7Y2FzZSBpLm1vbnRoczppZihwKGUsdCxpLnllYXJzKSlyZXR1cm47YnJlYWs7Y2FzZSBpLnllYXJzOmlmKHNbMF09PT1hWzBdJiZzWzFdPT09YVsxXSlyZXR1cm59dGhpcy5yZW5kZXIoKX0pKSxNKHRoaXMsXCJyZW5kZXJcIiwoKCk9Pnt0aGlzLmRlc3Ryb3lDZWxscygpLHRoaXMuX2dlbmVyYXRlQ2VsbHMoKSx0aGlzLmNlbGxzLmZvckVhY2goKGU9Pnt0aGlzLiRjZWxscy5hcHBlbmRDaGlsZChlLnJlbmRlcigpKX0pKX0pKSx0aGlzLmRwPXQsdGhpcy50eXBlPXMsdGhpcy5vcHRzPWEsdGhpcy5jZWxscz1bXSx0aGlzLiRlbD1cIlwiLHRoaXMucHJlc3NlZD0hMSx0aGlzLmlzVmlzaWJsZT0hMCx0aGlzLmluaXQoKX1pbml0KCl7dGhpcy5fYnVpbGRCYXNlSHRtbCgpLHRoaXMudHlwZT09PWkuZGF5cyYmdGhpcy5yZW5kZXJEYXlOYW1lcygpLHRoaXMucmVuZGVyKCksdGhpcy5fYmluZEV2ZW50cygpLHRoaXMuX2JpbmREYXRlcGlja2VyRXZlbnRzKCl9X2JpbmRFdmVudHMoKXtsZXR7cmFuZ2U6ZSxkeW5hbWljUmFuZ2U6dH09dGhpcy5vcHRzO3kodGhpcy4kZWwsXCJtb3VzZW92ZXJcIix0aGlzLm9uTW91c2VPdmVyQ2VsbCkseSh0aGlzLiRlbCxcIm1vdXNlb3V0XCIsdGhpcy5vbk1vdXNlT3V0Q2VsbCkseSh0aGlzLiRlbCxcImNsaWNrXCIsdGhpcy5vbkNsaWNrQm9keSksZSYmdCYmKHkodGhpcy4kZWwsXCJtb3VzZWRvd25cIix0aGlzLm9uTW91c2VEb3duKSx5KHRoaXMuJGVsLFwibW91c2Vtb3ZlXCIsdGhpcy5vbk1vdXNlTW92ZSkseSh3aW5kb3cuZG9jdW1lbnQsXCJtb3VzZXVwXCIsdGhpcy5vbk1vdXNlVXApKX1fYmluZERhdGVwaWNrZXJFdmVudHMoKXt0aGlzLmRwLm9uKGkuZXZlbnRDaGFuZ2VWaWV3RGF0ZSx0aGlzLm9uQ2hhbmdlVmlld0RhdGUpLHRoaXMuZHAub24oaS5ldmVudENoYW5nZUN1cnJlbnRWaWV3LHRoaXMub25DaGFuZ2VDdXJyZW50Vmlldyl9X2J1aWxkQmFzZUh0bWwoKXt0aGlzLiRlbD1uKHtjbGFzc05hbWU6YGFpci1kYXRlcGlja2VyLWJvZHkgLSR7dGhpcy50eXBlfS1gLGlubmVySHRtbDpTW3RoaXMudHlwZV19KSx0aGlzLiRuYW1lcz1hKFwiLmFpci1kYXRlcGlja2VyLWJvZHktLWRheS1uYW1lc1wiLHRoaXMuJGVsKSx0aGlzLiRjZWxscz1hKFwiLmFpci1kYXRlcGlja2VyLWJvZHktLWNlbGxzXCIsdGhpcy4kZWwpfV9nZXREYXlOYW1lc0h0bWwoKXtsZXQgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06dGhpcy5kcC5sb2NhbGUuZmlyc3REYXksdD1cIlwiLHM9dGhpcy5kcC5pc1dlZWtlbmQse29uQ2xpY2tEYXlOYW1lOmF9PXRoaXMub3B0cyxuPWUscj0wO2Zvcig7cjw3Oyl7bGV0IGU9biU3O3QrPWA8ZGl2IGNsYXNzPVwiJHt1KFwiYWlyLWRhdGVwaWNrZXItYm9keS0tZGF5LW5hbWVcIix7W2kuY3NzQ2xhc3NXZWVrZW5kXTpzKGUpLFwiLWNsaWNrYWJsZS1cIjohIWF9KX1cIiBkYXRhLWRheS1pbmRleD0nJHtlfSc+JHt0aGlzLmRwLmxvY2FsZS5kYXlzTWluW2VdfTwvZGl2PmAscisrLG4rK31yZXR1cm4gdH1fZ2V0RGF5c0NlbGxzKCl7bGV0e3ZpZXdEYXRlOmUsbG9jYWxlOntmaXJzdERheTp0fX09dGhpcy5kcCxpPWgoZSkse3llYXI6cyxtb250aDphfT1vKGUpLG49bmV3IERhdGUocyxhLDEpLHI9bmV3IERhdGUocyxhLGkpLGw9bi5nZXREYXkoKS10LGQ9Ni1yLmdldERheSgpK3Q7bD1sPDA/bCs3OmwsZD1kPjY/ZC03OmQ7bGV0IGM9ZnVuY3Rpb24oZSx0KXtsZXR7eWVhcjppLG1vbnRoOnMsZGF0ZTphfT1vKGUpO3JldHVybiBuZXcgRGF0ZShpLHMsYS10KX0obixsKSx1PWkrbCtkLHA9Yy5nZXREYXRlKCkse3llYXI6bSxtb250aDp2fT1vKGMpLGc9MDtmb3IoO2c8dTspe2xldCBlPW5ldyBEYXRlKG0sdixwK2cpO3RoaXMuX2dlbmVyYXRlQ2VsbChlKSxnKyt9fV9nZW5lcmF0ZUNlbGwoZSl7bGV0e3R5cGU6dCxkcDppLG9wdHM6c309dGhpcyxhPW5ldyBfKHt0eXBlOnQsZHA6aSxvcHRzOnMsZGF0ZTplLGJvZHk6dGhpc30pO3JldHVybiB0aGlzLmNlbGxzLnB1c2goYSksYX1fZ2VuZXJhdGVEYXlDZWxscygpe3RoaXMuX2dldERheXNDZWxscygpfV9nZW5lcmF0ZU1vbnRoQ2VsbHMoKXtsZXR7eWVhcjplfT10aGlzLmRwLnBhcnNlZFZpZXdEYXRlLHQ9MDtmb3IoO3Q8MTI7KXRoaXMuY2VsbHMucHVzaCh0aGlzLl9nZW5lcmF0ZUNlbGwobmV3IERhdGUoZSx0KSkpLHQrK31fZ2VuZXJhdGVZZWFyQ2VsbHMoKXtsZXQgZT1jKHRoaXMuZHAudmlld0RhdGUpLHQ9ZVswXS0xLGk9ZVsxXSsxLHM9dDtmb3IoO3M8PWk7KXRoaXMuY2VsbHMucHVzaCh0aGlzLl9nZW5lcmF0ZUNlbGwobmV3IERhdGUocywwKSkpLHMrK31yZW5kZXJEYXlOYW1lcygpe3RoaXMuJG5hbWVzLmlubmVySFRNTD10aGlzLl9nZXREYXlOYW1lc0h0bWwoKX1fZ2VuZXJhdGVDZWxscygpe3N3aXRjaCh0aGlzLnR5cGUpe2Nhc2UgaS5kYXlzOnRoaXMuX2dlbmVyYXRlRGF5Q2VsbHMoKTticmVhaztjYXNlIGkubW9udGhzOnRoaXMuX2dlbmVyYXRlTW9udGhDZWxscygpO2JyZWFrO2Nhc2UgaS55ZWFyczp0aGlzLl9nZW5lcmF0ZVllYXJDZWxscygpfX1zaG93KCl7dGhpcy5pc1Zpc2libGU9ITAsdGhpcy4kZWwuY2xhc3NMaXN0LnJlbW92ZShcIi1oaWRkZW4tXCIpfWhpZGUoKXt0aGlzLmlzVmlzaWJsZT0hMSx0aGlzLiRlbC5jbGFzc0xpc3QuYWRkKFwiLWhpZGRlbi1cIil9ZGVzdHJveUNlbGxzKCl7dGhpcy5jZWxscy5mb3JFYWNoKChlPT5lLmRlc3Ryb3koKSkpLHRoaXMuY2VsbHM9W10sdGhpcy4kY2VsbHMuaW5uZXJIVE1MPVwiXCJ9ZGVzdHJveSgpe3RoaXMuZGVzdHJveUNlbGxzKCksdGhpcy5kcC5vZmYoaS5ldmVudENoYW5nZVZpZXdEYXRlLHRoaXMub25DaGFuZ2VWaWV3RGF0ZSksdGhpcy5kcC5vZmYoaS5ldmVudENoYW5nZUN1cnJlbnRWaWV3LHRoaXMub25DaGFuZ2VDdXJyZW50Vmlldyl9fWZ1bmN0aW9uIFYoZSx0LGkpe3JldHVybih0PWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVybiBlO3ZhciBpPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1pKXt2YXIgcz1pLmNhbGwoZSx0KTtpZihcIm9iamVjdFwiIT10eXBlb2YgcylyZXR1cm4gczt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyhlKX0oZSxcInN0cmluZ1wiKTtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgdD90OlN0cmluZyh0KX0odCkpaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTppLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1pLGV9Y2xhc3MgeHtjb25zdHJ1Y3RvcihlKXtsZXR7ZHA6dCxvcHRzOml9PWU7Vih0aGlzLFwib25DbGlja05hdlwiLChlPT57bGV0IHQ9ZihlLnRhcmdldCxcIi5haXItZGF0ZXBpY2tlci1uYXYtLWFjdGlvblwiKTtpZighdClyZXR1cm47bGV0IGk9dC5kYXRhc2V0LmFjdGlvbjt0aGlzLmRwW2ldKCl9KSksVih0aGlzLFwib25DaGFuZ2VWaWV3RGF0ZVwiLCgoKT0+e3RoaXMucmVuZGVyKCksdGhpcy5fcmVzZXROYXZTdGF0dXMoKSx0aGlzLmhhbmRsZU5hdlN0YXR1cygpfSkpLFYodGhpcyxcIm9uQ2hhbmdlQ3VycmVudFZpZXdcIiwoKCk9Pnt0aGlzLnJlbmRlcigpLHRoaXMuX3Jlc2V0TmF2U3RhdHVzKCksdGhpcy5oYW5kbGVOYXZTdGF0dXMoKX0pKSxWKHRoaXMsXCJvbkNsaWNrTmF2VGl0bGVcIiwoKCk9Pnt0aGlzLmRwLmlzRmluYWxWaWV3fHx0aGlzLmRwLnVwKCl9KSksVih0aGlzLFwidXBkYXRlXCIsKCgpPT57bGV0e3ByZXZIdG1sOmUsbmV4dEh0bWw6dH09dGhpcy5vcHRzO3RoaXMuJHByZXYuaW5uZXJIVE1MPWUsdGhpcy4kbmV4dC5pbm5lckhUTUw9dCx0aGlzLl9yZXNldE5hdlN0YXR1cygpLHRoaXMucmVuZGVyKCksdGhpcy5oYW5kbGVOYXZTdGF0dXMoKX0pKSxWKHRoaXMsXCJyZW5kZXJEZWxheVwiLCgoKT0+e3NldFRpbWVvdXQodGhpcy5yZW5kZXIpfSkpLFYodGhpcyxcInJlbmRlclwiLCgoKT0+e3RoaXMuJHRpdGxlLmlubmVySFRNTD10aGlzLl9nZXRUaXRsZSgpLGZ1bmN0aW9uKGUsdCl7Zm9yKGxldCBpIGluIHQpdFtpXT9lLmNsYXNzTGlzdC5hZGQoaSk6ZS5jbGFzc0xpc3QucmVtb3ZlKGkpfSh0aGlzLiR0aXRsZSx7XCItZGlzYWJsZWQtXCI6dGhpcy5kcC5pc0ZpbmFsVmlld30pfSkpLHRoaXMuZHA9dCx0aGlzLm9wdHM9aSx0aGlzLmluaXQoKX1pbml0KCl7dGhpcy5fY3JlYXRlRWxlbWVudCgpLHRoaXMuX2J1aWxkQmFzZUh0bWwoKSx0aGlzLl9kZWZpbmVET00oKSx0aGlzLnJlbmRlcigpLHRoaXMuaGFuZGxlTmF2U3RhdHVzKCksdGhpcy5fYmluZEV2ZW50cygpLHRoaXMuX2JpbmREYXRlcGlja2VyRXZlbnRzKCl9X2RlZmluZURPTSgpe3RoaXMuJHRpdGxlPWEoXCIuYWlyLWRhdGVwaWNrZXItbmF2LS10aXRsZVwiLHRoaXMuJGVsKSx0aGlzLiRwcmV2PWEoJ1tkYXRhLWFjdGlvbj1cInByZXZcIl0nLHRoaXMuJGVsKSx0aGlzLiRuZXh0PWEoJ1tkYXRhLWFjdGlvbj1cIm5leHRcIl0nLHRoaXMuJGVsKX1fYmluZEV2ZW50cygpe3RoaXMuJGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMub25DbGlja05hdiksdGhpcy4kdGl0bGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5vbkNsaWNrTmF2VGl0bGUpfV9iaW5kRGF0ZXBpY2tlckV2ZW50cygpe3RoaXMuZHAub24oaS5ldmVudENoYW5nZVZpZXdEYXRlLHRoaXMub25DaGFuZ2VWaWV3RGF0ZSksdGhpcy5kcC5vbihpLmV2ZW50Q2hhbmdlQ3VycmVudFZpZXcsdGhpcy5vbkNoYW5nZUN1cnJlbnRWaWV3KSx0aGlzLmlzTmF2SXNGdW5jdGlvbiYmKHRoaXMuZHAub24oaS5ldmVudENoYW5nZVNlbGVjdGVkRGF0ZSx0aGlzLnJlbmRlckRlbGF5KSx0aGlzLmRwLm9wdHMudGltZXBpY2tlciYmdGhpcy5kcC5vbihpLmV2ZW50Q2hhbmdlVGltZSx0aGlzLnJlbmRlcikpfWRlc3Ryb3koKXt0aGlzLmRwLm9mZihpLmV2ZW50Q2hhbmdlVmlld0RhdGUsdGhpcy5vbkNoYW5nZVZpZXdEYXRlKSx0aGlzLmRwLm9mZihpLmV2ZW50Q2hhbmdlQ3VycmVudFZpZXcsdGhpcy5vbkNoYW5nZUN1cnJlbnRWaWV3KSx0aGlzLmlzTmF2SXNGdW5jdGlvbiYmKHRoaXMuZHAub2ZmKGkuZXZlbnRDaGFuZ2VTZWxlY3RlZERhdGUsdGhpcy5yZW5kZXJEZWxheSksdGhpcy5kcC5vcHRzLnRpbWVwaWNrZXImJnRoaXMuZHAub2ZmKGkuZXZlbnRDaGFuZ2VUaW1lLHRoaXMucmVuZGVyKSl9X2NyZWF0ZUVsZW1lbnQoKXt0aGlzLiRlbD1uKHt0YWdOYW1lOlwibmF2XCIsY2xhc3NOYW1lOlwiYWlyLWRhdGVwaWNrZXItbmF2XCJ9KX1fZ2V0VGl0bGUoKXtsZXR7ZHA6ZSxvcHRzOnR9PXRoaXMsaT10Lm5hdlRpdGxlc1tlLmN1cnJlbnRWaWV3XTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2koZSk6ZS5mb3JtYXREYXRlKGUudmlld0RhdGUsaSl9aGFuZGxlTmF2U3RhdHVzKCl7bGV0e2Rpc2FibGVOYXZXaGVuT3V0T2ZSYW5nZTplfT10aGlzLm9wdHMse21pbkRhdGU6dCxtYXhEYXRlOnN9PXRoaXMuZHA7aWYoIXQmJiFzfHwhZSlyZXR1cm47bGV0e3llYXI6YSxtb250aDpufT10aGlzLmRwLnBhcnNlZFZpZXdEYXRlLHI9ISF0JiZvKHQpLGg9ISFzJiZvKHMpO3N3aXRjaCh0aGlzLmRwLmN1cnJlbnRWaWV3KXtjYXNlIGkuZGF5czp0JiZyLm1vbnRoPj1uJiZyLnllYXI+PWEmJnRoaXMuX2Rpc2FibGVOYXYoXCJwcmV2XCIpLHMmJmgubW9udGg8PW4mJmgueWVhcjw9YSYmdGhpcy5fZGlzYWJsZU5hdihcIm5leHRcIik7YnJlYWs7Y2FzZSBpLm1vbnRoczp0JiZyLnllYXI+PWEmJnRoaXMuX2Rpc2FibGVOYXYoXCJwcmV2XCIpLHMmJmgueWVhcjw9YSYmdGhpcy5fZGlzYWJsZU5hdihcIm5leHRcIik7YnJlYWs7Y2FzZSBpLnllYXJzOntsZXQgZT1jKHRoaXMuZHAudmlld0RhdGUpO3QmJnIueWVhcj49ZVswXSYmdGhpcy5fZGlzYWJsZU5hdihcInByZXZcIikscyYmaC55ZWFyPD1lWzFdJiZ0aGlzLl9kaXNhYmxlTmF2KFwibmV4dFwiKTticmVha319fV9kaXNhYmxlTmF2KGUpe2EoJ1tkYXRhLWFjdGlvbj1cIicrZSsnXCJdJyx0aGlzLiRlbCkuY2xhc3NMaXN0LmFkZChcIi1kaXNhYmxlZC1cIil9X3Jlc2V0TmF2U3RhdHVzKCl7IWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KHQ+MT90LTE6MCkscz0xO3M8dDtzKyspaVtzLTFdPWFyZ3VtZW50c1tzXTtlLmxlbmd0aD9lLmZvckVhY2goKGU9PntlLmNsYXNzTGlzdC5yZW1vdmUoLi4uaSl9KSk6ZS5jbGFzc0xpc3QucmVtb3ZlKC4uLmkpfSh0aGlzLiRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiLmFpci1kYXRlcGlja2VyLW5hdi0tYWN0aW9uXCIpLFwiLWRpc2FibGVkLVwiKX1fYnVpbGRCYXNlSHRtbCgpe2xldHtwcmV2SHRtbDplLG5leHRIdG1sOnR9PXRoaXMub3B0czt0aGlzLiRlbC5pbm5lckhUTUw9YDxkaXYgY2xhc3M9XCJhaXItZGF0ZXBpY2tlci1uYXYtLWFjdGlvblwiIGRhdGEtYWN0aW9uPVwicHJldlwiPiR7ZX08L2Rpdj48ZGl2IGNsYXNzPVwiYWlyLWRhdGVwaWNrZXItbmF2LS10aXRsZVwiPjwvZGl2PjxkaXYgY2xhc3M9XCJhaXItZGF0ZXBpY2tlci1uYXYtLWFjdGlvblwiIGRhdGEtYWN0aW9uPVwibmV4dFwiPiR7dH08L2Rpdj5gfWdldCBpc05hdklzRnVuY3Rpb24oKXtsZXR7bmF2VGl0bGVzOmV9PXRoaXMub3B0cztyZXR1cm4gT2JqZWN0LmtleXMoZSkuZmluZCgodD0+XCJmdW5jdGlvblwiPT10eXBlb2YgZVt0XSkpfX12YXIgSD17dG9kYXk6e2NvbnRlbnQ6ZT0+ZS5sb2NhbGUudG9kYXksb25DbGljazplPT5lLnNldFZpZXdEYXRlKG5ldyBEYXRlKX0sY2xlYXI6e2NvbnRlbnQ6ZT0+ZS5sb2NhbGUuY2xlYXIsb25DbGljazplPT5lLmNsZWFyKCl9fTtjbGFzcyBFe2NvbnN0cnVjdG9yKGUpe2xldHtkcDp0LG9wdHM6aX09ZTt0aGlzLmRwPXQsdGhpcy5vcHRzPWksdGhpcy5pbml0KCl9aW5pdCgpe3RoaXMuY3JlYXRlRWxlbWVudCgpLHRoaXMucmVuZGVyKCl9Y3JlYXRlRWxlbWVudCgpe3RoaXMuJGVsPW4oe2NsYXNzTmFtZTpcImFpci1kYXRlcGlja2VyLWJ1dHRvbnNcIn0pfWRlc3Ryb3koKXt0aGlzLiRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuJGVsKX1jbGVhckh0bWwoKXtyZXR1cm4gdGhpcy4kZWwuaW5uZXJIVE1MPVwiXCIsdGhpc31nZW5lcmF0ZUJ1dHRvbnMoKXtsZXR7YnV0dG9uczplfT10aGlzLm9wdHM7QXJyYXkuaXNBcnJheShlKXx8KGU9W2VdKSxlLmZvckVhY2goKGU9PntsZXQgdD1lO1wic3RyaW5nXCI9PXR5cGVvZiBlJiZIW2VdJiYodD1IW2VdKTtsZXQgaT10aGlzLmNyZWF0ZUJ1dHRvbih0KTt0Lm9uQ2xpY2smJnRoaXMuYXR0YWNoRXZlbnRUb0J1dHRvbihpLHQub25DbGljayksdGhpcy4kZWwuYXBwZW5kQ2hpbGQoaSl9KSl9YXR0YWNoRXZlbnRUb0J1dHRvbihlLHQpe2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCgpPT57dCh0aGlzLmRwKX0pKX1jcmVhdGVCdXR0b24oZSl7bGV0e2NvbnRlbnQ6dCxjbGFzc05hbWU6aSx0YWdOYW1lOnM9XCJidXR0b25cIixhdHRyczphPXt9fT1lO3JldHVybiBuKHt0YWdOYW1lOnMsaW5uZXJIdG1sOmA8c3BhbiB0YWJpbmRleD0nLTEnPiR7XCJmdW5jdGlvblwiPT10eXBlb2YgdD90KHRoaXMuZHApOnR9PC9zcGFuPmAsY2xhc3NOYW1lOnUoXCJhaXItZGF0ZXBpY2tlci1idXR0b25cIixpKSxhdHRyczphfSl9cmVuZGVyKCl7dGhpcy5nZW5lcmF0ZUJ1dHRvbnMoKX19ZnVuY3Rpb24gTChlLHQsaSl7cmV0dXJuKHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuIGU7dmFyIGk9ZVtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PWkpe3ZhciBzPWkuY2FsbChlLHQpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBzKXJldHVybiBzO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKGUpfShlLFwic3RyaW5nXCIpO3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiB0P3Q6U3RyaW5nKHQpfSh0KSlpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOmksZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPWksZX1jbGFzcyBPe2NvbnN0cnVjdG9yKCl7bGV0e29wdHM6ZSxkcDp0fT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307TCh0aGlzLFwidG9nZ2xlVGltZXBpY2tlcklzQWN0aXZlXCIsKGU9Pnt0aGlzLmRwLnRpbWVwaWNrZXJJc0FjdGl2ZT1lfSkpLEwodGhpcyxcIm9uQ2hhbmdlU2VsZWN0ZWREYXRlXCIsKGU9PntsZXR7ZGF0ZTp0LHVwZGF0ZVRpbWU6aT0hMX09ZTt0JiYodGhpcy5zZXRNaW5NYXhUaW1lKHQpLHRoaXMuc2V0Q3VycmVudFRpbWUoISFpJiZ0KSx0aGlzLmFkZFRpbWVUb0RhdGUodCkpfSkpLEwodGhpcyxcIm9uQ2hhbmdlTGFzdFNlbGVjdGVkRGF0ZVwiLChlPT57ZSYmKHRoaXMuc2V0VGltZShlKSx0aGlzLnJlbmRlcigpKX0pKSxMKHRoaXMsXCJvbkNoYW5nZUlucHV0UmFuZ2VcIiwoZT0+e2xldCB0PWUudGFyZ2V0O3RoaXNbdC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpXT10LnZhbHVlLHRoaXMudXBkYXRlVGV4dCgpLHRoaXMuZHAudHJpZ2dlcihpLmV2ZW50Q2hhbmdlVGltZSx7aG91cnM6dGhpcy5ob3VycyxtaW51dGVzOnRoaXMubWludXRlc30pfSkpLEwodGhpcyxcIm9uTW91c2VFbnRlckxlYXZlXCIsKGU9PntsZXQgdD1lLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpLGk9dGhpcy4kbWludXRlc1RleHQ7XCJob3Vyc1wiPT09dCYmKGk9dGhpcy4kaG91cnNUZXh0KSxpLmNsYXNzTGlzdC50b2dnbGUoXCItZm9jdXMtXCIpfSkpLEwodGhpcyxcIm9uRm9jdXNcIiwoKCk9Pnt0aGlzLnRvZ2dsZVRpbWVwaWNrZXJJc0FjdGl2ZSghMCl9KSksTCh0aGlzLFwib25CbHVyXCIsKCgpPT57dGhpcy50b2dnbGVUaW1lcGlja2VySXNBY3RpdmUoITEpfSkpLHRoaXMub3B0cz1lLHRoaXMuZHA9dDtsZXR7dGltZUZvcm1hdDpzfT10aGlzLmRwLmxvY2FsZTtzJiYocy5tYXRjaChDKFwiaFwiKSl8fHMubWF0Y2goQyhcImhoXCIpKSkmJih0aGlzLmFtcG09ITApLHRoaXMuaW5pdCgpfWluaXQoKXt0aGlzLnNldFRpbWUodGhpcy5kcC5sYXN0U2VsZWN0ZWREYXRlfHx0aGlzLmRwLnZpZXdEYXRlKSx0aGlzLmNyZWF0ZUVsZW1lbnQoKSx0aGlzLmJ1aWxkSHRtbCgpLHRoaXMuZGVmaW5lRE9NKCksdGhpcy5yZW5kZXIoKSx0aGlzLmJpbmREYXRlcGlja2VyRXZlbnRzKCksdGhpcy5iaW5kRE9NRXZlbnRzKCl9YmluZERhdGVwaWNrZXJFdmVudHMoKXt0aGlzLmRwLm9uKGkuZXZlbnRDaGFuZ2VTZWxlY3RlZERhdGUsdGhpcy5vbkNoYW5nZVNlbGVjdGVkRGF0ZSksdGhpcy5kcC5vbihpLmV2ZW50Q2hhbmdlTGFzdFNlbGVjdGVkRGF0ZSx0aGlzLm9uQ2hhbmdlTGFzdFNlbGVjdGVkRGF0ZSl9YmluZERPTUV2ZW50cygpe2xldCBlPVwiaW5wdXRcIjtuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC90cmlkZW50L2dpKSYmKGU9XCJjaGFuZ2VcIikseSh0aGlzLiRyYW5nZXMsZSx0aGlzLm9uQ2hhbmdlSW5wdXRSYW5nZSkseSh0aGlzLiRyYW5nZXMsXCJtb3VzZWVudGVyXCIsdGhpcy5vbk1vdXNlRW50ZXJMZWF2ZSkseSh0aGlzLiRyYW5nZXMsXCJtb3VzZWxlYXZlXCIsdGhpcy5vbk1vdXNlRW50ZXJMZWF2ZSkseSh0aGlzLiRyYW5nZXMsXCJmb2N1c1wiLHRoaXMub25Gb2N1cykseSh0aGlzLiRyYW5nZXMsXCJtb3VzZWRvd25cIix0aGlzLm9uRm9jdXMpLHkodGhpcy4kcmFuZ2VzLFwiYmx1clwiLHRoaXMub25CbHVyKX1jcmVhdGVFbGVtZW50KCl7dGhpcy4kZWw9bih7Y2xhc3NOYW1lOnUoXCJhaXItZGF0ZXBpY2tlci10aW1lXCIse1wiLWFtLXBtLVwiOnRoaXMuZHAuYW1wbX0pfSl9ZGVzdHJveSgpe3RoaXMuZHAub2ZmKGkuZXZlbnRDaGFuZ2VTZWxlY3RlZERhdGUsdGhpcy5vbkNoYW5nZVNlbGVjdGVkRGF0ZSksdGhpcy5kcC5vZmYoaS5ldmVudENoYW5nZUxhc3RTZWxlY3RlZERhdGUsdGhpcy5vbkNoYW5nZUxhc3RTZWxlY3RlZERhdGUpLHRoaXMuJGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy4kZWwpfWJ1aWxkSHRtbCgpe2xldHthbXBtOmUsaG91cnM6dCxkaXNwbGF5SG91cnM6aSxtaW51dGVzOnMsbWluSG91cnM6YSxtaW5NaW51dGVzOm4sbWF4SG91cnM6cixtYXhNaW51dGVzOmgsZGF5UGVyaW9kOm8sb3B0czp7aG91cnNTdGVwOmwsbWludXRlc1N0ZXA6Y319PXRoaXM7dGhpcy4kZWwuaW5uZXJIVE1MPWA8ZGl2IGNsYXNzPVwiYWlyLWRhdGVwaWNrZXItdGltZS0tY3VycmVudFwiPiAgIDxzcGFuIGNsYXNzPVwiYWlyLWRhdGVwaWNrZXItdGltZS0tY3VycmVudC1ob3Vyc1wiPiR7ZChpKX08L3NwYW4+ICAgPHNwYW4gY2xhc3M9XCJhaXItZGF0ZXBpY2tlci10aW1lLS1jdXJyZW50LWNvbG9uXCI+Ojwvc3Bhbj4gICA8c3BhbiBjbGFzcz1cImFpci1kYXRlcGlja2VyLXRpbWUtLWN1cnJlbnQtbWludXRlc1wiPiR7ZChzKX08L3NwYW4+ICAgYCsoZT9gPHNwYW4gY2xhc3M9J2Fpci1kYXRlcGlja2VyLXRpbWUtLWN1cnJlbnQtYW1wbSc+JHtvfTwvc3Bhbj5gOlwiXCIpKyc8L2Rpdj48ZGl2IGNsYXNzPVwiYWlyLWRhdGVwaWNrZXItdGltZS0tc2xpZGVyc1wiPiAgIDxkaXYgY2xhc3M9XCJhaXItZGF0ZXBpY2tlci10aW1lLS1yb3dcIj4nK2AgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbmFtZT1cImhvdXJzXCIgdmFsdWU9XCIke3R9XCIgbWluPVwiJHthfVwiIG1heD1cIiR7cn1cIiBzdGVwPVwiJHtsfVwiLz4gICA8L2Rpdj4gICA8ZGl2IGNsYXNzPVwiYWlyLWRhdGVwaWNrZXItdGltZS0tcm93XCI+YCtgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJtaW51dGVzXCIgdmFsdWU9XCIke3N9XCIgbWluPVwiJHtufVwiIG1heD1cIiR7aH1cIiBzdGVwPVwiJHtjfVwiLz4gICA8L2Rpdj48L2Rpdj5gfWRlZmluZURPTSgpe2xldCBlPWU9PmEoZSx0aGlzLiRlbCk7dGhpcy4kcmFuZ2VzPXRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1t0eXBlPVwicmFuZ2VcIl0nKSx0aGlzLiRob3Vycz1lKCdbbmFtZT1cImhvdXJzXCJdJyksdGhpcy4kbWludXRlcz1lKCdbbmFtZT1cIm1pbnV0ZXNcIl0nKSx0aGlzLiRob3Vyc1RleHQ9ZShcIi5haXItZGF0ZXBpY2tlci10aW1lLS1jdXJyZW50LWhvdXJzXCIpLHRoaXMuJG1pbnV0ZXNUZXh0PWUoXCIuYWlyLWRhdGVwaWNrZXItdGltZS0tY3VycmVudC1taW51dGVzXCIpLHRoaXMuJGFtcG09ZShcIi5haXItZGF0ZXBpY2tlci10aW1lLS1jdXJyZW50LWFtcG1cIil9c2V0VGltZShlKXt0aGlzLnNldE1pbk1heFRpbWUoZSksdGhpcy5zZXRDdXJyZW50VGltZShlKX1hZGRUaW1lVG9EYXRlKGUpe2UmJihlLnNldEhvdXJzKHRoaXMuaG91cnMpLGUuc2V0TWludXRlcyh0aGlzLm1pbnV0ZXMpKX1zZXRNaW5NYXhUaW1lKGUpe2lmKHRoaXMuc2V0TWluTWF4VGltZUZyb21PcHRpb25zKCksZSl7bGV0e21pbkRhdGU6dCxtYXhEYXRlOml9PXRoaXMuZHA7dCYmcChlLHQpJiZ0aGlzLnNldE1pblRpbWVGcm9tTWluRGF0ZSh0KSxpJiZwKGUsaSkmJnRoaXMuc2V0TWF4VGltZUZyb21NYXhEYXRlKGkpfX1zZXRDdXJyZW50VGltZShlKXtsZXR7aG91cnM6dCxtaW51dGVzOml9PWU/byhlKTp0aGlzO3RoaXMuaG91cnM9dyh0LHRoaXMubWluSG91cnMsdGhpcy5tYXhIb3VycyksdGhpcy5taW51dGVzPXcoaSx0aGlzLm1pbk1pbnV0ZXMsdGhpcy5tYXhNaW51dGVzKX1zZXRNaW5NYXhUaW1lRnJvbU9wdGlvbnMoKXtsZXR7bWluSG91cnM6ZSxtaW5NaW51dGVzOnQsbWF4SG91cnM6aSxtYXhNaW51dGVzOnN9PXRoaXMub3B0czt0aGlzLm1pbkhvdXJzPXcoZSwwLDIzKSx0aGlzLm1pbk1pbnV0ZXM9dyh0LDAsNTkpLHRoaXMubWF4SG91cnM9dyhpLDAsMjMpLHRoaXMubWF4TWludXRlcz13KHMsMCw1OSl9c2V0TWluVGltZUZyb21NaW5EYXRlKGUpe2xldHtsYXN0U2VsZWN0ZWREYXRlOnR9PXRoaXMuZHA7dGhpcy5taW5Ib3Vycz1lLmdldEhvdXJzKCksdCYmdC5nZXRIb3VycygpPmUuZ2V0SG91cnMoKT90aGlzLm1pbk1pbnV0ZXM9dGhpcy5vcHRzLm1pbk1pbnV0ZXM6dGhpcy5taW5NaW51dGVzPWUuZ2V0TWludXRlcygpfXNldE1heFRpbWVGcm9tTWF4RGF0ZShlKXtsZXR7bGFzdFNlbGVjdGVkRGF0ZTp0fT10aGlzLmRwO3RoaXMubWF4SG91cnM9ZS5nZXRIb3VycygpLHQmJnQuZ2V0SG91cnMoKTxlLmdldEhvdXJzKCk/dGhpcy5tYXhNaW51dGVzPXRoaXMub3B0cy5tYXhNaW51dGVzOnRoaXMubWF4TWludXRlcz1lLmdldE1pbnV0ZXMoKX11cGRhdGVTbGlkZXJzKCl7cih0aGlzLiRob3Vycyx7bWluOnRoaXMubWluSG91cnMsbWF4OnRoaXMubWF4SG91cnN9KS52YWx1ZT10aGlzLmhvdXJzLHIodGhpcy4kbWludXRlcyx7bWluOnRoaXMubWluTWludXRlcyxtYXg6dGhpcy5tYXhNaW51dGVzfSkudmFsdWU9dGhpcy5taW51dGVzfXVwZGF0ZVRleHQoKXt0aGlzLiRob3Vyc1RleHQuaW5uZXJIVE1MPWQodGhpcy5kaXNwbGF5SG91cnMpLHRoaXMuJG1pbnV0ZXNUZXh0LmlubmVySFRNTD1kKHRoaXMubWludXRlcyksdGhpcy5hbXBtJiYodGhpcy4kYW1wbS5pbm5lckhUTUw9dGhpcy5kYXlQZXJpb2QpfXNldCBob3VycyhlKXt0aGlzLl9ob3Vycz1lO2xldHtob3Vyczp0LGRheVBlcmlvZDppfT1sKGUpO3RoaXMuZGlzcGxheUhvdXJzPXRoaXMuYW1wbT90OmUsdGhpcy5kYXlQZXJpb2Q9aX1nZXQgaG91cnMoKXtyZXR1cm4gdGhpcy5faG91cnN9cmVuZGVyKCl7dGhpcy51cGRhdGVTbGlkZXJzKCksdGhpcy51cGRhdGVUZXh0KCl9fWZ1bmN0aW9uIEEoZSx0LGkpe3JldHVybih0PWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVybiBlO3ZhciBpPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1pKXt2YXIgcz1pLmNhbGwoZSx0KTtpZihcIm9iamVjdFwiIT10eXBlb2YgcylyZXR1cm4gczt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuIFN0cmluZyhlKX0oZSxcInN0cmluZ1wiKTtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgdD90OlN0cmluZyh0KX0odCkpaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTppLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1pLGV9Y2xhc3MgTntjb25zdHJ1Y3RvcihlKXtsZXR7ZHA6dCxvcHRzOml9PWU7QSh0aGlzLFwicHJlc3NlZEtleXNcIixuZXcgU2V0KSxBKHRoaXMsXCJob3RLZXlzXCIsbmV3IE1hcChbW1tbXCJDb250cm9sXCIsXCJBcnJvd1JpZ2h0XCJdLFtcIkNvbnRyb2xcIixcIkFycm93VXBcIl1dLGU9PmUubW9udGgrK10sW1tbXCJDb250cm9sXCIsXCJBcnJvd0xlZnRcIl0sW1wiQ29udHJvbFwiLFwiQXJyb3dEb3duXCJdXSxlPT5lLm1vbnRoLS1dLFtbW1wiU2hpZnRcIixcIkFycm93UmlnaHRcIl0sW1wiU2hpZnRcIixcIkFycm93VXBcIl1dLGU9PmUueWVhcisrXSxbW1tcIlNoaWZ0XCIsXCJBcnJvd0xlZnRcIl0sW1wiU2hpZnRcIixcIkFycm93RG93blwiXV0sZT0+ZS55ZWFyLS1dLFtbW1wiQWx0XCIsXCJBcnJvd1JpZ2h0XCJdLFtcIkFsdFwiLFwiQXJyb3dVcFwiXV0sZT0+ZS55ZWFyKz0xMF0sW1tbXCJBbHRcIixcIkFycm93TGVmdFwiXSxbXCJBbHRcIixcIkFycm93RG93blwiXV0sZT0+ZS55ZWFyLT0xMF0sW1tcIkNvbnRyb2xcIixcIlNoaWZ0XCIsXCJBcnJvd1VwXCJdLChlLHQpPT50LnVwKCldXSkpLEEodGhpcyxcImhhbmRsZUhvdEtleVwiLChlPT57bGV0IHQ9dGhpcy5ob3RLZXlzLmdldChlKSxpPW8odGhpcy5nZXRJbml0aWFsRm9jdXNEYXRlKCkpO3QoaSx0aGlzLmRwKTtsZXR7eWVhcjpzLG1vbnRoOmEsZGF0ZTpufT1pLHI9aChuZXcgRGF0ZShzLGEpKTtyPG4mJihuPXIpO2xldCBsPXRoaXMuZHAuZ2V0Q2xhbXBlZERhdGUobmV3IERhdGUocyxhLG4pKTt0aGlzLmRwLnNldEZvY3VzRGF0ZShsLHt2aWV3RGF0ZVRyYW5zaXRpb246ITB9KX0pKSxBKHRoaXMsXCJpc0hvdEtleVByZXNzZWRcIiwoKCk9PntsZXQgZT0hMSx0PXRoaXMucHJlc3NlZEtleXMuc2l6ZSxpPWU9PnRoaXMucHJlc3NlZEtleXMuaGFzKGUpO2ZvcihsZXRbc11vZiB0aGlzLmhvdEtleXMpe2lmKGUpYnJlYWs7aWYoQXJyYXkuaXNBcnJheShzWzBdKSlzLmZvckVhY2goKGE9PntlfHx0IT09YS5sZW5ndGh8fChlPWEuZXZlcnkoaSkmJnMpfSkpO2Vsc2V7aWYodCE9PXMubGVuZ3RoKWNvbnRpbnVlO2U9cy5ldmVyeShpKSYmc319cmV0dXJuIGV9KSksQSh0aGlzLFwiaXNBcnJvd1wiLChlPT5lPj0zNyYmZTw9NDApKSxBKHRoaXMsXCJvbktleURvd25cIiwoZT0+e2xldHtrZXk6dCx3aGljaDppfT1lLHtkcDpzLGRwOntmb2N1c0RhdGU6YX0sb3B0czpufT10aGlzO3RoaXMucmVnaXN0ZXJLZXkodCk7bGV0IHI9dGhpcy5pc0hvdEtleVByZXNzZWQoKTtpZihyKXJldHVybiBlLnByZXZlbnREZWZhdWx0KCksdm9pZCB0aGlzLmhhbmRsZUhvdEtleShyKTtpZih0aGlzLmlzQXJyb3coaSkpcmV0dXJuIGUucHJldmVudERlZmF1bHQoKSx2b2lkIHRoaXMuZm9jdXNOZXh0Q2VsbCh0KTtpZihcIkVudGVyXCI9PT10KXtpZihzLmN1cnJlbnRWaWV3IT09bi5taW5WaWV3KXJldHVybiB2b2lkIHMuZG93bigpO2lmKGEpe2xldCBlPXMuX2NoZWNrSWZEYXRlSXNTZWxlY3RlZChhKTtyZXR1cm4gdm9pZChlP3MuX2hhbmRsZUFscmVhZHlTZWxlY3RlZERhdGVzKGUsYSk6cy5zZWxlY3REYXRlKGEpKX19XCJFc2NhcGVcIj09PXQmJnRoaXMuZHAuaGlkZSgpfSkpLEEodGhpcyxcIm9uS2V5VXBcIiwoZT0+e3RoaXMucmVtb3ZlS2V5KGUua2V5KX0pKSx0aGlzLmRwPXQsdGhpcy5vcHRzPWksdGhpcy5pbml0KCl9aW5pdCgpe3RoaXMuYmluZEtleWJvYXJkRXZlbnRzKCl9YmluZEtleWJvYXJkRXZlbnRzKCl7bGV0eyRlbDplfT10aGlzLmRwO2UuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0aGlzLm9uS2V5RG93biksZS5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIix0aGlzLm9uS2V5VXApfWRlc3Ryb3koKXtsZXR7JGVsOmV9PXRoaXMuZHA7ZS5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMub25LZXlEb3duKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLHRoaXMub25LZXlVcCksdGhpcy5ob3RLZXlzPW51bGwsdGhpcy5wcmVzc2VkS2V5cz1udWxsfWdldEluaXRpYWxGb2N1c0RhdGUoKXtsZXR7Zm9jdXNEYXRlOmUsY3VycmVudFZpZXc6dCxzZWxlY3RlZERhdGVzOnMscGFyc2VkVmlld0RhdGU6e3llYXI6YSxtb250aDpufX09dGhpcy5kcCxyPWV8fHNbcy5sZW5ndGgtMV07aWYoIXIpc3dpdGNoKHQpe2Nhc2UgaS5kYXlzOnI9bmV3IERhdGUoYSxuLChuZXcgRGF0ZSkuZ2V0RGF0ZSgpKTticmVhaztjYXNlIGkubW9udGhzOnI9bmV3IERhdGUoYSxuLDEpO2JyZWFrO2Nhc2UgaS55ZWFyczpyPW5ldyBEYXRlKGEsMCwxKX1yZXR1cm4gcn1mb2N1c05leHRDZWxsKGUpe2xldCB0PXRoaXMuZ2V0SW5pdGlhbEZvY3VzRGF0ZSgpLHtjdXJyZW50VmlldzpzfT10aGlzLmRwLHtkYXlzOmEsbW9udGhzOm4seWVhcnM6cn09aSxoPW8odCksbD1oLnllYXIsZD1oLm1vbnRoLGM9aC5kYXRlO3N3aXRjaChlKXtjYXNlXCJBcnJvd0xlZnRcIjpzPT09YSYmKGMtPTEpLHM9PT1uJiYoZC09MSkscz09PXImJihsLT0xKTticmVhaztjYXNlXCJBcnJvd1VwXCI6cz09PWEmJihjLT03KSxzPT09biYmKGQtPTMpLHM9PT1yJiYobC09NCk7YnJlYWs7Y2FzZVwiQXJyb3dSaWdodFwiOnM9PT1hJiYoYys9MSkscz09PW4mJihkKz0xKSxzPT09ciYmKGwrPTEpO2JyZWFrO2Nhc2VcIkFycm93RG93blwiOnM9PT1hJiYoYys9Nykscz09PW4mJihkKz0zKSxzPT09ciYmKGwrPTQpfWxldCB1PXRoaXMuZHAuZ2V0Q2xhbXBlZERhdGUobmV3IERhdGUobCxkLGMpKTt0aGlzLmRwLnNldEZvY3VzRGF0ZSh1LHt2aWV3RGF0ZVRyYW5zaXRpb246ITB9KX1yZWdpc3RlcktleShlKXt0aGlzLnByZXNzZWRLZXlzLmFkZChlKX1yZW1vdmVLZXkoZSl7dGhpcy5wcmVzc2VkS2V5cy5kZWxldGUoZSl9fWxldCBJPXtvbihlLHQpe3RoaXMuX19ldmVudHN8fCh0aGlzLl9fZXZlbnRzPXt9KSx0aGlzLl9fZXZlbnRzW2VdP3RoaXMuX19ldmVudHNbZV0ucHVzaCh0KTp0aGlzLl9fZXZlbnRzW2VdPVt0XX0sb2ZmKGUsdCl7dGhpcy5fX2V2ZW50cyYmdGhpcy5fX2V2ZW50c1tlXSYmKHRoaXMuX19ldmVudHNbZV09dGhpcy5fX2V2ZW50c1tlXS5maWx0ZXIoKGU9PmUhPT10KSkpfSxyZW1vdmVBbGxFdmVudHMoKXt0aGlzLl9fZXZlbnRzPXt9fSx0cmlnZ2VyKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KHQ+MT90LTE6MCkscz0xO3M8dDtzKyspaVtzLTFdPWFyZ3VtZW50c1tzXTt0aGlzLl9fZXZlbnRzJiZ0aGlzLl9fZXZlbnRzW2VdJiZ0aGlzLl9fZXZlbnRzW2VdLmZvckVhY2goKGU9PntlKC4uLmkpfSkpfX07ZnVuY3Rpb24gUChlLHQsaSl7cmV0dXJuKHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuIGU7dmFyIGk9ZVtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PWkpe3ZhciBzPWkuY2FsbChlLHQpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBzKXJldHVybiBzO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKGUpfShlLFwic3RyaW5nXCIpO3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiB0P3Q6U3RyaW5nKHQpfSh0KSlpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOmksZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPWksZX1sZXQgaj1cIlwiLFI9XCJcIixCPSExO2NsYXNzIEt7c3RhdGljIGJ1aWxkR2xvYmFsQ29udGFpbmVyKGUpe0I9ITAsaj1uKHtjbGFzc05hbWU6ZSxpZDplfSksYShcImJvZHlcIikuYXBwZW5kQ2hpbGQoail9Y29uc3RydWN0b3IoZSx0KXt2YXIgcj10aGlzO2lmKFAodGhpcyxcInZpZXdJbmRleGVzXCIsW2kuZGF5cyxpLm1vbnRocyxpLnllYXJzXSksUCh0aGlzLFwibmV4dFwiLCgoKT0+e2xldHt5ZWFyOmUsbW9udGg6dH09dGhpcy5wYXJzZWRWaWV3RGF0ZTtzd2l0Y2godGhpcy5jdXJyZW50Vmlldyl7Y2FzZSBpLmRheXM6dGhpcy5zZXRWaWV3RGF0ZShuZXcgRGF0ZShlLHQrMSwxKSk7YnJlYWs7Y2FzZSBpLm1vbnRoczp0aGlzLnNldFZpZXdEYXRlKG5ldyBEYXRlKGUrMSx0LDEpKTticmVhaztjYXNlIGkueWVhcnM6dGhpcy5zZXRWaWV3RGF0ZShuZXcgRGF0ZShlKzEwLDAsMSkpfX0pKSxQKHRoaXMsXCJwcmV2XCIsKCgpPT57bGV0e3llYXI6ZSxtb250aDp0fT10aGlzLnBhcnNlZFZpZXdEYXRlO3N3aXRjaCh0aGlzLmN1cnJlbnRWaWV3KXtjYXNlIGkuZGF5czp0aGlzLnNldFZpZXdEYXRlKG5ldyBEYXRlKGUsdC0xLDEpKTticmVhaztjYXNlIGkubW9udGhzOnRoaXMuc2V0Vmlld0RhdGUobmV3IERhdGUoZS0xLHQsMSkpO2JyZWFrO2Nhc2UgaS55ZWFyczp0aGlzLnNldFZpZXdEYXRlKG5ldyBEYXRlKGUtMTAsMCwxKSl9fSkpLFAodGhpcyxcIl9maW5pc2hIaWRlXCIsKCgpPT57dGhpcy5oaWRlQW5pbWF0aW9uPSExLHRoaXMuX2Rlc3Ryb3lDb21wb25lbnRzKCksdGhpcy4kY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuJGRhdGVwaWNrZXIpfSkpLFAodGhpcyxcInNldFBvc2l0aW9uXCIsKGZ1bmN0aW9uKGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YoZT1lfHxyLm9wdHMucG9zaXRpb24pKXJldHVybiB2b2lkKHIuY3VzdG9tSGlkZT1lKHskZGF0ZXBpY2tlcjpyLiRkYXRlcGlja2VyLCR0YXJnZXQ6ci4kZWwsJHBvaW50ZXI6ci4kcG9pbnRlcixpc1ZpZXdDaGFuZ2U6dCxkb25lOnIuX2ZpbmlzaEhpZGV9KSk7bGV0IGkscyx7aXNNb2JpbGU6YX09ci5vcHRzLG49ci4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksaD1yLiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxvPXIuJGRhdGVwaWNrZXIub2Zmc2V0UGFyZW50LGw9ci4kZWwub2Zmc2V0UGFyZW50LGQ9ci4kZGF0ZXBpY2tlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxjPWUuc3BsaXQoXCIgXCIpLHU9d2luZG93LnNjcm9sbFkscD13aW5kb3cuc2Nyb2xsWCxtPXIub3B0cy5vZmZzZXQsdj1jWzBdLGc9Y1sxXTtpZihhKXIuJGRhdGVwaWNrZXIuc3R5bGUuY3NzVGV4dD1cImxlZnQ6IDUwJTsgdG9wOiA1MCVcIjtlbHNle2lmKG89PT1sJiZvIT09ZG9jdW1lbnQuYm9keSYmKGg9e3RvcDpyLiRlbC5vZmZzZXRUb3AsbGVmdDpyLiRlbC5vZmZzZXRMZWZ0LHdpZHRoOm4ud2lkdGgsaGVpZ2h0OnIuJGVsLm9mZnNldEhlaWdodH0sdT0wLHA9MCksbyE9PWwmJm8hPT1kb2N1bWVudC5ib2R5KXtsZXQgZT1vLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2g9e3RvcDpuLnRvcC1lLnRvcCxsZWZ0Om4ubGVmdC1lLmxlZnQsd2lkdGg6bi53aWR0aCxoZWlnaHQ6bi5oZWlnaHR9LHU9MCxwPTB9c3dpdGNoKHYpe2Nhc2VcInRvcFwiOmk9aC50b3AtZC5oZWlnaHQtbTticmVhaztjYXNlXCJyaWdodFwiOnM9aC5sZWZ0K2gud2lkdGgrbTticmVhaztjYXNlXCJib3R0b21cIjppPWgudG9wK2guaGVpZ2h0K207YnJlYWs7Y2FzZVwibGVmdFwiOnM9aC5sZWZ0LWQud2lkdGgtbX1zd2l0Y2goZyl7Y2FzZVwidG9wXCI6aT1oLnRvcDticmVhaztjYXNlXCJyaWdodFwiOnM9aC5sZWZ0K2gud2lkdGgtZC53aWR0aDticmVhaztjYXNlXCJib3R0b21cIjppPWgudG9wK2guaGVpZ2h0LWQuaGVpZ2h0O2JyZWFrO2Nhc2VcImxlZnRcIjpzPWgubGVmdDticmVhaztjYXNlXCJjZW50ZXJcIjovbGVmdHxyaWdodC8udGVzdCh2KT9pPWgudG9wK2guaGVpZ2h0LzItZC5oZWlnaHQvMjpzPWgubGVmdCtoLndpZHRoLzItZC53aWR0aC8yfXIuJGRhdGVwaWNrZXIuc3R5bGUuY3NzVGV4dD1gbGVmdDogJHtzK3B9cHg7IHRvcDogJHtpK3V9cHhgfX0pKSxQKHRoaXMsXCJfc2V0SW5wdXRWYWx1ZVwiLCgoKT0+e2xldHtvcHRzOmUsJGFsdEZpZWxkOnQsbG9jYWxlOntkYXRlRm9ybWF0Oml9fT10aGlzLHthbHRGaWVsZERhdGVGb3JtYXQ6cyxhbHRGaWVsZDphfT1lO2EmJnQmJih0LnZhbHVlPXRoaXMuX2dldElucHV0VmFsdWUocykpLHRoaXMuJGVsLnZhbHVlPXRoaXMuX2dldElucHV0VmFsdWUoaSl9KSksUCh0aGlzLFwiX2dldElucHV0VmFsdWVcIiwoZT0+e2xldHtzZWxlY3RlZERhdGVzOnQsb3B0czppfT10aGlzLHttdWx0aXBsZURhdGVzOnMsbXVsdGlwbGVEYXRlc1NlcGFyYXRvcjphfT1pO2lmKCF0Lmxlbmd0aClyZXR1cm5cIlwiO2xldCBuPVwiZnVuY3Rpb25cIj09dHlwZW9mIGUscj1uP2Uocz90OnRbMF0pOnQubWFwKCh0PT50aGlzLmZvcm1hdERhdGUodCxlKSkpO3JldHVybiByPW4/cjpyLmpvaW4oYSkscn0pKSxQKHRoaXMsXCJfY2hlY2tJZkRhdGVJc1NlbGVjdGVkXCIsKGZ1bmN0aW9uKGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTppLmRheXMscz0hMTtyZXR1cm4gci5zZWxlY3RlZERhdGVzLnNvbWUoKGk9PntsZXQgYT1wKGUsaSx0KTtyZXR1cm4gcz1hJiZpLGF9KSksc30pKSxQKHRoaXMsXCJfc2NoZWR1bGVDYWxsQWZ0ZXJUcmFuc2l0aW9uXCIsKGU9Pnt0aGlzLl9jYW5jZWxTY2hlZHVsZWRDYWxsKCksZSYmZSghMSksdGhpcy5fb25UcmFuc2l0aW9uRW5kPSgpPT57ZSYmZSghMCl9LHRoaXMuJGRhdGVwaWNrZXIuYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIix0aGlzLl9vblRyYW5zaXRpb25FbmQse29uY2U6ITB9KX0pKSxQKHRoaXMsXCJfY2FuY2VsU2NoZWR1bGVkQ2FsbFwiLCgoKT0+e3RoaXMuJGRhdGVwaWNrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIix0aGlzLl9vblRyYW5zaXRpb25FbmQpfSkpLFAodGhpcyxcInNldFZpZXdEYXRlXCIsKGU9PntpZighKChlPWsoZSkpaW5zdGFuY2VvZiBEYXRlKSlyZXR1cm47aWYocChlLHRoaXMudmlld0RhdGUpKXJldHVybjtsZXQgdD10aGlzLnZpZXdEYXRlO3RoaXMudmlld0RhdGU9ZTtsZXR7b25DaGFuZ2VWaWV3RGF0ZTpzfT10aGlzLm9wdHM7aWYocyl7bGV0e21vbnRoOmUseWVhcjp0fT10aGlzLnBhcnNlZFZpZXdEYXRlO3Moe21vbnRoOmUseWVhcjp0LGRlY2FkZTp0aGlzLmN1ckRlY2FkZX0pfXRoaXMudHJpZ2dlcihpLmV2ZW50Q2hhbmdlVmlld0RhdGUsZSx0KX0pKSxQKHRoaXMsXCJzZXRGb2N1c0RhdGVcIiwoZnVuY3Rpb24oZSl7bGV0IHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9OyghZXx8KGU9ayhlKSlpbnN0YW5jZW9mIERhdGUpJiYoci5mb2N1c0RhdGU9ZSxyLm9wdHMucmFuZ2UmJmUmJnIuX2hhbmRsZVJhbmdlT25Gb2N1cygpLHIudHJpZ2dlcihpLmV2ZW50Q2hhbmdlRm9jdXNEYXRlLGUsdCkpfSkpLFAodGhpcyxcInNldEN1cnJlbnRWaWV3XCIsKGU9PntpZih0aGlzLnZpZXdJbmRleGVzLmluY2x1ZGVzKGUpKXtpZih0aGlzLmN1cnJlbnRWaWV3PWUsdGhpcy5lbElzSW5wdXQmJnRoaXMudmlzaWJsZSYmdGhpcy5zZXRQb3NpdGlvbih2b2lkIDAsITApLHRoaXMudHJpZ2dlcihpLmV2ZW50Q2hhbmdlQ3VycmVudFZpZXcsZSksIXRoaXMudmlld3NbZV0pe2xldCB0PXRoaXMudmlld3NbZV09bmV3IEYoe2RwOnRoaXMsb3B0czp0aGlzLm9wdHMsdHlwZTplfSk7dGhpcy5zaG91bGRVcGRhdGVET00mJnRoaXMuJGNvbnRlbnQuYXBwZW5kQ2hpbGQodC4kZWwpfXRoaXMub3B0cy5vbkNoYW5nZVZpZXcmJnRoaXMub3B0cy5vbkNoYW5nZVZpZXcoZSl9fSkpLFAodGhpcyxcIl91cGRhdGVMYXN0U2VsZWN0ZWREYXRlXCIsKGU9Pnt0aGlzLmxhc3RTZWxlY3RlZERhdGU9ZSx0aGlzLnRyaWdnZXIoaS5ldmVudENoYW5nZUxhc3RTZWxlY3RlZERhdGUsZSl9KSksUCh0aGlzLFwiZGVzdHJveVwiLCgoKT0+e2xldHtzaG93RXZlbnQ6ZSxpc01vYmlsZTp0fT10aGlzLm9wdHMsaT10aGlzLiRkYXRlcGlja2VyLnBhcmVudE5vZGU7aSYmaS5yZW1vdmVDaGlsZCh0aGlzLiRkYXRlcGlja2VyKSx0aGlzLiRlbC5yZW1vdmVFdmVudExpc3RlbmVyKGUsdGhpcy5fb25Gb2N1cyksdGhpcy4kZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJsdXJcIix0aGlzLl9vbkJsdXIpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5fb25SZXNpemUpLHQmJnRoaXMuX3JlbW92ZU1vYmlsZUF0dHJpYnV0ZXMoKSx0aGlzLmtleWJvYXJkTmF2JiZ0aGlzLmtleWJvYXJkTmF2LmRlc3Ryb3koKSx0aGlzLnZpZXdzPW51bGwsdGhpcy5uYXY9bnVsbCx0aGlzLiRkYXRlcGlja2VyPW51bGwsdGhpcy5vcHRzPW51bGwsdGhpcy4kY3VzdG9tQ29udGFpbmVyPW51bGwsdGhpcy52aWV3RGF0ZT1udWxsLHRoaXMuZm9jdXNEYXRlPW51bGwsdGhpcy5zZWxlY3RlZERhdGVzPW51bGwsdGhpcy5yYW5nZURhdGVGcm9tPW51bGwsdGhpcy5yYW5nZURhdGVUbz1udWxsfSkpLFAodGhpcyxcInVwZGF0ZVwiLChlPT57bGV0IHQ9Yih7fSx0aGlzLm9wdHMpO2IodGhpcy5vcHRzLGUpO2xldHt0aW1lcGlja2VyOnMsYnV0dG9uczphLHJhbmdlOm4sc2VsZWN0ZWREYXRlczpyLGlzTW9iaWxlOmh9PXRoaXMub3B0cyxvPXRoaXMudmlzaWJsZXx8dGhpcy50cmVhdEFzSW5saW5lO3RoaXMuX2NyZWF0ZU1pbk1heERhdGVzKCksdGhpcy5fbGltaXRWaWV3RGF0ZUJ5TWF4TWluRGF0ZXMoKSx0aGlzLl9oYW5kbGVMb2NhbGUoKSwhdC5zZWxlY3RlZERhdGVzJiZyJiZ0aGlzLnNlbGVjdERhdGUociksZS52aWV3JiZ0aGlzLnNldEN1cnJlbnRWaWV3KGUudmlldyksdGhpcy5fc2V0SW5wdXRWYWx1ZSgpLHQucmFuZ2UmJiFuPyh0aGlzLnJhbmdlRGF0ZVRvPSExLHRoaXMucmFuZ2VEYXRlRnJvbT0hMSk6IXQucmFuZ2UmJm4mJnRoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGgmJih0aGlzLnJhbmdlRGF0ZUZyb209dGhpcy5zZWxlY3RlZERhdGVzWzBdLHRoaXMucmFuZ2VEYXRlVG89dGhpcy5zZWxlY3RlZERhdGVzWzFdKSx0LnRpbWVwaWNrZXImJiFzPyhvJiZ0aGlzLnRpbWVwaWNrZXIuZGVzdHJveSgpLHRoaXMudGltZXBpY2tlcj0hMSx0aGlzLiR0aW1lcGlja2VyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy4kdGltZXBpY2tlcikpOiF0LnRpbWVwaWNrZXImJnMmJnRoaXMuX2FkZFRpbWVwaWNrZXIoKSwhdC5idXR0b25zJiZhP3RoaXMuX2FkZEJ1dHRvbnMoKTp0LmJ1dHRvbnMmJiFhPyh0aGlzLmJ1dHRvbnMuZGVzdHJveSgpLHRoaXMuJGJ1dHRvbnMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLiRidXR0b25zKSk6byYmdC5idXR0b25zJiZhJiZ0aGlzLmJ1dHRvbnMuY2xlYXJIdG1sKCkucmVuZGVyKCksIXQuaXNNb2JpbGUmJmg/KHRoaXMudHJlYXRBc0lubGluZXx8Unx8dGhpcy5fY3JlYXRlTW9iaWxlT3ZlcmxheSgpLHRoaXMuX2FkZE1vYmlsZUF0dHJpYnV0ZXMoKSx0aGlzLnZpc2libGUmJnRoaXMuX3Nob3dNb2JpbGVPdmVybGF5KCkpOnQuaXNNb2JpbGUmJiFoJiYodGhpcy5fcmVtb3ZlTW9iaWxlQXR0cmlidXRlcygpLHRoaXMudmlzaWJsZSYmKFIuY2xhc3NMaXN0LnJlbW92ZShcIi1hY3RpdmUtXCIpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXMub3B0cy5wb3NpdGlvbiYmdGhpcy5zZXRQb3NpdGlvbigpKSksbyYmKHRoaXMubmF2LnVwZGF0ZSgpLHRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10ucmVuZGVyKCksdGhpcy5jdXJyZW50Vmlldz09PWkuZGF5cyYmdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5yZW5kZXJEYXlOYW1lcygpKX0pKSxQKHRoaXMsXCJpc090aGVyTW9udGhcIiwoZT0+e2xldHttb250aDp0fT1vKGUpO3JldHVybiB0IT09dGhpcy5wYXJzZWRWaWV3RGF0ZS5tb250aH0pKSxQKHRoaXMsXCJpc090aGVyWWVhclwiLChlPT57bGV0e3llYXI6dH09byhlKTtyZXR1cm4gdCE9PXRoaXMucGFyc2VkVmlld0RhdGUueWVhcn0pKSxQKHRoaXMsXCJpc090aGVyRGVjYWRlXCIsKGU9PntsZXR7eWVhcjp0fT1vKGUpLFtpLHNdPWModGhpcy52aWV3RGF0ZSk7cmV0dXJuIHQ8aXx8dD5zfSkpLFAodGhpcyxcIl9vbkNoYW5nZVNlbGVjdGVkRGF0ZVwiLChlPT57bGV0e3NpbGVudDp0fT1lO3NldFRpbWVvdXQoKCgpPT57dGhpcy5fc2V0SW5wdXRWYWx1ZSgpLHRoaXMub3B0cy5vblNlbGVjdCYmIXQmJnRoaXMuX3RyaWdnZXJPblNlbGVjdCgpfSkpfSkpLFAodGhpcyxcIl9vbkNoYW5nZUZvY3VzZWREYXRlXCIsKGZ1bmN0aW9uKGUpe2xldHt2aWV3RGF0ZVRyYW5zaXRpb246dH09YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O2lmKCFlKXJldHVybjtsZXQgaT0hMTt0JiYoaT1yLmlzT3RoZXJNb250aChlKXx8ci5pc090aGVyWWVhcihlKXx8ci5pc090aGVyRGVjYWRlKGUpKSxpJiZyLnNldFZpZXdEYXRlKGUpfSkpLFAodGhpcyxcIl9vbkNoYW5nZVRpbWVcIiwoZT0+e2xldHtob3Vyczp0LG1pbnV0ZXM6aX09ZSxzPW5ldyBEYXRlLHtsYXN0U2VsZWN0ZWREYXRlOmEsb3B0czp7b25TZWxlY3Q6bn19PXRoaXMscj1hO2F8fChyPXMpO2xldCBoPXRoaXMuZ2V0Q2VsbChyLHRoaXMuY3VycmVudFZpZXdTaW5ndWxhciksbz1oJiZoLmFkcENlbGw7byYmby5pc0Rpc2FibGVkfHwoci5zZXRIb3Vycyh0KSxyLnNldE1pbnV0ZXMoaSksYT8odGhpcy5fc2V0SW5wdXRWYWx1ZSgpLG4mJnRoaXMuX3RyaWdnZXJPblNlbGVjdCgpKTp0aGlzLnNlbGVjdERhdGUocikpfSkpLFAodGhpcyxcIl9vbkZvY3VzXCIsKGU9Pnt0aGlzLnZpc2libGV8fHRoaXMuc2hvdygpfSkpLFAodGhpcyxcIl9vbkJsdXJcIiwoZT0+e3RoaXMuaW5Gb2N1c3x8IXRoaXMudmlzaWJsZXx8dGhpcy5vcHRzLmlzTW9iaWxlfHx0aGlzLmhpZGUoKX0pKSxQKHRoaXMsXCJfb25Nb3VzZURvd25cIiwoZT0+e3RoaXMuaW5Gb2N1cz0hMH0pKSxQKHRoaXMsXCJfb25Nb3VzZVVwXCIsKGU9Pnt0aGlzLmluRm9jdXM9ITEsdGhpcy4kZWwuZm9jdXMoKX0pKSxQKHRoaXMsXCJfb25SZXNpemVcIiwoKCk9Pnt0aGlzLnZpc2libGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXMub3B0cy5wb3NpdGlvbiYmdGhpcy5zZXRQb3NpdGlvbigpfSkpLFAodGhpcyxcIl9vbkNsaWNrT3ZlcmxheVwiLCgoKT0+e3RoaXMudmlzaWJsZSYmdGhpcy5oaWRlKCl9KSksUCh0aGlzLFwiaXNXZWVrZW5kXCIsKGU9PnRoaXMub3B0cy53ZWVrZW5kcy5pbmNsdWRlcyhlKSkpLFAodGhpcyxcImdldENsYW1wZWREYXRlXCIsKGU9PntsZXR7bWluRGF0ZTp0LG1heERhdGU6aX09dGhpcyxzPWU7cmV0dXJuIGkmJm0oZSxpKT9zPWk6dCYmdihlLHQpJiYocz10KSxzfSkpLHRoaXMuJGVsPWEoZSksIXRoaXMuJGVsKXJldHVybjt0aGlzLiRkYXRlcGlja2VyPW4oe2NsYXNzTmFtZTpcImFpci1kYXRlcGlja2VyXCJ9KSx0aGlzLm9wdHM9Yih7fSxzLHQpLHRoaXMuJGN1c3RvbUNvbnRhaW5lcj0hIXRoaXMub3B0cy5jb250YWluZXImJmEodGhpcy5vcHRzLmNvbnRhaW5lciksdGhpcy4kYWx0RmllbGQ9YSh0aGlzLm9wdHMuYWx0RmllbGR8fCExKTtsZXR7dmlldzpoLHN0YXJ0RGF0ZTpsfT10aGlzLm9wdHM7bHx8KHRoaXMub3B0cy5zdGFydERhdGU9bmV3IERhdGUpLFwiSU5QVVRcIj09PXRoaXMuJGVsLm5vZGVOYW1lJiYodGhpcy5lbElzSW5wdXQ9ITApLHRoaXMuaW5pdGVkPSExLHRoaXMudmlzaWJsZT0hMSx0aGlzLnZpZXdEYXRlPWsodGhpcy5vcHRzLnN0YXJ0RGF0ZSksdGhpcy5mb2N1c0RhdGU9ITEsdGhpcy5pbml0aWFsUmVhZG9ubHk9dGhpcy4kZWwuZ2V0QXR0cmlidXRlKFwicmVhZG9ubHlcIiksdGhpcy5jdXN0b21IaWRlPSExLHRoaXMuY3VycmVudFZpZXc9aCx0aGlzLnNlbGVjdGVkRGF0ZXM9W10sdGhpcy52aWV3cz17fSx0aGlzLmtleXM9W10sdGhpcy5yYW5nZURhdGVGcm9tPVwiXCIsdGhpcy5yYW5nZURhdGVUbz1cIlwiLHRoaXMudGltZXBpY2tlcklzQWN0aXZlPSExLHRoaXMudHJlYXRBc0lubGluZT10aGlzLm9wdHMuaW5saW5lfHwhdGhpcy5lbElzSW5wdXQsdGhpcy5pbml0KCl9aW5pdCgpe2xldHtvcHRzOmUsdHJlYXRBc0lubGluZTp0LG9wdHM6e2lubGluZTppLGlzTW9iaWxlOnMsc2VsZWN0ZWREYXRlczpuLGtleWJvYXJkTmF2OnIsb25seVRpbWVwaWNrZXI6aH19PXRoaXMsbz1hKFwiYm9keVwiKTsoIUJ8fEImJmomJiFvLmNvbnRhaW5zKGopKSYmIWkmJnRoaXMuZWxJc0lucHV0JiYhdGhpcy4kY3VzdG9tQ29udGFpbmVyJiZLLmJ1aWxkR2xvYmFsQ29udGFpbmVyKEsuZGVmYXVsdEdsb2JhbENvbnRhaW5lcklkKSwhc3x8Unx8dHx8dGhpcy5fY3JlYXRlTW9iaWxlT3ZlcmxheSgpLHRoaXMuX2hhbmRsZUxvY2FsZSgpLHRoaXMuX2JpbmRTdWJFdmVudHMoKSx0aGlzLl9jcmVhdGVNaW5NYXhEYXRlcygpLHRoaXMuX2xpbWl0Vmlld0RhdGVCeU1heE1pbkRhdGVzKCksdGhpcy5lbElzSW5wdXQmJihpfHx0aGlzLl9iaW5kRXZlbnRzKCksciYmIWgmJih0aGlzLmtleWJvYXJkTmF2PW5ldyBOKHtkcDp0aGlzLG9wdHM6ZX0pKSksbiYmdGhpcy5zZWxlY3REYXRlKG4se3NpbGVudDohMH0pLHRoaXMub3B0cy52aXNpYmxlJiYhdCYmdGhpcy5zaG93KCkscyYmIXQmJnRoaXMuJGVsLnNldEF0dHJpYnV0ZShcInJlYWRvbmx5XCIsITApLHQmJnRoaXMuX2NyZWF0ZUNvbXBvbmVudHMoKX1fY3JlYXRlTW9iaWxlT3ZlcmxheSgpe1I9bih7Y2xhc3NOYW1lOlwiYWlyLWRhdGVwaWNrZXItb3ZlcmxheVwifSksai5hcHBlbmRDaGlsZChSKX1fY3JlYXRlQ29tcG9uZW50cygpe2xldHtvcHRzOmUsdHJlYXRBc0lubGluZTp0LG9wdHM6e2lubGluZTppLGJ1dHRvbnM6cyx0aW1lcGlja2VyOmEscG9zaXRpb246bixjbGFzc2VzOnIsb25seVRpbWVwaWNrZXI6aCxpc01vYmlsZTpvfX09dGhpczt0aGlzLl9idWlsZEJhc2VIdG1sKCksdGhpcy5lbElzSW5wdXQmJihpfHx0aGlzLl9zZXRQb3NpdGlvbkNsYXNzZXMobikpLCFpJiZ0aGlzLmVsSXNJbnB1dHx8dGhpcy4kZGF0ZXBpY2tlci5jbGFzc0xpc3QuYWRkKFwiLWlubGluZS1cIiksciYmdGhpcy4kZGF0ZXBpY2tlci5jbGFzc0xpc3QuYWRkKC4uLnIuc3BsaXQoXCIgXCIpKSxoJiZ0aGlzLiRkYXRlcGlja2VyLmNsYXNzTGlzdC5hZGQoXCItb25seS10aW1lcGlja2VyLVwiKSxvJiYhdCYmdGhpcy5fYWRkTW9iaWxlQXR0cmlidXRlcygpLHRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld109bmV3IEYoe2RwOnRoaXMsdHlwZTp0aGlzLmN1cnJlbnRWaWV3LG9wdHM6ZX0pLHRoaXMubmF2PW5ldyB4KHtkcDp0aGlzLG9wdHM6ZX0pLGEmJnRoaXMuX2FkZFRpbWVwaWNrZXIoKSxzJiZ0aGlzLl9hZGRCdXR0b25zKCksdGhpcy4kY29udGVudC5hcHBlbmRDaGlsZCh0aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLiRlbCksdGhpcy4kbmF2LmFwcGVuZENoaWxkKHRoaXMubmF2LiRlbCl9X2Rlc3Ryb3lDb21wb25lbnRzKCl7Zm9yKGxldCBlIGluIHRoaXMudmlld3MpdGhpcy52aWV3c1tlXS5kZXN0cm95KCk7dGhpcy52aWV3cz17fSx0aGlzLm5hdi5kZXN0cm95KCksdGhpcy50aW1lcGlja2VyJiZ0aGlzLnRpbWVwaWNrZXIuZGVzdHJveSgpfV9hZGRNb2JpbGVBdHRyaWJ1dGVzKCl7Ui5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLl9vbkNsaWNrT3ZlcmxheSksdGhpcy4kZGF0ZXBpY2tlci5jbGFzc0xpc3QuYWRkKFwiLWlzLW1vYmlsZS1cIiksdGhpcy4kZWwuc2V0QXR0cmlidXRlKFwicmVhZG9ubHlcIiwhMCl9X3JlbW92ZU1vYmlsZUF0dHJpYnV0ZXMoKXtSLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMuX29uQ2xpY2tPdmVybGF5KSx0aGlzLiRkYXRlcGlja2VyLmNsYXNzTGlzdC5yZW1vdmUoXCItaXMtbW9iaWxlLVwiKSx0aGlzLmluaXRpYWxSZWFkb25seXx8XCJcIj09PXRoaXMuaW5pdGlhbFJlYWRvbmx5fHx0aGlzLiRlbC5yZW1vdmVBdHRyaWJ1dGUoXCJyZWFkb25seVwiKX1fY3JlYXRlTWluTWF4RGF0ZXMoKXtsZXR7bWluRGF0ZTplLG1heERhdGU6dH09dGhpcy5vcHRzO3RoaXMubWluRGF0ZT0hIWUmJmsoZSksdGhpcy5tYXhEYXRlPSEhdCYmayh0KX1fYWRkVGltZXBpY2tlcigpe3RoaXMuJHRpbWVwaWNrZXI9bih7Y2xhc3NOYW1lOlwiYWlyLWRhdGVwaWNrZXItLXRpbWVcIn0pLHRoaXMuJGRhdGVwaWNrZXIuYXBwZW5kQ2hpbGQodGhpcy4kdGltZXBpY2tlciksdGhpcy50aW1lcGlja2VyPW5ldyBPKHtkcDp0aGlzLG9wdHM6dGhpcy5vcHRzfSksdGhpcy4kdGltZXBpY2tlci5hcHBlbmRDaGlsZCh0aGlzLnRpbWVwaWNrZXIuJGVsKX1fYWRkQnV0dG9ucygpe3RoaXMuJGJ1dHRvbnM9bih7Y2xhc3NOYW1lOlwiYWlyLWRhdGVwaWNrZXItLWJ1dHRvbnNcIn0pLHRoaXMuJGRhdGVwaWNrZXIuYXBwZW5kQ2hpbGQodGhpcy4kYnV0dG9ucyksdGhpcy5idXR0b25zPW5ldyBFKHtkcDp0aGlzLG9wdHM6dGhpcy5vcHRzfSksdGhpcy4kYnV0dG9ucy5hcHBlbmRDaGlsZCh0aGlzLmJ1dHRvbnMuJGVsKX1fYmluZFN1YkV2ZW50cygpe3RoaXMub24oaS5ldmVudENoYW5nZVNlbGVjdGVkRGF0ZSx0aGlzLl9vbkNoYW5nZVNlbGVjdGVkRGF0ZSksdGhpcy5vbihpLmV2ZW50Q2hhbmdlRm9jdXNEYXRlLHRoaXMuX29uQ2hhbmdlRm9jdXNlZERhdGUpLHRoaXMub24oaS5ldmVudENoYW5nZVRpbWUsdGhpcy5fb25DaGFuZ2VUaW1lKX1fYnVpbGRCYXNlSHRtbCgpe2xldHtpbmxpbmU6ZX09dGhpcy5vcHRzO3ZhciB0LGk7dGhpcy5lbElzSW5wdXQ/ZT8odD10aGlzLiRkYXRlcGlja2VyLChpPXRoaXMuJGVsKS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LGkubmV4dFNpYmxpbmcpKTp0aGlzLiRjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy4kZGF0ZXBpY2tlcik6dGhpcy4kZWwuYXBwZW5kQ2hpbGQodGhpcy4kZGF0ZXBpY2tlciksdGhpcy4kZGF0ZXBpY2tlci5pbm5lckhUTUw9JzxpIGNsYXNzPVwiYWlyLWRhdGVwaWNrZXItLXBvaW50ZXJcIj48L2k+PGRpdiBjbGFzcz1cImFpci1kYXRlcGlja2VyLS1uYXZpZ2F0aW9uXCI+PC9kaXY+PGRpdiBjbGFzcz1cImFpci1kYXRlcGlja2VyLS1jb250ZW50XCI+PC9kaXY+Jyx0aGlzLiRjb250ZW50PWEoXCIuYWlyLWRhdGVwaWNrZXItLWNvbnRlbnRcIix0aGlzLiRkYXRlcGlja2VyKSx0aGlzLiRwb2ludGVyPWEoXCIuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXJcIix0aGlzLiRkYXRlcGlja2VyKSx0aGlzLiRuYXY9YShcIi5haXItZGF0ZXBpY2tlci0tbmF2aWdhdGlvblwiLHRoaXMuJGRhdGVwaWNrZXIpfV9oYW5kbGVMb2NhbGUoKXtsZXR7bG9jYWxlOmUsZGF0ZUZvcm1hdDp0LGZpcnN0RGF5OmksdGltZXBpY2tlcjpzLG9ubHlUaW1lcGlja2VyOmEsdGltZUZvcm1hdDpuLGRhdGVUaW1lU2VwYXJhdG9yOnJ9PXRoaXMub3B0czt2YXIgaDt0aGlzLmxvY2FsZT0oaD1lLEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaCkpKSx0JiYodGhpcy5sb2NhbGUuZGF0ZUZvcm1hdD10KSx2b2lkIDAhPT1uJiZcIlwiIT09biYmKHRoaXMubG9jYWxlLnRpbWVGb3JtYXQ9bik7bGV0e3RpbWVGb3JtYXQ6b309dGhpcy5sb2NhbGU7aWYoXCJcIiE9PWkmJih0aGlzLmxvY2FsZS5maXJzdERheT1pKSxzJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXtsZXQgZT1vP3I6XCJcIjt0aGlzLmxvY2FsZS5kYXRlRm9ybWF0PVt0aGlzLmxvY2FsZS5kYXRlRm9ybWF0LG98fFwiXCJdLmpvaW4oZSl9YSYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmKHRoaXMubG9jYWxlLmRhdGVGb3JtYXQ9dGhpcy5sb2NhbGUudGltZUZvcm1hdCl9X3NldFBvc2l0aW9uQ2xhc3NlcyhlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKXJldHVybiB2b2lkIHRoaXMuJGRhdGVwaWNrZXIuY2xhc3NMaXN0LmFkZChcIi1jdXN0b20tcG9zaXRpb24tXCIpO2xldCB0PShlPWUuc3BsaXQoXCIgXCIpKVswXSxpPWBhaXItZGF0ZXBpY2tlciAtJHt0fS0ke2VbMV19LSAtZnJvbS0ke3R9LWA7dGhpcy4kZGF0ZXBpY2tlci5jbGFzc0xpc3QuYWRkKC4uLmkuc3BsaXQoXCIgXCIpKX1fYmluZEV2ZW50cygpe3RoaXMuJGVsLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5vcHRzLnNob3dFdmVudCx0aGlzLl9vbkZvY3VzKSx0aGlzLiRlbC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLHRoaXMuX29uQmx1ciksdGhpcy4kZGF0ZXBpY2tlci5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsdGhpcy5fb25Nb3VzZURvd24pLHRoaXMuJGRhdGVwaWNrZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLl9vbk1vdXNlVXApLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5fb25SZXNpemUpfV9saW1pdFZpZXdEYXRlQnlNYXhNaW5EYXRlcygpe2xldHt2aWV3RGF0ZTplLG1pbkRhdGU6dCxtYXhEYXRlOml9PXRoaXM7aSYmbShlLGkpJiZ0aGlzLnNldFZpZXdEYXRlKGkpLHQmJnYoZSx0KSYmdGhpcy5zZXRWaWV3RGF0ZSh0KX1mb3JtYXREYXRlKCl7bGV0IGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnRoaXMudmlld0RhdGUsdD1hcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMDtpZihlPWsoZSksIShlIGluc3RhbmNlb2YgRGF0ZSkpcmV0dXJuO2xldCBpPXQscz10aGlzLmxvY2FsZSxhPW8oZSksbj1hLmRheVBlcmlvZCxyPWMoZSksaD1LLnJlcGxhY2VyLGw9e1Q6ZS5nZXRUaW1lKCksbTphLm1pbnV0ZXMsbW06YS5mdWxsTWludXRlcyxoOmEuaG91cnMxMixoaDphLmZ1bGxIb3VyczEyLEg6YS5ob3VycyxISDphLmZ1bGxIb3VycyxhYTpuLEFBOm4udG9VcHBlckNhc2UoKSxFOnMuZGF5c1Nob3J0W2EuZGF5XSxFRUVFOnMuZGF5c1thLmRheV0sZDphLmRhdGUsZGQ6YS5mdWxsRGF0ZSxNOmEubW9udGgrMSxNTTphLmZ1bGxNb250aCxNTU06cy5tb250aHNTaG9ydFthLm1vbnRoXSxNTU1NOnMubW9udGhzW2EubW9udGhdLHl5OmEueWVhci50b1N0cmluZygpLnNsaWNlKC0yKSx5eXl5OmEueWVhcix5eXl5MTpyWzBdLHl5eXkyOnJbMV19O2ZvcihsZXRbZSx0XW9mIE9iamVjdC5lbnRyaWVzKGwpKWk9aChpLEMoZSksdCk7cmV0dXJuIGl9ZG93bihlKXt0aGlzLl9oYW5kbGVVcERvd25BY3Rpb25zKGUsXCJkb3duXCIpfXVwKGUpe3RoaXMuX2hhbmRsZVVwRG93bkFjdGlvbnMoZSxcInVwXCIpfXNlbGVjdERhdGUoZSl7bGV0IHQscz1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30se2N1cnJlbnRWaWV3OmEscGFyc2VkVmlld0RhdGU6bixzZWxlY3RlZERhdGVzOnJ9PXRoaXMse3VwZGF0ZVRpbWU6aH09cyx7bW92ZVRvT3RoZXJNb250aHNPblNlbGVjdDpvLG1vdmVUb090aGVyWWVhcnNPblNlbGVjdDpsLG11bHRpcGxlRGF0ZXM6ZCxyYW5nZTpjLGF1dG9DbG9zZTp1fT10aGlzLm9wdHMscD1yLmxlbmd0aDtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlLmZvckVhY2goKGU9Pnt0aGlzLnNlbGVjdERhdGUoZSxzKX0pKSxuZXcgUHJvbWlzZSgoZT0+e3NldFRpbWVvdXQoZSl9KSk7aWYoKGU9ayhlKSlpbnN0YW5jZW9mIERhdGUpe2lmKGE9PT1pLmRheXMmJmUuZ2V0TW9udGgoKSE9PW4ubW9udGgmJm8mJih0PW5ldyBEYXRlKGUuZ2V0RnVsbFllYXIoKSxlLmdldE1vbnRoKCksMSkpLGE9PT1pLnllYXJzJiZlLmdldEZ1bGxZZWFyKCkhPT1uLnllYXImJmwmJih0PW5ldyBEYXRlKGUuZ2V0RnVsbFllYXIoKSwwLDEpKSx0JiZ0aGlzLnNldFZpZXdEYXRlKHQpLGQmJiFjKXtpZihwPT09ZClyZXR1cm47dGhpcy5fY2hlY2tJZkRhdGVJc1NlbGVjdGVkKGUpfHxyLnB1c2goZSl9ZWxzZSBpZihjKXN3aXRjaChwKXtjYXNlIDE6ci5wdXNoKGUpLHRoaXMucmFuZ2VEYXRlVG98fCh0aGlzLnJhbmdlRGF0ZVRvPWUpLG0odGhpcy5yYW5nZURhdGVGcm9tLHRoaXMucmFuZ2VEYXRlVG8pJiYodGhpcy5yYW5nZURhdGVUbz10aGlzLnJhbmdlRGF0ZUZyb20sdGhpcy5yYW5nZURhdGVGcm9tPWUpLHRoaXMuc2VsZWN0ZWREYXRlcz1bdGhpcy5yYW5nZURhdGVGcm9tLHRoaXMucmFuZ2VEYXRlVG9dO2JyZWFrO2Nhc2UgMjp0aGlzLnNlbGVjdGVkRGF0ZXM9W2VdLHRoaXMucmFuZ2VEYXRlRnJvbT1lLHRoaXMucmFuZ2VEYXRlVG89XCJcIjticmVhaztkZWZhdWx0OnRoaXMuc2VsZWN0ZWREYXRlcz1bZV0sdGhpcy5yYW5nZURhdGVGcm9tPWV9ZWxzZSB0aGlzLnNlbGVjdGVkRGF0ZXM9W2VdO3JldHVybiB0aGlzLnRyaWdnZXIoaS5ldmVudENoYW5nZVNlbGVjdGVkRGF0ZSx7YWN0aW9uOmkuYWN0aW9uU2VsZWN0RGF0ZSxzaWxlbnQ6bnVsbD09cz92b2lkIDA6cy5zaWxlbnQsZGF0ZTplLHVwZGF0ZVRpbWU6aH0pLHRoaXMuX3VwZGF0ZUxhc3RTZWxlY3RlZERhdGUoZSksdSYmIXRoaXMudGltZXBpY2tlcklzQWN0aXZlJiZ0aGlzLnZpc2libGUmJihkfHxjP2MmJjE9PT1wJiZ0aGlzLmhpZGUoKTp0aGlzLmhpZGUoKSksbmV3IFByb21pc2UoKGU9PntzZXRUaW1lb3V0KGUpfSkpfX11bnNlbGVjdERhdGUoZSl7bGV0IHQ9dGhpcy5zZWxlY3RlZERhdGVzLHM9dGhpcztpZigoZT1rKGUpKWluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gdC5zb21lKCgoYSxuKT0+e2lmKHAoYSxlKSlyZXR1cm4gdC5zcGxpY2UobiwxKSxzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoP3MuX3VwZGF0ZUxhc3RTZWxlY3RlZERhdGUocy5zZWxlY3RlZERhdGVzW3Muc2VsZWN0ZWREYXRlcy5sZW5ndGgtMV0pOihzLnJhbmdlRGF0ZUZyb209XCJcIixzLnJhbmdlRGF0ZVRvPVwiXCIscy5fdXBkYXRlTGFzdFNlbGVjdGVkRGF0ZSghMSkpLHRoaXMudHJpZ2dlcihpLmV2ZW50Q2hhbmdlU2VsZWN0ZWREYXRlLHthY3Rpb246aS5hY3Rpb25VbnNlbGVjdERhdGUsZGF0ZTplfSksITB9KSl9cmVwbGFjZURhdGUoZSx0KXtsZXQgcz10aGlzLnNlbGVjdGVkRGF0ZXMuZmluZCgodD0+cCh0LGUsdGhpcy5jdXJyZW50VmlldykpKSxhPXRoaXMuc2VsZWN0ZWREYXRlcy5pbmRleE9mKHMpO2E8MHx8cCh0aGlzLnNlbGVjdGVkRGF0ZXNbYV0sdCx0aGlzLmN1cnJlbnRWaWV3KXx8KHRoaXMuc2VsZWN0ZWREYXRlc1thXT10LHRoaXMudHJpZ2dlcihpLmV2ZW50Q2hhbmdlU2VsZWN0ZWREYXRlLHthY3Rpb246aS5hY3Rpb25TZWxlY3REYXRlLGRhdGU6dCx1cGRhdGVUaW1lOiEwfSksdGhpcy5fdXBkYXRlTGFzdFNlbGVjdGVkRGF0ZSh0KSl9Y2xlYXIoKXtsZXQgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307cmV0dXJuIHRoaXMuc2VsZWN0ZWREYXRlcz1bXSx0aGlzLnJhbmdlRGF0ZUZyb209ITEsdGhpcy5yYW5nZURhdGVUbz0hMSx0aGlzLnRyaWdnZXIoaS5ldmVudENoYW5nZVNlbGVjdGVkRGF0ZSx7YWN0aW9uOmkuYWN0aW9uVW5zZWxlY3REYXRlLHNpbGVudDplLnNpbGVudH0pLG5ldyBQcm9taXNlKChlPT57c2V0VGltZW91dChlKX0pKX1zaG93KCl7bGV0e29uU2hvdzplLGlzTW9iaWxlOnR9PXRoaXMub3B0czt0aGlzLl9jYW5jZWxTY2hlZHVsZWRDYWxsKCksdGhpcy52aXNpYmxlfHx0aGlzLmhpZGVBbmltYXRpb258fHRoaXMuX2NyZWF0ZUNvbXBvbmVudHMoKSx0aGlzLnNldFBvc2l0aW9uKHRoaXMub3B0cy5wb3NpdGlvbiksdGhpcy4kZGF0ZXBpY2tlci5jbGFzc0xpc3QuYWRkKFwiLWFjdGl2ZS1cIiksdGhpcy52aXNpYmxlPSEwLGUmJnRoaXMuX3NjaGVkdWxlQ2FsbEFmdGVyVHJhbnNpdGlvbihlKSx0JiZ0aGlzLl9zaG93TW9iaWxlT3ZlcmxheSgpfWhpZGUoKXtsZXR7b25IaWRlOmUsaXNNb2JpbGU6dH09dGhpcy5vcHRzLGk9dGhpcy5faGFzVHJhbnNpdGlvbigpO3RoaXMudmlzaWJsZT0hMSx0aGlzLmhpZGVBbmltYXRpb249ITAsdGhpcy4kZGF0ZXBpY2tlci5jbGFzc0xpc3QucmVtb3ZlKFwiLWFjdGl2ZS1cIiksdGhpcy5jdXN0b21IaWRlJiZ0aGlzLmN1c3RvbUhpZGUoKSx0aGlzLmVsSXNJbnB1dCYmdGhpcy4kZWwuYmx1cigpLHRoaXMuX3NjaGVkdWxlQ2FsbEFmdGVyVHJhbnNpdGlvbigodD0+eyF0aGlzLmN1c3RvbUhpZGUmJih0JiZpfHwhdCYmIWkpJiZ0aGlzLl9maW5pc2hIaWRlKCksZSYmZSh0KX0pKSx0JiZSLmNsYXNzTGlzdC5yZW1vdmUoXCItYWN0aXZlLVwiKX1fdHJpZ2dlck9uU2VsZWN0KCl7bGV0IGU9W10sdD1bXSx7c2VsZWN0ZWREYXRlczppLGxvY2FsZTpzLG9wdHM6e29uU2VsZWN0OmEsbXVsdGlwbGVEYXRlczpuLHJhbmdlOnJ9fT10aGlzLGg9bnx8cixvPVwiZnVuY3Rpb25cIj09dHlwZW9mIHMuZGF0ZUZvcm1hdDtpLmxlbmd0aCYmKGU9aS5tYXAoZyksdD1vP24/cy5kYXRlRm9ybWF0KGUpOmUubWFwKChlPT5zLmRhdGVGb3JtYXQoZSkpKTplLm1hcCgoZT0+dGhpcy5mb3JtYXREYXRlKGUscy5kYXRlRm9ybWF0KSkpKSxhKHtkYXRlOmg/ZTplWzBdLGZvcm1hdHRlZERhdGU6aD90OnRbMF0sZGF0ZXBpY2tlcjp0aGlzfSl9X2hhbmRsZUFscmVhZHlTZWxlY3RlZERhdGVzKGUsdCl7bGV0e3JhbmdlOmksdG9nZ2xlU2VsZWN0ZWQ6c309dGhpcy5vcHRzO2k/cz90aGlzLnVuc2VsZWN0RGF0ZSh0KToyIT09dGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCYmdGhpcy5zZWxlY3REYXRlKHQpOnMmJnRoaXMudW5zZWxlY3REYXRlKHQpLHN8fHRoaXMuX3VwZGF0ZUxhc3RTZWxlY3RlZERhdGUoZSl9X2hhbmRsZVVwRG93bkFjdGlvbnMoZSx0KXtpZighKChlPWsoZXx8dGhpcy5mb2N1c0RhdGV8fHRoaXMudmlld0RhdGUpKWluc3RhbmNlb2YgRGF0ZSkpcmV0dXJuO2xldCBpPVwidXBcIj09PXQ/dGhpcy52aWV3SW5kZXgrMTp0aGlzLnZpZXdJbmRleC0xO2k+MiYmKGk9MiksaTwwJiYoaT0wKSx0aGlzLnNldFZpZXdEYXRlKG5ldyBEYXRlKGUuZ2V0RnVsbFllYXIoKSxlLmdldE1vbnRoKCksMSkpLHRoaXMuc2V0Q3VycmVudFZpZXcodGhpcy52aWV3SW5kZXhlc1tpXSl9X2hhbmRsZVJhbmdlT25Gb2N1cygpezE9PT10aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoJiYobSh0aGlzLnNlbGVjdGVkRGF0ZXNbMF0sdGhpcy5mb2N1c0RhdGUpPyh0aGlzLnJhbmdlRGF0ZVRvPXRoaXMuc2VsZWN0ZWREYXRlc1swXSx0aGlzLnJhbmdlRGF0ZUZyb209dGhpcy5mb2N1c0RhdGUpOih0aGlzLnJhbmdlRGF0ZVRvPXRoaXMuZm9jdXNEYXRlLHRoaXMucmFuZ2VEYXRlRnJvbT10aGlzLnNlbGVjdGVkRGF0ZXNbMF0pKX1nZXRDZWxsKGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTppLmRheTtpZighKChlPWsoZSkpaW5zdGFuY2VvZiBEYXRlKSlyZXR1cm47bGV0e3llYXI6cyxtb250aDphLGRhdGU6bn09byhlKSxyPWBbZGF0YS15ZWFyPVwiJHtzfVwiXWAsaD1gW2RhdGEtbW9udGg9XCIke2F9XCJdYCxsPXtbaS5kYXldOmAke3J9JHtofVtkYXRhLWRhdGU9XCIke259XCJdYCxbaS5tb250aF06YCR7cn0ke2h9YCxbaS55ZWFyXTpgJHtyfWB9O3JldHVybiB0aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLiRlbC5xdWVyeVNlbGVjdG9yKGxbdF0pfV9zaG93TW9iaWxlT3ZlcmxheSgpe1IuY2xhc3NMaXN0LmFkZChcIi1hY3RpdmUtXCIpfV9oYXNUcmFuc2l0aW9uKCl7cmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuJGRhdGVwaWNrZXIpLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIpLnNwbGl0KFwiLCBcIikucmVkdWNlKCgoZSx0KT0+cGFyc2VGbG9hdCh0KStlKSwwKT4wfWdldCBzaG91bGRVcGRhdGVET00oKXtyZXR1cm4gdGhpcy52aXNpYmxlfHx0aGlzLnRyZWF0QXNJbmxpbmV9Z2V0IHBhcnNlZFZpZXdEYXRlKCl7cmV0dXJuIG8odGhpcy52aWV3RGF0ZSl9Z2V0IGN1cnJlbnRWaWV3U2luZ3VsYXIoKXtyZXR1cm4gdGhpcy5jdXJyZW50Vmlldy5zbGljZSgwLC0xKX1nZXQgY3VyRGVjYWRlKCl7cmV0dXJuIGModGhpcy52aWV3RGF0ZSl9Z2V0IHZpZXdJbmRleCgpe3JldHVybiB0aGlzLnZpZXdJbmRleGVzLmluZGV4T2YodGhpcy5jdXJyZW50Vmlldyl9Z2V0IGlzRmluYWxWaWV3KCl7cmV0dXJuIHRoaXMuY3VycmVudFZpZXc9PT1pLnllYXJzfWdldCBoYXNTZWxlY3RlZERhdGVzKCl7cmV0dXJuIHRoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGg+MH1nZXQgaXNNaW5WaWV3UmVhY2hlZCgpe3JldHVybiB0aGlzLmN1cnJlbnRWaWV3PT09dGhpcy5vcHRzLm1pblZpZXd8fHRoaXMuY3VycmVudFZpZXc9PT1pLmRheXN9Z2V0ICRjb250YWluZXIoKXtyZXR1cm4gdGhpcy4kY3VzdG9tQ29udGFpbmVyfHxqfXN0YXRpYyByZXBsYWNlcihlLHQsaSl7cmV0dXJuIGUucmVwbGFjZSh0LChmdW5jdGlvbihlLHQscyxhKXtyZXR1cm4gdCtpK2F9KSl9fXZhciBVO3JldHVybiBQKEssXCJkZWZhdWx0c1wiLHMpLFAoSyxcInZlcnNpb25cIixcIjMuMy41XCIpLFAoSyxcImRlZmF1bHRHbG9iYWxDb250YWluZXJJZFwiLFwiYWlyLWRhdGVwaWNrZXItZ2xvYmFsLWNvbnRhaW5lclwiKSxVPUsucHJvdG90eXBlLE9iamVjdC5hc3NpZ24oVSxJKSx0LmRlZmF1bHR9KCl9KSk7IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmFpci1kYXRlcGlja2VyLWNlbGwuLXllYXItLi1vdGhlci1kZWNhZGUtLC5haXItZGF0ZXBpY2tlci1jZWxsLi1kYXktLi1vdGhlci1tb250aC17Y29sb3I6dmFyKC0tYWRwLWNvbG9yLW90aGVyLW1vbnRoKX0uYWlyLWRhdGVwaWNrZXItY2VsbC4teWVhci0uLW90aGVyLWRlY2FkZS06aG92ZXIsLmFpci1kYXRlcGlja2VyLWNlbGwuLWRheS0uLW90aGVyLW1vbnRoLTpob3Zlcntjb2xvcjp2YXIoLS1hZHAtY29sb3Itb3RoZXItbW9udGgtaG92ZXIpfS4tZGlzYWJsZWQtLi1mb2N1cy0uYWlyLWRhdGVwaWNrZXItY2VsbC4teWVhci0uLW90aGVyLWRlY2FkZS0sLi1kaXNhYmxlZC0uLWZvY3VzLS5haXItZGF0ZXBpY2tlci1jZWxsLi1kYXktLi1vdGhlci1tb250aC17Y29sb3I6dmFyKC0tYWRwLWNvbG9yLW90aGVyLW1vbnRoKX0uLXNlbGVjdGVkLS5haXItZGF0ZXBpY2tlci1jZWxsLi15ZWFyLS4tb3RoZXItZGVjYWRlLSwuLXNlbGVjdGVkLS5haXItZGF0ZXBpY2tlci1jZWxsLi1kYXktLi1vdGhlci1tb250aC17Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kOnZhcigtLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLW90aGVyLW1vbnRoKX0uLXNlbGVjdGVkLS4tZm9jdXMtLmFpci1kYXRlcGlja2VyLWNlbGwuLXllYXItLi1vdGhlci1kZWNhZGUtLC4tc2VsZWN0ZWQtLi1mb2N1cy0uYWlyLWRhdGVwaWNrZXItY2VsbC4tZGF5LS4tb3RoZXItbW9udGgte2JhY2tncm91bmQ6dmFyKC0tYWRwLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQtb3RoZXItbW9udGgtZm9jdXNlZCl9Li1pbi1yYW5nZS0uYWlyLWRhdGVwaWNrZXItY2VsbC4teWVhci0uLW90aGVyLWRlY2FkZS0sLi1pbi1yYW5nZS0uYWlyLWRhdGVwaWNrZXItY2VsbC4tZGF5LS4tb3RoZXItbW9udGgte2JhY2tncm91bmQtY29sb3I6dmFyKC0tYWRwLWJhY2tncm91bmQtY29sb3ItaW4tcmFuZ2UpO2NvbG9yOnZhcigtLWFkcC1jb2xvcil9Li1pbi1yYW5nZS0uLWZvY3VzLS5haXItZGF0ZXBpY2tlci1jZWxsLi15ZWFyLS4tb3RoZXItZGVjYWRlLSwuLWluLXJhbmdlLS4tZm9jdXMtLmFpci1kYXRlcGlja2VyLWNlbGwuLWRheS0uLW90aGVyLW1vbnRoLXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLWluLXJhbmdlLWZvY3VzZWQpfS5haXItZGF0ZXBpY2tlci1jZWxsLi15ZWFyLS4tb3RoZXItZGVjYWRlLTplbXB0eSwuYWlyLWRhdGVwaWNrZXItY2VsbC4tZGF5LS4tb3RoZXItbW9udGgtOmVtcHR5e2JhY2tncm91bmQ6bm9uZTtib3JkZXI6bm9uZX0uYWlyLWRhdGVwaWNrZXItY2VsbHtib3JkZXItcmFkaXVzOnZhcigtLWFkcC1jZWxsLWJvcmRlci1yYWRpdXMpO2JveC1zaXppbmc6Ym9yZGVyLWJveDtjdXJzb3I6cG9pbnRlcjtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7ei1pbmRleDoxfS5haXItZGF0ZXBpY2tlci1jZWxsLi1mb2N1cy17YmFja2dyb3VuZDp2YXIoLS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyKX0uYWlyLWRhdGVwaWNrZXItY2VsbC4tY3VycmVudC17Y29sb3I6dmFyKC0tYWRwLWNvbG9yLWN1cnJlbnQtZGF0ZSl9LmFpci1kYXRlcGlja2VyLWNlbGwuLWN1cnJlbnQtLi1mb2N1cy17Y29sb3I6dmFyKC0tYWRwLWNvbG9yKX0uYWlyLWRhdGVwaWNrZXItY2VsbC4tY3VycmVudC0uLWluLXJhbmdlLXtjb2xvcjp2YXIoLS1hZHAtY29sb3ItY3VycmVudC1kYXRlKX0uYWlyLWRhdGVwaWNrZXItY2VsbC4tZGlzYWJsZWQte2N1cnNvcjpkZWZhdWx0O2NvbG9yOnZhcigtLWFkcC1jb2xvci1kaXNhYmxlZCl9LmFpci1kYXRlcGlja2VyLWNlbGwuLWRpc2FibGVkLS4tZm9jdXMte2NvbG9yOnZhcigtLWFkcC1jb2xvci1kaXNhYmxlZCl9LmFpci1kYXRlcGlja2VyLWNlbGwuLWRpc2FibGVkLS4taW4tcmFuZ2Ute2NvbG9yOnZhcigtLWFkcC1jb2xvci1kaXNhYmxlZC1pbi1yYW5nZSl9LmFpci1kYXRlcGlja2VyLWNlbGwuLWRpc2FibGVkLS4tY3VycmVudC0uLWZvY3VzLXtjb2xvcjp2YXIoLS1hZHAtY29sb3ItZGlzYWJsZWQpfS5haXItZGF0ZXBpY2tlci1jZWxsLi1pbi1yYW5nZS17YmFja2dyb3VuZDp2YXIoLS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLWluLXJhbmdlKTtib3JkZXItcmFkaXVzOjB9LmFpci1kYXRlcGlja2VyLWNlbGwuLWluLXJhbmdlLTpob3ZlcntiYWNrZ3JvdW5kOnZhcigtLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3ItaW4tcmFuZ2UtaG92ZXIpfS5haXItZGF0ZXBpY2tlci1jZWxsLi1yYW5nZS1mcm9tLXtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWFkcC1jZWxsLWJvcmRlci1jb2xvci1pbi1yYW5nZSk7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLWluLXJhbmdlKTtib3JkZXItcmFkaXVzOnZhcigtLWFkcC1jZWxsLWJvcmRlci1yYWRpdXMpIDAgMCB2YXIoLS1hZHAtY2VsbC1ib3JkZXItcmFkaXVzKX0uYWlyLWRhdGVwaWNrZXItY2VsbC4tcmFuZ2UtdG8te2JvcmRlcjoxcHggc29saWQgdmFyKC0tYWRwLWNlbGwtYm9yZGVyLWNvbG9yLWluLXJhbmdlKTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3ItaW4tcmFuZ2UpO2JvcmRlci1yYWRpdXM6MCB2YXIoLS1hZHAtY2VsbC1ib3JkZXItcmFkaXVzKSB2YXIoLS1hZHAtY2VsbC1ib3JkZXItcmFkaXVzKSAwfS5haXItZGF0ZXBpY2tlci1jZWxsLi1yYW5nZS10by0uLXJhbmdlLWZyb20te2JvcmRlci1yYWRpdXM6dmFyKC0tYWRwLWNlbGwtYm9yZGVyLXJhZGl1cyl9LmFpci1kYXRlcGlja2VyLWNlbGwuLXNlbGVjdGVkLXtjb2xvcjojZmZmO2JvcmRlcjpub25lO2JhY2tncm91bmQ6dmFyKC0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZCl9LmFpci1kYXRlcGlja2VyLWNlbGwuLXNlbGVjdGVkLS4tY3VycmVudC17Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kOnZhcigtLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQpfS5haXItZGF0ZXBpY2tlci1jZWxsLi1zZWxlY3RlZC0uLWZvY3VzLXtiYWNrZ3JvdW5kOnZhcigtLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQtaG92ZXIpfVxcclxcbi5haXItZGF0ZXBpY2tlci1ib2R5e3RyYW5zaXRpb246YWxsIHZhcigtLWFkcC10cmFuc2l0aW9uLWR1cmF0aW9uKSB2YXIoLS1hZHAtdHJhbnNpdGlvbi1lYXNlKX0uYWlyLWRhdGVwaWNrZXItYm9keS4taGlkZGVuLXtkaXNwbGF5Om5vbmV9LmFpci1kYXRlcGlja2VyLWJvZHktLWRheS1uYW1lc3tkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdCg3LCB2YXIoLS1hZHAtZGF5LWNlbGwtd2lkdGgpKTttYXJnaW46OHB4IDAgM3B4fS5haXItZGF0ZXBpY2tlci1ib2R5LS1kYXktbmFtZXtjb2xvcjp2YXIoLS1hZHAtZGF5LW5hbWUtY29sb3IpO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtmbGV4OjE7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtc2l6ZTouOGVtfS5haXItZGF0ZXBpY2tlci1ib2R5LS1kYXktbmFtZS4tY2xpY2thYmxlLXtjdXJzb3I6cG9pbnRlcn0uYWlyLWRhdGVwaWNrZXItYm9keS0tZGF5LW5hbWUuLWNsaWNrYWJsZS06aG92ZXJ7Y29sb3I6dmFyKC0tYWRwLWRheS1uYW1lLWNvbG9yLWhvdmVyKX0uYWlyLWRhdGVwaWNrZXItYm9keS0tY2VsbHN7ZGlzcGxheTpncmlkfS5haXItZGF0ZXBpY2tlci1ib2R5LS1jZWxscy4tZGF5cy17Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdCg3LCB2YXIoLS1hZHAtZGF5LWNlbGwtd2lkdGgpKTtncmlkLWF1dG8tcm93czp2YXIoLS1hZHAtZGF5LWNlbGwtaGVpZ2h0KX0uYWlyLWRhdGVwaWNrZXItYm9keS0tY2VsbHMuLW1vbnRocy17Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdCgzLCAxZnIpO2dyaWQtYXV0by1yb3dzOnZhcigtLWFkcC1tb250aC1jZWxsLWhlaWdodCl9LmFpci1kYXRlcGlja2VyLWJvZHktLWNlbGxzLi15ZWFycy17Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdCg0LCAxZnIpO2dyaWQtYXV0by1yb3dzOnZhcigtLWFkcC15ZWFyLWNlbGwtaGVpZ2h0KX1cXHJcXG4uYWlyLWRhdGVwaWNrZXItbmF2e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbjtib3JkZXItYm90dG9tOjFweCBzb2xpZCB2YXIoLS1hZHAtYm9yZGVyLWNvbG9yLWlubmVyKTttaW4taGVpZ2h0OnZhcigtLWFkcC1uYXYtaGVpZ2h0KTtwYWRkaW5nOnZhcigtLWFkcC1wYWRkaW5nKTtib3gtc2l6aW5nOmNvbnRlbnQtYm94fS4tb25seS10aW1lcGlja2VyLSAuYWlyLWRhdGVwaWNrZXItbmF2e2Rpc3BsYXk6bm9uZX0uYWlyLWRhdGVwaWNrZXItbmF2LS10aXRsZSwuYWlyLWRhdGVwaWNrZXItbmF2LS1hY3Rpb257ZGlzcGxheTpmbGV4O2N1cnNvcjpwb2ludGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5haXItZGF0ZXBpY2tlci1uYXYtLWFjdGlvbnt3aWR0aDp2YXIoLS1hZHAtbmF2LWFjdGlvbi1zaXplKTtib3JkZXItcmFkaXVzOnZhcigtLWFkcC1ib3JkZXItcmFkaXVzKTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9LmFpci1kYXRlcGlja2VyLW5hdi0tYWN0aW9uOmhvdmVye2JhY2tncm91bmQ6dmFyKC0tYWRwLWJhY2tncm91bmQtY29sb3ItaG92ZXIpfS5haXItZGF0ZXBpY2tlci1uYXYtLWFjdGlvbjphY3RpdmV7YmFja2dyb3VuZDp2YXIoLS1hZHAtYmFja2dyb3VuZC1jb2xvci1hY3RpdmUpfS5haXItZGF0ZXBpY2tlci1uYXYtLWFjdGlvbi4tZGlzYWJsZWQte3Zpc2liaWxpdHk6aGlkZGVufS5haXItZGF0ZXBpY2tlci1uYXYtLWFjdGlvbiBzdmd7d2lkdGg6MzJweDtoZWlnaHQ6MzJweH0uYWlyLWRhdGVwaWNrZXItbmF2LS1hY3Rpb24gcGF0aHtmaWxsOm5vbmU7c3Ryb2tlOnZhcigtLWFkcC1uYXYtYXJyb3ctY29sb3IpO3N0cm9rZS13aWR0aDoycHh9LmFpci1kYXRlcGlja2VyLW5hdi0tdGl0bGV7Ym9yZGVyLXJhZGl1czp2YXIoLS1hZHAtYm9yZGVyLXJhZGl1cyk7cGFkZGluZzowIDhweH0uYWlyLWRhdGVwaWNrZXItbmF2LS10aXRsZSBpe2ZvbnQtc3R5bGU6bm9ybWFsO2NvbG9yOnZhcigtLWFkcC1uYXYtY29sb3Itc2Vjb25kYXJ5KTttYXJnaW4tbGVmdDouM2VtfS5haXItZGF0ZXBpY2tlci1uYXYtLXRpdGxlOmhvdmVye2JhY2tncm91bmQ6dmFyKC0tYWRwLWJhY2tncm91bmQtY29sb3ItaG92ZXIpfS5haXItZGF0ZXBpY2tlci1uYXYtLXRpdGxlOmFjdGl2ZXtiYWNrZ3JvdW5kOnZhcigtLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLWFjdGl2ZSl9LmFpci1kYXRlcGlja2VyLW5hdi0tdGl0bGUuLWRpc2FibGVkLXtjdXJzb3I6ZGVmYXVsdDtiYWNrZ3JvdW5kOm5vbmV9XFxyXFxuLmFpci1kYXRlcGlja2VyLWJ1dHRvbnN7ZGlzcGxheTpncmlkO2dyaWQtYXV0by1jb2x1bW5zOjFmcjtncmlkLWF1dG8tZmxvdzpjb2x1bW59LmFpci1kYXRlcGlja2VyLWJ1dHRvbntkaXNwbGF5OmlubGluZS1mbGV4O2NvbG9yOnZhcigtLWFkcC1idG4tY29sb3IpO2JvcmRlci1yYWRpdXM6dmFyKC0tYWRwLWJ0bi1ib3JkZXItcmFkaXVzKTtjdXJzb3I6cG9pbnRlcjtoZWlnaHQ6dmFyKC0tYWRwLWJ0bi1oZWlnaHQpO2JvcmRlcjpub25lO2JhY2tncm91bmQ6cmdiYSgyNTUsMjU1LDI1NSwwKX0uYWlyLWRhdGVwaWNrZXItYnV0dG9uOmhvdmVye2NvbG9yOnZhcigtLWFkcC1idG4tY29sb3ItaG92ZXIpO2JhY2tncm91bmQ6dmFyKC0tYWRwLWJ0bi1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyKX0uYWlyLWRhdGVwaWNrZXItYnV0dG9uOmZvY3Vze2NvbG9yOnZhcigtLWFkcC1idG4tY29sb3ItaG92ZXIpO2JhY2tncm91bmQ6dmFyKC0tYWRwLWJ0bi1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyKTtvdXRsaW5lOm5vbmV9LmFpci1kYXRlcGlja2VyLWJ1dHRvbjphY3RpdmV7YmFja2dyb3VuZDp2YXIoLS1hZHAtYnRuLWJhY2tncm91bmQtY29sb3ItYWN0aXZlKX0uYWlyLWRhdGVwaWNrZXItYnV0dG9uIHNwYW57b3V0bGluZTpub25lO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfVxcclxcbi5haXItZGF0ZXBpY2tlci10aW1le2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6bWF4LWNvbnRlbnQgMWZyO2dyaWQtY29sdW1uLWdhcDoxMnB4O2FsaWduLWl0ZW1zOmNlbnRlcjtwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nOjAgdmFyKC0tYWRwLXRpbWUtcGFkZGluZy1pbm5lcil9Li1vbmx5LXRpbWVwaWNrZXItIC5haXItZGF0ZXBpY2tlci10aW1le2JvcmRlci10b3A6bm9uZX0uYWlyLWRhdGVwaWNrZXItdGltZS0tY3VycmVudHtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2ZsZXg6MTtmb250LXNpemU6MTRweDt0ZXh0LWFsaWduOmNlbnRlcn0uYWlyLWRhdGVwaWNrZXItdGltZS0tY3VycmVudC1jb2xvbnttYXJnaW46MCAycHggM3B4O2xpbmUtaGVpZ2h0OjF9LmFpci1kYXRlcGlja2VyLXRpbWUtLWN1cnJlbnQtaG91cnMsLmFpci1kYXRlcGlja2VyLXRpbWUtLWN1cnJlbnQtbWludXRlc3tsaW5lLWhlaWdodDoxO2ZvbnQtc2l6ZToxOXB4O2ZvbnQtZmFtaWx5OlxcXCJDZW50dXJ5IEdvdGhpY1xcXCIsQ2VudHVyeUdvdGhpYyxBcHBsZUdvdGhpYyxzYW5zLXNlcmlmO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MX0uYWlyLWRhdGVwaWNrZXItdGltZS0tY3VycmVudC1ob3VyczphZnRlciwuYWlyLWRhdGVwaWNrZXItdGltZS0tY3VycmVudC1taW51dGVzOmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZDp2YXIoLS1hZHAtYmFja2dyb3VuZC1jb2xvci1ob3Zlcik7Ym9yZGVyLXJhZGl1czp2YXIoLS1hZHAtYm9yZGVyLXJhZGl1cyk7cG9zaXRpb246YWJzb2x1dGU7bGVmdDotMnB4O3RvcDotM3B4O3JpZ2h0Oi0ycHg7Ym90dG9tOi0ycHg7ei1pbmRleDotMTtvcGFjaXR5OjB9LmFpci1kYXRlcGlja2VyLXRpbWUtLWN1cnJlbnQtaG91cnMuLWZvY3VzLTphZnRlciwuYWlyLWRhdGVwaWNrZXItdGltZS0tY3VycmVudC1taW51dGVzLi1mb2N1cy06YWZ0ZXJ7b3BhY2l0eToxfS5haXItZGF0ZXBpY2tlci10aW1lLS1jdXJyZW50LWFtcG17dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2FsaWduLXNlbGY6ZmxleC1lbmQ7Y29sb3I6dmFyKC0tYWRwLXRpbWUtZGF5LXBlcmlvZC1jb2xvcik7bWFyZ2luLWxlZnQ6NnB4O2ZvbnQtc2l6ZToxMXB4O21hcmdpbi1ib3R0b206MXB4fS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3d7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtmb250LXNpemU6MTFweDtoZWlnaHQ6MTdweDtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCh0byByaWdodCwgdmFyKC0tYWRwLXRpbWUtdHJhY2stY29sb3IpLCB2YXIoLS1hZHAtdGltZS10cmFjay1jb2xvcikpIGxlZnQgNTAlLzEwMCUgdmFyKC0tYWRwLXRpbWUtdHJhY2staGVpZ2h0KSBuby1yZXBlYXR9LmFpci1kYXRlcGlja2VyLXRpbWUtLXJvdzpmaXJzdC1jaGlsZHttYXJnaW4tYm90dG9tOjRweH0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2Vde2JhY2tncm91bmQ6bm9uZTtjdXJzb3I6cG9pbnRlcjtmbGV4OjE7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtwYWRkaW5nOjA7bWFyZ2luOjA7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9LmFpci1kYXRlcGlja2VyLXRpbWUtLXJvdyBpbnB1dFt0eXBlPXJhbmdlXTo6LXdlYmtpdC1zbGlkZXItdGh1bWJ7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9LmFpci1kYXRlcGlja2VyLXRpbWUtLXJvdyBpbnB1dFt0eXBlPXJhbmdlXTo6LW1zLXRvb2x0aXB7ZGlzcGxheTpub25lfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06aG92ZXI6Oi13ZWJraXQtc2xpZGVyLXRodW1ie2JvcmRlci1jb2xvcjp2YXIoLS1hZHAtdGltZS10cmFjay1jb2xvci1ob3Zlcil9LmFpci1kYXRlcGlja2VyLXRpbWUtLXJvdyBpbnB1dFt0eXBlPXJhbmdlXTpob3Zlcjo6LW1vei1yYW5nZS10aHVtYntib3JkZXItY29sb3I6dmFyKC0tYWRwLXRpbWUtdHJhY2stY29sb3ItaG92ZXIpfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06aG92ZXI6Oi1tcy10aHVtYntib3JkZXItY29sb3I6dmFyKC0tYWRwLXRpbWUtdHJhY2stY29sb3ItaG92ZXIpfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Zm9jdXN7b3V0bGluZTpub25lfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Zm9jdXM6Oi13ZWJraXQtc2xpZGVyLXRodW1ie2JhY2tncm91bmQ6dmFyKC0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZCk7Ym9yZGVyLWNvbG9yOnZhcigtLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQpfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Zm9jdXM6Oi1tb3otcmFuZ2UtdGh1bWJ7YmFja2dyb3VuZDp2YXIoLS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkKTtib3JkZXItY29sb3I6dmFyKC0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZCl9LmFpci1kYXRlcGlja2VyLXRpbWUtLXJvdyBpbnB1dFt0eXBlPXJhbmdlXTpmb2N1czo6LW1zLXRodW1ie2JhY2tncm91bmQ6dmFyKC0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZCk7Ym9yZGVyLWNvbG9yOnZhcigtLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQpfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Oi13ZWJraXQtc2xpZGVyLXRodW1ie2JveC1zaXppbmc6Ym9yZGVyLWJveDtoZWlnaHQ6MTJweDt3aWR0aDoxMnB4O2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjoxcHggc29saWQgdmFyKC0tYWRwLXRpbWUtdHJhY2stY29sb3IpO2JhY2tncm91bmQ6I2ZmZjtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZCB2YXIoLS1hZHAtdHJhbnNpdGlvbi1kdXJhdGlvbik7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kIHZhcigtLWFkcC10cmFuc2l0aW9uLWR1cmF0aW9uKX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOjotbW96LXJhbmdlLXRodW1ie2JveC1zaXppbmc6Ym9yZGVyLWJveDtoZWlnaHQ6MTJweDt3aWR0aDoxMnB4O2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjoxcHggc29saWQgdmFyKC0tYWRwLXRpbWUtdHJhY2stY29sb3IpO2JhY2tncm91bmQ6I2ZmZjtjdXJzb3I6cG9pbnRlcjstbW96LXRyYW5zaXRpb246YmFja2dyb3VuZCB2YXIoLS1hZHAtdHJhbnNpdGlvbi1kdXJhdGlvbik7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kIHZhcigtLWFkcC10cmFuc2l0aW9uLWR1cmF0aW9uKX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOjotbXMtdGh1bWJ7Ym94LXNpemluZzpib3JkZXItYm94O2hlaWdodDoxMnB4O3dpZHRoOjEycHg7Ym9yZGVyLXJhZGl1czozcHg7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1hZHAtdGltZS10cmFjay1jb2xvcik7YmFja2dyb3VuZDojZmZmO2N1cnNvcjpwb2ludGVyOy1tcy10cmFuc2l0aW9uOmJhY2tncm91bmQgdmFyKC0tYWRwLXRyYW5zaXRpb24tZHVyYXRpb24pO3RyYW5zaXRpb246YmFja2dyb3VuZCB2YXIoLS1hZHAtdHJhbnNpdGlvbi1kdXJhdGlvbil9LmFpci1kYXRlcGlja2VyLXRpbWUtLXJvdyBpbnB1dFt0eXBlPXJhbmdlXTo6LXdlYmtpdC1zbGlkZXItdGh1bWJ7bWFyZ2luLXRvcDpjYWxjKHZhcigtLWFkcC10aW1lLXRodW1iLXNpemUpLzIqLTEpfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Oi13ZWJraXQtc2xpZGVyLXJ1bm5hYmxlLXRyYWNre2JvcmRlcjpub25lO2hlaWdodDp2YXIoLS1hZHAtdGltZS10cmFjay1oZWlnaHQpO2N1cnNvcjpwb2ludGVyO2NvbG9yOnJnYmEoMCwwLDAsMCk7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Oi1tb3otcmFuZ2UtdHJhY2t7Ym9yZGVyOm5vbmU7aGVpZ2h0OnZhcigtLWFkcC10aW1lLXRyYWNrLWhlaWdodCk7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6cmdiYSgwLDAsMCwwKTtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCl9LmFpci1kYXRlcGlja2VyLXRpbWUtLXJvdyBpbnB1dFt0eXBlPXJhbmdlXTo6LW1zLXRyYWNre2JvcmRlcjpub25lO2hlaWdodDp2YXIoLS1hZHAtdGltZS10cmFjay1oZWlnaHQpO2N1cnNvcjpwb2ludGVyO2NvbG9yOnJnYmEoMCwwLDAsMCk7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Oi1tcy1maWxsLWxvd2Vye2JhY2tncm91bmQ6cmdiYSgwLDAsMCwwKX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOjotbXMtZmlsbC11cHBlcntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCl9XFxyXFxuLmFpci1kYXRlcGlja2Vyey0tYWRwLWZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZiwgXFxcIkFwcGxlIENvbG9yIEVtb2ppXFxcIiwgXFxcIlNlZ29lIFVJIEVtb2ppXFxcIiwgXFxcIlNlZ29lIFVJIFN5bWJvbFxcXCI7LS1hZHAtZm9udC1zaXplOiAxNHB4Oy0tYWRwLXdpZHRoOiAyNDZweDstLWFkcC16LWluZGV4OiAxMDA7LS1hZHAtcGFkZGluZzogNHB4Oy0tYWRwLWdyaWQtYXJlYXM6IFxcXCJuYXZcXFwiIFxcXCJib2R5XFxcIiBcXFwidGltZXBpY2tlclxcXCIgXFxcImJ1dHRvbnNcXFwiOy0tYWRwLXRyYW5zaXRpb24tZHVyYXRpb246IC4zczstLWFkcC10cmFuc2l0aW9uLWVhc2U6IGVhc2Utb3V0Oy0tYWRwLXRyYW5zaXRpb24tb2Zmc2V0OiA4cHg7LS1hZHAtYmFja2dyb3VuZC1jb2xvcjogI2ZmZjstLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOiAjZjBmMGYwOy0tYWRwLWJhY2tncm91bmQtY29sb3ItYWN0aXZlOiAjZWFlYWVhOy0tYWRwLWJhY2tncm91bmQtY29sb3ItaW4tcmFuZ2U6IHJnYmEoOTIsIDE5NiwgMjM5LCAuMSk7LS1hZHAtYmFja2dyb3VuZC1jb2xvci1pbi1yYW5nZS1mb2N1c2VkOiByZ2JhKDkyLCAxOTYsIDIzOSwgLjIpOy0tYWRwLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQtb3RoZXItbW9udGgtZm9jdXNlZDogIzhhZDVmNDstLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLW90aGVyLW1vbnRoOiAjYTJkZGY2Oy0tYWRwLWNvbG9yOiAjNGE0YTRhOy0tYWRwLWNvbG9yLXNlY29uZGFyeTogIzljOWM5YzstLWFkcC1hY2NlbnQtY29sb3I6ICM0ZWI1ZTY7LS1hZHAtY29sb3ItY3VycmVudC1kYXRlOiB2YXIoLS1hZHAtYWNjZW50LWNvbG9yKTstLWFkcC1jb2xvci1vdGhlci1tb250aDogI2RlZGVkZTstLWFkcC1jb2xvci1kaXNhYmxlZDogI2FlYWVhZTstLWFkcC1jb2xvci1kaXNhYmxlZC1pbi1yYW5nZTogIzkzOTM5MzstLWFkcC1jb2xvci1vdGhlci1tb250aC1ob3ZlcjogI2M1YzVjNTstLWFkcC1ib3JkZXItY29sb3I6ICNkYmRiZGI7LS1hZHAtYm9yZGVyLWNvbG9yLWlubmVyOiAjZWZlZmVmOy0tYWRwLWJvcmRlci1yYWRpdXM6IDRweDstLWFkcC1ib3JkZXItY29sb3ItaW5saW5lOiAjZDdkN2Q3Oy0tYWRwLW5hdi1oZWlnaHQ6IDMycHg7LS1hZHAtbmF2LWFycm93LWNvbG9yOiB2YXIoLS1hZHAtY29sb3Itc2Vjb25kYXJ5KTstLWFkcC1uYXYtYWN0aW9uLXNpemU6IDMycHg7LS1hZHAtbmF2LWNvbG9yLXNlY29uZGFyeTogdmFyKC0tYWRwLWNvbG9yLXNlY29uZGFyeSk7LS1hZHAtZGF5LW5hbWUtY29sb3I6ICNmZjlhMTk7LS1hZHAtZGF5LW5hbWUtY29sb3ItaG92ZXI6ICM4YWQ1ZjQ7LS1hZHAtZGF5LWNlbGwtd2lkdGg6IDFmcjstLWFkcC1kYXktY2VsbC1oZWlnaHQ6IDMycHg7LS1hZHAtbW9udGgtY2VsbC1oZWlnaHQ6IDQycHg7LS1hZHAteWVhci1jZWxsLWhlaWdodDogNTZweDstLWFkcC1wb2ludGVyLXNpemU6IDEwcHg7LS1hZHAtcG9pbmVyLWJvcmRlci1yYWRpdXM6IDJweDstLWFkcC1wb2ludGVyLW9mZnNldDogMTRweDstLWFkcC1jZWxsLWJvcmRlci1yYWRpdXM6IDRweDstLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3ItaG92ZXI6IHZhcigtLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyKTstLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQ6ICM1Y2M0ZWY7LS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiAjNDViY2VkOy0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1pbi1yYW5nZTogcmdiYSg5MiwgMTk2LCAyMzksIDAuMSk7LS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLWluLXJhbmdlLWhvdmVyOiByZ2JhKDkyLCAxOTYsIDIzOSwgMC4yKTstLWFkcC1jZWxsLWJvcmRlci1jb2xvci1pbi1yYW5nZTogdmFyKC0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZCk7LS1hZHAtYnRuLWhlaWdodDogMzJweDstLWFkcC1idG4tY29sb3I6IHZhcigtLWFkcC1hY2NlbnQtY29sb3IpOy0tYWRwLWJ0bi1jb2xvci1ob3ZlcjogdmFyKC0tYWRwLWNvbG9yKTstLWFkcC1idG4tYm9yZGVyLXJhZGl1czogdmFyKC0tYWRwLWJvcmRlci1yYWRpdXMpOy0tYWRwLWJ0bi1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOiB2YXIoLS1hZHAtYmFja2dyb3VuZC1jb2xvci1ob3Zlcik7LS1hZHAtYnRuLWJhY2tncm91bmQtY29sb3ItYWN0aXZlOiB2YXIoLS1hZHAtYmFja2dyb3VuZC1jb2xvci1hY3RpdmUpOy0tYWRwLXRpbWUtdHJhY2staGVpZ2h0OiAxcHg7LS1hZHAtdGltZS10cmFjay1jb2xvcjogI2RlZGVkZTstLWFkcC10aW1lLXRyYWNrLWNvbG9yLWhvdmVyOiAjYjFiMWIxOy0tYWRwLXRpbWUtdGh1bWItc2l6ZTogMTJweDstLWFkcC10aW1lLXBhZGRpbmctaW5uZXI6IDEwcHg7LS1hZHAtdGltZS1kYXktcGVyaW9kLWNvbG9yOiB2YXIoLS1hZHAtY29sb3Itc2Vjb25kYXJ5KTstLWFkcC1tb2JpbGUtZm9udC1zaXplOiAxNnB4Oy0tYWRwLW1vYmlsZS1uYXYtaGVpZ2h0OiA0MHB4Oy0tYWRwLW1vYmlsZS13aWR0aDogMzIwcHg7LS1hZHAtbW9iaWxlLWRheS1jZWxsLWhlaWdodDogMzhweDstLWFkcC1tb2JpbGUtbW9udGgtY2VsbC1oZWlnaHQ6IDQ4cHg7LS1hZHAtbW9iaWxlLXllYXItY2VsbC1oZWlnaHQ6IDY0cHh9LmFpci1kYXRlcGlja2VyLW92ZXJsYXl7LS1hZHAtb3ZlcmxheS1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIC4zKTstLWFkcC1vdmVybGF5LXRyYW5zaXRpb24tZHVyYXRpb246IC4zczstLWFkcC1vdmVybGF5LXRyYW5zaXRpb24tZWFzZTogZWFzZS1vdXQ7LS1hZHAtb3ZlcmxheS16LWluZGV4OiA5OX1cXHJcXG4uYWlyLWRhdGVwaWNrZXJ7YmFja2dyb3VuZDp2YXIoLS1hZHAtYmFja2dyb3VuZC1jb2xvcik7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1hZHAtYm9yZGVyLWNvbG9yKTtib3gtc2hhZG93OjAgNHB4IDEycHggcmdiYSgwLDAsMCwuMTUpO2JvcmRlci1yYWRpdXM6dmFyKC0tYWRwLWJvcmRlci1yYWRpdXMpO2JveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczoxZnI7Z3JpZC10ZW1wbGF0ZS1yb3dzOnJlcGVhdCg0LCBtYXgtY29udGVudCk7Z3JpZC10ZW1wbGF0ZS1hcmVhczp2YXIoLS1hZHAtZ3JpZC1hcmVhcyk7Zm9udC1mYW1pbHk6dmFyKC0tYWRwLWZvbnQtZmFtaWx5KSxzYW5zLXNlcmlmO2ZvbnQtc2l6ZTp2YXIoLS1hZHAtZm9udC1zaXplKTtjb2xvcjp2YXIoLS1hZHAtY29sb3IpO3dpZHRoOnZhcigtLWFkcC13aWR0aCk7cG9zaXRpb246YWJzb2x1dGU7dHJhbnNpdGlvbjpvcGFjaXR5IHZhcigtLWFkcC10cmFuc2l0aW9uLWR1cmF0aW9uKSB2YXIoLS1hZHAtdHJhbnNpdGlvbi1lYXNlKSx0cmFuc2Zvcm0gdmFyKC0tYWRwLXRyYW5zaXRpb24tZHVyYXRpb24pIHZhcigtLWFkcC10cmFuc2l0aW9uLWVhc2UpO3otaW5kZXg6dmFyKC0tYWRwLXotaW5kZXgpfS5haXItZGF0ZXBpY2tlcjpub3QoLi1jdXN0b20tcG9zaXRpb24tKXtvcGFjaXR5OjB9LmFpci1kYXRlcGlja2VyLi1mcm9tLXRvcC17dHJhbnNmb3JtOnRyYW5zbGF0ZVkoY2FsYyh2YXIoLS1hZHAtdHJhbnNpdGlvbi1vZmZzZXQpICogLTEpKX0uYWlyLWRhdGVwaWNrZXIuLWZyb20tcmlnaHQte3RyYW5zZm9ybTp0cmFuc2xhdGVYKHZhcigtLWFkcC10cmFuc2l0aW9uLW9mZnNldCkpfS5haXItZGF0ZXBpY2tlci4tZnJvbS1ib3R0b20te3RyYW5zZm9ybTp0cmFuc2xhdGVZKHZhcigtLWFkcC10cmFuc2l0aW9uLW9mZnNldCkpfS5haXItZGF0ZXBpY2tlci4tZnJvbS1sZWZ0LXt0cmFuc2Zvcm06dHJhbnNsYXRlWChjYWxjKHZhcigtLWFkcC10cmFuc2l0aW9uLW9mZnNldCkgKiAtMSkpfS5haXItZGF0ZXBpY2tlci4tYWN0aXZlLTpub3QoLi1jdXN0b20tcG9zaXRpb24tKXt0cmFuc2Zvcm06dHJhbnNsYXRlKDAsIDApO29wYWNpdHk6MX0uYWlyLWRhdGVwaWNrZXIuLWFjdGl2ZS0uLWN1c3RvbS1wb3NpdGlvbi17dHJhbnNpdGlvbjpub25lfS5haXItZGF0ZXBpY2tlci4taW5saW5lLXtib3JkZXItY29sb3I6dmFyKC0tYWRwLWJvcmRlci1jb2xvci1pbmxpbmUpO2JveC1zaGFkb3c6bm9uZTtwb3NpdGlvbjpzdGF0aWM7bGVmdDphdXRvO3JpZ2h0OmF1dG87b3BhY2l0eToxO3RyYW5zZm9ybTpub25lfS5haXItZGF0ZXBpY2tlci4taW5saW5lLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXJ7ZGlzcGxheTpub25lfS5haXItZGF0ZXBpY2tlci4taXMtbW9iaWxlLXstLWFkcC1mb250LXNpemU6IHZhcigtLWFkcC1tb2JpbGUtZm9udC1zaXplKTstLWFkcC1kYXktY2VsbC1oZWlnaHQ6IHZhcigtLWFkcC1tb2JpbGUtZGF5LWNlbGwtaGVpZ2h0KTstLWFkcC1tb250aC1jZWxsLWhlaWdodDogdmFyKC0tYWRwLW1vYmlsZS1tb250aC1jZWxsLWhlaWdodCk7LS1hZHAteWVhci1jZWxsLWhlaWdodDogdmFyKC0tYWRwLW1vYmlsZS15ZWFyLWNlbGwtaGVpZ2h0KTstLWFkcC1uYXYtaGVpZ2h0OiB2YXIoLS1hZHAtbW9iaWxlLW5hdi1oZWlnaHQpOy0tYWRwLW5hdi1hY3Rpb24tc2l6ZTogdmFyKC0tYWRwLW1vYmlsZS1uYXYtaGVpZ2h0KTtwb3NpdGlvbjpmaXhlZDt3aWR0aDp2YXIoLS1hZHAtbW9iaWxlLXdpZHRoKTtib3JkZXI6bm9uZX0uYWlyLWRhdGVwaWNrZXIuLWlzLW1vYmlsZS0gKnstd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6cmdiYSgwLDAsMCwwKX0uYWlyLWRhdGVwaWNrZXIuLWlzLW1vYmlsZS0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVye2Rpc3BsYXk6bm9uZX0uYWlyLWRhdGVwaWNrZXIuLWlzLW1vYmlsZS06bm90KC4tY3VzdG9tLXBvc2l0aW9uLSl7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCBjYWxjKC01MCUgKyB2YXIoLS1hZHAtdHJhbnNpdGlvbi1vZmZzZXQpKSl9LmFpci1kYXRlcGlja2VyLi1pcy1tb2JpbGUtLi1hY3RpdmUtOm5vdCguLWN1c3RvbS1wb3NpdGlvbi0pe3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgLTUwJSl9LmFpci1kYXRlcGlja2VyLi1jdXN0b20tcG9zaXRpb24te3RyYW5zaXRpb246bm9uZX0uYWlyLWRhdGVwaWNrZXItZ2xvYmFsLWNvbnRhaW5lcntwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjB9LmFpci1kYXRlcGlja2VyLS1wb2ludGVyey0tcG9pbnRlci1oYWxmLXNpemU6IGNhbGModmFyKC0tYWRwLXBvaW50ZXItc2l6ZSkgLyAyKTtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDp2YXIoLS1hZHAtcG9pbnRlci1zaXplKTtoZWlnaHQ6dmFyKC0tYWRwLXBvaW50ZXItc2l6ZSk7ei1pbmRleDotMX0uYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyLXRvcDoxcHggc29saWQgdmFyKC0tYWRwLWJvcmRlci1jb2xvci1pbmxpbmUpO2JvcmRlci1yaWdodDoxcHggc29saWQgdmFyKC0tYWRwLWJvcmRlci1jb2xvci1pbmxpbmUpO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOnZhcigtLWFkcC1wb2luZXItYm9yZGVyLXJhZGl1cyk7d2lkdGg6dmFyKC0tYWRwLXBvaW50ZXItc2l6ZSk7aGVpZ2h0OnZhcigtLWFkcC1wb2ludGVyLXNpemUpO2JveC1zaXppbmc6Ym9yZGVyLWJveH0uLXRvcC1sZWZ0LSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXIsLi10b3AtY2VudGVyLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXIsLi10b3AtcmlnaHQtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcixbZGF0YS1wb3BwZXItcGxhY2VtZW50Xj10b3BdIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcnt0b3A6Y2FsYygxMDAlIC0gdmFyKC0tcG9pbnRlci1oYWxmLXNpemUpICsgMXB4KX0uLXRvcC1sZWZ0LSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXIsLi10b3AtY2VudGVyLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXIsLi10b3AtcmlnaHQtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcjphZnRlcixbZGF0YS1wb3BwZXItcGxhY2VtZW50Xj10b3BdIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcjphZnRlcnt0cmFuc2Zvcm06cm90YXRlKDEzNWRlZyl9Li1yaWdodC10b3AtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlciwuLXJpZ2h0LWNlbnRlci0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLC4tcmlnaHQtYm90dG9tLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXIsW2RhdGEtcG9wcGVyLXBsYWNlbWVudF49cmlnaHRdIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcntyaWdodDpjYWxjKDEwMCUgLSB2YXIoLS1wb2ludGVyLWhhbGYtc2l6ZSkgKyAxcHgpfS4tcmlnaHQtdG9wLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXIsLi1yaWdodC1jZW50ZXItIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcjphZnRlciwuLXJpZ2h0LWJvdHRvbS0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyOmFmdGVyLFtkYXRhLXBvcHBlci1wbGFjZW1lbnRePXJpZ2h0XSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXJ7dHJhbnNmb3JtOnJvdGF0ZSgyMjVkZWcpfS4tYm90dG9tLWxlZnQtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlciwuLWJvdHRvbS1jZW50ZXItIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlciwuLWJvdHRvbS1yaWdodC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLFtkYXRhLXBvcHBlci1wbGFjZW1lbnRePWJvdHRvbV0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVye2JvdHRvbTpjYWxjKDEwMCUgLSB2YXIoLS1wb2ludGVyLWhhbGYtc2l6ZSkgKyAxcHgpfS4tYm90dG9tLWxlZnQtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcjphZnRlciwuLWJvdHRvbS1jZW50ZXItIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcjphZnRlciwuLWJvdHRvbS1yaWdodC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyOmFmdGVyLFtkYXRhLXBvcHBlci1wbGFjZW1lbnRePWJvdHRvbV0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyOmFmdGVye3RyYW5zZm9ybTpyb3RhdGUoMzE1ZGVnKX0uLWxlZnQtdG9wLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXIsLi1sZWZ0LWNlbnRlci0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLC4tbGVmdC1ib3R0b20tIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcixbZGF0YS1wb3BwZXItcGxhY2VtZW50Xj1sZWZ0XSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXJ7bGVmdDpjYWxjKDEwMCUgLSB2YXIoLS1wb2ludGVyLWhhbGYtc2l6ZSkgKyAxcHgpfS4tbGVmdC10b3AtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcjphZnRlciwuLWxlZnQtY2VudGVyLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXIsLi1sZWZ0LWJvdHRvbS0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyOmFmdGVyLFtkYXRhLXBvcHBlci1wbGFjZW1lbnRePWxlZnRdIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcjphZnRlcnt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKX0uLXRvcC1sZWZ0LSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXIsLi1ib3R0b20tbGVmdC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVye2xlZnQ6dmFyKC0tYWRwLXBvaW50ZXItb2Zmc2V0KX0uLXRvcC1yaWdodC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLC4tYm90dG9tLXJpZ2h0LSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXJ7cmlnaHQ6dmFyKC0tYWRwLXBvaW50ZXItb2Zmc2V0KX0uLXRvcC1jZW50ZXItIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlciwuLWJvdHRvbS1jZW50ZXItIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcntsZWZ0OmNhbGMoNTAlIC0gdmFyKC0tYWRwLXBvaW50ZXItc2l6ZSkvMil9Li1sZWZ0LXRvcC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLC4tcmlnaHQtdG9wLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXJ7dG9wOnZhcigtLWFkcC1wb2ludGVyLW9mZnNldCl9Li1sZWZ0LWJvdHRvbS0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLC4tcmlnaHQtYm90dG9tLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXJ7Ym90dG9tOnZhcigtLWFkcC1wb2ludGVyLW9mZnNldCl9Li1sZWZ0LWNlbnRlci0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLC4tcmlnaHQtY2VudGVyLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXJ7dG9wOmNhbGMoNTAlIC0gdmFyKC0tYWRwLXBvaW50ZXItc2l6ZSkvMil9LmFpci1kYXRlcGlja2VyLS1uYXZpZ2F0aW9ue2dyaWQtYXJlYTpuYXZ9LmFpci1kYXRlcGlja2VyLS1jb250ZW50e2JveC1zaXppbmc6Y29udGVudC1ib3g7cGFkZGluZzp2YXIoLS1hZHAtcGFkZGluZyk7Z3JpZC1hcmVhOmJvZHl9Li1vbmx5LXRpbWVwaWNrZXItIC5haXItZGF0ZXBpY2tlci0tY29udGVudHtkaXNwbGF5Om5vbmV9LmFpci1kYXRlcGlja2VyLS10aW1le2dyaWQtYXJlYTp0aW1lcGlja2VyfS5haXItZGF0ZXBpY2tlci0tYnV0dG9uc3tncmlkLWFyZWE6YnV0dG9uc30uYWlyLWRhdGVwaWNrZXItLWJ1dHRvbnMsLmFpci1kYXRlcGlja2VyLS10aW1le3BhZGRpbmc6dmFyKC0tYWRwLXBhZGRpbmcpO2JvcmRlci10b3A6MXB4IHNvbGlkIHZhcigtLWFkcC1ib3JkZXItY29sb3ItaW5uZXIpfS5haXItZGF0ZXBpY2tlci1vdmVybGF5e3Bvc2l0aW9uOmZpeGVkO2JhY2tncm91bmQ6dmFyKC0tYWRwLW92ZXJsYXktYmFja2dyb3VuZC1jb2xvcik7bGVmdDowO3RvcDowO3dpZHRoOjA7aGVpZ2h0OjA7b3BhY2l0eTowO3RyYW5zaXRpb246b3BhY2l0eSB2YXIoLS1hZHAtb3ZlcmxheS10cmFuc2l0aW9uLWR1cmF0aW9uKSB2YXIoLS1hZHAtb3ZlcmxheS10cmFuc2l0aW9uLWVhc2UpLGxlZnQgMHMsaGVpZ2h0IDBzLHdpZHRoIDBzO3RyYW5zaXRpb24tZGVsYXk6MHMsdmFyKC0tYWRwLW92ZXJsYXktdHJhbnNpdGlvbi1kdXJhdGlvbiksdmFyKC0tYWRwLW92ZXJsYXktdHJhbnNpdGlvbi1kdXJhdGlvbiksdmFyKC0tYWRwLW92ZXJsYXktdHJhbnNpdGlvbi1kdXJhdGlvbik7ei1pbmRleDp2YXIoLS1hZHAtb3ZlcmxheS16LWluZGV4KX0uYWlyLWRhdGVwaWNrZXItb3ZlcmxheS4tYWN0aXZlLXtvcGFjaXR5OjE7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt0cmFuc2l0aW9uOm9wYWNpdHkgdmFyKC0tYWRwLW92ZXJsYXktdHJhbnNpdGlvbi1kdXJhdGlvbikgdmFyKC0tYWRwLW92ZXJsYXktdHJhbnNpdGlvbi1lYXNlKSxoZWlnaHQgMHMsd2lkdGggMHN9XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2Fpci1kYXRlcGlja2VyL2Fpci1kYXRlcGlja2VyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxvRkFBb0Ysa0NBQWtDLENBQUMsZ0dBQWdHLHdDQUF3QyxDQUFDLDBIQUEwSCxrQ0FBa0MsQ0FBQywwR0FBMEcsVUFBVSxDQUFDLDJEQUEyRCxDQUFDLDBIQUEwSCxtRUFBbUUsQ0FBQywwR0FBMEcscURBQXFELENBQUMsc0JBQXNCLENBQUMsMEhBQTBILDZEQUE2RCxDQUFDLGdHQUFnRyxlQUFlLENBQUMsV0FBVyxDQUFDLHFCQUFxQiwyQ0FBMkMsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyw2QkFBNkIsaURBQWlELENBQUMsK0JBQStCLG1DQUFtQyxD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cUQsQ0FBQyx1REFBdUQsQ0FBQyw2QkFBNkIsQ0FBQyw4QkFBOEIsQ0FBQyxxQkFBcUIsQ0FBQyx3S0FBd0ssK0NBQStDLENBQUMsZ01BQWdNLHdCQUF3QixDQUFDLGdMQUFnTCxpREFBaUQsQ0FBQyx3TUFBd00sd0JBQXdCLENBQUMsb0xBQW9MLGtEQUFrRCxDQUFDLDRNQUE0TSx3QkFBd0IsQ0FBQyw0S0FBNEssZ0RBQWdELENBQUMsb01BQW9NLHVCQUF1QixDQUFDLDZFQUE2RSw4QkFBOEIsQ0FBQywrRUFBK0UsK0JBQStCLENBQUMsaUZBQWlGLDBDQUEwQyxDQUFDLDJFQUEyRSw2QkFBNkIsQ0FBQyxpRkFBaUYsZ0NBQWdDLENBQUMsaUZBQWlGLHlDQUF5QyxDQUFDLDRCQUE0QixhQUFhLENBQUMseUJBQXlCLHNCQUFzQixDQUFDLDBCQUEwQixDQUFDLGNBQWMsQ0FBQyw0Q0FBNEMsWUFBWSxDQUFDLHNCQUFzQixvQkFBb0IsQ0FBQyx5QkFBeUIsaUJBQWlCLENBQUMsK0NBQStDLDBCQUEwQixDQUFDLGtEQUFrRCxDQUFDLHdCQUF3QixjQUFjLENBQUMsOENBQThDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyx1SEFBdUgsQ0FBQyx3SUFBd0ksQ0FBQyxrQ0FBa0MsQ0FBQyxpQ0FBaUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsK0dBQStHXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5haXItZGF0ZXBpY2tlci1jZWxsLi15ZWFyLS4tb3RoZXItZGVjYWRlLSwuYWlyLWRhdGVwaWNrZXItY2VsbC4tZGF5LS4tb3RoZXItbW9udGgte2NvbG9yOnZhcigtLWFkcC1jb2xvci1vdGhlci1tb250aCl9LmFpci1kYXRlcGlja2VyLWNlbGwuLXllYXItLi1vdGhlci1kZWNhZGUtOmhvdmVyLC5haXItZGF0ZXBpY2tlci1jZWxsLi1kYXktLi1vdGhlci1tb250aC06aG92ZXJ7Y29sb3I6dmFyKC0tYWRwLWNvbG9yLW90aGVyLW1vbnRoLWhvdmVyKX0uLWRpc2FibGVkLS4tZm9jdXMtLmFpci1kYXRlcGlja2VyLWNlbGwuLXllYXItLi1vdGhlci1kZWNhZGUtLC4tZGlzYWJsZWQtLi1mb2N1cy0uYWlyLWRhdGVwaWNrZXItY2VsbC4tZGF5LS4tb3RoZXItbW9udGgte2NvbG9yOnZhcigtLWFkcC1jb2xvci1vdGhlci1tb250aCl9Li1zZWxlY3RlZC0uYWlyLWRhdGVwaWNrZXItY2VsbC4teWVhci0uLW90aGVyLWRlY2FkZS0sLi1zZWxlY3RlZC0uYWlyLWRhdGVwaWNrZXItY2VsbC4tZGF5LS4tb3RoZXItbW9udGgte2NvbG9yOiNmZmY7YmFja2dyb3VuZDp2YXIoLS1hZHAtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZC1vdGhlci1tb250aCl9Li1zZWxlY3RlZC0uLWZvY3VzLS5haXItZGF0ZXBpY2tlci1jZWxsLi15ZWFyLS4tb3RoZXItZGVjYWRlLSwuLXNlbGVjdGVkLS4tZm9jdXMtLmFpci1kYXRlcGlja2VyLWNlbGwuLWRheS0uLW90aGVyLW1vbnRoLXtiYWNrZ3JvdW5kOnZhcigtLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLW90aGVyLW1vbnRoLWZvY3VzZWQpfS4taW4tcmFuZ2UtLmFpci1kYXRlcGlja2VyLWNlbGwuLXllYXItLi1vdGhlci1kZWNhZGUtLC4taW4tcmFuZ2UtLmFpci1kYXRlcGlja2VyLWNlbGwuLWRheS0uLW90aGVyLW1vbnRoLXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLWluLXJhbmdlKTtjb2xvcjp2YXIoLS1hZHAtY29sb3IpfS4taW4tcmFuZ2UtLi1mb2N1cy0uYWlyLWRhdGVwaWNrZXItY2VsbC4teWVhci0uLW90aGVyLWRlY2FkZS0sLi1pbi1yYW5nZS0uLWZvY3VzLS5haXItZGF0ZXBpY2tlci1jZWxsLi1kYXktLi1vdGhlci1tb250aC17YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1hZHAtYmFja2dyb3VuZC1jb2xvci1pbi1yYW5nZS1mb2N1c2VkKX0uYWlyLWRhdGVwaWNrZXItY2VsbC4teWVhci0uLW90aGVyLWRlY2FkZS06ZW1wdHksLmFpci1kYXRlcGlja2VyLWNlbGwuLWRheS0uLW90aGVyLW1vbnRoLTplbXB0eXtiYWNrZ3JvdW5kOm5vbmU7Ym9yZGVyOm5vbmV9LmFpci1kYXRlcGlja2VyLWNlbGx7Ym9yZGVyLXJhZGl1czp2YXIoLS1hZHAtY2VsbC1ib3JkZXItcmFkaXVzKTtib3gtc2l6aW5nOmJvcmRlci1ib3g7Y3Vyc29yOnBvaW50ZXI7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlO2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3otaW5kZXg6MX0uYWlyLWRhdGVwaWNrZXItY2VsbC4tZm9jdXMte2JhY2tncm91bmQ6dmFyKC0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1ob3Zlcil9LmFpci1kYXRlcGlja2VyLWNlbGwuLWN1cnJlbnQte2NvbG9yOnZhcigtLWFkcC1jb2xvci1jdXJyZW50LWRhdGUpfS5haXItZGF0ZXBpY2tlci1jZWxsLi1jdXJyZW50LS4tZm9jdXMte2NvbG9yOnZhcigtLWFkcC1jb2xvcil9LmFpci1kYXRlcGlja2VyLWNlbGwuLWN1cnJlbnQtLi1pbi1yYW5nZS17Y29sb3I6dmFyKC0tYWRwLWNvbG9yLWN1cnJlbnQtZGF0ZSl9LmFpci1kYXRlcGlja2VyLWNlbGwuLWRpc2FibGVkLXtjdXJzb3I6ZGVmYXVsdDtjb2xvcjp2YXIoLS1hZHAtY29sb3ItZGlzYWJsZWQpfS5haXItZGF0ZXBpY2tlci1jZWxsLi1kaXNhYmxlZC0uLWZvY3VzLXtjb2xvcjp2YXIoLS1hZHAtY29sb3ItZGlzYWJsZWQpfS5haXItZGF0ZXBpY2tlci1jZWxsLi1kaXNhYmxlZC0uLWluLXJhbmdlLXtjb2xvcjp2YXIoLS1hZHAtY29sb3ItZGlzYWJsZWQtaW4tcmFuZ2UpfS5haXItZGF0ZXBpY2tlci1jZWxsLi1kaXNhYmxlZC0uLWN1cnJlbnQtLi1mb2N1cy17Y29sb3I6dmFyKC0tYWRwLWNvbG9yLWRpc2FibGVkKX0uYWlyLWRhdGVwaWNrZXItY2VsbC4taW4tcmFuZ2Ute2JhY2tncm91bmQ6dmFyKC0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1pbi1yYW5nZSk7Ym9yZGVyLXJhZGl1czowfS5haXItZGF0ZXBpY2tlci1jZWxsLi1pbi1yYW5nZS06aG92ZXJ7YmFja2dyb3VuZDp2YXIoLS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLWluLXJhbmdlLWhvdmVyKX0uYWlyLWRhdGVwaWNrZXItY2VsbC4tcmFuZ2UtZnJvbS17Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1hZHAtY2VsbC1ib3JkZXItY29sb3ItaW4tcmFuZ2UpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1pbi1yYW5nZSk7Ym9yZGVyLXJhZGl1czp2YXIoLS1hZHAtY2VsbC1ib3JkZXItcmFkaXVzKSAwIDAgdmFyKC0tYWRwLWNlbGwtYm9yZGVyLXJhZGl1cyl9LmFpci1kYXRlcGlja2VyLWNlbGwuLXJhbmdlLXRvLXtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWFkcC1jZWxsLWJvcmRlci1jb2xvci1pbi1yYW5nZSk7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLWluLXJhbmdlKTtib3JkZXItcmFkaXVzOjAgdmFyKC0tYWRwLWNlbGwtYm9yZGVyLXJhZGl1cykgdmFyKC0tYWRwLWNlbGwtYm9yZGVyLXJhZGl1cykgMH0uYWlyLWRhdGVwaWNrZXItY2VsbC4tcmFuZ2UtdG8tLi1yYW5nZS1mcm9tLXtib3JkZXItcmFkaXVzOnZhcigtLWFkcC1jZWxsLWJvcmRlci1yYWRpdXMpfS5haXItZGF0ZXBpY2tlci1jZWxsLi1zZWxlY3RlZC17Y29sb3I6I2ZmZjtib3JkZXI6bm9uZTtiYWNrZ3JvdW5kOnZhcigtLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQpfS5haXItZGF0ZXBpY2tlci1jZWxsLi1zZWxlY3RlZC0uLWN1cnJlbnQte2NvbG9yOiNmZmY7YmFja2dyb3VuZDp2YXIoLS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkKX0uYWlyLWRhdGVwaWNrZXItY2VsbC4tc2VsZWN0ZWQtLi1mb2N1cy17YmFja2dyb3VuZDp2YXIoLS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWhvdmVyKX1cXHJcXG4uYWlyLWRhdGVwaWNrZXItYm9keXt0cmFuc2l0aW9uOmFsbCB2YXIoLS1hZHAtdHJhbnNpdGlvbi1kdXJhdGlvbikgdmFyKC0tYWRwLXRyYW5zaXRpb24tZWFzZSl9LmFpci1kYXRlcGlja2VyLWJvZHkuLWhpZGRlbi17ZGlzcGxheTpub25lfS5haXItZGF0ZXBpY2tlci1ib2R5LS1kYXktbmFtZXN7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoNywgdmFyKC0tYWRwLWRheS1jZWxsLXdpZHRoKSk7bWFyZ2luOjhweCAwIDNweH0uYWlyLWRhdGVwaWNrZXItYm9keS0tZGF5LW5hbWV7Y29sb3I6dmFyKC0tYWRwLWRheS1uYW1lLWNvbG9yKTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7ZmxleDoxO3RleHQtYWxpZ246Y2VudGVyO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtmb250LXNpemU6LjhlbX0uYWlyLWRhdGVwaWNrZXItYm9keS0tZGF5LW5hbWUuLWNsaWNrYWJsZS17Y3Vyc29yOnBvaW50ZXJ9LmFpci1kYXRlcGlja2VyLWJvZHktLWRheS1uYW1lLi1jbGlja2FibGUtOmhvdmVye2NvbG9yOnZhcigtLWFkcC1kYXktbmFtZS1jb2xvci1ob3Zlcil9LmFpci1kYXRlcGlja2VyLWJvZHktLWNlbGxze2Rpc3BsYXk6Z3JpZH0uYWlyLWRhdGVwaWNrZXItYm9keS0tY2VsbHMuLWRheXMte2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoNywgdmFyKC0tYWRwLWRheS1jZWxsLXdpZHRoKSk7Z3JpZC1hdXRvLXJvd3M6dmFyKC0tYWRwLWRheS1jZWxsLWhlaWdodCl9LmFpci1kYXRlcGlja2VyLWJvZHktLWNlbGxzLi1tb250aHMte2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoMywgMWZyKTtncmlkLWF1dG8tcm93czp2YXIoLS1hZHAtbW9udGgtY2VsbC1oZWlnaHQpfS5haXItZGF0ZXBpY2tlci1ib2R5LS1jZWxscy4teWVhcnMte2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoNCwgMWZyKTtncmlkLWF1dG8tcm93czp2YXIoLS1hZHAteWVhci1jZWxsLWhlaWdodCl9XFxyXFxuLmFpci1kYXRlcGlja2VyLW5hdntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Ym9yZGVyLWJvdHRvbToxcHggc29saWQgdmFyKC0tYWRwLWJvcmRlci1jb2xvci1pbm5lcik7bWluLWhlaWdodDp2YXIoLS1hZHAtbmF2LWhlaWdodCk7cGFkZGluZzp2YXIoLS1hZHAtcGFkZGluZyk7Ym94LXNpemluZzpjb250ZW50LWJveH0uLW9ubHktdGltZXBpY2tlci0gLmFpci1kYXRlcGlja2VyLW5hdntkaXNwbGF5Om5vbmV9LmFpci1kYXRlcGlja2VyLW5hdi0tdGl0bGUsLmFpci1kYXRlcGlja2VyLW5hdi0tYWN0aW9ue2Rpc3BsYXk6ZmxleDtjdXJzb3I6cG9pbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uYWlyLWRhdGVwaWNrZXItbmF2LS1hY3Rpb257d2lkdGg6dmFyKC0tYWRwLW5hdi1hY3Rpb24tc2l6ZSk7Ym9yZGVyLXJhZGl1czp2YXIoLS1hZHAtYm9yZGVyLXJhZGl1cyk7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5haXItZGF0ZXBpY2tlci1uYXYtLWFjdGlvbjpob3ZlcntiYWNrZ3JvdW5kOnZhcigtLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyKX0uYWlyLWRhdGVwaWNrZXItbmF2LS1hY3Rpb246YWN0aXZle2JhY2tncm91bmQ6dmFyKC0tYWRwLWJhY2tncm91bmQtY29sb3ItYWN0aXZlKX0uYWlyLWRhdGVwaWNrZXItbmF2LS1hY3Rpb24uLWRpc2FibGVkLXt2aXNpYmlsaXR5OmhpZGRlbn0uYWlyLWRhdGVwaWNrZXItbmF2LS1hY3Rpb24gc3Zne3dpZHRoOjMycHg7aGVpZ2h0OjMycHh9LmFpci1kYXRlcGlja2VyLW5hdi0tYWN0aW9uIHBhdGh7ZmlsbDpub25lO3N0cm9rZTp2YXIoLS1hZHAtbmF2LWFycm93LWNvbG9yKTtzdHJva2Utd2lkdGg6MnB4fS5haXItZGF0ZXBpY2tlci1uYXYtLXRpdGxle2JvcmRlci1yYWRpdXM6dmFyKC0tYWRwLWJvcmRlci1yYWRpdXMpO3BhZGRpbmc6MCA4cHh9LmFpci1kYXRlcGlja2VyLW5hdi0tdGl0bGUgaXtmb250LXN0eWxlOm5vcm1hbDtjb2xvcjp2YXIoLS1hZHAtbmF2LWNvbG9yLXNlY29uZGFyeSk7bWFyZ2luLWxlZnQ6LjNlbX0uYWlyLWRhdGVwaWNrZXItbmF2LS10aXRsZTpob3ZlcntiYWNrZ3JvdW5kOnZhcigtLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyKX0uYWlyLWRhdGVwaWNrZXItbmF2LS10aXRsZTphY3RpdmV7YmFja2dyb3VuZDp2YXIoLS1hZHAtYmFja2dyb3VuZC1jb2xvci1hY3RpdmUpfS5haXItZGF0ZXBpY2tlci1uYXYtLXRpdGxlLi1kaXNhYmxlZC17Y3Vyc29yOmRlZmF1bHQ7YmFja2dyb3VuZDpub25lfVxcclxcbi5haXItZGF0ZXBpY2tlci1idXR0b25ze2Rpc3BsYXk6Z3JpZDtncmlkLWF1dG8tY29sdW1uczoxZnI7Z3JpZC1hdXRvLWZsb3c6Y29sdW1ufS5haXItZGF0ZXBpY2tlci1idXR0b257ZGlzcGxheTppbmxpbmUtZmxleDtjb2xvcjp2YXIoLS1hZHAtYnRuLWNvbG9yKTtib3JkZXItcmFkaXVzOnZhcigtLWFkcC1idG4tYm9yZGVyLXJhZGl1cyk7Y3Vyc29yOnBvaW50ZXI7aGVpZ2h0OnZhcigtLWFkcC1idG4taGVpZ2h0KTtib3JkZXI6bm9uZTtiYWNrZ3JvdW5kOnJnYmEoMjU1LDI1NSwyNTUsMCl9LmFpci1kYXRlcGlja2VyLWJ1dHRvbjpob3Zlcntjb2xvcjp2YXIoLS1hZHAtYnRuLWNvbG9yLWhvdmVyKTtiYWNrZ3JvdW5kOnZhcigtLWFkcC1idG4tYmFja2dyb3VuZC1jb2xvci1ob3Zlcil9LmFpci1kYXRlcGlja2VyLWJ1dHRvbjpmb2N1c3tjb2xvcjp2YXIoLS1hZHAtYnRuLWNvbG9yLWhvdmVyKTtiYWNrZ3JvdW5kOnZhcigtLWFkcC1idG4tYmFja2dyb3VuZC1jb2xvci1ob3Zlcik7b3V0bGluZTpub25lfS5haXItZGF0ZXBpY2tlci1idXR0b246YWN0aXZle2JhY2tncm91bmQ6dmFyKC0tYWRwLWJ0bi1iYWNrZ3JvdW5kLWNvbG9yLWFjdGl2ZSl9LmFpci1kYXRlcGlja2VyLWJ1dHRvbiBzcGFue291dGxpbmU6bm9uZTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX1cXHJcXG4uYWlyLWRhdGVwaWNrZXItdGltZXtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOm1heC1jb250ZW50IDFmcjtncmlkLWNvbHVtbi1nYXA6MTJweDthbGlnbi1pdGVtczpjZW50ZXI7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZzowIHZhcigtLWFkcC10aW1lLXBhZGRpbmctaW5uZXIpfS4tb25seS10aW1lcGlja2VyLSAuYWlyLWRhdGVwaWNrZXItdGltZXtib3JkZXItdG9wOm5vbmV9LmFpci1kYXRlcGlja2VyLXRpbWUtLWN1cnJlbnR7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtmbGV4OjE7Zm9udC1zaXplOjE0cHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmFpci1kYXRlcGlja2VyLXRpbWUtLWN1cnJlbnQtY29sb257bWFyZ2luOjAgMnB4IDNweDtsaW5lLWhlaWdodDoxfS5haXItZGF0ZXBpY2tlci10aW1lLS1jdXJyZW50LWhvdXJzLC5haXItZGF0ZXBpY2tlci10aW1lLS1jdXJyZW50LW1pbnV0ZXN7bGluZS1oZWlnaHQ6MTtmb250LXNpemU6MTlweDtmb250LWZhbWlseTpcXFwiQ2VudHVyeSBHb3RoaWNcXFwiLENlbnR1cnlHb3RoaWMsQXBwbGVHb3RoaWMsc2Fucy1zZXJpZjtwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjF9LmFpci1kYXRlcGlja2VyLXRpbWUtLWN1cnJlbnQtaG91cnM6YWZ0ZXIsLmFpci1kYXRlcGlja2VyLXRpbWUtLWN1cnJlbnQtbWludXRlczphZnRlcntjb250ZW50OlxcXCJcXFwiO2JhY2tncm91bmQ6dmFyKC0tYWRwLWJhY2tncm91bmQtY29sb3ItaG92ZXIpO2JvcmRlci1yYWRpdXM6dmFyKC0tYWRwLWJvcmRlci1yYWRpdXMpO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTJweDt0b3A6LTNweDtyaWdodDotMnB4O2JvdHRvbTotMnB4O3otaW5kZXg6LTE7b3BhY2l0eTowfS5haXItZGF0ZXBpY2tlci10aW1lLS1jdXJyZW50LWhvdXJzLi1mb2N1cy06YWZ0ZXIsLmFpci1kYXRlcGlja2VyLXRpbWUtLWN1cnJlbnQtbWludXRlcy4tZm9jdXMtOmFmdGVye29wYWNpdHk6MX0uYWlyLWRhdGVwaWNrZXItdGltZS0tY3VycmVudC1hbXBte3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTthbGlnbi1zZWxmOmZsZXgtZW5kO2NvbG9yOnZhcigtLWFkcC10aW1lLWRheS1wZXJpb2QtY29sb3IpO21hcmdpbi1sZWZ0OjZweDtmb250LXNpemU6MTFweDttYXJnaW4tYm90dG9tOjFweH0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93e2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Zm9udC1zaXplOjExcHg7aGVpZ2h0OjE3cHg7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHZhcigtLWFkcC10aW1lLXRyYWNrLWNvbG9yKSwgdmFyKC0tYWRwLXRpbWUtdHJhY2stY29sb3IpKSBsZWZ0IDUwJS8xMDAlIHZhcigtLWFkcC10aW1lLXRyYWNrLWhlaWdodCkgbm8tcmVwZWF0fS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3c6Zmlyc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTo0cHh9LmFpci1kYXRlcGlja2VyLXRpbWUtLXJvdyBpbnB1dFt0eXBlPXJhbmdlXXtiYWNrZ3JvdW5kOm5vbmU7Y3Vyc29yOnBvaW50ZXI7ZmxleDoxO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7cGFkZGluZzowO21hcmdpbjowOy13ZWJraXQtYXBwZWFyYW5jZTpub25lfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Oi13ZWJraXQtc2xpZGVyLXRodW1iey13ZWJraXQtYXBwZWFyYW5jZTpub25lfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Oi1tcy10b29sdGlwe2Rpc3BsYXk6bm9uZX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOmhvdmVyOjotd2Via2l0LXNsaWRlci10aHVtYntib3JkZXItY29sb3I6dmFyKC0tYWRwLXRpbWUtdHJhY2stY29sb3ItaG92ZXIpfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06aG92ZXI6Oi1tb3otcmFuZ2UtdGh1bWJ7Ym9yZGVyLWNvbG9yOnZhcigtLWFkcC10aW1lLXRyYWNrLWNvbG9yLWhvdmVyKX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOmhvdmVyOjotbXMtdGh1bWJ7Ym9yZGVyLWNvbG9yOnZhcigtLWFkcC10aW1lLXRyYWNrLWNvbG9yLWhvdmVyKX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOmZvY3Vze291dGxpbmU6bm9uZX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOmZvY3VzOjotd2Via2l0LXNsaWRlci10aHVtYntiYWNrZ3JvdW5kOnZhcigtLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQpO2JvcmRlci1jb2xvcjp2YXIoLS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkKX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOmZvY3VzOjotbW96LXJhbmdlLXRodW1ie2JhY2tncm91bmQ6dmFyKC0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZCk7Ym9yZGVyLWNvbG9yOnZhcigtLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQpfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Zm9jdXM6Oi1tcy10aHVtYntiYWNrZ3JvdW5kOnZhcigtLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQpO2JvcmRlci1jb2xvcjp2YXIoLS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkKX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOjotd2Via2l0LXNsaWRlci10aHVtYntib3gtc2l6aW5nOmJvcmRlci1ib3g7aGVpZ2h0OjEycHg7d2lkdGg6MTJweDtib3JkZXItcmFkaXVzOjNweDtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWFkcC10aW1lLXRyYWNrLWNvbG9yKTtiYWNrZ3JvdW5kOiNmZmY7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC10cmFuc2l0aW9uOmJhY2tncm91bmQgdmFyKC0tYWRwLXRyYW5zaXRpb24tZHVyYXRpb24pO3RyYW5zaXRpb246YmFja2dyb3VuZCB2YXIoLS1hZHAtdHJhbnNpdGlvbi1kdXJhdGlvbil9LmFpci1kYXRlcGlja2VyLXRpbWUtLXJvdyBpbnB1dFt0eXBlPXJhbmdlXTo6LW1vei1yYW5nZS10aHVtYntib3gtc2l6aW5nOmJvcmRlci1ib3g7aGVpZ2h0OjEycHg7d2lkdGg6MTJweDtib3JkZXItcmFkaXVzOjNweDtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWFkcC10aW1lLXRyYWNrLWNvbG9yKTtiYWNrZ3JvdW5kOiNmZmY7Y3Vyc29yOnBvaW50ZXI7LW1vei10cmFuc2l0aW9uOmJhY2tncm91bmQgdmFyKC0tYWRwLXRyYW5zaXRpb24tZHVyYXRpb24pO3RyYW5zaXRpb246YmFja2dyb3VuZCB2YXIoLS1hZHAtdHJhbnNpdGlvbi1kdXJhdGlvbil9LmFpci1kYXRlcGlja2VyLXRpbWUtLXJvdyBpbnB1dFt0eXBlPXJhbmdlXTo6LW1zLXRodW1ie2JveC1zaXppbmc6Ym9yZGVyLWJveDtoZWlnaHQ6MTJweDt3aWR0aDoxMnB4O2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjoxcHggc29saWQgdmFyKC0tYWRwLXRpbWUtdHJhY2stY29sb3IpO2JhY2tncm91bmQ6I2ZmZjtjdXJzb3I6cG9pbnRlcjstbXMtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kIHZhcigtLWFkcC10cmFuc2l0aW9uLWR1cmF0aW9uKTt0cmFuc2l0aW9uOmJhY2tncm91bmQgdmFyKC0tYWRwLXRyYW5zaXRpb24tZHVyYXRpb24pfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Oi13ZWJraXQtc2xpZGVyLXRodW1ie21hcmdpbi10b3A6Y2FsYyh2YXIoLS1hZHAtdGltZS10aHVtYi1zaXplKS8yKi0xKX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOjotd2Via2l0LXNsaWRlci1ydW5uYWJsZS10cmFja3tib3JkZXI6bm9uZTtoZWlnaHQ6dmFyKC0tYWRwLXRpbWUtdHJhY2staGVpZ2h0KTtjdXJzb3I6cG9pbnRlcjtjb2xvcjpyZ2JhKDAsMCwwLDApO2JhY2tncm91bmQ6cmdiYSgwLDAsMCwwKX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOjotbW96LXJhbmdlLXRyYWNre2JvcmRlcjpub25lO2hlaWdodDp2YXIoLS1hZHAtdGltZS10cmFjay1oZWlnaHQpO2N1cnNvcjpwb2ludGVyO2NvbG9yOnJnYmEoMCwwLDAsMCk7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApfS5haXItZGF0ZXBpY2tlci10aW1lLS1yb3cgaW5wdXRbdHlwZT1yYW5nZV06Oi1tcy10cmFja3tib3JkZXI6bm9uZTtoZWlnaHQ6dmFyKC0tYWRwLXRpbWUtdHJhY2staGVpZ2h0KTtjdXJzb3I6cG9pbnRlcjtjb2xvcjpyZ2JhKDAsMCwwLDApO2JhY2tncm91bmQ6cmdiYSgwLDAsMCwwKX0uYWlyLWRhdGVwaWNrZXItdGltZS0tcm93IGlucHV0W3R5cGU9cmFuZ2VdOjotbXMtZmlsbC1sb3dlcntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCl9LmFpci1kYXRlcGlja2VyLXRpbWUtLXJvdyBpbnB1dFt0eXBlPXJhbmdlXTo6LW1zLWZpbGwtdXBwZXJ7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApfVxcclxcbi5haXItZGF0ZXBpY2tlcnstLWFkcC1mb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWYsIFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBTeW1ib2xcXFwiOy0tYWRwLWZvbnQtc2l6ZTogMTRweDstLWFkcC13aWR0aDogMjQ2cHg7LS1hZHAtei1pbmRleDogMTAwOy0tYWRwLXBhZGRpbmc6IDRweDstLWFkcC1ncmlkLWFyZWFzOiBcXFwibmF2XFxcIiBcXFwiYm9keVxcXCIgXFxcInRpbWVwaWNrZXJcXFwiIFxcXCJidXR0b25zXFxcIjstLWFkcC10cmFuc2l0aW9uLWR1cmF0aW9uOiAuM3M7LS1hZHAtdHJhbnNpdGlvbi1lYXNlOiBlYXNlLW91dDstLWFkcC10cmFuc2l0aW9uLW9mZnNldDogOHB4Oy0tYWRwLWJhY2tncm91bmQtY29sb3I6ICNmZmY7LS1hZHAtYmFja2dyb3VuZC1jb2xvci1ob3ZlcjogI2YwZjBmMDstLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLWFjdGl2ZTogI2VhZWFlYTstLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLWluLXJhbmdlOiByZ2JhKDkyLCAxOTYsIDIzOSwgLjEpOy0tYWRwLWJhY2tncm91bmQtY29sb3ItaW4tcmFuZ2UtZm9jdXNlZDogcmdiYSg5MiwgMTk2LCAyMzksIC4yKTstLWFkcC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLW90aGVyLW1vbnRoLWZvY3VzZWQ6ICM4YWQ1ZjQ7LS1hZHAtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZC1vdGhlci1tb250aDogI2EyZGRmNjstLWFkcC1jb2xvcjogIzRhNGE0YTstLWFkcC1jb2xvci1zZWNvbmRhcnk6ICM5YzljOWM7LS1hZHAtYWNjZW50LWNvbG9yOiAjNGViNWU2Oy0tYWRwLWNvbG9yLWN1cnJlbnQtZGF0ZTogdmFyKC0tYWRwLWFjY2VudC1jb2xvcik7LS1hZHAtY29sb3Itb3RoZXItbW9udGg6ICNkZWRlZGU7LS1hZHAtY29sb3ItZGlzYWJsZWQ6ICNhZWFlYWU7LS1hZHAtY29sb3ItZGlzYWJsZWQtaW4tcmFuZ2U6ICM5MzkzOTM7LS1hZHAtY29sb3Itb3RoZXItbW9udGgtaG92ZXI6ICNjNWM1YzU7LS1hZHAtYm9yZGVyLWNvbG9yOiAjZGJkYmRiOy0tYWRwLWJvcmRlci1jb2xvci1pbm5lcjogI2VmZWZlZjstLWFkcC1ib3JkZXItcmFkaXVzOiA0cHg7LS1hZHAtYm9yZGVyLWNvbG9yLWlubGluZTogI2Q3ZDdkNzstLWFkcC1uYXYtaGVpZ2h0OiAzMnB4Oy0tYWRwLW5hdi1hcnJvdy1jb2xvcjogdmFyKC0tYWRwLWNvbG9yLXNlY29uZGFyeSk7LS1hZHAtbmF2LWFjdGlvbi1zaXplOiAzMnB4Oy0tYWRwLW5hdi1jb2xvci1zZWNvbmRhcnk6IHZhcigtLWFkcC1jb2xvci1zZWNvbmRhcnkpOy0tYWRwLWRheS1uYW1lLWNvbG9yOiAjZmY5YTE5Oy0tYWRwLWRheS1uYW1lLWNvbG9yLWhvdmVyOiAjOGFkNWY0Oy0tYWRwLWRheS1jZWxsLXdpZHRoOiAxZnI7LS1hZHAtZGF5LWNlbGwtaGVpZ2h0OiAzMnB4Oy0tYWRwLW1vbnRoLWNlbGwtaGVpZ2h0OiA0MnB4Oy0tYWRwLXllYXItY2VsbC1oZWlnaHQ6IDU2cHg7LS1hZHAtcG9pbnRlci1zaXplOiAxMHB4Oy0tYWRwLXBvaW5lci1ib3JkZXItcmFkaXVzOiAycHg7LS1hZHAtcG9pbnRlci1vZmZzZXQ6IDE0cHg7LS1hZHAtY2VsbC1ib3JkZXItcmFkaXVzOiA0cHg7LS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOiB2YXIoLS1hZHAtYmFja2dyb3VuZC1jb2xvci1ob3Zlcik7LS1hZHAtY2VsbC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkOiAjNWNjNGVmOy0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZC1ob3ZlcjogIzQ1YmNlZDstLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3ItaW4tcmFuZ2U6IHJnYmEoOTIsIDE5NiwgMjM5LCAwLjEpOy0tYWRwLWNlbGwtYmFja2dyb3VuZC1jb2xvci1pbi1yYW5nZS1ob3ZlcjogcmdiYSg5MiwgMTk2LCAyMzksIDAuMik7LS1hZHAtY2VsbC1ib3JkZXItY29sb3ItaW4tcmFuZ2U6IHZhcigtLWFkcC1jZWxsLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQpOy0tYWRwLWJ0bi1oZWlnaHQ6IDMycHg7LS1hZHAtYnRuLWNvbG9yOiB2YXIoLS1hZHAtYWNjZW50LWNvbG9yKTstLWFkcC1idG4tY29sb3ItaG92ZXI6IHZhcigtLWFkcC1jb2xvcik7LS1hZHAtYnRuLWJvcmRlci1yYWRpdXM6IHZhcigtLWFkcC1ib3JkZXItcmFkaXVzKTstLWFkcC1idG4tYmFja2dyb3VuZC1jb2xvci1ob3ZlcjogdmFyKC0tYWRwLWJhY2tncm91bmQtY29sb3ItaG92ZXIpOy0tYWRwLWJ0bi1iYWNrZ3JvdW5kLWNvbG9yLWFjdGl2ZTogdmFyKC0tYWRwLWJhY2tncm91bmQtY29sb3ItYWN0aXZlKTstLWFkcC10aW1lLXRyYWNrLWhlaWdodDogMXB4Oy0tYWRwLXRpbWUtdHJhY2stY29sb3I6ICNkZWRlZGU7LS1hZHAtdGltZS10cmFjay1jb2xvci1ob3ZlcjogI2IxYjFiMTstLWFkcC10aW1lLXRodW1iLXNpemU6IDEycHg7LS1hZHAtdGltZS1wYWRkaW5nLWlubmVyOiAxMHB4Oy0tYWRwLXRpbWUtZGF5LXBlcmlvZC1jb2xvcjogdmFyKC0tYWRwLWNvbG9yLXNlY29uZGFyeSk7LS1hZHAtbW9iaWxlLWZvbnQtc2l6ZTogMTZweDstLWFkcC1tb2JpbGUtbmF2LWhlaWdodDogNDBweDstLWFkcC1tb2JpbGUtd2lkdGg6IDMyMHB4Oy0tYWRwLW1vYmlsZS1kYXktY2VsbC1oZWlnaHQ6IDM4cHg7LS1hZHAtbW9iaWxlLW1vbnRoLWNlbGwtaGVpZ2h0OiA0OHB4Oy0tYWRwLW1vYmlsZS15ZWFyLWNlbGwtaGVpZ2h0OiA2NHB4fS5haXItZGF0ZXBpY2tlci1vdmVybGF5ey0tYWRwLW92ZXJsYXktYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAuMyk7LS1hZHAtb3ZlcmxheS10cmFuc2l0aW9uLWR1cmF0aW9uOiAuM3M7LS1hZHAtb3ZlcmxheS10cmFuc2l0aW9uLWVhc2U6IGVhc2Utb3V0Oy0tYWRwLW92ZXJsYXktei1pbmRleDogOTl9XFxyXFxuLmFpci1kYXRlcGlja2Vye2JhY2tncm91bmQ6dmFyKC0tYWRwLWJhY2tncm91bmQtY29sb3IpO2JvcmRlcjoxcHggc29saWQgdmFyKC0tYWRwLWJvcmRlci1jb2xvcik7Ym94LXNoYWRvdzowIDRweCAxMnB4IHJnYmEoMCwwLDAsLjE1KTtib3JkZXItcmFkaXVzOnZhcigtLWFkcC1ib3JkZXItcmFkaXVzKTtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6MWZyO2dyaWQtdGVtcGxhdGUtcm93czpyZXBlYXQoNCwgbWF4LWNvbnRlbnQpO2dyaWQtdGVtcGxhdGUtYXJlYXM6dmFyKC0tYWRwLWdyaWQtYXJlYXMpO2ZvbnQtZmFtaWx5OnZhcigtLWFkcC1mb250LWZhbWlseSksc2Fucy1zZXJpZjtmb250LXNpemU6dmFyKC0tYWRwLWZvbnQtc2l6ZSk7Y29sb3I6dmFyKC0tYWRwLWNvbG9yKTt3aWR0aDp2YXIoLS1hZHAtd2lkdGgpO3Bvc2l0aW9uOmFic29sdXRlO3RyYW5zaXRpb246b3BhY2l0eSB2YXIoLS1hZHAtdHJhbnNpdGlvbi1kdXJhdGlvbikgdmFyKC0tYWRwLXRyYW5zaXRpb24tZWFzZSksdHJhbnNmb3JtIHZhcigtLWFkcC10cmFuc2l0aW9uLWR1cmF0aW9uKSB2YXIoLS1hZHAtdHJhbnNpdGlvbi1lYXNlKTt6LWluZGV4OnZhcigtLWFkcC16LWluZGV4KX0uYWlyLWRhdGVwaWNrZXI6bm90KC4tY3VzdG9tLXBvc2l0aW9uLSl7b3BhY2l0eTowfS5haXItZGF0ZXBpY2tlci4tZnJvbS10b3Ate3RyYW5zZm9ybTp0cmFuc2xhdGVZKGNhbGModmFyKC0tYWRwLXRyYW5zaXRpb24tb2Zmc2V0KSAqIC0xKSl9LmFpci1kYXRlcGlja2VyLi1mcm9tLXJpZ2h0LXt0cmFuc2Zvcm06dHJhbnNsYXRlWCh2YXIoLS1hZHAtdHJhbnNpdGlvbi1vZmZzZXQpKX0uYWlyLWRhdGVwaWNrZXIuLWZyb20tYm90dG9tLXt0cmFuc2Zvcm06dHJhbnNsYXRlWSh2YXIoLS1hZHAtdHJhbnNpdGlvbi1vZmZzZXQpKX0uYWlyLWRhdGVwaWNrZXIuLWZyb20tbGVmdC17dHJhbnNmb3JtOnRyYW5zbGF0ZVgoY2FsYyh2YXIoLS1hZHAtdHJhbnNpdGlvbi1vZmZzZXQpICogLTEpKX0uYWlyLWRhdGVwaWNrZXIuLWFjdGl2ZS06bm90KC4tY3VzdG9tLXBvc2l0aW9uLSl7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLCAwKTtvcGFjaXR5OjF9LmFpci1kYXRlcGlja2VyLi1hY3RpdmUtLi1jdXN0b20tcG9zaXRpb24te3RyYW5zaXRpb246bm9uZX0uYWlyLWRhdGVwaWNrZXIuLWlubGluZS17Ym9yZGVyLWNvbG9yOnZhcigtLWFkcC1ib3JkZXItY29sb3ItaW5saW5lKTtib3gtc2hhZG93Om5vbmU7cG9zaXRpb246c3RhdGljO2xlZnQ6YXV0bztyaWdodDphdXRvO29wYWNpdHk6MTt0cmFuc2Zvcm06bm9uZX0uYWlyLWRhdGVwaWNrZXIuLWlubGluZS0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVye2Rpc3BsYXk6bm9uZX0uYWlyLWRhdGVwaWNrZXIuLWlzLW1vYmlsZS17LS1hZHAtZm9udC1zaXplOiB2YXIoLS1hZHAtbW9iaWxlLWZvbnQtc2l6ZSk7LS1hZHAtZGF5LWNlbGwtaGVpZ2h0OiB2YXIoLS1hZHAtbW9iaWxlLWRheS1jZWxsLWhlaWdodCk7LS1hZHAtbW9udGgtY2VsbC1oZWlnaHQ6IHZhcigtLWFkcC1tb2JpbGUtbW9udGgtY2VsbC1oZWlnaHQpOy0tYWRwLXllYXItY2VsbC1oZWlnaHQ6IHZhcigtLWFkcC1tb2JpbGUteWVhci1jZWxsLWhlaWdodCk7LS1hZHAtbmF2LWhlaWdodDogdmFyKC0tYWRwLW1vYmlsZS1uYXYtaGVpZ2h0KTstLWFkcC1uYXYtYWN0aW9uLXNpemU6IHZhcigtLWFkcC1tb2JpbGUtbmF2LWhlaWdodCk7cG9zaXRpb246Zml4ZWQ7d2lkdGg6dmFyKC0tYWRwLW1vYmlsZS13aWR0aCk7Ym9yZGVyOm5vbmV9LmFpci1kYXRlcGlja2VyLi1pcy1tb2JpbGUtICp7LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOnJnYmEoMCwwLDAsMCl9LmFpci1kYXRlcGlja2VyLi1pcy1tb2JpbGUtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcntkaXNwbGF5Om5vbmV9LmFpci1kYXRlcGlja2VyLi1pcy1tb2JpbGUtOm5vdCguLWN1c3RvbS1wb3NpdGlvbi0pe3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgY2FsYygtNTAlICsgdmFyKC0tYWRwLXRyYW5zaXRpb24tb2Zmc2V0KSkpfS5haXItZGF0ZXBpY2tlci4taXMtbW9iaWxlLS4tYWN0aXZlLTpub3QoLi1jdXN0b20tcG9zaXRpb24tKXt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC01MCUpfS5haXItZGF0ZXBpY2tlci4tY3VzdG9tLXBvc2l0aW9uLXt0cmFuc2l0aW9uOm5vbmV9LmFpci1kYXRlcGlja2VyLWdsb2JhbC1jb250YWluZXJ7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowfS5haXItZGF0ZXBpY2tlci0tcG9pbnRlcnstLXBvaW50ZXItaGFsZi1zaXplOiBjYWxjKHZhcigtLWFkcC1wb2ludGVyLXNpemUpIC8gMik7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6dmFyKC0tYWRwLXBvaW50ZXItc2l6ZSk7aGVpZ2h0OnZhcigtLWFkcC1wb2ludGVyLXNpemUpO3otaW5kZXg6LTF9LmFpci1kYXRlcGlja2VyLS1wb2ludGVyOmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZDojZmZmO2JvcmRlci10b3A6MXB4IHNvbGlkIHZhcigtLWFkcC1ib3JkZXItY29sb3ItaW5saW5lKTtib3JkZXItcmlnaHQ6MXB4IHNvbGlkIHZhcigtLWFkcC1ib3JkZXItY29sb3ItaW5saW5lKTtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czp2YXIoLS1hZHAtcG9pbmVyLWJvcmRlci1yYWRpdXMpO3dpZHRoOnZhcigtLWFkcC1wb2ludGVyLXNpemUpO2hlaWdodDp2YXIoLS1hZHAtcG9pbnRlci1zaXplKTtib3gtc2l6aW5nOmJvcmRlci1ib3h9Li10b3AtbGVmdC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLC4tdG9wLWNlbnRlci0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLC4tdG9wLXJpZ2h0LSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXIsW2RhdGEtcG9wcGVyLXBsYWNlbWVudF49dG9wXSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXJ7dG9wOmNhbGMoMTAwJSAtIHZhcigtLXBvaW50ZXItaGFsZi1zaXplKSArIDFweCl9Li10b3AtbGVmdC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyOmFmdGVyLC4tdG9wLWNlbnRlci0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyOmFmdGVyLC4tdG9wLXJpZ2h0LSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXIsW2RhdGEtcG9wcGVyLXBsYWNlbWVudF49dG9wXSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXJ7dHJhbnNmb3JtOnJvdGF0ZSgxMzVkZWcpfS4tcmlnaHQtdG9wLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXIsLi1yaWdodC1jZW50ZXItIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlciwuLXJpZ2h0LWJvdHRvbS0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLFtkYXRhLXBvcHBlci1wbGFjZW1lbnRePXJpZ2h0XSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXJ7cmlnaHQ6Y2FsYygxMDAlIC0gdmFyKC0tcG9pbnRlci1oYWxmLXNpemUpICsgMXB4KX0uLXJpZ2h0LXRvcC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyOmFmdGVyLC4tcmlnaHQtY2VudGVyLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXIsLi1yaWdodC1ib3R0b20tIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcjphZnRlcixbZGF0YS1wb3BwZXItcGxhY2VtZW50Xj1yaWdodF0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyOmFmdGVye3RyYW5zZm9ybTpyb3RhdGUoMjI1ZGVnKX0uLWJvdHRvbS1sZWZ0LSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXIsLi1ib3R0b20tY2VudGVyLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXIsLi1ib3R0b20tcmlnaHQtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcixbZGF0YS1wb3BwZXItcGxhY2VtZW50Xj1ib3R0b21dIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcntib3R0b206Y2FsYygxMDAlIC0gdmFyKC0tcG9pbnRlci1oYWxmLXNpemUpICsgMXB4KX0uLWJvdHRvbS1sZWZ0LSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXIsLi1ib3R0b20tY2VudGVyLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXIsLi1ib3R0b20tcmlnaHQtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcjphZnRlcixbZGF0YS1wb3BwZXItcGxhY2VtZW50Xj1ib3R0b21dIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcjphZnRlcnt0cmFuc2Zvcm06cm90YXRlKDMxNWRlZyl9Li1sZWZ0LXRvcC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLC4tbGVmdC1jZW50ZXItIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlciwuLWxlZnQtYm90dG9tLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXIsW2RhdGEtcG9wcGVyLXBsYWNlbWVudF49bGVmdF0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVye2xlZnQ6Y2FsYygxMDAlIC0gdmFyKC0tcG9pbnRlci1oYWxmLXNpemUpICsgMXB4KX0uLWxlZnQtdG9wLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXIsLi1sZWZ0LWNlbnRlci0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyOmFmdGVyLC4tbGVmdC1ib3R0b20tIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcjphZnRlcixbZGF0YS1wb3BwZXItcGxhY2VtZW50Xj1sZWZ0XSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXI6YWZ0ZXJ7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyl9Li10b3AtbGVmdC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVyLC4tYm90dG9tLWxlZnQtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlcntsZWZ0OnZhcigtLWFkcC1wb2ludGVyLW9mZnNldCl9Li10b3AtcmlnaHQtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlciwuLWJvdHRvbS1yaWdodC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVye3JpZ2h0OnZhcigtLWFkcC1wb2ludGVyLW9mZnNldCl9Li10b3AtY2VudGVyLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXIsLi1ib3R0b20tY2VudGVyLSAuYWlyLWRhdGVwaWNrZXItLXBvaW50ZXJ7bGVmdDpjYWxjKDUwJSAtIHZhcigtLWFkcC1wb2ludGVyLXNpemUpLzIpfS4tbGVmdC10b3AtIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlciwuLXJpZ2h0LXRvcC0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVye3RvcDp2YXIoLS1hZHAtcG9pbnRlci1vZmZzZXQpfS4tbGVmdC1ib3R0b20tIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlciwuLXJpZ2h0LWJvdHRvbS0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVye2JvdHRvbTp2YXIoLS1hZHAtcG9pbnRlci1vZmZzZXQpfS4tbGVmdC1jZW50ZXItIC5haXItZGF0ZXBpY2tlci0tcG9pbnRlciwuLXJpZ2h0LWNlbnRlci0gLmFpci1kYXRlcGlja2VyLS1wb2ludGVye3RvcDpjYWxjKDUwJSAtIHZhcigtLWFkcC1wb2ludGVyLXNpemUpLzIpfS5haXItZGF0ZXBpY2tlci0tbmF2aWdhdGlvbntncmlkLWFyZWE6bmF2fS5haXItZGF0ZXBpY2tlci0tY29udGVudHtib3gtc2l6aW5nOmNvbnRlbnQtYm94O3BhZGRpbmc6dmFyKC0tYWRwLXBhZGRpbmcpO2dyaWQtYXJlYTpib2R5fS4tb25seS10aW1lcGlja2VyLSAuYWlyLWRhdGVwaWNrZXItLWNvbnRlbnR7ZGlzcGxheTpub25lfS5haXItZGF0ZXBpY2tlci0tdGltZXtncmlkLWFyZWE6dGltZXBpY2tlcn0uYWlyLWRhdGVwaWNrZXItLWJ1dHRvbnN7Z3JpZC1hcmVhOmJ1dHRvbnN9LmFpci1kYXRlcGlja2VyLS1idXR0b25zLC5haXItZGF0ZXBpY2tlci0tdGltZXtwYWRkaW5nOnZhcigtLWFkcC1wYWRkaW5nKTtib3JkZXItdG9wOjFweCBzb2xpZCB2YXIoLS1hZHAtYm9yZGVyLWNvbG9yLWlubmVyKX0uYWlyLWRhdGVwaWNrZXItb3ZlcmxheXtwb3NpdGlvbjpmaXhlZDtiYWNrZ3JvdW5kOnZhcigtLWFkcC1vdmVybGF5LWJhY2tncm91bmQtY29sb3IpO2xlZnQ6MDt0b3A6MDt3aWR0aDowO2hlaWdodDowO29wYWNpdHk6MDt0cmFuc2l0aW9uOm9wYWNpdHkgdmFyKC0tYWRwLW92ZXJsYXktdHJhbnNpdGlvbi1kdXJhdGlvbikgdmFyKC0tYWRwLW92ZXJsYXktdHJhbnNpdGlvbi1lYXNlKSxsZWZ0IDBzLGhlaWdodCAwcyx3aWR0aCAwczt0cmFuc2l0aW9uLWRlbGF5OjBzLHZhcigtLWFkcC1vdmVybGF5LXRyYW5zaXRpb24tZHVyYXRpb24pLHZhcigtLWFkcC1vdmVybGF5LXRyYW5zaXRpb24tZHVyYXRpb24pLHZhcigtLWFkcC1vdmVybGF5LXRyYW5zaXRpb24tZHVyYXRpb24pO3otaW5kZXg6dmFyKC0tYWRwLW92ZXJsYXktei1pbmRleCl9LmFpci1kYXRlcGlja2VyLW92ZXJsYXkuLWFjdGl2ZS17b3BhY2l0eToxO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7dHJhbnNpdGlvbjpvcGFjaXR5IHZhcigtLWFkcC1vdmVybGF5LXRyYW5zaXRpb24tZHVyYXRpb24pIHZhcigtLWFkcC1vdmVybGF5LXRyYW5zaXRpb24tZWFzZSksaGVpZ2h0IDBzLHdpZHRoIDBzfVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgJiYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXSk7IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvcnMtY2xvbmUtZGVwbG95L1wiOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiY2xhc3MgVGVtcGxhdGUge1xyXG4gIHB1YmxpYyBjcmVhdGVFbGVtZW50KFxyXG4gICAgdGFnTmFtZTogc3RyaW5nLFxyXG4gICAgbXlDbGFzczogc3RyaW5nLFxyXG4gICAgY29udGVudD86IHN0cmluZ1xyXG4gICk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IG5ld0VsZW06IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcclxuICAgIG5ld0VsZW0uY2xhc3NMaXN0LmFkZChteUNsYXNzKTtcclxuICAgIGlmIChjb250ZW50KSB7XHJcbiAgICAgIG5ld0VsZW0udGV4dENvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld0VsZW07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlTGluayhcclxuICAgIG15Q2xhc3M6IHN0cmluZyxcclxuICAgIGhyZWY6IHN0cmluZyxcclxuICAgIGNvbnRlbnQ/OiBzdHJpbmdcclxuICApOiBIVE1MQW5jaG9yRWxlbWVudCB7XHJcbiAgICBjb25zdCBuZXdFbGVtOiBIVE1MQW5jaG9yRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xyXG4gICAgbmV3RWxlbS5jbGFzc0xpc3QuYWRkKG15Q2xhc3MpO1xyXG4gICAgbmV3RWxlbS5ocmVmID0gaHJlZjtcclxuICAgIGlmIChjb250ZW50KSB7XHJcbiAgICAgIG5ld0VsZW0udGV4dENvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld0VsZW07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlQnRuKFxyXG4gICAgbXlDbGFzczogc3RyaW5nLFxyXG4gICAgY29udGVudDogc3RyaW5nIHwgSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQsXHJcbiAgICB0eXBlPzogc3RyaW5nXHJcbiAgKTogSFRNTEJ1dHRvbkVsZW1lbnQge1xyXG4gICAgY29uc3QgYnRuOiBIVE1MQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICBidG4uY2xhc3NMaXN0LmFkZChteUNsYXNzKTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgYnRuLnRleHRDb250ZW50ID0gY29udGVudDtcclxuICAgIH1cclxuICAgIGlmIChjb250ZW50ICYmIHR5cGVvZiBjb250ZW50ICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgIGJ0bi5hcHBlbmQoY29udGVudCk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZSkge1xyXG4gICAgICBidG4udHlwZSA9IHR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGJ0bjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVGb3JtKGNsYXNzTmFtZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZyk6IEhUTUxGb3JtRWxlbWVudCB7XHJcbiAgICBjb25zdCBmb3JtOiBIVE1MRm9ybUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcclxuICAgIGZvcm0uY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xyXG4gICAgZm9ybS5hY3Rpb24gPSBhY3Rpb247XHJcbiAgICByZXR1cm4gZm9ybTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVJY29uKGNsYXNzTmFtZTogc3RyaW5nLCBjbGFzc05hbWVJY29uOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBpY29uOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpXCIpO1xyXG4gICAgaWNvbi5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgICBpY29uLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lSWNvbik7XHJcbiAgICByZXR1cm4gaWNvbjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVWaWRlbyhzcmM6IHN0cmluZyk6IEhUTUxWaWRlb0VsZW1lbnQge1xyXG4gICAgY29uc3QgbmV3RWxlbTogSFRNTFZpZGVvRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKTtcclxuICAgIG5ld0VsZW0uc3JjID0gc3JjO1xyXG4gICAgbmV3RWxlbS5hdXRvcGxheSA9IHRydWU7XHJcbiAgICBuZXdFbGVtLm11dGVkID0gdHJ1ZTtcclxuICAgIG5ld0VsZW0ubG9vcCA9IHRydWU7XHJcbiAgICByZXR1cm4gbmV3RWxlbTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVJbWFnZShcclxuICAgIHNyYzogc3RyaW5nLFxyXG4gICAgYWx0OiBzdHJpbmcsXHJcbiAgICBpbWdDbGFzc05hbWU6IHN0cmluZ1xyXG4gICk6IEhUTUxJbWFnZUVsZW1lbnQge1xyXG4gICAgY29uc3QgbmV3SW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgbmV3SW1hZ2Uuc3JjID0gc3JjO1xyXG4gICAgbmV3SW1hZ2UuYWx0ID0gYWx0O1xyXG4gICAgbmV3SW1hZ2UuY2xhc3NOYW1lID0gaW1nQ2xhc3NOYW1lO1xyXG4gICAgcmV0dXJuIG5ld0ltYWdlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNyZWF0ZUxhYmVsKFxyXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nIHwgdW5kZWZpbmVkLFxyXG4gICAgZm9yTmFtZT86IHN0cmluZyB8IHVuZGVmaW5lZCxcclxuICAgIGNvbnRlbnQ/OiBzdHJpbmcgfCB1bmRlZmluZWRcclxuICApOiBIVE1MTGFiZWxFbGVtZW50IHtcclxuICAgIGNvbnN0IGxhYmVsOiBIVE1MTGFiZWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgaWYgKGZvck5hbWUpIHtcclxuICAgICAgbGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIGZvck5hbWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoY29udGVudCkge1xyXG4gICAgICBsYWJlbC50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGFiZWw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlSW5wdXQoXHJcbiAgICBtYWluQ2xhc3M6IHN0cmluZyxcclxuICAgIGF0dHJpYnV0ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cclxuICApOiBIVE1MSW5wdXRFbGVtZW50IHtcclxuICAgIGNvbnN0IGlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgaW5wdXQuY2xhc3NMaXN0LmFkZChtYWluQ2xhc3MpO1xyXG4gICAgdGhpcy5hZGRBdHRyaWJ1dGVzKGlucHV0LCBhdHRyaWJ1dGVzKTtcclxuICAgIHJldHVybiBpbnB1dDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRBdHRyaWJ1dGVzKFxyXG4gICAgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQsXHJcbiAgICBhdHRyaWJ1dGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XHJcbiAgKTogdm9pZCB7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XHJcbiAgICAgIGlmIChhdHRyaWJ1dGVzW2tleV0pIHtcclxuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZW1wbGF0ZTtcclxuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZENsYXNzZXMoXHJcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgY2xhc3Nlczogc3RyaW5nW10gfCB1bmRlZmluZWRcclxuKTogdm9pZCB7XHJcbiAgaWYgKCFjbGFzc2VzKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNsYXNzZXMuZm9yRWFjaCgoY2xhc3NOYW1lKSA9PiB7XHJcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uT3Blbk1vZGFsKFxyXG4gIGlkT3Blbk1vZGFsOiBzdHJpbmcsXHJcbiAgaWRDbG9zZU1vZGFsPzogc3RyaW5nXHJcbik6IChlPzogRXZlbnQpID0+IHZvaWQge1xyXG4gIHJldHVybiAoZT86IEV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZSkge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlkQ2xvc2VNb2RhbCkge1xyXG4gICAgICBvbkNsb3NlTW9kYWwoaWRDbG9zZU1vZGFsKSgpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbW9kYWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkT3Blbk1vZGFsKTtcclxuICAgIGlmICghbW9kYWwpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGlkQ2xvc2VNb2RhbCkge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBtb2RhbC5jbGFzc0xpc3QuYWRkKFwib3BlblwiKTtcclxuICAgICAgfSwgNTAwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG1vZGFsLmNsYXNzTGlzdC5hZGQoXCJvcGVuXCIpO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbkNsb3NlTW9kYWwoaWQ6IHN0cmluZyk6ICgpID0+IHZvaWQge1xyXG4gIHJldHVybiAoKSA9PiB7XHJcbiAgICBjb25zdCBtb2RhbDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xyXG4gICAgaWYgKCFtb2RhbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKFwib3BlblwiKTtcclxuICB9O1xyXG59XHJcbiIsImltcG9ydCBUZW1wbGF0ZSBmcm9tIFwiLi4vdGVtcGxhdGVzL3RlbXBsYXRlXCI7XHJcbmltcG9ydCB7IElUZW1wbGF0ZSB9IGZyb20gXCIuLi90eXBlcy9pbmRleFwiO1xyXG5pbXBvcnQgeyBvbkNsb3NlTW9kYWwgfSBmcm9tIFwiLi4vdXRpbHMvY29tcG9uZW50LXV0aWxzXCI7XHJcblxyXG5jbGFzcyBNb2RhbE1vYmlsZU1lbnUge1xyXG4gIHRlbXBsYXRlOiBJVGVtcGxhdGU7XHJcbiAgbWFpbkNsYXNzOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5tYWluQ2xhc3MgPSBcIm1vZGFsLW1vYmlsZVwiO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNyZWF0ZU1vZGFsKFxyXG4gICAgaWQ6IHN0cmluZyxcclxuICAgIGNvbnRlbnQ6IEhUTUxFbGVtZW50LFxyXG4gICAgaXNTaG93SWNvbkNsb3NlOiBib29sZWFuXHJcbiAgKTogSFRNTEVsZW1lbnQge1xyXG4gICAgdGhpcy5yZXNpemVXaW5kb3dDbG9zZU1vYk1vZGFsKCk7XHJcbiAgICBjb25zdCBtb2RhbDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIHRoaXMubWFpbkNsYXNzXHJcbiAgICApO1xyXG4gICAgbW9kYWwuaWQgPSBpZDtcclxuICAgIGNvbnN0IGJhY2tEcm9wOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlQmFja0Ryb3AoaWQsIGlzU2hvd0ljb25DbG9zZSk7XHJcbiAgICBjb25zdCBtb2RhbElubmVyOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlTW9kYWxJbm5lcihpZCwgaXNTaG93SWNvbkNsb3NlKTtcclxuICAgIG1vZGFsSW5uZXIuYXBwZW5kKGNvbnRlbnQpO1xyXG4gICAgbW9kYWwuYXBwZW5kKGJhY2tEcm9wLCBtb2RhbElubmVyKTtcclxuICAgIHJldHVybiBtb2RhbDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVzaXplV2luZG93Q2xvc2VNb2JNb2RhbCgpOiB2b2lkIHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIChlKSA9PiB7XHJcbiAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+IDc2OCkge1xyXG4gICAgICAgIG9uQ2xvc2VNb2RhbChcIm1vZGFsLW1vYmlsZVwiKSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQmFja0Ryb3AoaWQ6IHN0cmluZywgaXNTaG93SWNvbkNsb3NlOiBib29sZWFuKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgYmFja0Ryb3AgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fYmFja2Ryb3BgXHJcbiAgICApO1xyXG4gICAgaWYgKCFpc1Nob3dJY29uQ2xvc2UpIHtcclxuICAgICAgcmV0dXJuIGJhY2tEcm9wO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYmFja0Ryb3Aub25jbGljayA9IG9uQ2xvc2VNb2RhbChpZCk7XHJcbiAgICAgIHJldHVybiBiYWNrRHJvcDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlTW9kYWxJbm5lcihpZDogc3RyaW5nLCBpc1Nob3dJY29uQ2xvc2U6IGJvb2xlYW4pOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBtb2RhbElubmVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19pbm5lcmBcclxuICAgICk7XHJcbiAgICBpZiAoaXNTaG93SWNvbkNsb3NlKSB7XHJcbiAgICAgIGNvbnN0IGljb246IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVJY29uQ2xvc2UoKTtcclxuICAgICAgY29uc3QgYnRuQ2xvc2U6IEhUTUxCdXR0b25FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVCdG4oXHJcbiAgICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19idG4tY2xvc2VgLFxyXG4gICAgICAgIGljb25cclxuICAgICAgKTtcclxuICAgICAgYnRuQ2xvc2Uub25jbGljayA9IG9uQ2xvc2VNb2RhbChpZCk7XHJcbiAgICAgIG1vZGFsSW5uZXIuYXBwZW5kKGJ0bkNsb3NlKTtcclxuICAgICAgcmV0dXJuIG1vZGFsSW5uZXI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gbW9kYWxJbm5lcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlSWNvbkNsb3NlKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGljb246IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVJY29uKFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX2ljb25gLFxyXG4gICAgICBcImljb24tY2xvc2VcIlxyXG4gICAgKTtcclxuICAgIHJldHVybiBpY29uO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTW9kYWxNb2JpbGVNZW51O1xyXG4iLCJpbXBvcnQgeyBJQnV0dG9uIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcbmltcG9ydCB7IGFkZENsYXNzZXMgfSBmcm9tIFwiLi4vdXRpbHMvY29tcG9uZW50LXV0aWxzXCI7XHJcblxyXG5mdW5jdGlvbiBCdXR0b24oe1xyXG4gIGNvbnRlbnQsXHJcbiAgY2xhc3NOYW1lLFxyXG4gIHZhcmlhbnQsXHJcbiAgb25DbGljayxcclxuICB0eXBlLFxyXG59OiBJQnV0dG9uKTogSFRNTEJ1dHRvbkVsZW1lbnQge1xyXG4gIGNvbnN0IG1haW5DbGFzcyA9IFwiYnRuXCI7XHJcbiAgY29uc3QgYnRuOiBIVE1MQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgYnRuLmNsYXNzTGlzdC5hZGQobWFpbkNsYXNzKTtcclxuICBpZiAodHlwZSkge1xyXG4gICAgYnRuLnR5cGUgPSB0eXBlO1xyXG4gIH1cclxuICBhZGRDbGFzc2VzKGJ0biwgY2xhc3NOYW1lKTtcclxuICBhZGRDb250ZW50KGJ0biwgY29udGVudCk7XHJcbiAgaWYgKHZhcmlhbnQpIHtcclxuICAgIGJ0bi5jbGFzc0xpc3QuYWRkKGAke21haW5DbGFzc30tLSR7dmFyaWFudH1gKTtcclxuICB9XHJcbiAgaWYgKG9uQ2xpY2spIHtcclxuICAgIGJ0bi5vbmNsaWNrID0gb25DbGljaztcclxuICB9XHJcblxyXG4gIHJldHVybiBidG47XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZENvbnRlbnQoXHJcbiAgYnRuOiBIVE1MQnV0dG9uRWxlbWVudCxcclxuICBjb250ZW50OiBzdHJpbmcgfCBIVE1MRWxlbWVudFxyXG4pOiB2b2lkIHtcclxuICBpZiAodHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgIGJ0bi50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XHJcbiAgfSBlbHNlIHtcclxuICAgIGJ0bi5hcHBlbmQoY29udGVudCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCdXR0b247XHJcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJ2aWRlby92MTEubXA0XCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInZpZGVvL3YyLm1wNFwiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJ2aWRlby92My5tcDRcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwidmlkZW8vdjQubXA0XCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9waWMxLmpwZ1wiOyIsImltcG9ydCB7XHJcbiAgSVJlZ2lzdHJhdGlvbkRhdGEsXHJcbiAgSUF1dGhvcml6YXRpb25EYXRhLFxyXG4gIElBbnN3ZXJBdXRoLFxyXG4gIElBbnN3ZXJBZGRVc2VySW5mbyxcclxuICBJRGF0YUVkaXRQcm9maWxlLFxyXG59IGZyb20gXCIuLi90eXBlcy9pbmRleFwiO1xyXG5cclxuY2xhc3MgQXV0aG9yaXphdGlvbiB7XHJcbiAgcHVibGljIGFzeW5jIHJlZ2lzdHJhdGlvbihcclxuICAgIGRhdGE6IElSZWdpc3RyYXRpb25EYXRhXHJcbiAgKTogUHJvbWlzZTxJQW5zd2VyQXV0aCB8IHVuZGVmaW5lZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgICAgICBcImh0dHBzOi8vcnMtY2xvbmUtYmFjay1wcm9kdWN0aW9uLWI0YjcudXAucmFpbHdheS5hcHAvYXBpL2F1dGgvcmVnaXN0ZXJcIixcclxuICAgICAgICB7XHJcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCByZXM6IElBbnN3ZXJBdXRoID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgYXV0aG9yaXphdGlvbihcclxuICAgIGRhdGE6IElBdXRob3JpemF0aW9uRGF0YVxyXG4gICk6IFByb21pc2U8SUFuc3dlckF1dGggfCB1bmRlZmluZWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgICAgXCJodHRwczovL3JzLWNsb25lLWJhY2stcHJvZHVjdGlvbi1iNGI3LnVwLnJhaWx3YXkuYXBwL2FwaS9hdXRoL2xvZ2luXCIsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3QgcmVzOiBJQW5zd2VyQXV0aCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICAgIHJldHVybiByZXM7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGNyZWF0ZVVzZXJJbmZvKFxyXG4gICAgZGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxyXG4gICk6IFByb21pc2U8SUFuc3dlckFkZFVzZXJJbmZvIHwgdW5kZWZpbmVkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgICAgIFwiaHR0cHM6Ly9ycy1jbG9uZS1iYWNrLXByb2R1Y3Rpb24tYjRiNy51cC5yYWlsd2F5LmFwcC9hcGkvdXNlci9jcmVhdGVcIixcclxuICAgICAgICB7XHJcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IHJlczogSUFuc3dlckFkZFVzZXJJbmZvID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUubWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBnZXRVc2VySW5mbyhcclxuICAgIGlkOiBzdHJpbmdcclxuICApOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCB1bmRlZmluZWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgICAgYGh0dHBzOi8vcnMtY2xvbmUtYmFjay1wcm9kdWN0aW9uLWI0YjcudXAucmFpbHdheS5hcHAvYXBpL3VzZXIvZ2V0LyR7aWR9YFxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCByZXM6IFByb21pc2U8XHJcbiAgICAgICAgUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHVuZGVmaW5lZFxyXG4gICAgICA+ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgdXBkYXRlVXNlckluZm8oXHJcbiAgICBkYXRhRWRpdFByb2ZpbGU6IElEYXRhRWRpdFByb2ZpbGVcclxuICApOiBQcm9taXNlPElBbnN3ZXJBZGRVc2VySW5mbyB8IHVuZGVmaW5lZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgICAgICBgaHR0cHM6Ly9ycy1jbG9uZS1iYWNrLXByb2R1Y3Rpb24tYjRiNy51cC5yYWlsd2F5LmFwcC9hcGkvdXNlci91cGRhdGUvJHtkYXRhRWRpdFByb2ZpbGUuaWR9YCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgd2VpZ2h0OiBkYXRhRWRpdFByb2ZpbGUud2VpZ2h0LFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGRhdGFFZGl0UHJvZmlsZS5oZWlnaHQsXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IHJlczogSUFuc3dlckFkZFVzZXJJbmZvIHwgdW5kZWZpbmVkID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBdXRob3JpemF0aW9uO1xyXG4iLCJleHBvcnQgZnVuY3Rpb24gaW5BY3RpdmVQcmVsb2FkZXIoZWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJsb2FkZWRfaGlkaW5nXCIpO1xyXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibG9hZGVkXCIpO1xyXG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibG9hZGVkX2hpZGluZ1wiKTtcclxuICB9LCA1MDApO1xyXG59XHJcbiIsImltcG9ydCB7IElBdXRob3JpemF0aW9uIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcbmltcG9ydCB2aWRlbzEgZnJvbSBcIi4uL2Fzc2V0cy92aWRlby92MTEubXA0XCI7XHJcbmltcG9ydCB2aWRlbzIgZnJvbSBcIi4uL2Fzc2V0cy92aWRlby92Mi5tcDRcIjtcclxuaW1wb3J0IHZpZGVvMyBmcm9tIFwiLi4vYXNzZXRzL3ZpZGVvL3YzLm1wNFwiO1xyXG5pbXBvcnQgdmlkZW80IGZyb20gXCIuLi9hc3NldHMvdmlkZW8vdjQubXA0XCI7XHJcbmltcG9ydCBwaWMxIGZyb20gXCIuLi9hc3NldHMvaW1hZ2VzL3BpYzEuanBnXCI7XHJcbmltcG9ydCBBdXRob3JpemF0aW9uIGZyb20gXCIuLi91dGlscy9hdXRoLnJvdXRlc1wiO1xyXG5pbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBJVGVtcGxhdGUgfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIjtcclxuaW1wb3J0IHsgaW5BY3RpdmVQcmVsb2FkZXIgfSBmcm9tIFwiLi4vdXRpbHMvcHJlbG9hZGVyXCI7XHJcblxyXG5jbGFzcyBNYWluUGFnZSB7XHJcbiAgcHVibGljIGF1dGhvcml6YXRpb246IElBdXRob3JpemF0aW9uO1xyXG4gIG1haW5QYWdlRWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XHJcbiAgdGVtcGxhdGU6IElUZW1wbGF0ZTtcclxuICBpc0xvYWRlZDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuYXV0aG9yaXphdGlvbiA9IG5ldyBBdXRob3JpemF0aW9uKCk7XHJcbiAgICB0aGlzLm1haW5QYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICB0aGlzLm1haW5QYWdlRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibWFpbi1wYWdlXCIpO1xyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5pc0xvYWRlZCA9IDA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUludHJvU2VjdGlvbigpOiB2b2lkIHtcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImxvYWRlZFwiKTtcclxuICAgIGNvbnN0IG1haW5DbGFzcyA9IFwiaW50cm9cIjtcclxuICAgIGNvbnN0IGludHJvU2VjdGlvbjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwic2VjdGlvblwiLFxyXG4gICAgICBgbWFpbl9fJHttYWluQ2xhc3N9YFxyXG4gICAgKTtcclxuICAgIGludHJvU2VjdGlvbi5jbGFzc0xpc3QuYWRkKG1haW5DbGFzcyk7XHJcbiAgICBjb25zdCBpbnRyb1dyYXBwZXI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHttYWluQ2xhc3N9X193cmFwcGVyYFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGxlZnRWaWRlb3M6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVWaWRlb0Jsb2NrKFxyXG4gICAgICBbdmlkZW8xLCB2aWRlbzJdLFxyXG4gICAgICBgJHttYWluQ2xhc3N9X19sZWZ0YFxyXG4gICAgKTtcclxuICAgIGNvbnN0IHJpZ2h0VmlkZW9zOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlVmlkZW9CbG9jayhcclxuICAgICAgW3ZpZGVvMywgdmlkZW80XSxcclxuICAgICAgYCR7bWFpbkNsYXNzfV9fbGVmdGBcclxuICAgICk7XHJcbiAgICBjb25zdCBjZW50cmFsOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7bWFpbkNsYXNzfV9fY2VudGVyYFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGNlbnRyYWxUZXh0OiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJoMlwiLFxyXG4gICAgICBgJHttYWluQ2xhc3N9X190ZXh0YFxyXG4gICAgKTtcclxuICAgIGNlbnRyYWxUZXh0LmlubmVySFRNTCA9XHJcbiAgICAgIFwiRmluZCBZb3VyIElubmVyIEVuZXJneSBhbmQgU3RyZW5ndGguPGJyPiBKb2luIE91ciBDb211bml0eSBmb3IgU3VwcG9ydC5cIjtcclxuICAgIGludHJvV3JhcHBlci5hcHBlbmQobGVmdFZpZGVvcywgY2VudHJhbCwgcmlnaHRWaWRlb3MpO1xyXG4gICAgY29uc3QgZ29vZ2xlTGluazogSFRNTEFuY2hvckVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUxpbmsoXHJcbiAgICAgIGAke21haW5DbGFzc31fX2xpbmtgLFxyXG4gICAgICBcImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2FwcHMvZGV0YWlscz9pZD1jb20uYmV0dGVybGlmZXdpdGhhcHBzLndvbWVud29ya291dHMmaGw9ZW4mZ2w9VVNcIlxyXG4gICAgKTtcclxuICAgIGdvb2dsZUxpbmsudGFyZ2V0ID0gXCJfYmxhbmtcIjtcclxuICAgIGNlbnRyYWwuYXBwZW5kKGNlbnRyYWxUZXh0LCBnb29nbGVMaW5rKTtcclxuICAgIGludHJvU2VjdGlvbi5hcHBlbmQoaW50cm9XcmFwcGVyKTtcclxuICAgIHRoaXMubWFpblBhZ2VFbGVtZW50LmFwcGVuZChpbnRyb1NlY3Rpb24pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVWaWRlb0Jsb2NrKFxyXG4gICAgdmlkZW9GaWxlczogc3RyaW5nW10sXHJcbiAgICBjbGFzc05hbWU6IHN0cmluZ1xyXG4gICk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGJsb2NrOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcImRpdlwiLCBjbGFzc05hbWUpO1xyXG4gICAgdmlkZW9GaWxlcy5tYXAoKHZpZGVvKSA9PiB7XHJcbiAgICAgIGNvbnN0IHZpZGVvRWw6IEhUTUxWaWRlb0VsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZVZpZGVvKHZpZGVvKTtcclxuICAgICAgdmlkZW9FbC5hZGRFdmVudExpc3RlbmVyKFwiY2FucGxheVwiLCBoYW5kbGVyVmlkZW9DYW5wbGF5KTtcclxuICAgICAgcmV0dXJuIGJsb2NrLmFwcGVuZCh2aWRlb0VsKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVBYm91dFNlY3Rpb24oKTogdm9pZCB7XHJcbiAgICBjb25zdCBhYm91dFNlY3Rpb246IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIik7XHJcbiAgICBhYm91dFNlY3Rpb24uY2xhc3NOYW1lID0gXCJtYWluX19hYm91dCBhYm91dFwiO1xyXG5cclxuICAgIGNvbnN0IGFib3V0V3JhcHBlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiYWJvdXRfX3dyYXBwZXJcIlxyXG4gICAgKTtcclxuICAgIGFib3V0U2VjdGlvbi5hcHBlbmQoYWJvdXRXcmFwcGVyKTtcclxuXHJcbiAgICBjb25zdCBhYm91dEluZm86IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImFib3V0X19pbmZvXCJcclxuICAgICk7XHJcbiAgICBhYm91dFdyYXBwZXIuYXBwZW5kKGFib3V0SW5mbyk7XHJcblxyXG4gICAgY29uc3QgYWJvdXRUaXRsZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiaDNcIixcclxuICAgICAgXCJhYm91dF9fdGl0bGVcIixcclxuICAgICAgXCJXaHkgT3VyIEFwcD9cIlxyXG4gICAgKTtcclxuICAgIGFib3V0SW5mby5hcHBlbmQoYWJvdXRUaXRsZSk7XHJcblxyXG4gICAgY29uc3QgYWJvdXRUZXh0OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgYWJvdXRUZXh0LmNsYXNzTmFtZSA9IFwiYWJvdXRfX3RleHRcIjtcclxuICAgIGFib3V0VGV4dC5pbm5lckhUTUwgPSBgVGhlIGJlc3Qgd2F5IHRvIGxvb3NlIHdpZ2h0IGFuZCBidXJuIGZhdCBpcyB0byBjaG9vc2UgZXhlcmNpc2Ugcm91dGluZXMgdGhhdCBpbmNvcnBvcmF0ZSBtYW55IG11c2NsZSBncm91cHMgYW5kIHdpbGwgc3Bpa2UgeW91ciBoZWFydCByYXRlLjxicj4gXHJcbiAgICAgIEluIG91ciBhcHBsaWNhdGlvbiB3ZSBoYXZlIGNob3NlbiB0aGUgYmVzdCBleGVyY2lzZXMgdGhhdCBjYW4gc3VydmUgdGhpcyBnb2FsLjxicj5cclxuICAgICAgVGhleSBidXJuIHlvdXIgZmF0IGFuZCB0b25lIHlvdXIgZW50aXJlIGJvZHksIGFuZCB0aGUgYmVzdCBwYXJ0IC0gPGI+eW91IGRvbid0IG5lZWQgYW55IGV4ZXJjaXNlIGVxdWlwbWVudCBhdCBhbGwhPC9iPmA7XHJcbiAgICBhYm91dEluZm8uYXBwZW5kKGFib3V0VGV4dCk7XHJcblxyXG4gICAgY29uc3QgYWJvdXRQaWN0dXJlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJhYm91dF9fcGljdHVyZVwiXHJcbiAgICApO1xyXG4gICAgYWJvdXRXcmFwcGVyLmFwcGVuZChhYm91dFBpY3R1cmUpO1xyXG5cclxuICAgIGNvbnN0IGFib3V0SW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgYWJvdXRJbWFnZS5zcmMgPSBwaWMxO1xyXG4gICAgYWJvdXRQaWN0dXJlLmFwcGVuZChhYm91dEltYWdlKTtcclxuXHJcbiAgICB0aGlzLm1haW5QYWdlRWxlbWVudC5hcHBlbmQoYWJvdXRTZWN0aW9uKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlRmVhdHVyZXNTZWN0aW9uKCk6IHZvaWQge1xyXG4gICAgY29uc3QgZmVhdHVyZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICBcIlRoZSBiZXN0IGFwcCBmb3IgZmVtYWxlIGZpdG5lc3MsIHdlaWdodCBsb3NzIGFuZCBoZWFsdGhcIixcclxuICAgICAgXCJCZWdpbm5lciwgSW50ZXJtZWRpYXRlIGFuZCBBZHZhbmNlZCByb3V0aW5lc1wiLFxyXG4gICAgICBcIldvcmtvdXQgYXQgaG9tZSAmIGdldCB5b3VyIGJvZHkgZml0IG9uXCIsXHJcbiAgICAgIFwiVHJhY2sgeW91ciB3ZWlnaHQgYW5kIGJtaVwiLFxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCBmZWF0dXJlc1NlY3Rpb246IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIik7XHJcbiAgICBmZWF0dXJlc1NlY3Rpb24uY2xhc3NOYW1lID0gXCJtYWluX19mZWF0dXJlcyBmZWF0dXJlc1wiO1xyXG5cclxuICAgIGNvbnN0IGZlYXR1cmVzV3JhcHBlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiZmVhdHVyZXNfX3dyYXBwZXJcIlxyXG4gICAgKTtcclxuICAgIGZlYXR1cmVzU2VjdGlvbi5hcHBlbmQoZmVhdHVyZXNXcmFwcGVyKTtcclxuXHJcbiAgICBjb25zdCBmZWF0dXJlc0xpc3Q6IEhUTUxVTGlzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XHJcbiAgICBmZWF0dXJlc0xpc3QuY2xhc3NOYW1lID0gXCJmZWF0dXJlc19fbGlzdFwiO1xyXG4gICAgZmVhdHVyZXNXcmFwcGVyLmFwcGVuZChmZWF0dXJlc0xpc3QpO1xyXG5cclxuICAgIGZlYXR1cmVzLmZvckVhY2goKGZlYXR1cmU6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBmZWF0dXJlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcclxuICAgICAgZmVhdHVyZUl0ZW0uY2xhc3NOYW1lID0gXCJmZWF0dXJlc19fbGlzdC1pdGVtXCI7XHJcbiAgICAgIGZlYXR1cmVJdGVtLnRleHRDb250ZW50ID0gZmVhdHVyZTtcclxuICAgICAgZmVhdHVyZXNMaXN0LmFwcGVuZChmZWF0dXJlSXRlbSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm1haW5QYWdlRWxlbWVudC5hcHBlbmQoZmVhdHVyZXNTZWN0aW9uKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkcmF3KCk6IHZvaWQge1xyXG4gICAgY29uc3QgbWFpbkVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluXCIpO1xyXG4gICAgaWYgKCFtYWluRWxlbWVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbWFpbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1haW5cIik7XHJcblxyXG4gICAgbWFpbkVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIHRoaXMubWFpblBhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZUludHJvU2VjdGlvbigpO1xyXG5cclxuICAgIHRoaXMuY3JlYXRlQWJvdXRTZWN0aW9uKCk7XHJcblxyXG4gICAgdGhpcy5jcmVhdGVGZWF0dXJlc1NlY3Rpb24oKTtcclxuXHJcbiAgICBtYWluRWxlbWVudC5hcHBlbmQodGhpcy5tYWluUGFnZUVsZW1lbnQpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlclZpZGVvQ2FucGxheShlOiBFdmVudCk6IHZvaWQge1xyXG4gIGhhbmRsZXJWaWRlb0NhbnBsYXkucHJvdG90eXBlLmlzTG9hZGVkICs9IDE7XHJcblxyXG4gIGlmIChoYW5kbGVyVmlkZW9DYW5wbGF5LnByb3RvdHlwZS5pc0xvYWRlZCA9PT0gNCkge1xyXG4gICAgaGFuZGxlclZpZGVvQ2FucGxheS5wcm90b3R5cGUuaXNMb2FkZWQgPSAwO1xyXG4gICAgaW5BY3RpdmVQcmVsb2FkZXIoZG9jdW1lbnQuYm9keSk7XHJcbiAgfVxyXG4gIGlmIChlLmN1cnJlbnRUYXJnZXQpIHtcclxuICAgIGUuY3VycmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2FucGxheVwiLCBoYW5kbGVyVmlkZW9DYW5wbGF5KTtcclxuICB9XHJcbn1cclxuXHJcbmhhbmRsZXJWaWRlb0NhbnBsYXkucHJvdG90eXBlLmlzTG9hZGVkID0gMDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1haW5QYWdlO1xyXG4iLCJjb25zdCB3b3Jrb3V0X3BsYW5zID0gW1xyXG4gIHtcclxuICAgIHRpdGxlOiBcIkFCUyBXb3Jrb3V0c1wiLFxyXG4gICAgaW1hZ2U6IFwiLi4vYXNzZXRzL3BuZy9hYnMzLnBuZ1wiLFxyXG4gICAgYmxvY2s6IFtcclxuICAgICAge1xyXG4gICAgICAgIGlkOiAxLFxyXG4gICAgICAgIHRpdGxlOiBcIkFCUyBiZWdpbm5lclwiLFxyXG4gICAgICAgIGV4ZXJjaXNlc0FtdDogXCIxOVwiLFxyXG4gICAgICAgIGV4ZXJjaXNlc1RpbWU6IFwiMTVcIixcclxuICAgICAgICBjb21wbGV4aXR5TGV2ZWw6IHRydWUsXHJcbiAgICAgICAgaW1hZ2U6IFwiLi4vYXNzZXRzL3BuZy9hYnMzLnBuZ1wiLFxyXG4gICAgICAgIGNvbG9yOlxyXG4gICAgICAgICAgXCJsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYmEoMjQsMjQwLDIzNywxKSAwJSwgcmdiYSgyMDYsMjQ3LDI0MiwxKSAxMDAlKVwiLFxyXG4gICAgICAgIGV4ZXJjaXNlczogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMSxcclxuICAgICAgICAgICAgdGl0bGU6IFwianVtcGluZyBqYWNrc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHVwcmlnaHQgd2l0aCB5b3VyIGxlZ3MgdG9nZXRoZXIsIGFybXMgYXQgeW91ciBzaWRlcy4gQmVuZCB5b3VyIGtuZWVzIHNsaWdodGx5LCBhbmQganVtcCBpbnRvIHRoZSBhaXIuIEFzIHlvdSBqdW1wLCBzcHJlYWQgeW91ciBsZWdzIHRvIGJlIHNob3VsZGVyLXdpZHRoIGFwYXJ0LiBTdHJldGNoIHlvdXIgYXJtcyBvdXQgYW5kIG92ZXIgeW91ciBoZWFkLiBKdW1wIGJhY2sgdG8gc3RhbmRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvanVtcGluZ19qYWNrcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTJXNFpOU3dvV180XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngzMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDIsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImhpZ2ggc3RlcHBpbmdcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJSdW4gaW4gcGxhY2Ugd2hpbGUgcHVsbGluZyB5b3Uga25lZXMgYXMgaGlnaCBhcyBwb3NzaWJsZSB3aXRoIGVhY2ggc3RlcC4gRG8gaXQgYXMgZmFzdCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgYmFjayBzdHJhaWdodFwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2hpZ2hfc3RlcHBpbmcuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DbXhyOXhjTmhnVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDoyMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDMsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInN0YW5kaW5nIGJpY3ljbGUgY3J1bmNoZXNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFuZCB3aXRoIGZlZXQgdG9nZXRoZXIsIGtuZWVzIHNsaWdodGx5IGJlbnQsIGhhbmRzIGJlaGluZCBoZWFkLiBCcmFjZSBhYnMgaW4gdGlnaHQgYW5kIGxpZnQgbGVmdCBrbmVlIHVwIGFzIHJpZ2h0IHNob3VsZGVyIHJvdGF0ZXMgdG93YXJkcyBrbmVlICh0cnkgdG8gdG91Y2gpLiBMb3dlciBiYWNrIHRvIHN0YXJ0LlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3N0YW5kaW5nX2JpY3ljbGVfY3J1bmNoLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OGxzQVh6dlZIcmNcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE0XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNCxcclxuICAgICAgICAgICAgdGl0bGU6IFwicnVzc2lhbiB0d2lzdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlNpdCB3aXRoIHlvdXIgZmVldCBzbGlnaHRseSBsaWZ0ZWQgYW5kIGJhY2sgdGl0bGVkIGJhY2t3YXJkcy4gVGhlbiBob2xkIHlvdXIgaGFuZHMgdG9nZXRoZXIgYW5kIHR3aXN0IGZyb20gc2lkZSB0byBzaWRlLiBLZWVwIHlvdXIgbGVncyBzdGlsbCB3aGVuIHR3aXN0aW5nIGFuZCB5b3VyIG5lY2sgbmV1dHJhbC4gVGlnaHRlbiB5b3VyIGFicy5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9ydXNzaWFuX3R3aXN0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9REpRR1gySjRJVndcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE2XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNSxcclxuICAgICAgICAgICAgdGl0bGU6IFwibW91bnRhaW4gY2xpbWJlclwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlB1dCBib3RoIGhhbmRzIGFuZCBrbmVlcyBvbiB0aGUgZmxvb3IuIFBsYWNlIHlvdXIgcmlnaHQgZm9vdCBuZWFyIHlvdXIgcmlnaHQgaGFuZCBhbmQgZXh0ZW5kIHlvdXIgbGVmdCBsZWcgYmVoaW5kIHlvdS4gSW4gb25lIHNtb290aCBtb3Rpb24gc3dpdGNoIHlvdXIgbGVncywga2VlcGluZyB5b3VyIGFybXMgaW4gdGhlIHNhbWUgcG9zaXRpb24uIFN3aXRjaCB5b3VyIGxlZ3MgYmFjayBhbmQgZm9ydGggdHdpY2UsIHN1Y2ggdGhhdCB5b3VyIHJpZ2h0IGxlZyBpcyBhZ2FpbiBjbG9zZSB0byB5b3VyIHJpZ2h0IGhhbmQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvbW91bnRhaW5fY2xpbWJlci5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXdRcTN5YmFMWmVBXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxOFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDYsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImZsdXR0ZXIga2lja3NcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBiYWNrIHdpdGggeW91ciBhcm1zIGF0IHlvdXIgc2lkZXMgYW5kIGxlZ3Mgc2xpZ2h0bHkgbGlmdGVkLiBUaGVuIHF1aWNrbHkgcmFpc2UgeW91ciByaWdodCBsZWcgdXAsIGFuZCBzaW11bHRhbmVvdXMgbG93ZXIgeW91ciBsZWZ0IGhhbmQuIFRoaXMgZXhlcmNpc2UgY2FuIGluY3JlYXNlIGNvcmUgc3RyZW5ndGggYW5kIGltcHJvdmUgeW91ciBlbmR1cmFuY2UuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZmx1dHRlcl9raWNrcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUs1d3VNX2dOV3l3XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjE1XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNyxcclxuICAgICAgICAgICAgdGl0bGU6IFwibGVnIHJhaXNlcnNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBiYWNrLCBsZWdzIHN0cmFpZ2h0IGFuZCB0b2dldGhlci4gS2VlcCB5b3VyIGxlZ3Mgc3RyYWlnaHQgYW5kIGxpZnQgdGhlbSBhbGwgdGhlIHdheSB1cCB0byB0aGUgY2VpbGluZyB1bnRpbCB5b3VyIGJ1dHQgY29tZXMgb2ZmIHRoZSBmbG9vci4gU2xvd2x5IGxvd2VyIHlvdXIgbGVncyBiYWNrIGRvd24gdGlsbCB0aGV5IGFyZSBqdXN0IGFib3ZlIHRoZSBmbG9vci4gSG9sZCBmb3IgYSBtb21lbnQuIFJhaXNlIHlvdXIgbGVncyBiYWNrIHVwLiBSZXBlYXQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvbGVnX3JhaXNlcnMuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1kR0tiVEtMbnltNFwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4OFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDgsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJ1dHQgYnJpZGdlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIGtuZWVzIGJlbnQsIGZlZXQgZmxhdCBvbiB0aGUgZmxvb3IgYW5kIGFybXMgYXQgeW91ciBzaWRlcy4gUHVzaCB5b3VyIGhpcHMgdXAsIGhvbGQgZm9yIG9uZSBzZWNvbmQgYW5kIHNsb3dseSBsb3dlciBkb3duLiBUaGlzIGV4ZXJjaXNlIHdvcmtzIHlvdXIgZ2x1dGVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2J1dHRfYnJpZGdlLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OXFvNDhDWU4wNndcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE0XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogOSxcclxuICAgICAgICAgICAgdGl0bGU6IFwic2tpcHBpbmcgd2l0aG91dCByb3BlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiVGhpcyBpcyBhIGdvb2Qgd2FybS11cCBleGVyY2lzZS4gUHJldGVuZCB0byBob2xkIGEgc2tpcHBpbmcgcm9wZSBoYW5kbGUgaW4gZWFjaCBoYW5kLiBKdW1wIGFuZCBhbHRlcm5hdGVseSBsYW5kIG9uIHRoZSBiYWxscyBvZiB5b3VyIGZlZXQsIHJvdGF0aW5nIHlvdXIgd3Jpc3RzIGF0IHRoZSBzYW1lIHRpbWUgYXMgeW91IGFzIGlmIHlvdSB3ZXJlIHNwaW5uaW5nIGEgcm9wZS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9za2lwcGluZ193aXRob3V0X3JvcGUuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DWUdlYXpsTmJVNFwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEwLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzdGFuZGluZyBiaWN5Y2xlIGNydW5jaGVzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgd2l0aCBmZWV0IHRvZ2V0aGVyLCBrbmVlcyBzbGlnaHRseSBiZW50LCBoYW5kcyBiZWhpbmQgaGVhZC4gQnJhY2UgYWJzIGluIHRpZ2h0IGFuZCBsaWZ0IGxlZnQga25lZSB1cCBhcyByaWdodCBzaG91bGRlciByb3RhdGVzIHRvd2FyZHMga25lZSAodHJ5IHRvIHRvdWNoKS4gTG93ZXIgYmFjayB0byBzdGFydC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zdGFuZGluZ19iaWN5Y2xlX2NydW5jaC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PThsc0FYenZWSHJjXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDExLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJydXNzaWFuIHR3aXN0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU2l0IHdpdGggeW91ciBmZWV0IHNsaWdodGx5IGxpZnRlZCBhbmQgYmFjayB0aXRsZWQgYmFja3dhcmRzLiBUaGVuIGhvbGQgeW91ciBoYW5kcyB0b2dldGhlciBhbmQgdHdpc3QgZnJvbSBzaWRlIHRvIHNpZGUuIEtlZXAgeW91ciBsZWdzIHN0aWxsIHdoZW4gdHdpc3RpbmcgYW5kIHlvdXIgbmVjayBuZXV0cmFsLiBUaWdodGVuIHlvdXIgYWJzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3J1c3NpYW5fdHdpc3QuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1ESlFHWDJKNElWd1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTRcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMixcclxuICAgICAgICAgICAgdGl0bGU6IFwibW91bnRhaW4gY2xpbWJlclwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlB1dCBib3RoIGhhbmRzIGFuZCBrbmVlcyBvbiB0aGUgZmxvb3IuIFBsYWNlIHlvdXIgcmlnaHQgZm9vdCBuZWFyIHlvdXIgcmlnaHQgaGFuZCBhbmQgZXh0ZW5kIHlvdXIgbGVmdCBsZWcgYmVoaW5kIHlvdS4gSW4gb25lIHNtb290aCBtb3Rpb24gc3dpdGNoIHlvdXIgbGVncywga2VlcGluZyB5b3VyIGFybXMgaW4gdGhlIHNhbWUgcG9zaXRpb24uIFN3aXRjaCB5b3VyIGxlZ3MgYmFjayBhbmQgZm9ydGggdHdpY2UsIHN1Y2ggdGhhdCB5b3VyIHJpZ2h0IGxlZyBpcyBhZ2FpbiBjbG9zZSB0byB5b3VyIHJpZ2h0IGhhbmQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvbW91bnRhaW5fY2xpbWJlci5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXdRcTN5YmFMWmVBXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEzLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJmbHV0dGVyIGtpY2tzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgYXJtcyBhdCB5b3VyIHNpZGVzIGFuZCBsZWdzIHNsaWdodGx5IGxpZnRlZC4gVGhlbiBxdWlja2x5IHJhaXNlIHlvdXIgcmlnaHQgbGVnIHVwLCBhbmQgc2ltdWx0YW5lb3VzIGxvd2VyIHlvdXIgbGVmdCBoYW5kLiBUaGlzIGV4ZXJjaXNlIGNhbiBpbmNyZWFzZSBjb3JlIHN0cmVuZ3RoIGFuZCBpbXByb3ZlIHlvdXIgZW5kdXJhbmNlLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2ZsdXR0ZXJfa2lja3MuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1LNXd1TV9nTld5d1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDoxNVwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE0LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJsZWcgcmFpc2Vyc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2ssIGxlZ3Mgc3RyYWlnaHQgYW5kIHRvZ2V0aGVyLiBLZWVwIHlvdXIgbGVncyBzdHJhaWdodCBhbmQgbGlmdCB0aGVtIGFsbCB0aGUgd2F5IHVwIHRvIHRoZSBjZWlsaW5nIHVudGlsIHlvdXIgYnV0dCBjb21lcyBvZmYgdGhlIGZsb29yLiBTbG93bHkgbG93ZXIgeW91ciBsZWdzIGJhY2sgZG93biB0aWxsIHRoZXkgYXJlIGp1c3QgYWJvdmUgdGhlIGZsb29yLiBIb2xkIGZvciBhIG1vbWVudC4gUmFpc2UgeW91ciBsZWdzIGJhY2sgdXAuIFJlcGVhdC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9sZWdfcmFpc2Vycy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWRHS2JUS0xueW00XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIng2XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJ1dHQgYnJpZGdlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIGtuZWVzIGJlbnQsIGZlZXQgZmxhdCBvbiB0aGUgZmxvb3IgYW5kIGFybXMgYXQgeW91ciBzaWRlcy4gUHVzaCB5b3VyIGhpcHMgdXAsIGhvbGQgZm9yIG9uZSBzZWNvbmQgYW5kIHNsb3dseSBsb3dlciBkb3duLiBUaGlzIGV4ZXJjaXNlIHdvcmtzIHlvdXIgZ2x1dGVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2J1dHRfYnJpZGdlLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OXFvNDhDWU4wNndcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTYsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInBsYW5rXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiS2VlcCB5b3VyIGFicyB0aWdodCBhbmQgbG9vayBhdCB0aGUgc3BhY2UgYmV0d2VlbiB5b3VyIGhhbmRzIHRvIGVuc3VyZSBhIG5ldXRyYWwgc3BpbmUgcG9zaXRpb24uIEhvbGQgdGhlIHBvc2l0aW9uLiBIb2xkIHRoZSBwb3NpdGlvbiBmb3IgYXMgbG9uZyBhcyB5b3UgY2FuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvcGxhbmsuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1GY2J3ODJ5a0J2WVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE3LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJjb2JyYSBzdHJldGNoXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmVsbHkuIEJlbmQgeW91ciBlbGJvd3MgYW5kIHBsYWNlIHlvdXIgaGFuZHMgb24gdGhlIGZsb29yIG5leHQgdG8geW91ciByaWJzLCBzdGFja2luZyB5b3VyIHdyaXN0IGFuZCBlbGJvdy4gT24gYW4gaW5oYWxlLCBiZWdpbiB0byBwZWVsIHlvdXIgY2hlc3QgYXdheSBmcm9tIHRoZSBmbG9vciwgbGlmdGluZyBpbnRvIHNwaW5hbCBleHRlbnNpb24uIEhvbGQgdGhpcyBwb3NpdGlvbi4gQnJlYXRoZSBuYXR1cmFsbHkuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL3BuZy9jb2JyYS5wbmdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXoyMU1jSEhPcEFnXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTgsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImx5aW5nIHR3aXN0IHN0cmV0Y2ggbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCB5b3VyIGFybXMgZXh0ZW5kZWQgYXQgeW91ciBzaWRlcy4gQmVuZCB5b3VyIGxlZ3MgYW5kIHR3aXN0IHlvdXIgbGVncyB0byB0aGUgbGVmdC4gSG9sZCB0aGlzIHBvc2l0aW9uLiBUaGlzIGV4ZXJjaXNlIHN0cmV0Y2hlcyB5b3VyIG9ibGlxdWVzIGFuZCBsb3dlciBiYWNrLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMvbHlpbmdfdHdpc3Rfc3RyZXRjaF9sZWZ0LmpwZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Wkktal9QT3R6bFVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxOSxcclxuICAgICAgICAgICAgdGl0bGU6IFwibHlpbmcgdHdpc3Qgc3RyZXRjaCByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCB5b3VyIGFybXMgZXh0ZW5kZWQgYXQgeW91ciBzaWRlcy4gQmVuZCB5b3VyIGxlZ3MgYW5kIHR3aXN0IHlvdXIgbGVncyB0byB0aGUgcmlnaHQuIEhvbGQgdGhpcyBwb3NpdGlvbi4gVGhpcyBleGVyY2lzZSBzdHJldGNoZXMgeW91ciBvYmxpcXVlcyBhbmQgbG93ZXIgYmFjay5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL2x5aW5nX3R3aXN0X3N0cmV0Y2hfcmlnaHQuanBnXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1aSS1qX1BPdHpsVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgaWQ6IDIsXHJcbiAgICAgICAgdGl0bGU6IFwiQUJTIGludGVybWVkaWF0ZVwiLFxyXG4gICAgICAgIGV4ZXJjaXNlc0FtdDogXCIyMFwiLFxyXG4gICAgICAgIGV4ZXJjaXNlc1RpbWU6IFwiMTdcIixcclxuICAgICAgICBjb21wbGV4aXR5TGV2ZWw6IHRydWUsXHJcbiAgICAgICAgaW1hZ2U6IFwiLi4vYXNzZXRzL3BuZy9hYnMzLnBuZ1wiLFxyXG4gICAgICAgIGNvbG9yOlxyXG4gICAgICAgICAgXCJsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYmEoMTEzLDE3OSwyMzUsMSkgMCUsIHJnYmEoMjAyLDIyNywyNDksMSkgMTAwJSlcIixcclxuICAgICAgICBleGVyY2lzZXM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImp1bXBpbmcgamFja3NcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFuZCB1cHJpZ2h0IHdpdGggeW91ciBsZWdzIHRvZ2V0aGVyLCBhcm1zIGF0IHlvdXIgc2lkZXMgQmVuZCB5b3VyIGtuZWVzIHNsaWdodGx5LCBhbmQganVtcCBpbnRvIHRoZSBhaXIuIEFzIHlvdSBqdW1wICwgc3ByZWFkIHlvdXIgbGVncyB0byBiZSBzaG91bGRlci13aWR0aCBhcGFydC4gU3RyZXRjaCB5b3VyIGFybXMgb3V0IGFuZCBvdmVyIHlvdXIgaGVhZC4gSnVtcCBiYWNrIHRvIHN0YW5kaW5nIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2p1bXBpbmdfamFja3MuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0yVzRaTlN3b1dfNFwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJoaWdoIHN0ZXBwaW5nXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiUnVuIGluIHBsYWNlIHdoaWxlIHB1bGxpbmcgeW91IGtuZWVzIGFzIGhpZ2ggYXMgcG9zc2libGUgd2l0aCBlYWNoIHN0ZXAuIERvIGl0IGFzIGZhc3QgYXMgeW91IGNhbi4gS2VlcCB5b3VyIGJhY2sgc3RyYWlnaHRcIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9oaWdoX3N0ZXBwaW5nLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Q214cjl4Y05oZ1VcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAzLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJtb3VudGFpbiBjbGltYmVyXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiUHV0IGJvdGggaGFuZHMgYW5kIGtuZWVzIG9uIHRoZSBmbG9vci4gUGxhY2UgeW91ciByaWdodCBmb290IG5lYXIgeW91ciByaWdodCBoYW5kIGFuZCBleHRlbmQgeW91ciBsZWZ0IGxlZyBiZWhpbmQgeW91LiBJbiBvbmUgc21vb3RoIG1vdGlvbiBzd2l0Y2ggeW91ciBsZWdzLCBrZWVwaW5nIHlvdXIgYXJtcyBpbiB0aGUgc2FtZSBwb3NpdGlvbi4gU3dpdGNoIHlvdXIgbGVncyBiYWNrIGFuZCBmb3J0aCB0d2ljZSwgc3VjaCB0aGF0IHlvdXIgcmlnaHQgbGVnIGlzIGFnYWluIGNsb3NlIHRvIHlvdXIgcmlnaHQgaGFuZC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9tb3VudGFpbl9jbGltYmVyLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9d1FxM3liYUxaZUFcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDI0XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNCxcclxuICAgICAgICAgICAgdGl0bGU6IFwicmV2ZXJzZSBjcnVuY2hlc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCB5b3VyIGtuZWVzIHVwIGFuZCBoYW5kcyBiZWhpbmQgeW91ciBoZWFkLiBMaWZ0IHlvdXIgc2hvdWxkZXJzIGFuZCB0aGlnaHMsIGFuZCB0aGVuIHN0cmV0Y2ggb3V0LlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3JldmVyc2VfY3J1bmNoZXMuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1Vd1JmUk41ZllSZ1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MThcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA1LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJsZWcgcmFpc2Vyc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2ssIGxlZ3Mgc3RyYWlnaHQgYW5kIHRvZ2V0aGVyLiBLZWVwIHlvdXIgbGVncyBzdHJhaWdodCBhbmQgbGlmdCB0aGVtIGFsbCB0aGUgd2F5IHVwIHRvIHRoZSBjZWlsaW5nIHVudGlsIHlvdXIgYnV0dCBjb21lcyBvZmYgdGhlIGZsb29yLiBTbG93bHkgbG93ZXIgeW91ciBsZWdzIGJhY2sgZG93biB0aWxsIHRoZXkgYXJlIGp1c3QgYWJvdmUgdGhlIGZsb29yLiBIb2xkIGZvciBhIG1vbWVudC4gUmFpc2UgeW91ciBsZWdzIGJhY2sgdXAuIFJlcGVhdC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9sZWdfcmFpc2Vycy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWRHS2JUS0xueW00XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDYsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImhlZWwgdG91Y2hcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJLZWVwIHlvdXIgYmFjayBmbGF0IGFuZCBiZW5kIHlvdXIga25lZXMgdG8gYSA5MC1kZWdyZWUgYW5nbGUgd2l0aCB5b3VyIGZlZXQgZmlybWx5IHBsYW50ZWQgb24gdGhlIGZsb29yLiBFbmdhZ2UgeW91ciBjb3JlIGFzIHlvdSBiZW5kIHlvdXIgc3BpbmUgdG8gcmVhY2ggeW91ciByaWdodCBoYW5kIHRvd2FyZCB5b3VyIHJpZ2h0IGFua2xlLiBSZXBlYXQgdGhpcyBtb3ZlbWVudCBvbiB5b3VyIGxlZnQgc2lkZS4gS2VlcCB5b3VyIGxvd2VyIGJhY2sgb24gdGhlIGZsb29yLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2hlZWxfdG91Y2guZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj05YlItZWx5b2xCUVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MjBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA3LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJyZWNsaW5lZCBvYmxpcXVlIHR3aXN0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgbGVncyBleHRlbmRlZCBhbmQgeW91ciBlbGJvdyBkaXJlY3RseSB1bmRlciB5b3VyIHNob3VsZGVycy4gTElmdCB5b3VyIGxlZnQgbGVnIHVwIGF0IGEgNDUgZGVncmVlIGFuZ2xlIHdoaWxlIHJlYWNoaW5nIHlvdXIgcmlnaHQgYXJtIG92ZXIgdG8geW91ciBsZWZ0IHNpZGUuIFRoZW4gc2xvd2x5IGdvIGJhY2sgdG8gdGhlIHN0YXJ0aW5nIHBvc2l0aW9uLiBSZXBlYXQgc2V2ZXJhbCB0aW1lcywgYW5kIHRoZW4gc3dpdGNoIHRvIHRoZSBvdGhlciBzaWRlLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3JlY2xpbmVkX29ibGlxdWVfdHdpc3QuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1YS1c1anJ1NXBHb1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTZcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA4LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJoZWVscyB0byB0aGUgaGVhdmVuXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjaywgcG9zaXRpb24geW91ciBhcm1zIG91dCB0byB5b3VyIHNpZGVzLiBGcm9tIGhlcmUsIGFjdGl2YXRlIHRoZSBsb3dlciBhYmRvbWluYWxzIGFuZCBsaWZ0IHRoZSBsZWdzIHVudGlsIHRoZXkgYXJlIHBlcnBlbmRpY3VsYXIgdG8gdGhlIGdyb3VuZC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9oZWVsc190b190aGUgaGVhdmVuLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9d2RTMlU2ejBKR1lcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogOSxcclxuICAgICAgICAgICAgdGl0bGU6IFwicGxhbmtcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJLZWVwIHlvdXIgYWJzIHRpZ2h0IGFuZCBsb29rIGF0IHRoZSBzcGFjZSBiZXR3ZWVuIHlvdXIgaGFuZHMgdG8gZW5zdXJlIGEgbmV1dHJhbCBzcGluZSBwb3NpdGlvbi4gSG9sZCB0aGUgcG9zaXRpb24uIEhvbGQgdGhlIHBvc2l0aW9uIGZvciBhcyBsb25nIGFzIHlvdSBjYW5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9wbGFuay5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUZjYnc4MnlrQnZZXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTAsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNraXBwaW5nIHdpdGhvdXQgcm9wZVwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlRoaXMgaXMgYSBnb29kIHdhcm0tdXAgZXhlcmNpc2UuIFByZXRlbmQgdG8gaG9sZCBhIHNraXBwaW5nIHJvcGUgaGFuZGxlIGluIGVhY2ggaGFuZC4gSnVtcCBhbmQgYWx0ZXJuYXRlbHkgbGFuZCBvbiB0aGUgYmFsbHMgb2YgeW91ciBmZWV0LCByb3RhdGluZyB5b3VyIHdyaXN0cyBhdCB0aGUgc2FtZSB0aW1lIGFzIHlvdSBhcyBpZiB5b3Ugd2VyZSBzcGlubmluZyBhIHJvcGUuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2tpcHBpbmdfd2l0aG91dF9yb3BlLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Q1lHZWF6bE5iVTRcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMSxcclxuICAgICAgICAgICAgdGl0bGU6IFwibW91bnRhaW4gY2xpbWJlclwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlB1dCBib3RoIGhhbmRzIGFuZCBrbmVlcyBvbiB0aGUgZmxvb3IuIFBsYWNlIHlvdXIgcmlnaHQgZm9vdCBuZWFyIHlvdXIgcmlnaHQgaGFuZCBhbmQgZXh0ZW5kIHlvdXIgbGVmdCBsZWcgYmVoaW5kIHlvdS4gSW4gb25lIHNtb290aCBtb3Rpb24gc3dpdGNoIHlvdXIgbGVncywga2VlcGluZyB5b3VyIGFybXMgaW4gdGhlIHNhbWUgcG9zaXRpb24uIFN3aXRjaCB5b3VyIGxlZ3MgYmFjayBhbmQgZm9ydGggdHdpY2UsIHN1Y2ggdGhhdCB5b3VyIHJpZ2h0IGxlZyBpcyBhZ2FpbiBjbG9zZSB0byB5b3VyIHJpZ2h0IGhhbmQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvbW91bnRhaW5fY2xpbWJlci5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXdRcTN5YmFMWmVBXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngyMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEyLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJyZXZlcnNlIGNydW5jaGVzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIga25lZXMgdXAgYW5kIGhhbmRzIGJlaGluZCB5b3VyIGhlYWQuIExpZnQgeW91ciBzaG91bGRlcnMgYW5kIHRoaWdocywgYW5kIHRoZW4gc3RyZXRjaCBvdXQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvcmV2ZXJzZV9jcnVuY2hlcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVV3UmZSTjVmWVJnXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEzLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJsZWcgcmFpc2Vyc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2ssIGxlZ3Mgc3RyYWlnaHQgYW5kIHRvZ2V0aGVyLiBLZWVwIHlvdXIgbGVncyBzdHJhaWdodCBhbmQgbGlmdCB0aGVtIGFsbCB0aGUgd2F5IHVwIHRvIHRoZSBjZWlsaW5nIHVudGlsIHlvdXIgYnV0dCBjb21lcyBvZmYgdGhlIGZsb29yLiBTbG93bHkgbG93ZXIgeW91ciBsZWdzIGJhY2sgZG93biB0aWxsIHRoZXkgYXJlIGp1c3QgYWJvdmUgdGhlIGZsb29yLiBIb2xkIGZvciBhIG1vbWVudC4gUmFpc2UgeW91ciBsZWdzIGJhY2sgdXAuIFJlcGVhdC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9sZWdfcmFpc2Vycy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWRHS2JUS0xueW00XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE0LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJoZWVsIHRvdWNoXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiS2VlcCB5b3VyIGJhY2sgZmxhdCBhbmQgYmVuZCB5b3VyIGtuZWVzIHRvIGEgOTAtZGVncmVlIGFuZ2xlIHdpdGggeW91ciBmZWV0IGZpcm1seSBwbGFudGVkIG9uIHRoZSBmbG9vci4gRW5nYWdlIHlvdXIgY29yZSBhcyB5b3UgYmVuZCB5b3VyIHNwaW5lIHRvIHJlYWNoIHlvdXIgcmlnaHQgaGFuZCB0b3dhcmQgeW91ciByaWdodCBhbmtsZS4gUmVwZWF0IHRoaXMgbW92ZW1lbnQgb24geW91ciBsZWZ0IHNpZGUuIEtlZXAgeW91ciBsb3dlciBiYWNrIG9uIHRoZSBmbG9vci5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9oZWVsX3RvdWNoLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OWJSLWVseW9sQlFcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE4XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInJlY2xpbmVkIG9ibGlxdWUgdHdpc3RcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBiYWNrIHdpdGggeW91ciBsZWdzIGV4dGVuZGVkIGFuZCB5b3VyIGVsYm93IGRpcmVjdGx5IHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBMSWZ0IHlvdXIgbGVmdCBsZWcgdXAgYXQgYSA0NSBkZWdyZWUgYW5nbGUgd2hpbGUgcmVhY2hpbmcgeW91ciByaWdodCBhcm0gb3ZlciB0byB5b3VyIGxlZnQgc2lkZS4gVGhlbiBzbG93bHkgZ28gYmFjayB0byB0aGUgc3RhcnRpbmcgcG9zaXRpb24uIFJlcGVhdCBzZXZlcmFsIHRpbWVzLCBhbmQgdGhlbiBzd2l0Y2ggdG8gdGhlIG90aGVyIHNpZGUuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvcmVjbGluZWRfb2JsaXF1ZV90d2lzdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVhLVzVqcnU1cEdvXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE2LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJoZWVscyB0byB0aGUgaGVhdmVuXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjaywgcG9zaXRpb24geW91ciBhcm1zIG91dCB0byB5b3VyIHNpZGVzLiBGcm9tIGhlcmUsIGFjdGl2YXRlIHRoZSBsb3dlciBhYmRvbWluYWxzIGFuZCBsaWZ0IHRoZSBsZWdzIHVudGlsIHRoZXkgYXJlIHBlcnBlbmRpY3VsYXIgdG8gdGhlIGdyb3VuZC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9oZWVsc190b190aGUgaGVhdmVuLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9d2RTMlU2ejBKR1lcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTcsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInBsYW5rXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiS2VlcCB5b3VyIGFicyB0aWdodCBhbmQgbG9vayBhdCB0aGUgc3BhY2UgYmV0d2VlbiB5b3VyIGhhbmRzIHRvIGVuc3VyZSBhIG5ldXRyYWwgc3BpbmUgcG9zaXRpb24uIEhvbGQgdGhlIHBvc2l0aW9uLiBIb2xkIHRoZSBwb3NpdGlvbiBmb3IgYXMgbG9uZyBhcyB5b3UgY2FuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvcGxhbmsuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1GY2J3ODJ5a0J2WVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE4LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJjb2JyYSBzdHJldGNoXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmVsbHkuIEJlbmQgeW91ciBlbGJvd3MgYW5kIHBsYWNlIHlvdXIgaGFuZHMgb24gdGhlIGZsb29yIG5leHQgdG8geW91ciByaWJzLCBzdGFja2luZyB5b3VyIHdyaXN0IGFuZCBlbGJvdy4gT24gYW4gaW5oYWxlLCBiZWdpbiB0byBwZWVsIHlvdXIgY2hlc3QgYXdheSBmcm9tIHRoZSBmbG9vciwgbGlmdGluZyBpbnRvIHNwaW5hbCBleHRlbnNpb24uIEhvbGQgdGhpcyBwb3NpdGlvbi4gQnJlYXRoZSBuYXR1cmFsbHkuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL3BuZy9jb2JyYS5wbmdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXoyMU1jSEhPcEFnXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTksXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImx5aW5nIHR3aXN0IHN0cmV0Y2ggbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCB5b3VyIGFybXMgZXh0ZW5kZWQgYXQgeW91ciBzaWRlcy4gQmVuZCB5b3VyIGxlZ3MgYW5kIHR3aXN0IHlvdXIgbGVncyB0byB0aGUgbGVmdC4gSG9sZCB0aGlzIHBvc2l0aW9uLiBUaGlzIGV4ZXJjaXNlIHN0cmV0Y2hlcyB5b3VyIG9ibGlxdWVzIGFuZCBsb3dlciBiYWNrLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMvbHlpbmdfdHdpc3Rfc3RyZXRjaF9sZWZ0LmpwZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Wkktal9QT3R6bFVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyMCxcclxuICAgICAgICAgICAgdGl0bGU6IFwibHlpbmcgdHdpc3Qgc3RyZXRjaCByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCB5b3VyIGFybXMgZXh0ZW5kZWQgYXQgeW91ciBzaWRlcy4gQmVuZCB5b3VyIGxlZ3MgYW5kIHR3aXN0IHlvdXIgbGVncyB0byB0aGUgcmlnaHQuIEhvbGQgdGhpcyBwb3NpdGlvbi4gVGhpcyBleGVyY2lzZSBzdHJldGNoZXMgeW91ciBvYmxpcXVlcyBhbmQgbG93ZXIgYmFjay5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL2x5aW5nX3R3aXN0X3N0cmV0Y2hfcmlnaHQuanBnXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1aSS1qX1BPdHpsVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgaWQ6IDMsXHJcbiAgICAgICAgdGl0bGU6IFwiQUJTIGFkdmFuY2VkXCIsXHJcbiAgICAgICAgZXhlcmNpc2VzQW10OiBcIjI2XCIsXHJcbiAgICAgICAgZXhlcmNpc2VzVGltZTogXCIxM1wiLFxyXG4gICAgICAgIGNvbXBsZXhpdHlMZXZlbDogdHJ1ZSxcclxuICAgICAgICBpbWFnZTogXCIuLi9hc3NldHMvcG5nL2FiczMucG5nXCIsXHJcbiAgICAgICAgY29sb3I6XHJcbiAgICAgICAgICBcImxpbmVhci1ncmFkaWVudCg5MGRlZywgcmdiYSgyNDQsMTE3LDExNywxKSAwJSwgcmdiYSgyNTUsMjA5LDIwOSwxKSAxMDAlKVwiLFxyXG4gICAgICAgIGV4ZXJjaXNlczogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMSxcclxuICAgICAgICAgICAgdGl0bGU6IFwianVtcGluZyBqYWNrc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHVwcmlnaHQgd2l0aCB5b3VyIGxlZ3MgdG9nZXRoZXIsIGFybXMgYXQgeW91ciBzaWRlcyBCZW5kIHlvdXIga25lZXMgc2xpZ2h0bHksIGFuZCBqdW1wIGludG8gdGhlIGFpci4gQXMgeW91IGp1bXAgLCBzcHJlYWQgeW91ciBsZWdzIHRvIGJlIHNob3VsZGVyLXdpZHRoIGFwYXJ0LiBTdHJldGNoIHlvdXIgYXJtcyBvdXQgYW5kIG92ZXIgeW91ciBoZWFkLiBKdW1wIGJhY2sgdG8gc3RhbmRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvanVtcGluZ19qYWNrcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTJXNFpOU3dvV180XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngzMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDIsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImhpZ2ggc3RlcHBpbmdcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJSdW4gaW4gcGxhY2Ugd2hpbGUgcHVsbGluZyB5b3Uga25lZXMgYXMgaGlnaCBhcyBwb3NzaWJsZSB3aXRoIGVhY2ggc3RlcC4gRG8gaXQgYXMgZmFzdCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgYmFjayBzdHJhaWdodFwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2hpZ2hfc3RlcHBpbmcuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DbXhyOXhjTmhnVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDMsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImNyb3NzIGtuZWUgcGxhbmtcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJHZXQgb24gdGhlIGZsb29yIG9uIGFsbCBmb3VycyBhbmQgYXNzdW1lIGEgcHVzaCB1cCBvciBhYiBwbGFuayBwb3NpdGlvbi4gVG8gZXhlY3V0ZSB0aGlzIG1vdmUsIHNxdWVlemUgdGhlIGFicyBhbmQgYnJpbmcgeW91ciBsZWZ0IGxlZyB1cCB0byB5b3VyIHJpZ2h0IGVsYm93IGFuZCBiYWNrLiBSZXBlYXQgd2l0aCB0aGUgb3Bwb3NpdGUgbGVnLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2Nyb3NzX2tuZWVfcGxhbmsuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1PNGZGSVlwWXlTVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MjhcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA0LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJjcm9zcyBhcm0gY3J1bmNoZXNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgZmxhdCBvbiB5b3VyIGJhY2sgYW5kIGNyb3NzIHlvdXIgYXJtcyBhY3Jvc3MgeW91ciBjaGVzdC4gQmVuZCB5b3VyIGtuZWVzIGFuZCBmaXJtbHkgcGxhbnQgeW91ciBmZWV0IG9uIHRoZSBmbG9vci4gQnJhY2UgeW91ciBjb3JlIGFuZCBsaWZ0IHlvdXIgc2hvdWxkZXJzIGFuZCB1cHBlciBiYWNrIG9mZiBvZiB0aGUgZmxvb3IuIEhvbGQgYXQgdGhlIHRvcCBmb3IgYSBzZWNvbmQgYW5kIHRoZW4gcmV0cmFjdCBiYWNrIGRvd24gdG8gc3RhcnRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvY3Jvc3NfYXJtX2NydW5jaGVzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9UXozeWxxcUo5ME1cIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE4XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNSxcclxuICAgICAgICAgICAgdGl0bGU6IFwiaGVlbCB0b3VjaFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIktlZXAgeW91ciBiYWNrIGZsYXQgYW5kIGJlbmQgeW91ciBrbmVlcyB0byBhIDkwLWRlZ3JlZSBhbmdsZSB3aXRoIHlvdXIgZmVldCBmaXJtbHkgcGxhbnRlZCBvbiB0aGUgZmxvb3IuIEVuZ2FnZSB5b3VyIGNvcmUgYXMgeW91IGJlbmQgeW91ciBzcGluZSB0byByZWFjaCB5b3VyIHJpZ2h0IGhhbmQgdG93YXJkIHlvdXIgcmlnaHQgYW5rbGUuIFJlcGVhdCB0aGlzIG1vdmVtZW50IG9uIHlvdXIgbGVmdCBzaWRlLiBLZWVwIHlvdXIgbG93ZXIgYmFjayBvbiB0aGUgZmxvb3IuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvaGVlbF90b3VjaC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTliUi1lbHlvbEJRXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngyNFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDYsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInggbWFuIGNydW5jaFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBkb3duIG9uIHRoZSBmbG9vci4gVGFrZSB0aGUgeCBwb3NpdGlvbiwga2VlcGluZyB5b3VyIGhhbmRzIGFuZCBmZWV0IG9mZiB0aGUgZ3JvdW5kLiBCcmluZyB5b3VyIGFybXMgYW5kIGxlZ3MgdG9nZXRoZXIgaW4gdGhlIG1pZGRsZS8gR28gYmFjayB0byBzdGFydGluZyBwb3NpdGlvbi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy94X21hbl9jcnVuY2guZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1mX1pzSmdhcUZORVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MThcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA3LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJidXR0IGJyaWRnZVwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCBrbmVlcyBiZW50LCBmZWV0IGZsYXQgb24gdGhlIGZsb29yIGFuZCBhcm1zIGF0IHlvdXIgc2lkZXMuIFB1c2ggeW91ciBoaXBzIHVwLCBob2xkIGZvciBvbmUgc2Vjb25kIGFuZCBzbG93bHkgbG93ZXIgZG93bi4gVGhpcyBleGVyY2lzZSB3b3JrcyB5b3VyIGdsdXRlcy5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9idXR0X2JyaWRnZS5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTlxbzQ4Q1lOMDZ3XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngyMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDgsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgY3J1bmNoZXMgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIHNpZGUgd2l0aCB5b3VyIGxlZ3Mgc3RyYWlnaHQgYW5kIGFybSBjbG9zZXN0IHRvIHRoZSBmbG9vciBleHRlbmRlZCBvdXQgaW4gZnJvbnQgb2YgeW91IGZvciBzdXBwb3J0ICwgd2l0aCB5b3VyIG90aGVyIGhhbmQgcmVzdGluZyBvbiB5b3VyIGhlYWQgZm9yIGJhbGFuY2UuIENydW5jaCB5b3VyIG9ibGlxdWVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfY3J1bmNoX2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13ME9XRmpmSTN6TVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTZcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA5LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzaWRlIGNydW5jaGVzIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgc2lkZSB3aXRoIHlvdXIgbGVncyBzdHJhaWdodCBhbmQgYXJtIGNsb3Nlc3QgdG8gdGhlIGZsb29yIGV4dGVuZGVkIG91dCBpbiBmcm9udCBvZiB5b3UgZm9yIHN1cHBvcnQgLCB3aXRoIHlvdXIgb3RoZXIgaGFuZCByZXN0aW5nIG9uIHlvdXIgaGVhZCBmb3IgYmFsYW5jZS4gQ3J1bmNoIHlvdXIgb2JsaXF1ZXMuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2lkZV9jcnVuY2hfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13ME9XRmpmSTN6TVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTZcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMCxcclxuICAgICAgICAgICAgdGl0bGU6IFwiaGVlbHMgdG8gdGhlIGhlYXZlblwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2ssIHBvc2l0aW9uIHlvdXIgYXJtcyBvdXQgdG8geW91ciBzaWRlcy4gRnJvbSBoZXJlLCBhY3RpdmF0ZSB0aGUgbG93ZXIgYWJkb21pbmFscyBhbmQgbGlmdCB0aGUgbGVncyB1bnRpbCB0aGV5IGFyZSBwZXJwZW5kaWN1bGFyIHRvIHRoZSBncm91bmQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvaGVlbHNfdG9fdGhlIGhlYXZlbi5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXdkUzJVNnowSkdZXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngyMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDExLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJ2aG9sZFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlNpdCBvbiB0aGUgZmxvb3IsIGxpZnQgeW91ciBsZWdzIHVwIGF0IGEgNDUgZGVncmVlIGFuZ2xlLCBhbmQgbGVhbiB5b3VyIHVwcGVyIGJvZHkgYmFjayBhdCBhIDQ1IGRlZ3JlZSBhbmdsZS4gU3RyZXRjaCB5b3VyIGFybXMgZm9yd2FyZC4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMvdmhvbGQuanBnXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1XR3dJNjI5YVRBWVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEyLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJwbGFua1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIktlZXAgeW91ciBhYnMgdGlnaHQgYW5kIGxvb2sgYXQgdGhlIHNwYWNlIGJldHdlZW4geW91ciBoYW5kcyB0byBlbnN1cmUgYSBuZXV0cmFsIHNwaW5lIHBvc2l0aW9uLiBIb2xkIHRoZSBwb3NpdGlvbi4gSG9sZCB0aGUgcG9zaXRpb24gZm9yIGFzIGxvbmcgYXMgeW91IGNhblwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3BsYW5rLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9RmNidzgyeWtCdllcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDE6MDBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMyxcclxuICAgICAgICAgICAgdGl0bGU6IFwic2tpcHBpbmcgd2l0aG91dCByb3BlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiVGhpcyBpcyBhIGdvb2Qgd2FybS11cCBleGVyY2lzZS4gUHJldGVuZCB0byBob2xkIGEgc2tpcHBpbmcgcm9wZSBoYW5kbGUgaW4gZWFjaCBoYW5kLiBKdW1wIGFuZCBhbHRlcm5hdGVseSBsYW5kIG9uIHRoZSBiYWxscyBvZiB5b3VyIGZlZXQsIHJvdGF0aW5nIHlvdXIgd3Jpc3RzIGF0IHRoZSBzYW1lIHRpbWUgYXMgeW91IGFzIGlmIHlvdSB3ZXJlIHNwaW5uaW5nIGEgcm9wZS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9za2lwcGluZ193aXRob3V0X3JvcGUuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DWUdlYXpsTmJVNFwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE0LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJjcm9zcyBrbmVlIHBsYW5rXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiR2V0IG9uIHRoZSBmbG9vciBvbiBhbGwgZm91cnMgYW5kIGFzc3VtZSBhIHB1c2ggdXAgb3IgYWIgcGxhbmsgcG9zaXRpb24uIFRvIGV4ZWN1dGUgdGhpcyBtb3ZlLCBzcXVlZXplIHRoZSBhYnMgYW5kIGJyaW5nIHlvdXIgbGVmdCBsZWcgdXAgdG8geW91ciByaWdodCBlbGJvdyBhbmQgYmFjay4gUmVwZWF0IHdpdGggdGhlIG9wcG9zaXRlIGxlZy5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9jcm9zc19rbmVlX3BsYW5rLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TzRmRklZcFl5U1VcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDI2XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImNyb3NzIGFybSBjcnVuY2hlc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBmbGF0IG9uIHlvdXIgYmFjayBhbmQgY3Jvc3MgeW91ciBhcm1zIGFjcm9zcyB5b3VyIGNoZXN0LiBCZW5kIHlvdXIga25lZXMgYW5kIGZpcm1seSBwbGFudCB5b3VyIGZlZXQgb24gdGhlIGZsb29yLiBCcmFjZSB5b3VyIGNvcmUgYW5kIGxpZnQgeW91ciBzaG91bGRlcnMgYW5kIHVwcGVyIGJhY2sgb2ZmIG9mIHRoZSBmbG9vci4gSG9sZCBhdCB0aGUgdG9wIGZvciBhIHNlY29uZCBhbmQgdGhlbiByZXRyYWN0IGJhY2sgZG93biB0byBzdGFydGluZyBwb3NpdGlvbi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9jcm9zc19hcm1fY3J1bmNoZXMuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1RejN5bHFxSjkwTVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTZcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxNixcclxuICAgICAgICAgICAgdGl0bGU6IFwiaGVlbCB0b3VjaFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIktlZXAgeW91ciBiYWNrIGZsYXQgYW5kIGJlbmQgeW91ciBrbmVlcyB0byBhIDkwLWRlZ3JlZSBhbmdsZSB3aXRoIHlvdXIgZmVldCBmaXJtbHkgcGxhbnRlZCBvbiB0aGUgZmxvb3IuIEVuZ2FnZSB5b3VyIGNvcmUgYXMgeW91IGJlbmQgeW91ciBzcGluZSB0byByZWFjaCB5b3VyIHJpZ2h0IGhhbmQgdG93YXJkIHlvdXIgcmlnaHQgYW5rbGUuIFJlcGVhdCB0aGlzIG1vdmVtZW50IG9uIHlvdXIgbGVmdCBzaWRlLiBLZWVwIHlvdXIgbG93ZXIgYmFjayBvbiB0aGUgZmxvb3IuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvaGVlbF90b3VjaC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTliUi1lbHlvbEJRXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngyMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE3LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJ4IG1hbiBjcnVuY2hcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgZG93biBvbiB0aGUgZmxvb3IuIFRha2UgdGhlIHggcG9zaXRpb24sIGtlZXBpbmcgeW91ciBoYW5kcyBhbmQgZmVldCBvZmYgdGhlIGdyb3VuZC4gQnJpbmcgeW91ciBhcm1zIGFuZCBsZWdzIHRvZ2V0aGVyIGluIHRoZSBtaWRkbGUvIEdvIGJhY2sgdG8gc3RhcnRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMveF9tYW5fY3J1bmNoLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Zl9ac0pnYXFGTkVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE2XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTgsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJ1dHQgYnJpZGdlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIGtuZWVzIGJlbnQsIGZlZXQgZmxhdCBvbiB0aGUgZmxvb3IgYW5kIGFybXMgYXQgeW91ciBzaWRlcy4gUHVzaCB5b3VyIGhpcHMgdXAsIGhvbGQgZm9yIG9uZSBzZWNvbmQgYW5kIHNsb3dseSBsb3dlciBkb3duLiBUaGlzIGV4ZXJjaXNlIHdvcmtzIHlvdXIgZ2x1dGVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2J1dHRfYnJpZGdlLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OXFvNDhDWU4wNndcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE4XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTksXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgY3J1bmNoZXMgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIHNpZGUgd2l0aCB5b3VyIGxlZ3Mgc3RyYWlnaHQgYW5kIGFybSBjbG9zZXN0IHRvIHRoZSBmbG9vciBleHRlbmRlZCBvdXQgaW4gZnJvbnQgb2YgeW91IGZvciBzdXBwb3J0ICwgd2l0aCB5b3VyIG90aGVyIGhhbmQgcmVzdGluZyBvbiB5b3VyIGhlYWQgZm9yIGJhbGFuY2UuIENydW5jaCB5b3VyIG9ibGlxdWVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfY3J1bmNoX2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13ME9XRmpmSTN6TVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTRcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyMCxcclxuICAgICAgICAgICAgdGl0bGU6IFwic2lkZSBjcnVuY2hlcyByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIHNpZGUgd2l0aCB5b3VyIGxlZ3Mgc3RyYWlnaHQgYW5kIGFybSBjbG9zZXN0IHRvIHRoZSBmbG9vciBleHRlbmRlZCBvdXQgaW4gZnJvbnQgb2YgeW91IGZvciBzdXBwb3J0ICwgd2l0aCB5b3VyIG90aGVyIGhhbmQgcmVzdGluZyBvbiB5b3VyIGhlYWQgZm9yIGJhbGFuY2UuIENydW5jaCB5b3VyIG9ibGlxdWVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfY3J1bmNoX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dzBPV0ZqZkkzek1cIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE0XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImhlZWxzIHRvIHRoZSBoZWF2ZW5cIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBiYWNrLCBwb3NpdGlvbiB5b3VyIGFybXMgb3V0IHRvIHlvdXIgc2lkZXMuIEZyb20gaGVyZSwgYWN0aXZhdGUgdGhlIGxvd2VyIGFiZG9taW5hbHMgYW5kIGxpZnQgdGhlIGxlZ3MgdW50aWwgdGhleSBhcmUgcGVycGVuZGljdWxhciB0byB0aGUgZ3JvdW5kLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2hlZWxzX3RvX3RoZSBoZWF2ZW4uZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13ZFMyVTZ6MEpHWVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MThcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyMixcclxuICAgICAgICAgICAgdGl0bGU6IFwidmhvbGRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTaXQgb24gdGhlIGZsb29yLCBsaWZ0IHlvdXIgbGVncyB1cCBhdCBhIDQ1IGRlZ3JlZSBhbmdsZSwgYW5kIGxlYW4geW91ciB1cHBlciBib2R5IGJhY2sgYXQgYSA0NSBkZWdyZWUgYW5nbGUuIFN0cmV0Y2ggeW91ciBhcm1zIGZvcndhcmQuIEhvbGQgdGhpcyBwb3NpdGlvbi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL3Zob2xkLmpwZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9V0d3STYyOWFUQVlcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MjVcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyMyxcclxuICAgICAgICAgICAgdGl0bGU6IFwicGxhbmtcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJLZWVwIHlvdXIgYWJzIHRpZ2h0IGFuZCBsb29rIGF0IHRoZSBzcGFjZSBiZXR3ZWVuIHlvdXIgaGFuZHMgdG8gZW5zdXJlIGEgbmV1dHJhbCBzcGluZSBwb3NpdGlvbi4gSG9sZCB0aGUgcG9zaXRpb24uIEhvbGQgdGhlIHBvc2l0aW9uIGZvciBhcyBsb25nIGFzIHlvdSBjYW5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9wbGFuay5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUZjYnc4MnlrQnZZXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjQsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImNvYnJhIHN0cmV0Y2hcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBiZWxseS4gQmVuZCB5b3VyIGVsYm93cyBhbmQgcGxhY2UgeW91ciBoYW5kcyBvbiB0aGUgZmxvb3IgbmV4dCB0byB5b3VyIHJpYnMsIHN0YWNraW5nIHlvdXIgd3Jpc3QgYW5kIGVsYm93LiBPbiBhbiBpbmhhbGUsIGJlZ2luIHRvIHBlZWwgeW91ciBjaGVzdCBhd2F5IGZyb20gdGhlIGZsb29yLCBsaWZ0aW5nIGludG8gc3BpbmFsIGV4dGVuc2lvbi4gSG9sZCB0aGlzIHBvc2l0aW9uLiBCcmVhdGhlIG5hdHVyYWxseS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvcG5nL2NvYnJhLnBuZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ejIxTWNISE9wQWdcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyNSxcclxuICAgICAgICAgICAgdGl0bGU6IFwibHlpbmcgdHdpc3Qgc3RyZXRjaCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgYXJtcyBleHRlbmRlZCBhdCB5b3VyIHNpZGVzLiBCZW5kIHlvdXIgbGVncyBhbmQgdHdpc3QgeW91ciBsZWdzIHRvIHRoZSBsZWZ0LiBIb2xkIHRoaXMgcG9zaXRpb24uIFRoaXMgZXhlcmNpc2Ugc3RyZXRjaGVzIHlvdXIgb2JsaXF1ZXMgYW5kIGxvd2VyIGJhY2suXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy9seWluZ190d2lzdF9zdHJldGNoX2xlZnQuanBnXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1aSS1qX1BPdHpsVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDI2LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJseWluZyB0d2lzdCBzdHJldGNoIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgYXJtcyBleHRlbmRlZCBhdCB5b3VyIHNpZGVzLiBCZW5kIHlvdXIgbGVncyBhbmQgdHdpc3QgeW91ciBsZWdzIHRvIHRoZSByaWdodC4gSG9sZCB0aGlzIHBvc2l0aW9uLiBUaGlzIGV4ZXJjaXNlIHN0cmV0Y2hlcyB5b3VyIG9ibGlxdWVzIGFuZCBsb3dlciBiYWNrLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMvbHlpbmdfdHdpc3Rfc3RyZXRjaF9yaWdodC5qcGdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVpJLWpfUE90emxVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH0sXHJcbiAgICBdLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgdGl0bGU6IFwiQlVUVCBXb3Jrb3V0c1wiLFxyXG4gICAgaW1hZ2U6IFwiLi4vYXNzZXRzL3BuZy9idXR0LnBuZ1wiLFxyXG4gICAgYmxvY2s6IFtcclxuICAgICAge1xyXG4gICAgICAgIGlkOiA0LFxyXG4gICAgICAgIHRpdGxlOiBcIkJVVFQgYmVnaW5uZXJcIixcclxuICAgICAgICBleGVyY2lzZXNBbXQ6IFwiMThcIixcclxuICAgICAgICBleGVyY2lzZXNUaW1lOiBcIjEzXCIsXHJcbiAgICAgICAgY29tcGxleGl0eUxldmVsOiB0cnVlLFxyXG4gICAgICAgIGltYWdlOiBcIi4uL2Fzc2V0cy9wbmcvYnV0dC5wbmdcIixcclxuICAgICAgICBjb2xvcjpcclxuICAgICAgICAgIFwibGluZWFyLWdyYWRpZW50KDkwZGVnLCByZ2JhKDI0LDI0MCwyMzcsMSkgMCUsIHJnYmEoMjA2LDI0NywyNDIsMSkgMTAwJSlcIixcclxuICAgICAgICBleGVyY2lzZXM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImhpZ2ggc3RlcHBpbmdcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJSdW4gaW4gcGxhY2Ugd2hpbGUgcHVsbGluZyB5b3Uga25lZXMgYXMgaGlnaCBhcyBwb3NzaWJsZSB3aXRoIGVhY2ggc3RlcC4gRG8gaXQgYXMgZmFzdCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgYmFjayBzdHJhaWdodFwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2hpZ2hfc3RlcHBpbmcuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DbXhyOXhjTmhnVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDIsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJ1dHQga2lja3NcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJSdW4gaW4gcGxhY2Ugd2hpbGUga2lja2luZyB5b3VyIGhlZWwgdXAgdG8gdG91Y2ggeW91ciBidXR0IHdpdGggZWFjaCBzdGVwLiBUcnkgdG8gZG8gaXQgYXMgZmFzdCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY2hlc3QgdXAsIHRpZ2h0ZW4geW91ciBhYnMuIEl0J3MgYSBncmVhdCBleGVyY2lzZSBmb3IgdGhlIGdsdXRldXMgYW5kIGhhbXN0cmluZ3MuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYnV0dF9raWNrcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXZYVlB2WTFVYkpJXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMyxcclxuICAgICAgICAgICAgdGl0bGU6IFwic3F1YXRzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgd2l0aCBmZWV0IGEgbGl0dGxlIHdpZGVyIHRoYW4gaGlwIHdpZHRoLCB0aGVuIGxvd2VyIHlvdXIgYm9keSB1bnRpbCB5b3VyIHRoaWdocyBhcmUgcGFyYWxsZWwgd2l0aCB0aGUgZmxvb3IuIFlvdXIga25lZXMgc2hvdWxkIGJlIGV4dGVuZGVkIGluIHRoZSBzYW1lIGRpcmVjdGlvbiBhcyB5b3VyIHRvZXMuIFRoaXMgZXhlcmNpc2Ugd29ya3MgdGhlIHRoaWdocyBoaXBzIGJ1dHRvY2tzLCBxdWFkcywgaGFtc3RyaW5ncyBhbmQgbG93ZXIgYm9keS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zcXVhdHMuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj00MmJGb2RQYWhCVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA0LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzdGFuZGluZyBnbHV0ZSBraWNrYmFja3MgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcItChb250cmFjdCB5b3VyIGNvcmUgbXVzY2xlcy4gRXh0ZW5kIHlvdXIgbGVmdCBsZWcgYmFjayBhbmQgdXAuIFRoZSBzb2xlIG9mIHlvdXIgcmlnaHQgZm9vdCBzaG91bGQgYmUgZmFjaW5nIHRoZSBjZWlsaW5nLiBDb250cmFjdCB5b3VyIGdsdXRlIGF0IHRoZSB0b3Agb2YgdGhlIG1vdmUgYW5kIGhvbGQgZm9yIGEgYml0LiBSZXR1cm4gdG8geW91ciBzdGFydGluZyBwb3NpdGlvbiBhbmQgcmVwZWF0LlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3N0YW5kaW5nX2dsdXRlX2tpY2tiYWNrc19sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9cG4yRVpqRUVfWlVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNSxcclxuICAgICAgICAgICAgdGl0bGU6IFwic3RhbmRpbmcgZ2x1dGUga2lja2JhY2tzIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiR2V0IGludG8gYWxsIGZvdXJzLCB3aXRoIGEgc3RyYWlnaHQgc3BpbmUsIGFuZCBjb250cmFjdCB5b3VyIGNvcmUgbXVzY2xlcy4gRXh0ZW5kIHlvdXIgcmlnaHQgbGVnIGJhY2sgYW5kIHVwIHVudGlsIHlvdXIgdGhpZ2ggaXMgcGFyYWxsZWwgd2l0aCB0aGUgZ3JvdW5kLiBUaGUgc29sZSBvZiB5b3VyIHJpZ2h0IGZvb3Qgc2hvdWxkIGJlIGZhY2luZyB0aGUgY2VpbGluZy4gQ29udHJhY3QgeW91ciBnbHV0ZSBhdCB0aGUgdG9wIG9mIHRoZSBtb3ZlIGFuZCBob2xkIGZvciBhIGJpdC4gUmV0dXJuIHRvIHlvdXIgc3RhcnRpbmcgcG9zaXRpb24gd2l0aG91dCB0b3VjaGluZyB5b3VyIGtuZWUgdG8gdGhlIGdyb3VuZCBhbmQgcmVwZWF0LlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3N0YW5kaW5nX2dsdXRlX2tpY2tiYWNrc19yaWdodC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXBuMkVaakVFX1pVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDYsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJ1dHQgYnJpZGdlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIGtuZWVzIGJlbnQsIGZlZXQgZmxhdCBvbiB0aGUgZmxvb3IgYW5kIGFybXMgYXQgeW91ciBzaWRlcy4gUHVzaCB5b3VyIGhpcHMgdXAsIGhvbGQgZm9yIG9uZSBzZWNvbmQgYW5kIHNsb3dseSBsb3dlciBkb3duLiBUaGlzIGV4ZXJjaXNlIHdvcmtzIHlvdXIgZ2x1dGVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2J1dHRfYnJpZGdlLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OXFvNDhDWU4wNndcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNyxcclxuICAgICAgICAgICAgdGl0bGU6IFwibW91bnRhaW4gY2xpbWJlclwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlB1dCBib3RoIGhhbmRzIGFuZCBrbmVlcyBvbiB0aGUgZmxvb3IuIFBsYWNlIHlvdXIgcmlnaHQgZm9vdCBuZWFyIHlvdXIgcmlnaHQgaGFuZCBhbmQgZXh0ZW5kIHlvdXIgbGVmdCBsZWcgYmVoaW5kIHlvdS4gSW4gb25lIHNtb290aCBtb3Rpb24gc3dpdGNoIHlvdXIgbGVncywga2VlcGluZyB5b3VyIGFybXMgaW4gdGhlIHNhbWUgcG9zaXRpb24uIFN3aXRjaCB5b3VyIGxlZ3MgYmFjayBhbmQgZm9ydGggdHdpY2UsIHN1Y2ggdGhhdCB5b3VyIHJpZ2h0IGxlZyBpcyBhZ2FpbiBjbG9zZSB0byB5b3VyIHJpZ2h0IGhhbmQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvbW91bnRhaW5fY2xpbWJlci5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXdRcTN5YmFMWmVBXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDgsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImRvbmtleSBraWNrcyBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhcnQgd2l0aCB5b3VyIGtuZWVzIHVuZGVyIHlvdXIgYnV0dCBhbmQgeW91ciBoYW5kcyB1bmRlciB5b3VyIHNob3VsZGVycy4gVGhlbiBsaWZ0IHlvdXIgbGVmdCBsZWcgYW5kIHNxdWVlemUgeW91ciBidXR0IGFzIG11Y2ggYXMgeW91IGNhbi4gS2VlcCB5b3VyIGNvcmUgdGlnaHQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZG9ua2V5X2tpY2tzX2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj00cmFuVlFEcWxhVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA5LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzcXVhdHNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFuZCB3aXRoIGZlZXQgYSBsaXR0bGUgd2lkZXIgdGhhbiBoaXAgd2lkdGgsIHRoZW4gbG93ZXIgeW91ciBib2R5IHVudGlsIHlvdXIgdGhpZ2hzIGFyZSBwYXJhbGxlbCB3aXRoIHRoZSBmbG9vci4gWW91ciBrbmVlcyBzaG91bGQgYmUgZXh0ZW5kZWQgaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHlvdXIgdG9lcy4gVGhpcyBleGVyY2lzZSB3b3JrcyB0aGUgdGhpZ2hzIGhpcHMgYnV0dG9ja3MsIHF1YWRzLCBoYW1zdHJpbmdzIGFuZCBsb3dlciBib2R5LlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NxdWF0cy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTQyYkZvZFBhaEJVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEwLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzdGFuZGluZyBnbHV0ZSBraWNrYmFja3MgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJHZXQgaW50byBhbGwgZm91cnMsIHdpdGggYSBzdHJhaWdodCBzcGluZSwgYW5kIGNvbnRyYWN0IHlvdXIgY29yZSBtdXNjbGVzLiBFeHRlbmQgeW91ciByaWdodCBsZWcgYmFjayBhbmQgdXAgdW50aWwgeW91ciB0aGlnaCBpcyBwYXJhbGxlbCB3aXRoIHRoZSBncm91bmQuIFRoZSBzb2xlIG9mIHlvdXIgcmlnaHQgZm9vdCBzaG91bGQgYmUgZmFjaW5nIHRoZSBjZWlsaW5nLiBDb250cmFjdCB5b3VyIGdsdXRlIGF0IHRoZSB0b3Agb2YgdGhlIG1vdmUgYW5kIGhvbGQgZm9yIGEgYml0LiBSZXR1cm4gdG8geW91ciBzdGFydGluZyBwb3NpdGlvbiB3aXRob3V0IHRvdWNoaW5nIHlvdXIga25lZSB0byB0aGUgZ3JvdW5kIGFuZCByZXBlYXQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc3RhbmRpbmdfZ2x1dGVfa2lja2JhY2tzX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9cG4yRVpqRUVfWlVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDhcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMSxcclxuICAgICAgICAgICAgdGl0bGU6IFwiZG9ua2V5IGtpY2tzIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhcnQgd2l0aCB5b3VyIGtuZWVzIHVuZGVyIHlvdXIgYnV0dCBhbmQgeW91ciBoYW5kcyB1bmRlciB5b3VyIHNob3VsZGVycy4gVGhlbiBsaWZ0IHlvdXIgcmlnaHQgbGVnIGFuZCBzcXVlZXplIHlvdXIgYnV0dCBhcyBtdWNoIGFzIHlvdSBjYW4uIEtlZXAgeW91ciBjb3JlIHRpZ2h0LlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2RvbmtleV9raWNrc19yaWdodC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTRyYW5WUURxbGFVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIng4XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTIsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInN0YW5kaW5nIGdsdXRlIGtpY2tiYWNrcyBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwi0KFvbnRyYWN0IHlvdXIgY29yZSBtdXNjbGVzLiBFeHRlbmQgeW91ciBsZWZ0IGxlZyBiYWNrIGFuZCB1cC4gVGhlIHNvbGUgb2YgeW91ciByaWdodCBmb290IHNob3VsZCBiZSBmYWNpbmcgdGhlIGNlaWxpbmcuIENvbnRyYWN0IHlvdXIgZ2x1dGUgYXQgdGhlIHRvcCBvZiB0aGUgbW92ZSBhbmQgaG9sZCBmb3IgYSBiaXQuIFJldHVybiB0byB5b3VyIHN0YXJ0aW5nIHBvc2l0aW9uIGFuZCByZXBlYXQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc3RhbmRpbmdfZ2x1dGVfa2lja2JhY2tzX2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1wbjJFWmpFRV9aVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4OFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEzLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJidXR0IGJyaWRnZVwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCBrbmVlcyBiZW50LCBmZWV0IGZsYXQgb24gdGhlIGZsb29yIGFuZCBhcm1zIGF0IHlvdXIgc2lkZXMuIFB1c2ggeW91ciBoaXBzIHVwLCBob2xkIGZvciBvbmUgc2Vjb25kIGFuZCBzbG93bHkgbG93ZXIgZG93bi4gVGhpcyBleGVyY2lzZSB3b3JrcyB5b3VyIGdsdXRlcy5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9idXR0X2JyaWRnZS5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTlxbzQ4Q1lOMDZ3XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIng4XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTQsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcIm1vdW50YWluIGNsaW1iZXJcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJQdXQgYm90aCBoYW5kcyBhbmQga25lZXMgb24gdGhlIGZsb29yLiBQbGFjZSB5b3VyIHJpZ2h0IGZvb3QgbmVhciB5b3VyIHJpZ2h0IGhhbmQgYW5kIGV4dGVuZCB5b3VyIGxlZnQgbGVnIGJlaGluZCB5b3UuIEluIG9uZSBzbW9vdGggbW90aW9uIHN3aXRjaCB5b3VyIGxlZ3MsIGtlZXBpbmcgeW91ciBhcm1zIGluIHRoZSBzYW1lIHBvc2l0aW9uLiBTd2l0Y2ggeW91ciBsZWdzIGJhY2sgYW5kIGZvcnRoIHR3aWNlLCBzdWNoIHRoYXQgeW91ciByaWdodCBsZWcgaXMgYWdhaW4gY2xvc2UgdG8geW91ciByaWdodCBoYW5kLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL21vdW50YWluX2NsaW1iZXIuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13UXEzeWJhTFplQVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxNSxcclxuICAgICAgICAgICAgdGl0bGU6IFwiZG9ua2V5IGtpY2tzIGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciBsZWZ0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTRyYW5WUURxbGFVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE2LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJkb25rZXkga2lja3MgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciByaWdodCBsZWcgYW5kIHNxdWVlemUgeW91ciBidXR0IGFzIG11Y2ggYXMgeW91IGNhbi4gS2VlcCB5b3VyIGNvcmUgdGlnaHQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZG9ua2V5X2tpY2tzX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NHJhblZRRHFsYVVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTcsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImtuZWUgdG8gY2hlc3Qgc3RyZXRjaCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgbGVncyBleHRlbmRlZCBhbmQgYmFjayBzdHJhaWdodC4gS2VlcCB5b3VyIGhpcHMgbGV2ZWwgYW5kIHlvdXIgbG93ZXIgYmFjayBkb3duIG9uIHRoZSBmbG9vci4gUHVsbCB5b3VyIGxlZnQga25lZSB0b3dhcmRzIHlvdXIgY2hlc3QgYXMgbXVjaCBhcyB5b3UgY2FuIHdoaWxlIGtlZXBpbmcgeW91ciByaWdodCBsZWcgc3RyYWlnaHQgb24gdGhlIGdyb3VuZC4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMva25lZV90b19jaGVzdF9sZWZ0LmpwZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9YkptczlZeWpvQklcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxOCxcclxuICAgICAgICAgICAgdGl0bGU6IFwia25lZSB0byBjaGVzdCBzdHJldGNoIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgbGVncyBleHRlbmRlZCBhbmQgYmFjayBzdHJhaWdodC4gS2VlcCB5b3VyIGhpcHMgbGV2ZWwgYW5kIHlvdXIgbG93ZXIgYmFjayBkb3duIG9uIHRoZSBmbG9vci4gUHVsbCB5b3VyIHJpZ2h0IGtuZWUgdG93YXJkcyB5b3VyIGNoZXN0IGFzIG11Y2ggYXMgeW91IGNhbiB3aGlsZSBrZWVwaW5nIHlvdXIgbGVmdCBsZWcgc3RyYWlnaHQgb24gdGhlIGdyb3VuZC4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMva25lZV90b19jaGVzdF9yaWdodC5qcGdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWJKbXM5WXlqb0JJXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogNSxcclxuICAgICAgICB0aXRsZTogXCJCVVRUIGludGVybWVkaWF0ZVwiLFxyXG4gICAgICAgIGV4ZXJjaXNlc0FtdDogXCIyNlwiLFxyXG4gICAgICAgIGV4ZXJjaXNlc1RpbWU6IFwiMThcIixcclxuICAgICAgICBjb21wbGV4aXR5TGV2ZWw6IHRydWUsXHJcbiAgICAgICAgaW1hZ2U6IFwiLi4vYXNzZXRzL3BuZy9idXR0LnBuZ1wiLFxyXG4gICAgICAgIGNvbG9yOlxyXG4gICAgICAgICAgXCJsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYmEoMTEzLDE3OSwyMzUsMSkgMCUsIHJnYmEoMjAyLDIyNywyNDksMSkgMTAwJSlcIixcclxuICAgICAgICBleGVyY2lzZXM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImhpZ2ggc3RlcHBpbmdcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJSdW4gaW4gcGxhY2Ugd2hpbGUgcHVsbGluZyB5b3Uga25lZXMgYXMgaGlnaCBhcyBwb3NzaWJsZSB3aXRoIGVhY2ggc3RlcC4gRG8gaXQgYXMgZmFzdCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgYmFjayBzdHJhaWdodFwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2hpZ2hfc3RlcHBpbmcuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DbXhyOXhjTmhnVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDIsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJ1dHQga2lja3NcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJSdW4gaW4gcGxhY2Ugd2hpbGUga2lja2luZyB5b3VyIGhlZWwgdXAgdG8gdG91Y2ggeW91ciBidXR0IHdpdGggZWFjaCBzdGVwLiBUcnkgdG8gZG8gaXQgYXMgZmFzdCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY2hlc3QgdXAsIHRpZ2h0ZW4geW91ciBhYnMuIEl0J3MgYSBncmVhdCBleGVyY2lzZSBmb3IgdGhlIGdsdXRldXMgYW5kIGhhbXN0cmluZ3MuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYnV0dF9raWNrcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXZYVlB2WTFVYkpJXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMyxcclxuICAgICAgICAgICAgdGl0bGU6IFwibHVuZ2VzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhcnQgaW4gYSBzdGFuZGluZyBwb3NpdGlvbiB3aXRoIHlvdXIgZmVldCBoaXAtd2lkdGggYXBhcnQuIFN0ZXAgZm9yd2FyZCBsb25nZXIgdGhhbiBhIHdhbGtpbmcgc3RyaWRlIHNvIG9uZSBsZWcgaXMgYWhlYWQgb2YgeW91ciB0b3JzbyBhbmQgdGhlIG90aGVyIGlzIGJlaGluZC4gWW91ciBmb290IHNob3VsZCBsYW5kIGZsYXQgYW5kIHJlbWFpbiBmbGF0IHdoaWxlIGl0IGlzIG9uIHRoZSBncm91bmQuIFlvdXIgcmVhciBoZWVsIHdpbGwgcmlzZSBvZmYgb2YgdGhlIGdyb3VuZC4gQmVuZCB5b3VyIGtuZWVzIHRvIGFwcHJveGltYXRlbHkgOTAgZGVncmVlcyBhcyB5b3UgbG93ZXIgeW91cnNlbGYuIFJlbWVtYmVyIHRvIGtlZXAgeW91ciB0cnVuayB1cHJpZ2h0IGFuZCBjb3JlIGVuZ2FnZWQuIFRoZW4sIGZvcmNlZnVsbHkgcHVzaCBvZmYgZnJvbSB5b3VyIGZyb250IGxlZyB0byByZXR1cm4gdG8gdGhlIHN0YXJ0aW5nIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2x1bmdlcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXlJYzFZYlZMTVo4XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDQsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImRvbmtleSBraWNrcyBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhcnQgd2l0aCB5b3VyIGtuZWVzIHVuZGVyIHlvdXIgYnV0dCBhbmQgeW91ciBoYW5kcyB1bmRlciB5b3VyIHNob3VsZGVycy4gVGhlbiBsaWZ0IHlvdXIgbGVmdCBsZWcgYW5kIHNxdWVlemUgeW91ciBidXR0IGFzIG11Y2ggYXMgeW91IGNhbi4gS2VlcCB5b3VyIGNvcmUgdGlnaHQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZG9ua2V5X2tpY2tzX2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj00cmFuVlFEcWxhVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA1LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJkb25rZXkga2lja3MgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciByaWdodCBsZWcgYW5kIHNxdWVlemUgeW91ciBidXR0IGFzIG11Y2ggYXMgeW91IGNhbi4gS2VlcCB5b3VyIGNvcmUgdGlnaHQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZG9ua2V5X2tpY2tzX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NHJhblZRRHFsYVVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNixcclxuICAgICAgICAgICAgdGl0bGU6IFwic3F1YXRzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgd2l0aCBmZWV0IGEgbGl0dGxlIHdpZGVyIHRoYW4gaGlwIHdpZHRoLCB0aGVuIGxvd2VyIHlvdXIgYm9keSB1bnRpbCB5b3VyIHRoaWdocyBhcmUgcGFyYWxsZWwgd2l0aCB0aGUgZmxvb3IuIFlvdXIga25lZXMgc2hvdWxkIGJlIGV4dGVuZGVkIGluIHRoZSBzYW1lIGRpcmVjdGlvbiBhcyB5b3VyIHRvZXMuIFRoaXMgZXhlcmNpc2Ugd29ya3MgdGhlIHRoaWdocyBoaXBzIGJ1dHRvY2tzLCBxdWFkcywgaGFtc3RyaW5ncyBhbmQgbG93ZXIgYm9keS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zcXVhdHMuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj00MmJGb2RQYWhCVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA3LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJidXR0IGJyaWRnZVwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCBrbmVlcyBiZW50LCBmZWV0IGZsYXQgb24gdGhlIGZsb29yIGFuZCBhcm1zIGF0IHlvdXIgc2lkZXMuIFB1c2ggeW91ciBoaXBzIHVwLCBob2xkIGZvciBvbmUgc2Vjb25kIGFuZCBzbG93bHkgbG93ZXIgZG93bi4gVGhpcyBleGVyY2lzZSB3b3JrcyB5b3VyIGdsdXRlcy5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9idXR0X2JyaWRnZS5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTlxbzQ4Q1lOMDZ3XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDgsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJvdHRvbSBsZWcgbGlmdCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgbGVmdCBzaWRlIHdpdGggeW91ciBoZWFkIHJlc3Rpbmcgb24geW91ciBsZWZ0IGhhbmQuIFRoZW4gcHV0IHlvdXIgcmlnaHQgZm9vdCBmb3J3YXJkIG9uIHRoZSBmbG9vciBMaWZ0IHlvdXIgbGVmdCBsZWcgdXAgYW5kIGRvd24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYm90dG9tX2xlZ19saWZ0X2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1EbTFHU1gxdkl0WVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA5LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJib3R0b20gbGVnIGxpZnQgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciByaWdodCBzaWRlIHdpdGggeW91ciBoZWFkIHJlc3Rpbmcgb24geW91ciByaWdodCBoYW5kLiBUaGVuIHB1dCB5b3VyIGxlZnQgZm9vdCBmb3J3YXJkIG9uIHRoZSBmbG9vciBMaWZ0IHlvdXIgcmlnaHQgbGVnIHVwIGFuZCBkb3duLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2JvdHRvbV9sZWdfbGlmdF9yaWdodC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PURtMUdTWDF2SXRZXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEwLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJmaXJlIGh5ZHJhbnQgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkJlZ2luIG9uIHlvdXIgaGFuZHMgYW5kIGtuZWVzIG9uIHRoZSBmbG9vciwgeW91ciBoYW5kcyBkaXJlY3RseSBiZW5lYXRoIHRoZSBzaG91bGRlcnMsIGFuZCBrbmVlcyB1bmRlciB0aGUgaGlwcy4gVGhlbiB0cnkgdG8gbGlmdCB5b3VyIGxlZnQgbGVnIHRvIHRoZSBzaWRlIGF0IGEgOTAgZGVncmVlIGFuZ2xlLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2ZpcmVfaHlkcmFuZF9sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9N0xudWhMaS03OElcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImZpcmUgaHlkcmFudCByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkJlZ2luIG9uIHlvdXIgaGFuZHMgYW5kIGtuZWVzIG9uIHRoZSBmbG9vciwgeW91ciBoYW5kcyBkaXJlY3RseSBiZW5lYXRoIHRoZSBzaG91bGRlcnMsIGFuZCBrbmVlcyB1bmRlciB0aGUgaGlwcy4gVGhlbiB0cnkgdG8gbGlmdCB5b3VyIHJpZ2h0IGxlZyB0byB0aGUgc2lkZSBhdCBhIDkwIGRlZ3JlZSBhbmdsZS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9maXJlX2h5ZHJhbmRfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj03TG51aExpLTc4SVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMixcclxuICAgICAgICAgICAgdGl0bGU6IFwic3BsaXQgc3F1YXQgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkZyb20gYSBzdGFuZGluZyBwb3NpdGlvbiwgdGFrZSBhIGxvbmcgc3RlcCBmb3J3YXJkIGFzIGlmIHBlcmZvcm1pbmcgYSBsdW5nZS4gVGhlIGhlZWwgb2YgeW91ciBiYWNrIGZvb3Qgc2hvdWxkIGJlIHJhaXNlZC4gS2VlcGluZyB5b3VyIHRvcnNvIHN0cmFpZ2h0LCBsb3dlciBzbG93bHkgdW50aWwgeW91ciBiYWNrIGtuZWUgYWxtb3N0IHRvdWNoZXMgdGhlIGZsb29yLCB0aGVuIHB1c2ggYmFjayB1cC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zcGxpdF9zcXVhdF9sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9U0ZTWlZLenFuWEFcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTMsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNwbGl0IHNxdWF0IHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiRnJvbSBhIHN0YW5kaW5nIHBvc2l0aW9uLCB0YWtlIGEgbG9uZyBzdGVwIGZvcndhcmQgYXMgaWYgcGVyZm9ybWluZyBhIGx1bmdlLiBUaGUgaGVlbCBvZiB5b3VyIGJhY2sgZm9vdCBzaG91bGQgYmUgcmFpc2VkLiBLZWVwaW5nIHlvdXIgdG9yc28gc3RyYWlnaHQsIGxvd2VyIHNsb3dseSB1bnRpbCB5b3VyIGJhY2sga25lZSBhbG1vc3QgdG91Y2hlcyB0aGUgZmxvb3IsIHRoZW4gcHVzaCBiYWNrIHVwLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NwbGl0X3NxdWF0X2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1TRlNaVkt6cW5YQVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxNCxcclxuICAgICAgICAgICAgdGl0bGU6IFwiZG9ua2V5IGtpY2tzIGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciBsZWZ0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTRyYW5WUURxbGFVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE1LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJkb25rZXkga2lja3MgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciByaWdodCBsZWcgYW5kIHNxdWVlemUgeW91ciBidXR0IGFzIG11Y2ggYXMgeW91IGNhbi4gS2VlcCB5b3VyIGNvcmUgdGlnaHQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZG9ua2V5X2tpY2tzX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NHJhblZRRHFsYVVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTYsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNxdWF0c1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHdpdGggZmVldCBhIGxpdHRsZSB3aWRlciB0aGFuIGhpcCB3aWR0aCwgdGhlbiBsb3dlciB5b3VyIGJvZHkgdW50aWwgeW91ciB0aGlnaHMgYXJlIHBhcmFsbGVsIHdpdGggdGhlIGZsb29yLiBZb3VyIGtuZWVzIHNob3VsZCBiZSBleHRlbmRlZCBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgeW91ciB0b2VzLiBUaGlzIGV4ZXJjaXNlIHdvcmtzIHRoZSB0aGlnaHMgaGlwcyBidXR0b2NrcywgcXVhZHMsIGhhbXN0cmluZ3MgYW5kIGxvd2VyIGJvZHkuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc3F1YXRzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NDJiRm9kUGFoQlVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTcsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJ1dHQgYnJpZGdlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIGtuZWVzIGJlbnQsIGZlZXQgZmxhdCBvbiB0aGUgZmxvb3IgYW5kIGFybXMgYXQgeW91ciBzaWRlcy4gUHVzaCB5b3VyIGhpcHMgdXAsIGhvbGQgZm9yIG9uZSBzZWNvbmQgYW5kIHNsb3dseSBsb3dlciBkb3duLiBUaGlzIGV4ZXJjaXNlIHdvcmtzIHlvdXIgZ2x1dGVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2J1dHRfYnJpZGdlLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OXFvNDhDWU4wNndcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTgsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJvdHRvbSBsZWcgbGlmdCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgbGVmdCBzaWRlIHdpdGggeW91ciBoZWFkIHJlc3Rpbmcgb24geW91ciBsZWZ0IGhhbmQuIFRoZW4gcHV0IHlvdXIgcmlnaHQgZm9vdCBmb3J3YXJkIG9uIHRoZSBmbG9vciBMaWZ0IHlvdXIgbGVmdCBsZWcgdXAgYW5kIGRvd24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYm90dG9tX2xlZ19saWZ0X2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1EbTFHU1gxdkl0WVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxOSxcclxuICAgICAgICAgICAgdGl0bGU6IFwiYm90dG9tIGxlZyBsaWZ0IHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgcmlnaHQgc2lkZSB3aXRoIHlvdXIgaGVhZCByZXN0aW5nIG9uIHlvdXIgcmlnaHQgaGFuZC4gVGhlbiBwdXQgeW91ciBsZWZ0IGZvb3QgZm9yd2FyZCBvbiB0aGUgZmxvb3IgTGlmdCB5b3VyIHJpZ2h0IGxlZyB1cCBhbmQgZG93bi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9ib3R0b21fbGVnX2xpZnRfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1EbTFHU1gxdkl0WVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyMCxcclxuICAgICAgICAgICAgdGl0bGU6IFwibHVuZ2VzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhcnQgaW4gYSBzdGFuZGluZyBwb3NpdGlvbiB3aXRoIHlvdXIgZmVldCBoaXAtd2lkdGggYXBhcnQuIFN0ZXAgZm9yd2FyZCBsb25nZXIgdGhhbiBhIHdhbGtpbmcgc3RyaWRlIHNvIG9uZSBsZWcgaXMgYWhlYWQgb2YgeW91ciB0b3JzbyBhbmQgdGhlIG90aGVyIGlzIGJlaGluZC4gWW91ciBmb290IHNob3VsZCBsYW5kIGZsYXQgYW5kIHJlbWFpbiBmbGF0IHdoaWxlIGl0IGlzIG9uIHRoZSBncm91bmQuIFlvdXIgcmVhciBoZWVsIHdpbGwgcmlzZSBvZmYgb2YgdGhlIGdyb3VuZC4gQmVuZCB5b3VyIGtuZWVzIHRvIGFwcHJveGltYXRlbHkgOTAgZGVncmVlcyBhcyB5b3UgbG93ZXIgeW91cnNlbGYuIFJlbWVtYmVyIHRvIGtlZXAgeW91ciB0cnVuayB1cHJpZ2h0IGFuZCBjb3JlIGVuZ2FnZWQuIFRoZW4sIGZvcmNlZnVsbHkgcHVzaCBvZmYgZnJvbSB5b3VyIGZyb250IGxlZyB0byByZXR1cm4gdG8gdGhlIHN0YXJ0aW5nIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2x1bmdlcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXlJYzFZYlZMTVo4XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDIxLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJmaXJlIGh5ZHJhbnQgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkJlZ2luIG9uIHlvdXIgaGFuZHMgYW5kIGtuZWVzIG9uIHRoZSBmbG9vciwgeW91ciBoYW5kcyBkaXJlY3RseSBiZW5lYXRoIHRoZSBzaG91bGRlcnMsIGFuZCBrbmVlcyB1bmRlciB0aGUgaGlwcy4gVGhlbiB0cnkgdG8gbGlmdCB5b3VyIGxlZnQgbGVnIHRvIHRoZSBzaWRlIGF0IGEgOTAgZGVncmVlIGFuZ2xlLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2ZpcmVfaHlkcmFuZF9sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9N0xudWhMaS03OElcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDhcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyMixcclxuICAgICAgICAgICAgdGl0bGU6IFwiZmlyZSBoeWRyYW50IHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiQmVnaW4gb24geW91ciBoYW5kcyBhbmQga25lZXMgb24gdGhlIGZsb29yLCB5b3VyIGhhbmRzIGRpcmVjdGx5IGJlbmVhdGggdGhlIHNob3VsZGVycywgYW5kIGtuZWVzIHVuZGVyIHRoZSBoaXBzLiBUaGVuIHRyeSB0byBsaWZ0IHlvdXIgcmlnaHQgbGVnIHRvIHRoZSBzaWRlIGF0IGEgOTAgZGVncmVlIGFuZ2xlLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2ZpcmVfaHlkcmFuZF9yaWdodC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTdMbnVoTGktNzhJXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIng4XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjMsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNwbGl0IHNxdWF0IGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJGcm9tIGEgc3RhbmRpbmcgcG9zaXRpb24sIHRha2UgYSBsb25nIHN0ZXAgZm9yd2FyZCBhcyBpZiBwZXJmb3JtaW5nIGEgbHVuZ2UuIFRoZSBoZWVsIG9mIHlvdXIgYmFjayBmb290IHNob3VsZCBiZSByYWlzZWQuIEtlZXBpbmcgeW91ciB0b3JzbyBzdHJhaWdodCwgbG93ZXIgc2xvd2x5IHVudGlsIHlvdXIgYmFjayBrbmVlIGFsbW9zdCB0b3VjaGVzIHRoZSBmbG9vciwgdGhlbiBwdXNoIGJhY2sgdXAuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc3BsaXRfc3F1YXRfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVNGU1pWS3pxblhBXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIng4XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjQsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNwbGl0IHNxdWF0IHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiRnJvbSBhIHN0YW5kaW5nIHBvc2l0aW9uLCB0YWtlIGEgbG9uZyBzdGVwIGZvcndhcmQgYXMgaWYgcGVyZm9ybWluZyBhIGx1bmdlLiBUaGUgaGVlbCBvZiB5b3VyIGJhY2sgZm9vdCBzaG91bGQgYmUgcmFpc2VkLiBLZWVwaW5nIHlvdXIgdG9yc28gc3RyYWlnaHQsIGxvd2VyIHNsb3dseSB1bnRpbCB5b3VyIGJhY2sga25lZSBhbG1vc3QgdG91Y2hlcyB0aGUgZmxvb3IsIHRoZW4gcHVzaCBiYWNrIHVwLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NwbGl0X3NxdWF0X2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1TRlNaVkt6cW5YQVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4OFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDI1LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJrbmVlbGluZyBsdW5nZSBzdHJldGNoIGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJLbmVlbCBvbiBhIG1hdCB3aXRoIGJvdGgga25lZXMsIHRoZW4gcGxhY2Ugb25lIGZvb3QgZm9yd2FyZCBzbyB0aGF0IHlvdSBoYXZlIGEgOTAtZGVncmVlIGFuZ2xlIGF0IHRoZSBoaXAgYW5kIGtuZWUuIFBsYWNlIHlvdXIgaGFuZHMgb24gdGhlIGZyb250IGtuZWUgZm9yIHN1cHBvcnQgKGlmIG5lZWRlZCkuIFRoaXMgaXMgdGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBrbmVlbGluZyBoaXAgZmxleG9yIHN0cmV0Y2guIEtlZXBpbmcgdGhlIHRvcnNvIHVwcmlnaHQsIHNsb3dseSBsZWFuIGZvcndhcmQgdW50aWwgeW91IGZlZWwgYSBjb21mb3J0YWJsZSBzdHJldGNoIHRocm91Z2ggdGhlIGdyb2luIGFuZCB0b3Agb2YgdGhlIHRoaWdoIChyZWFyIGxlZykuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMva25lZWxpbmdfbHVuZ2Vfc3RyZXRjaF9sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9M3d0aG12S1dvT1VcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyNixcclxuICAgICAgICAgICAgdGl0bGU6IFwia25lZWxpbmcgbHVuZ2Ugc3RyZXRjaCByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIktuZWVsIG9uIGEgbWF0IHdpdGggYm90aCBrbmVlcywgdGhlbiBwbGFjZSBvbmUgZm9vdCBmb3J3YXJkIHNvIHRoYXQgeW91IGhhdmUgYSA5MC1kZWdyZWUgYW5nbGUgYXQgdGhlIGhpcCBhbmQga25lZS4gUGxhY2UgeW91ciBoYW5kcyBvbiB0aGUgZnJvbnQga25lZSBmb3Igc3VwcG9ydCAoaWYgbmVlZGVkKS4gVGhpcyBpcyB0aGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIGtuZWVsaW5nIGhpcCBmbGV4b3Igc3RyZXRjaC4gS2VlcGluZyB0aGUgdG9yc28gdXByaWdodCwgc2xvd2x5IGxlYW4gZm9yd2FyZCB1bnRpbCB5b3UgZmVlbCBhIGNvbWZvcnRhYmxlIHN0cmV0Y2ggdGhyb3VnaCB0aGUgZ3JvaW4gYW5kIHRvcCBvZiB0aGUgdGhpZ2ggKHJlYXIgbGVnKS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9rbmVlbGluZ19sdW5nZV9zdHJldGNoX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9M3d0aG12S1dvT1VcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGlkOiA2LFxyXG4gICAgICAgIHRpdGxlOiBcIkJVVFQgYWR2YW5jZWRcIixcclxuICAgICAgICBleGVyY2lzZXNBbXQ6IFwiMzJcIixcclxuICAgICAgICBleGVyY2lzZXNUaW1lOiBcIjI0XCIsXHJcbiAgICAgICAgY29tcGxleGl0eUxldmVsOiB0cnVlLFxyXG4gICAgICAgIGltYWdlOiBcIi4uL2Fzc2V0cy9wbmcvYnV0dC5wbmdcIixcclxuICAgICAgICBjb2xvcjpcclxuICAgICAgICAgIFwibGluZWFyLWdyYWRpZW50KDkwZGVnLCByZ2JhKDI0NCwxMTcsMTE3LDEpIDAlLCByZ2JhKDI1NSwyMDksMjA5LDEpIDEwMCUpXCIsXHJcbiAgICAgICAgZXhlcmNpc2VzOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJoaWdoIHN0ZXBwaW5nXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiUnVuIGluIHBsYWNlIHdoaWxlIHB1bGxpbmcgeW91IGtuZWVzIGFzIGhpZ2ggYXMgcG9zc2libGUgd2l0aCBlYWNoIHN0ZXAuIERvIGl0IGFzIGZhc3QgYXMgeW91IGNhbi4gS2VlcCB5b3VyIGJhY2sgc3RyYWlnaHRcIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9oaWdoX3N0ZXBwaW5nLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Q214cjl4Y05oZ1VcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJidXR0IGtpY2tzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiUnVuIGluIHBsYWNlIHdoaWxlIGtpY2tpbmcgeW91ciBoZWVsIHVwIHRvIHRvdWNoIHlvdXIgYnV0dCB3aXRoIGVhY2ggc3RlcC4gVHJ5IHRvIGRvIGl0IGFzIGZhc3QgYXMgeW91IGNhbi4gS2VlcCB5b3VyIGNoZXN0IHVwLCB0aWdodGVuIHlvdXIgYWJzLiBJdCdzIGEgZ3JlYXQgZXhlcmNpc2UgZm9yIHRoZSBnbHV0ZXVzIGFuZCBoYW1zdHJpbmdzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2J1dHRfa2lja3MuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj12WFZQdlkxVWJKSVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDMsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNxdWF0c1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHdpdGggZmVldCBhIGxpdHRsZSB3aWRlciB0aGFuIGhpcCB3aWR0aCwgdGhlbiBsb3dlciB5b3VyIGJvZHkgdW50aWwgeW91ciB0aGlnaHMgYXJlIHBhcmFsbGVsIHdpdGggdGhlIGZsb29yLiBZb3VyIGtuZWVzIHNob3VsZCBiZSBleHRlbmRlZCBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgeW91ciB0b2VzLiBUaGlzIGV4ZXJjaXNlIHdvcmtzIHRoZSB0aGlnaHMgaGlwcyBidXR0b2NrcywgcXVhZHMsIGhhbXN0cmluZ3MgYW5kIGxvd2VyIGJvZHkuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc3F1YXRzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NDJiRm9kUGFoQlVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE1XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNCxcclxuICAgICAgICAgICAgdGl0bGU6IFwiZG9ua2V5IGtpY2tzIGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciBsZWZ0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTRyYW5WUURxbGFVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImRvbmtleSBraWNrcyByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YXJ0IHdpdGggeW91ciBrbmVlcyB1bmRlciB5b3VyIGJ1dHQgYW5kIHlvdXIgaGFuZHMgdW5kZXIgeW91ciBzaG91bGRlcnMuIFRoZW4gbGlmdCB5b3VyIHJpZ2h0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj00cmFuVlFEcWxhVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA2LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJidXR0IGJyaWRnZVwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCBrbmVlcyBiZW50LCBmZWV0IGZsYXQgb24gdGhlIGZsb29yIGFuZCBhcm1zIGF0IHlvdXIgc2lkZXMuIFB1c2ggeW91ciBoaXBzIHVwLCBob2xkIGZvciBvbmUgc2Vjb25kIGFuZCBzbG93bHkgbG93ZXIgZG93bi4gVGhpcyBleGVyY2lzZSB3b3JrcyB5b3VyIGdsdXRlcy5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9idXR0X2JyaWRnZS5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTlxbzQ4Q1lOMDZ3XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNVwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDcsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImN1cnRzeSBsdW5nZXNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFuZCB3aXRoIHlvdXIgZmVldCBoaXAtd2lkdGggYXBhcnQsIGhhbmRzIG9uIHlvdXIgaGlwcy4gVGFrZSBhIGJpZyBzdGVwIGJhY2sgd2l0aCB5b3VyIHJpZ2h0IGxlZywgY3Jvc3NpbmcgaXQgYmVoaW5kIHlvdXIgbGVmdC4gQmVuZCB5b3VyIGtuZWVzIGFuZCBsb3dlciB5b3VyIGhpcHMgdW50aWwgeW91ciBsZWZ0IHRoaWdoIGlzIG5lYXJseSBwYXJhbGxlbCB0byB0aGUgZmxvb3IuIEtlZXAgeW91ciB0b3JzbyB1cHJpZ2h0IGFuZCB5b3VyIGhpcHMgYW5kIHNob3VsZGVycyBhcyBzcXVhcmUgYXMgcG9zc2libGUgdG8gdGhlIHdhbGwgaW4gZnJvbnQgb2YgeW91LiBUaGVuIHJlcGVhdCBvbiB0aGUgb3RoZXIgc2lkZS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9jdXJ0c3lfbHVuZ2VzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LXJUeUtsSGpZVDhcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE0XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogOCxcclxuICAgICAgICAgICAgdGl0bGU6IFwibW91bnRhaW4gY2xpbWJlclwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlB1dCBib3RoIGhhbmRzIGFuZCBrbmVlcyBvbiB0aGUgZmxvb3IuIFBsYWNlIHlvdXIgcmlnaHQgZm9vdCBuZWFyIHlvdXIgcmlnaHQgaGFuZCBhbmQgZXh0ZW5kIHlvdXIgbGVmdCBsZWcgYmVoaW5kIHlvdS4gSW4gb25lIHNtb290aCBtb3Rpb24gc3dpdGNoIHlvdXIgbGVncywga2VlcGluZyB5b3VyIGFybXMgaW4gdGhlIHNhbWUgcG9zaXRpb24uIFN3aXRjaCB5b3VyIGxlZ3MgYmFjayBhbmQgZm9ydGggdHdpY2UsIHN1Y2ggdGhhdCB5b3VyIHJpZ2h0IGxlZyBpcyBhZ2FpbiBjbG9zZSB0byB5b3VyIHJpZ2h0IGhhbmQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvbW91bnRhaW5fY2xpbWJlci5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXdRcTN5YmFMWmVBXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDksXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImx1bmdlIGtuZWUgaG9wcyByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkZyb20gYSBzdGFuZGluZyBwb3NpdGlvbiwgc3RlcCBiYWNrIGludG8gYSBsdW5nZS4gQnJpbmcgc2FtZSBsZWcgaW4gZnJvbnQgd2l0aCBrbmVlIGJlbnQuIEhvcCBvZmYgdGhlIGdyb3VuZCwgYnJpbmdpbmcga25lZXMgYXMgaGlnaHQgYXMgeW91IGNhbi4gUmVwZWF0IHdpdGggc2FtZSBsZWcgZm9yIHRoaXMgc2VnbWVudC4gU3dpdGNoIGxlZ3MgZm9yIGVhY2ggZm9sbG93aW5nIHNlZ21lbnQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvbHVuZ2Vfa25lZV9ob3BzX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TlN5M1FLc1o3dUlcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTAsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImx1bmdlIGtuZWUgaG9wcyBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiRnJvbSBhIHN0YW5kaW5nIHBvc2l0aW9uLCBzdGVwIGJhY2sgaW50byBhIGx1bmdlLiBCcmluZyBzYW1lIGxlZyBpbiBmcm9udCB3aXRoIGtuZWUgYmVudC4gSG9wIG9mZiB0aGUgZ3JvdW5kLCBicmluZ2luZyBrbmVlcyBhcyBoaWdodCBhcyB5b3UgY2FuLiBSZXBlYXQgd2l0aCBzYW1lIGxlZyBmb3IgdGhpcyBzZWdtZW50LiBTd2l0Y2ggbGVncyBmb3IgZWFjaCBmb2xsb3dpbmcgc2VnbWVudC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9sdW5nZV9rbmVlX2hvcHNfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PU5TeTNRS3NaN3VJXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDExLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJmbHV0dGVyIGtpY2tzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgYXJtcyBhdCB5b3VyIHNpZGVzIGFuZCBsZWdzIHNsaWdodGx5IGxpZnRlZC4gVGhlbiBxdWlja2x5IHJhaXNlIHlvdXIgcmlnaHQgbGVnIHVwLCBhbmQgc2ltdWx0YW5lb3VzIGxvd2VyIHlvdXIgbGVmdCBoYW5kLiBUaGlzIGV4ZXJjaXNlIGNhbiBpbmNyZWFzZSBjb3JlIHN0cmVuZ3RoIGFuZCBpbXByb3ZlIHlvdXIgZW5kdXJhbmNlLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2ZsdXR0ZXJfa2lja3MuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1LNXd1TV9nTld5d1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEyLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJiZW5jaCBnbHV0ZSBraWNrIGJhY2sgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTYW1lIHdpdGggZ2x1dGUga2lja2JhY2tzLCBqdXN0IHdvcmsgd2l0aCBhIGJlbmNoLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2JlbmNoX2dsdXRlX2tpY2tfYmFja19sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TWk0SDZZVVZNQ1FcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE2XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTMsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJlbmNoIGdsdXRlIGtpY2sgYmFjayByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTYW1lIHdpdGggZ2x1dGUga2lja2JhY2tzLCBqdXN0IHdvcmsgd2l0aCBhIGJlbmNoLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2JlbmNoX2dsdXRlX2tpY2tfYmFja19yaWdodC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PU1pNEg2WVVWTUNRXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE0LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzdW1vIHNxdWF0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhcnQgaW4gYSB0cmFkaXRpb25hbCBzcXVhdCBzdGFuY2Ugd2l0aCB5b3VyIGZlZXQgYWJvdXQgc2hvdWxkZXItd2lkdGggYXBhcnQgYW5kIHRvZXMgcG9pbnRlZCBmb3J3YXJkLiBDbGFzcCB5b3VyIGhhbmRzIHRvZ2V0aGVyIGF0IHlvdXIgY2hlc3QuIFRha2UgYSBzdGVwIHRvIHRoZSBzaWRlIHdpdGggeW91ciByaWdodCBmb290IHVudGlsIHlvdXIgc3RhbmNlIGlzIDPigJM0IGZlZXQgd2lkZSwgb3Igd2lkZXIgdGhhbiBoaXAgd2lkdGguIFdpZGVyIGlzIE9LIGFzIGxvbmcgYXMgeW91IGNhbiBwZXJmb3JtIHRoZSBtb3ZlIGNvcnJlY3RseS4gTW92ZSB5b3VyIGhpcHMgYmFjayBzbGlnaHRseSBhbmQgYmVuZCB5b3VyIGtuZWVzIGFzIHlvdSBsb3dlciB5b3VyIGJvZHkgaW50byBhIHNxdWF0IHBvc2l0aW9uLiBEcmF3IHlvdXIgdGFpbGJvbmUgc3RyYWlnaHQgZG93biB0byB0aGUgZmxvb3IuIEJlIG1pbmRmdWwgdG8ga2VlcCB5b3VyIHNwaW5lIG5ldXRyYWwsIGNvcmUgZW5nYWdlZCwgYW5kIGV5ZXMgZm9yd2FyZCB0aHJvdWdob3V0IHRoZSBtb3ZlbWVudC4gTG93ZXIgdW50aWwgeW91ciB0aGlnaHMgYXJlIHBhcmFsbGVsIHRvIHRoZSBmbG9vci4gWW91IGNhbiBnbyBsb3dlciBvciBzaG9ydGVuIHRoZSBzcXVhdCBpZiBwYXJhbGxlbCBpcyB0b28gbG93IG9yIGlmIHlvdSBjYW7igJl0IG1haW50YWluIHlvdXIgbGVnIGFsaWdubWVuLiBQYXVzZSBpbiB0aGUgc3F1YXQgcG9zaXRpb24gZm9yIGEgZmV3IHNlY29uZHMuIFRoZW4sIGVuZ2FnaW5nIHlvdXIgZ2x1dGVzLCBwcmVzcyB1cCB0byBzdGFuZGluZywgZHJpdmluZyB1cCB0aHJvdWdoIHlvdXIgaGVlbHMuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc3F1YXRzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9WjJGMGJBclFINXNcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE1XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpbmdsZSBsZWcgYnJpZGdlIGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJSYWlzZSB5b3VyIGhpcHMsIHRpZ2h0ZW5pbmcgeW91ciBhYmRvbWluYWxzIGFuZCBidXR0b2NrIG11c2NsZXMgdG8gc3VwcG9ydCB0aGUgbGlmdCwgdW50aWwgeW91ciBzaG91bGRlcnMgYW5kIGtuZWVzIGFyZSBpbiBhIHN0cmFpZ2h0IGxpbmUuIFNxdWVlemUgeW91ciBjb3JlIGF0IHRoZSBzYW1lIHRpbWUsIGFzIGlmIHRyeWluZyB0byBwdWxsIHlvdXIgYmVsbHkgYnV0dG9uIGJhY2sgdG93YXJkIHlvdXIgc3BpbmUuIEhvbGQgdGhpcyBwb3NpdGlvbiBmb3IgYSBjb3VudCBvZiBvbmUgb3IgdHdvLiBMb3dlciB0aGUgaGlwcyB0byB0aGUgZmxvb3Igc2xvd2x5IGFuZCB3aXRoIGNvbnRyb2wsIGtlZXBpbmcgdGhlIGxlZyBleHRlbmRlZCwgdG8gcmV0dXJuIHRvIHRoZSBzdGFydGluZyBwb3NpdGlvbi4gUmVwZWF0IG9uIHRoZSBzYW1lIGxlZyBmb3IgdGhlIGRlc2lyZWQgbnVtYmVyIG9mIHJlcHMuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2luZ2xlX2xlZ19icmlkZ2VfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVpndnpSbi0xNnpJXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE2LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzaW5nbGUgbGVnIGJyaWRnZSByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlJhaXNlIHlvdXIgaGlwcywgdGlnaHRlbmluZyB5b3VyIGFiZG9taW5hbHMgYW5kIGJ1dHRvY2sgbXVzY2xlcyB0byBzdXBwb3J0IHRoZSBsaWZ0LCB1bnRpbCB5b3VyIHNob3VsZGVycyBhbmQga25lZXMgYXJlIGluIGEgc3RyYWlnaHQgbGluZS4gU3F1ZWV6ZSB5b3VyIGNvcmUgYXQgdGhlIHNhbWUgdGltZSwgYXMgaWYgdHJ5aW5nIHRvIHB1bGwgeW91ciBiZWxseSBidXR0b24gYmFjayB0b3dhcmQgeW91ciBzcGluZS4gSG9sZCB0aGlzIHBvc2l0aW9uIGZvciBhIGNvdW50IG9mIG9uZSBvciB0d28uIExvd2VyIHRoZSBoaXBzIHRvIHRoZSBmbG9vciBzbG93bHkgYW5kIHdpdGggY29udHJvbCwga2VlcGluZyB0aGUgbGVnIGV4dGVuZGVkLCB0byByZXR1cm4gdG8gdGhlIHN0YXJ0aW5nIHBvc2l0aW9uLiBSZXBlYXQgb24gdGhlIHNhbWUgbGVnIGZvciB0aGUgZGVzaXJlZCBudW1iZXIgb2YgcmVwcy5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zaW5nbGVfbGVnX2JyaWRnZV9yaWdodC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVpndnpSbi0xNnpJXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE3LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJqdW1waW5nIHNxdWF0c1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHdpdGggZmVldCBzaG91bGRlciB3aWR0aCBhbmQga25lZXMgc2xpZ2h0bHkgYmVudC4gU3RhcnQgYnkgZG9pbmcgYSByZWd1bGFyIHNxdWF0LiBlbmdhZ2UgeW91ciBjb3JlLCBhbmQganVtcCB1cCBleHBsb3NpdmVseS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9qdW1waW5nX3NxdWF0cy53ZWJwXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj10eExFLWpPQ0VzY1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxOCxcclxuICAgICAgICAgICAgdGl0bGU6IFwiZG9ua2V5IGtpY2tzIGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciBsZWZ0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTRyYW5WUURxbGFVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE5LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJkb25rZXkga2lja3MgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciByaWdodCBsZWcgYW5kIHNxdWVlemUgeW91ciBidXR0IGFzIG11Y2ggYXMgeW91IGNhbi4gS2VlcCB5b3VyIGNvcmUgdGlnaHQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZG9ua2V5X2tpY2tzX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NHJhblZRRHFsYVVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjAsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJ1dHQgYnJpZGdlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIGtuZWVzIGJlbnQsIGZlZXQgZmxhdCBvbiB0aGUgZmxvb3IgYW5kIGFybXMgYXQgeW91ciBzaWRlcy4gUHVzaCB5b3VyIGhpcHMgdXAsIGhvbGQgZm9yIG9uZSBzZWNvbmQgYW5kIHNsb3dseSBsb3dlciBkb3duLiBUaGlzIGV4ZXJjaXNlIHdvcmtzIHlvdXIgZ2x1dGVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2J1dHRfYnJpZGdlLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OXFvNDhDWU4wNndcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImN1cnRzeSBsdW5nZXNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFuZCB3aXRoIHlvdXIgZmVldCBoaXAtd2lkdGggYXBhcnQsIGhhbmRzIG9uIHlvdXIgaGlwcy4gVGFrZSBhIGJpZyBzdGVwIGJhY2sgd2l0aCB5b3VyIHJpZ2h0IGxlZywgY3Jvc3NpbmcgaXQgYmVoaW5kIHlvdXIgbGVmdC4gQmVuZCB5b3VyIGtuZWVzIGFuZCBsb3dlciB5b3VyIGhpcHMgdW50aWwgeW91ciBsZWZ0IHRoaWdoIGlzIG5lYXJseSBwYXJhbGxlbCB0byB0aGUgZmxvb3IuIEtlZXAgeW91ciB0b3JzbyB1cHJpZ2h0IGFuZCB5b3VyIGhpcHMgYW5kIHNob3VsZGVycyBhcyBzcXVhcmUgYXMgcG9zc2libGUgdG8gdGhlIHdhbGwgaW4gZnJvbnQgb2YgeW91LiBUaGVuIHJlcGVhdCBvbiB0aGUgb3RoZXIgc2lkZS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9jdXJ0c3lfbHVuZ2VzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LXJUeUtsSGpZVDhcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjIsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcIm1vdW50YWluIGNsaW1iZXJcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJQdXQgYm90aCBoYW5kcyBhbmQga25lZXMgb24gdGhlIGZsb29yLiBQbGFjZSB5b3VyIHJpZ2h0IGZvb3QgbmVhciB5b3VyIHJpZ2h0IGhhbmQgYW5kIGV4dGVuZCB5b3VyIGxlZnQgbGVnIGJlaGluZCB5b3UuIEluIG9uZSBzbW9vdGggbW90aW9uIHN3aXRjaCB5b3VyIGxlZ3MsIGtlZXBpbmcgeW91ciBhcm1zIGluIHRoZSBzYW1lIHBvc2l0aW9uLiBTd2l0Y2ggeW91ciBsZWdzIGJhY2sgYW5kIGZvcnRoIHR3aWNlLCBzdWNoIHRoYXQgeW91ciByaWdodCBsZWcgaXMgYWdhaW4gY2xvc2UgdG8geW91ciByaWdodCBoYW5kLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL21vdW50YWluX2NsaW1iZXIuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13UXEzeWJhTFplQVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyMyxcclxuICAgICAgICAgICAgdGl0bGU6IFwibHVuZ2Uga25lZSBob3BzIGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJGcm9tIGEgc3RhbmRpbmcgcG9zaXRpb24sIHN0ZXAgYmFjayBpbnRvIGEgbHVuZ2UuIEJyaW5nIHNhbWUgbGVnIGluIGZyb250IHdpdGgga25lZSBiZW50LiBIb3Agb2ZmIHRoZSBncm91bmQsIGJyaW5naW5nIGtuZWVzIGFzIGhpZ2h0IGFzIHlvdSBjYW4uIFJlcGVhdCB3aXRoIHNhbWUgbGVnIGZvciB0aGlzIHNlZ21lbnQuIFN3aXRjaCBsZWdzIGZvciBlYWNoIGZvbGxvd2luZyBzZWdtZW50LlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2x1bmdlX2tuZWVfaG9wc19sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TlN5M1FLc1o3dUlcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjQsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImx1bmdlIGtuZWUgaG9wcyByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkZyb20gYSBzdGFuZGluZyBwb3NpdGlvbiwgc3RlcCBiYWNrIGludG8gYSBsdW5nZS4gQnJpbmcgc2FtZSBsZWcgaW4gZnJvbnQgd2l0aCBrbmVlIGJlbnQuIEhvcCBvZmYgdGhlIGdyb3VuZCwgYnJpbmdpbmcga25lZXMgYXMgaGlnaHQgYXMgeW91IGNhbi4gUmVwZWF0IHdpdGggc2FtZSBsZWcgZm9yIHRoaXMgc2VnbWVudC4gU3dpdGNoIGxlZ3MgZm9yIGVhY2ggZm9sbG93aW5nIHNlZ21lbnQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvbHVuZ2Vfa25lZV9ob3BzX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TlN5M1FLc1o3dUlcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImZsdXR0ZXIga2lja3NcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBiYWNrIHdpdGggeW91ciBhcm1zIGF0IHlvdXIgc2lkZXMgYW5kIGxlZ3Mgc2xpZ2h0bHkgbGlmdGVkLiBUaGVuIHF1aWNrbHkgcmFpc2UgeW91ciByaWdodCBsZWcgdXAsIGFuZCBzaW11bHRhbmVvdXMgbG93ZXIgeW91ciBsZWZ0IGhhbmQuIFRoaXMgZXhlcmNpc2UgY2FuIGluY3JlYXNlIGNvcmUgc3RyZW5ndGggYW5kIGltcHJvdmUgeW91ciBlbmR1cmFuY2UuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZmx1dHRlcl9raWNrcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUs1d3VNX2dOV3l3XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjYsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJlbmNoIGdsdXRlIGtpY2sgYmFjayBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlNhbWUgd2l0aCBnbHV0ZSBraWNrYmFja3MsIGp1c3Qgd29yayB3aXRoIGEgYmVuY2guXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYmVuY2hfZ2x1dGVfa2lja19iYWNrX2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1NaTRINllVVk1DUVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTRcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyNyxcclxuICAgICAgICAgICAgdGl0bGU6IFwiYmVuY2ggZ2x1dGUga2ljayBiYWNrIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlNhbWUgd2l0aCBnbHV0ZSBraWNrYmFja3MsIGp1c3Qgd29yayB3aXRoIGEgYmVuY2guXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYmVuY2hfZ2x1dGVfa2lja19iYWNrX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TWk0SDZZVVZNQ1FcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE0XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjgsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInN1bW8gc3F1YXRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCBpbiBhIHRyYWRpdGlvbmFsIHNxdWF0IHN0YW5jZSB3aXRoIHlvdXIgZmVldCBhYm91dCBzaG91bGRlci13aWR0aCBhcGFydCBhbmQgdG9lcyBwb2ludGVkIGZvcndhcmQuIENsYXNwIHlvdXIgaGFuZHMgdG9nZXRoZXIgYXQgeW91ciBjaGVzdC4gVGFrZSBhIHN0ZXAgdG8gdGhlIHNpZGUgd2l0aCB5b3VyIHJpZ2h0IGZvb3QgdW50aWwgeW91ciBzdGFuY2UgaXMgM+KAkzQgZmVldCB3aWRlLCBvciB3aWRlciB0aGFuIGhpcCB3aWR0aC4gV2lkZXIgaXMgT0sgYXMgbG9uZyBhcyB5b3UgY2FuIHBlcmZvcm0gdGhlIG1vdmUgY29ycmVjdGx5LiBNb3ZlIHlvdXIgaGlwcyBiYWNrIHNsaWdodGx5IGFuZCBiZW5kIHlvdXIga25lZXMgYXMgeW91IGxvd2VyIHlvdXIgYm9keSBpbnRvIGEgc3F1YXQgcG9zaXRpb24uIERyYXcgeW91ciB0YWlsYm9uZSBzdHJhaWdodCBkb3duIHRvIHRoZSBmbG9vci4gQmUgbWluZGZ1bCB0byBrZWVwIHlvdXIgc3BpbmUgbmV1dHJhbCwgY29yZSBlbmdhZ2VkLCBhbmQgZXllcyBmb3J3YXJkIHRocm91Z2hvdXQgdGhlIG1vdmVtZW50LiBMb3dlciB1bnRpbCB5b3VyIHRoaWdocyBhcmUgcGFyYWxsZWwgdG8gdGhlIGZsb29yLiBZb3UgY2FuIGdvIGxvd2VyIG9yIHNob3J0ZW4gdGhlIHNxdWF0IGlmIHBhcmFsbGVsIGlzIHRvbyBsb3cgb3IgaWYgeW91IGNhbuKAmXQgbWFpbnRhaW4geW91ciBsZWcgYWxpZ25tZW4uIFBhdXNlIGluIHRoZSBzcXVhdCBwb3NpdGlvbiBmb3IgYSBmZXcgc2Vjb25kcy4gVGhlbiwgZW5nYWdpbmcgeW91ciBnbHV0ZXMsIHByZXNzIHVwIHRvIHN0YW5kaW5nLCBkcml2aW5nIHVwIHRocm91Z2ggeW91ciBoZWVscy5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zcXVhdHMuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1aMkYwYkFyUUg1c1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyOSxcclxuICAgICAgICAgICAgdGl0bGU6IFwic2luZ2xlIGxlZyBicmlkZ2UgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlJhaXNlIHlvdXIgaGlwcywgdGlnaHRlbmluZyB5b3VyIGFiZG9taW5hbHMgYW5kIGJ1dHRvY2sgbXVzY2xlcyB0byBzdXBwb3J0IHRoZSBsaWZ0LCB1bnRpbCB5b3VyIHNob3VsZGVycyBhbmQga25lZXMgYXJlIGluIGEgc3RyYWlnaHQgbGluZS4gU3F1ZWV6ZSB5b3VyIGNvcmUgYXQgdGhlIHNhbWUgdGltZSwgYXMgaWYgdHJ5aW5nIHRvIHB1bGwgeW91ciBiZWxseSBidXR0b24gYmFjayB0b3dhcmQgeW91ciBzcGluZS4gSG9sZCB0aGlzIHBvc2l0aW9uIGZvciBhIGNvdW50IG9mIG9uZSBvciB0d28uIExvd2VyIHRoZSBoaXBzIHRvIHRoZSBmbG9vciBzbG93bHkgYW5kIHdpdGggY29udHJvbCwga2VlcGluZyB0aGUgbGVnIGV4dGVuZGVkLCB0byByZXR1cm4gdG8gdGhlIHN0YXJ0aW5nIHBvc2l0aW9uLiBSZXBlYXQgb24gdGhlIHNhbWUgbGVnIGZvciB0aGUgZGVzaXJlZCBudW1iZXIgb2YgcmVwcy5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zaW5nbGVfbGVnX2JyaWRnZV9sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Wmd2elJuLTE2eklcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMzAsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpbmdsZSBsZWcgYnJpZGdlIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiUmFpc2UgeW91ciBoaXBzLCB0aWdodGVuaW5nIHlvdXIgYWJkb21pbmFscyBhbmQgYnV0dG9jayBtdXNjbGVzIHRvIHN1cHBvcnQgdGhlIGxpZnQsIHVudGlsIHlvdXIgc2hvdWxkZXJzIGFuZCBrbmVlcyBhcmUgaW4gYSBzdHJhaWdodCBsaW5lLiBTcXVlZXplIHlvdXIgY29yZSBhdCB0aGUgc2FtZSB0aW1lLCBhcyBpZiB0cnlpbmcgdG8gcHVsbCB5b3VyIGJlbGx5IGJ1dHRvbiBiYWNrIHRvd2FyZCB5b3VyIHNwaW5lLiBIb2xkIHRoaXMgcG9zaXRpb24gZm9yIGEgY291bnQgb2Ygb25lIG9yIHR3by4gTG93ZXIgdGhlIGhpcHMgdG8gdGhlIGZsb29yIHNsb3dseSBhbmQgd2l0aCBjb250cm9sLCBrZWVwaW5nIHRoZSBsZWcgZXh0ZW5kZWQsIHRvIHJldHVybiB0byB0aGUgc3RhcnRpbmcgcG9zaXRpb24uIFJlcGVhdCBvbiB0aGUgc2FtZSBsZWcgZm9yIHRoZSBkZXNpcmVkIG51bWJlciBvZiByZXBzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpbmdsZV9sZWdfYnJpZGdlX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Wmd2elJuLTE2eklcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMzEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImtuZWVsaW5nIGx1bmdlIHN0cmV0Y2ggbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIktuZWVsIG9uIGEgbWF0IHdpdGggYm90aCBrbmVlcywgdGhlbiBwbGFjZSBvbmUgZm9vdCBmb3J3YXJkIHNvIHRoYXQgeW91IGhhdmUgYSA5MC1kZWdyZWUgYW5nbGUgYXQgdGhlIGhpcCBhbmQga25lZS4gUGxhY2UgeW91ciBoYW5kcyBvbiB0aGUgZnJvbnQga25lZSBmb3Igc3VwcG9ydCAoaWYgbmVlZGVkKS4gVGhpcyBpcyB0aGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIGtuZWVsaW5nIGhpcCBmbGV4b3Igc3RyZXRjaC4gS2VlcGluZyB0aGUgdG9yc28gdXByaWdodCwgc2xvd2x5IGxlYW4gZm9yd2FyZCB1bnRpbCB5b3UgZmVlbCBhIGNvbWZvcnRhYmxlIHN0cmV0Y2ggdGhyb3VnaCB0aGUgZ3JvaW4gYW5kIHRvcCBvZiB0aGUgdGhpZ2ggKHJlYXIgbGVnKS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9rbmVlbGluZ19sdW5nZV9zdHJldGNoX2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0zd3RobXZLV29PVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDMyLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJrbmVlbGluZyBsdW5nZSBzdHJldGNoIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiS25lZWwgb24gYSBtYXQgd2l0aCBib3RoIGtuZWVzLCB0aGVuIHBsYWNlIG9uZSBmb290IGZvcndhcmQgc28gdGhhdCB5b3UgaGF2ZSBhIDkwLWRlZ3JlZSBhbmdsZSBhdCB0aGUgaGlwIGFuZCBrbmVlLiBQbGFjZSB5b3VyIGhhbmRzIG9uIHRoZSBmcm9udCBrbmVlIGZvciBzdXBwb3J0IChpZiBuZWVkZWQpLiBUaGlzIGlzIHRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUga25lZWxpbmcgaGlwIGZsZXhvciBzdHJldGNoLiBLZWVwaW5nIHRoZSB0b3JzbyB1cHJpZ2h0LCBzbG93bHkgbGVhbiBmb3J3YXJkIHVudGlsIHlvdSBmZWVsIGEgY29tZm9ydGFibGUgc3RyZXRjaCB0aHJvdWdoIHRoZSBncm9pbiBhbmQgdG9wIG9mIHRoZSB0aGlnaCAocmVhciBsZWcpLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2tuZWVsaW5nX2x1bmdlX3N0cmV0Y2hfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0zd3RobXZLV29PVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9LFxyXG4gICAgXSxcclxuICB9LFxyXG4gIHtcclxuICAgIHRpdGxlOiBcIlRISUdIIFdvcmtvdXRzXCIsXHJcbiAgICBpbWFnZTogXCIuLi9hc3NldHMvcG5nL3RoaWdoLnBuZ1wiLFxyXG4gICAgYmxvY2s6IFtcclxuICAgICAge1xyXG4gICAgICAgIGlkOiA3LFxyXG4gICAgICAgIHRpdGxlOiBcIlRISUdIIGJlZ2lubmVyXCIsXHJcbiAgICAgICAgZXhlcmNpc2VzQW10OiBcIjE5XCIsXHJcbiAgICAgICAgZXhlcmNpc2VzVGltZTogXCIxNFwiLFxyXG4gICAgICAgIGNvbXBsZXhpdHlMZXZlbDogdHJ1ZSxcclxuICAgICAgICBpbWFnZTogXCIuLi9hc3NldHMvcG5nL3RoaWdoLnBuZ1wiLFxyXG4gICAgICAgIGNvbG9yOlxyXG4gICAgICAgICAgXCJsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYmEoMjQsMjQwLDIzNywxKSAwJSwgcmdiYSgyMDYsMjQ3LDI0MiwxKSAxMDAlKVwiLFxyXG4gICAgICAgIGV4ZXJjaXNlczogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMSxcclxuICAgICAgICAgICAgdGl0bGU6IFwiaGlnaCBzdGVwcGluZ1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlJ1biBpbiBwbGFjZSB3aGlsZSBwdWxsaW5nIHlvdSBrbmVlcyBhcyBoaWdoIGFzIHBvc3NpYmxlIHdpdGggZWFjaCBzdGVwLiBEbyBpdCBhcyBmYXN0IGFzIHlvdSBjYW4uIEtlZXAgeW91ciBiYWNrIHN0cmFpZ2h0XCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvaGlnaF9zdGVwcGluZy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUNteHI5eGNOaGdVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMixcclxuICAgICAgICAgICAgdGl0bGU6IFwianVtcGluZyBqYWNrc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHVwcmlnaHQgd2l0aCB5b3VyIGxlZ3MgdG9nZXRoZXIsIGFybXMgYXQgeW91ciBzaWRlcyBCZW5kIHlvdXIga25lZXMgc2xpZ2h0bHksIGFuZCBqdW1wIGludG8gdGhlIGFpci4gQXMgeW91IGp1bXAgLCBzcHJlYWQgeW91ciBsZWdzIHRvIGJlIHNob3VsZGVyLXdpZHRoIGFwYXJ0LiBTdHJldGNoIHlvdXIgYXJtcyBvdXQgYW5kIG92ZXIgeW91ciBoZWFkLiBKdW1wIGJhY2sgdG8gc3RhbmRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvanVtcGluZ19qYWNrcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTJXNFpOU3dvV180XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngzMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDMsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNxdWF0c1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHdpdGggZmVldCBhIGxpdHRsZSB3aWRlciB0aGFuIGhpcCB3aWR0aCwgdGhlbiBsb3dlciB5b3VyIGJvZHkgdW50aWwgeW91ciB0aGlnaHMgYXJlIHBhcmFsbGVsIHdpdGggdGhlIGZsb29yLiBZb3VyIGtuZWVzIHNob3VsZCBiZSBleHRlbmRlZCBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgeW91ciB0b2VzLiBUaGlzIGV4ZXJjaXNlIHdvcmtzIHRoZSB0aGlnaHMgaGlwcyBidXR0b2NrcywgcXVhZHMsIGhhbXN0cmluZ3MgYW5kIGxvd2VyIGJvZHkuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc3F1YXRzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NDJiRm9kUGFoQlVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNCxcclxuICAgICAgICAgICAgdGl0bGU6IFwiZG9ua2V5IGtpY2tzIGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciBsZWZ0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTRyYW5WUURxbGFVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImRvbmtleSBraWNrcyByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YXJ0IHdpdGggeW91ciBrbmVlcyB1bmRlciB5b3VyIGJ1dHQgYW5kIHlvdXIgaGFuZHMgdW5kZXIgeW91ciBzaG91bGRlcnMuIFRoZW4gbGlmdCB5b3VyIHJpZ2h0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj00cmFuVlFEcWxhVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA2LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJiYWNrd2FyZCBsdW5nZVwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHRhbGwgd2l0aCB5b3VyIGZlZXQgaGlwIGRpc3RhbmNlIGFwYXJ0LiBUYWtlIGEgbGFyZ2Ugc3RlcCBiYWNrd2FyZCBhbmQgbG93ZXIgeW91ciBib2R5IHRvd2FyZCB0aGUgZmxvb3IuICBCb3RoIGxlZ3Mgc2hvdWxkIGJlIGJlbnQgYXQgYSA5MC1kZWdyZWUgYW5nbGUgYXQgdGhlIGJvdHRvbSBvZiB0aGUgbHVuZ2UuICBSaXNlIGJhY2sgdG8gc3RhcnQgYW5kIHJlcGVhdC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9iYWNrd2FyZF9sdW5nZS5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PV9MR3BEdEVOWjVVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDcsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgbHlpbmcgbGVnIGxpZnQgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBkb3duIG9uIHlvdXIgcmlnaHQgc2lkZSBvbiBhIG1hdCBvciB0aGUgZmxvb3IuIFlvdXIgYm9keSBzaG91bGQgYmUgaW4gYSBzdHJhaWdodCBsaW5lIHdpdGggeW91ciBsZWdzIGV4dGVuZGVkIGFuZCBmZWV0IHN0YWNrZWQgb24gdG9wIG9mIGVhY2ggb3RoZXIuIFBsYWNlIHlvdXIgYXJtIHN0cmFpZ2h0IG9uIHRoZSBmbG9vciB1bmRlciB5b3VyIGhlYWQgb3IgYmVuZCB5b3VyIGVsYm93IGFuZCBjcmFkbGUgeW91ciBoZWFkIGZvciBzdXBwb3J0LiBQbGFjZSB5b3VyIGxlZnQgaGFuZCBvdXQgZnJvbnQgZm9yIGV4dHJhIHN1cHBvcnQgb3IgbGV0IGl0IHJlc3Qgb24geW91ciBsZWcgb3IgaGlwLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfbHlpbmdfbGVnX2xpZnRfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVZsd0JKRTFXdE9RXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDgsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgbHlpbmcgbGVnIGxpZnQgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgZG93biBvbiB5b3VyIGxlZnQgc2lkZSBvbiBhIG1hdCBvciB0aGUgZmxvb3IuIFlvdXIgYm9keSBzaG91bGQgYmUgaW4gYSBzdHJhaWdodCBsaW5lIHdpdGggeW91ciBsZWdzIGV4dGVuZGVkIGFuZCBmZWV0IHN0YWNrZWQgb24gdG9wIG9mIGVhY2ggb3RoZXIuIFBsYWNlIHlvdXIgYXJtIHN0cmFpZ2h0IG9uIHRoZSBmbG9vciB1bmRlciB5b3VyIGhlYWQgb3IgYmVuZCB5b3VyIGVsYm93IGFuZCBjcmFkbGUgeW91ciBoZWFkIGZvciBzdXBwb3J0LiBQbGFjZSB5b3VyIHJpZ2h0IGhhbmQgb3V0IGZyb250IGZvciBleHRyYSBzdXBwb3J0IG9yIGxldCBpdCByZXN0IG9uIHlvdXIgbGVnIG9yIGhpcC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zaWRlX2x5aW5nX2xlZ19saWZ0X3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Vmx3QkpFMVd0T1FcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogOSxcclxuICAgICAgICAgICAgdGl0bGU6IFwiYnVycGVlc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHdpdGggeW91ciBmZWV0IHNob3VsZGVyLXdpZHRoIGFwYXJ0IGFuZCB5b3VyIGFybXMgYnkgeW91ciBzaWRlcy4gTG93ZXIgaW50byBhIHNxdWF0IHBvc2l0aW9uIGFuZCBwbGFjZSB5b3VyIGhhbmRzIG9uIHRoZSBmbG9vci4gS2ljayBvciBzdGVwIHlvdXIgbGVncyBiYWNrIGludG8gYSBwbGFuayBwb3NpdGlvbi4gSnVtcCBvciBzdGVwIHlvdXIgbGVncyBmb3J3YXJkIHRvIHJldHVybiB0byBhIHNxdWF0IHBvc2l0aW9uLiBSZXR1cm4gdG8gdGhlIHN0YW5kaW5nIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2J1cnBlZXMuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj04MThTa0xBUHlLWVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4NVwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEwLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJkb25rZXkga2lja3MgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YXJ0IHdpdGggeW91ciBrbmVlcyB1bmRlciB5b3VyIGJ1dHQgYW5kIHlvdXIgaGFuZHMgdW5kZXIgeW91ciBzaG91bGRlcnMuIFRoZW4gbGlmdCB5b3VyIGxlZnQgbGVnIGFuZCBzcXVlZXplIHlvdXIgYnV0dCBhcyBtdWNoIGFzIHlvdSBjYW4uIEtlZXAgeW91ciBjb3JlIHRpZ2h0LlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2RvbmtleV9raWNrc19sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NHJhblZRRHFsYVVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImRvbmtleSBraWNrcyByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YXJ0IHdpdGggeW91ciBrbmVlcyB1bmRlciB5b3VyIGJ1dHQgYW5kIHlvdXIgaGFuZHMgdW5kZXIgeW91ciBzaG91bGRlcnMuIFRoZW4gbGlmdCB5b3VyIHJpZ2h0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj00cmFuVlFEcWxhVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMixcclxuICAgICAgICAgICAgdGl0bGU6IFwiYmFja3dhcmQgbHVuZ2VcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFuZCB0YWxsIHdpdGggeW91ciBmZWV0IGhpcCBkaXN0YW5jZSBhcGFydC4gVGFrZSBhIGxhcmdlIHN0ZXAgYmFja3dhcmQgYW5kIGxvd2VyIHlvdXIgYm9keSB0b3dhcmQgdGhlIGZsb29yLiAgQm90aCBsZWdzIHNob3VsZCBiZSBiZW50IGF0IGEgOTAtZGVncmVlIGFuZ2xlIGF0IHRoZSBib3R0b20gb2YgdGhlIGx1bmdlLiAgUmlzZSBiYWNrIHRvIHN0YXJ0IGFuZCByZXBlYXQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYmFja3dhcmRfbHVuZ2UuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1fTEdwRHRFTlo1VVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMyxcclxuICAgICAgICAgICAgdGl0bGU6IFwic2lkZSBseWluZyBsZWcgbGlmdCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIGRvd24gb24geW91ciByaWdodCBzaWRlIG9uIGEgbWF0IG9yIHRoZSBmbG9vci4gWW91ciBib2R5IHNob3VsZCBiZSBpbiBhIHN0cmFpZ2h0IGxpbmUgd2l0aCB5b3VyIGxlZ3MgZXh0ZW5kZWQgYW5kIGZlZXQgc3RhY2tlZCBvbiB0b3Agb2YgZWFjaCBvdGhlci4gUGxhY2UgeW91ciBhcm0gc3RyYWlnaHQgb24gdGhlIGZsb29yIHVuZGVyIHlvdXIgaGVhZCBvciBiZW5kIHlvdXIgZWxib3cgYW5kIGNyYWRsZSB5b3VyIGhlYWQgZm9yIHN1cHBvcnQuIFBsYWNlIHlvdXIgbGVmdCBoYW5kIG91dCBmcm9udCBmb3IgZXh0cmEgc3VwcG9ydCBvciBsZXQgaXQgcmVzdCBvbiB5b3VyIGxlZyBvciBoaXAuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2lkZV9seWluZ19sZWdfbGlmdF9sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Vmx3QkpFMVd0T1FcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDhcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxNCxcclxuICAgICAgICAgICAgdGl0bGU6IFwic2lkZSBseWluZyBsZWcgbGlmdCByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBkb3duIG9uIHlvdXIgbGVmdCBzaWRlIG9uIGEgbWF0IG9yIHRoZSBmbG9vci4gWW91ciBib2R5IHNob3VsZCBiZSBpbiBhIHN0cmFpZ2h0IGxpbmUgd2l0aCB5b3VyIGxlZ3MgZXh0ZW5kZWQgYW5kIGZlZXQgc3RhY2tlZCBvbiB0b3Agb2YgZWFjaCBvdGhlci4gUGxhY2UgeW91ciBhcm0gc3RyYWlnaHQgb24gdGhlIGZsb29yIHVuZGVyIHlvdXIgaGVhZCBvciBiZW5kIHlvdXIgZWxib3cgYW5kIGNyYWRsZSB5b3VyIGhlYWQgZm9yIHN1cHBvcnQuIFBsYWNlIHlvdXIgcmlnaHQgaGFuZCBvdXQgZnJvbnQgZm9yIGV4dHJhIHN1cHBvcnQgb3IgbGV0IGl0IHJlc3Qgb24geW91ciBsZWcgb3IgaGlwLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfbHlpbmdfbGVnX2xpZnRfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1WbHdCSkUxV3RPUVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4OFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE1LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJxdWFkIHN0cmV0Y2ggbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHVwIHRhbGwgYW5kIHNoaWZ0IHlvdXIgd2VpZ2h0IHRvIHRoZSByaWdodCBsZWcuIExpZnQgeW91ciBsZWZ0IGZvb3QgYW5kIGdyYXNwIGl0IHdpdGggeW91ciBsZWZ0IGhhbmQuIFB1bGwgdGhlIGxlZnQgZm9vdCB0b3dhcmQgeW91ciBidXR0IHVudGlsIHlvdSBmZWVsIHRoZSBzdHJldGNoIGluIHlvdXIgcXVhZHMuIEhvbGQgdGhpcyBwb3NpdGlvbi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL3F1YWRfc3RyZXRjaF9sZWZ0LmpwZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VGZjUnlZZjdXTGdcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxNixcclxuICAgICAgICAgICAgdGl0bGU6IFwicXVhZCBzdHJldGNoIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgdXAgdGFsbCBhbmQgc2hpZnQgeW91ciB3ZWlnaHQgdG8gdGhlIHJpZ2h0IGxlZy4gTGlmdCB5b3VyIHJpZ2h0IGZvb3QgYW5kIGdyYXNwIGl0IHdpdGggeW91ciBsZWZ0IGhhbmQuIFB1bGwgdGhlIGxlZnQgZm9vdCB0b3dhcmQgeW91ciBidXR0IHVudGlsIHlvdSBmZWVsIHRoZSBzdHJldGNoIGluIHlvdXIgcXVhZHMuIEhvbGQgdGhpcyBwb3NpdGlvbi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL3F1YWRfc3RyZXRjaF9yaWdodC5qcGdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVRmY1J5WWY3V0xnXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTcsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImtuZWUgdG8gY2hlc3Qgc3RyZXRjaCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgbGVncyBleHRlbmRlZCBhbmQgYmFjayBzdHJhaWdodC4gS2VlcCB5b3VyIGhpcHMgbGV2ZWwgYW5kIHlvdXIgbG93ZXIgYmFjayBkb3duIG9uIHRoZSBmbG9vci4gUHVsbCB5b3VyIGxlZnQga25lZSB0b3dhcmRzIHlvdXIgY2hlc3QgYXMgbXVjaCBhcyB5b3UgY2FuIHdoaWxlIGtlZXBpbmcgeW91ciByaWdodCBsZWcgc3RyYWlnaHQgb24gdGhlIGdyb3VuZC4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMva25lZV90b19jaGVzdF9sZWZ0LmpwZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9YkptczlZeWpvQklcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxOCxcclxuICAgICAgICAgICAgdGl0bGU6IFwia25lZSB0byBjaGVzdCBzdHJldGNoIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgbGVncyBleHRlbmRlZCBhbmQgYmFjayBzdHJhaWdodC4gS2VlcCB5b3VyIGhpcHMgbGV2ZWwgYW5kIHlvdXIgbG93ZXIgYmFjayBkb3duIG9uIHRoZSBmbG9vci4gUHVsbCB5b3VyIHJpZ2h0IGtuZWUgdG93YXJkcyB5b3VyIGNoZXN0IGFzIG11Y2ggYXMgeW91IGNhbiB3aGlsZSBrZWVwaW5nIHlvdXIgbGVmdCBsZWcgc3RyYWlnaHQgb24gdGhlIGdyb3VuZC4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMva25lZV90b19jaGVzdF9yaWdodC5qcGdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWJKbXM5WXlqb0JJXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogOCxcclxuICAgICAgICB0aXRsZTogXCJUSElHSCBpbnRlcm1lZGlhdGVcIixcclxuICAgICAgICBleGVyY2lzZXNBbXQ6IFwiMjZcIixcclxuICAgICAgICBleGVyY2lzZXNUaW1lOiBcIjE5XCIsXHJcbiAgICAgICAgY29tcGxleGl0eUxldmVsOiB0cnVlLFxyXG4gICAgICAgIGltYWdlOiBcIi4uL2Fzc2V0cy9wbmcvdGhpZ2gucG5nXCIsXHJcbiAgICAgICAgY29sb3I6XHJcbiAgICAgICAgICBcImxpbmVhci1ncmFkaWVudCg5MGRlZywgcmdiYSgxMTMsMTc5LDIzNSwxKSAwJSwgcmdiYSgyMDIsMjI3LDI0OSwxKSAxMDAlKVwiLFxyXG4gICAgICAgIGV4ZXJjaXNlczogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMSxcclxuICAgICAgICAgICAgdGl0bGU6IFwic2lkZSBob3BcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJKdW1wIHdpdGggYm90aCBmZWV0IHRvIHRoZSByaWdodCBhbmQgdGhlbiB0byB0aGUgbGVmdCwgaW4gYSBxdWljaywgcmVwZXRpdGl2ZSBtb3ZlbWVudFwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfaG9wLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9blltVUVKSUJqM2NcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJoaWdoIHN0ZXBwaW5nXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiUnVuIGluIHBsYWNlIHdoaWxlIHB1bGxpbmcgeW91IGtuZWVzIGFzIGhpZ2ggYXMgcG9zc2libGUgd2l0aCBlYWNoIHN0ZXAuIERvIGl0IGFzIGZhc3QgYXMgeW91IGNhbi4gS2VlcCB5b3VyIGJhY2sgc3RyYWlnaHRcIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9oaWdoX3N0ZXBwaW5nLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Q214cjl4Y05oZ1VcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAzLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJsdW5nZXNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCBpbiBhIHN0YW5kaW5nIHBvc2l0aW9uIHdpdGggeW91ciBmZWV0IGhpcC13aWR0aCBhcGFydC4gU3RlcCBmb3J3YXJkIGxvbmdlciB0aGFuIGEgd2Fsa2luZyBzdHJpZGUgc28gb25lIGxlZyBpcyBhaGVhZCBvZiB5b3VyIHRvcnNvIGFuZCB0aGUgb3RoZXIgaXMgYmVoaW5kLiBZb3VyIGZvb3Qgc2hvdWxkIGxhbmQgZmxhdCBhbmQgcmVtYWluIGZsYXQgd2hpbGUgaXQgaXMgb24gdGhlIGdyb3VuZC4gWW91ciByZWFyIGhlZWwgd2lsbCByaXNlIG9mZiBvZiB0aGUgZ3JvdW5kLiBCZW5kIHlvdXIga25lZXMgdG8gYXBwcm94aW1hdGVseSA5MCBkZWdyZWVzIGFzIHlvdSBsb3dlciB5b3Vyc2VsZi4gUmVtZW1iZXIgdG8ga2VlcCB5b3VyIHRydW5rIHVwcmlnaHQgYW5kIGNvcmUgZW5nYWdlZC4gVGhlbiwgZm9yY2VmdWxseSBwdXNoIG9mZiBmcm9tIHlvdXIgZnJvbnQgbGVnIHRvIHJldHVybiB0byB0aGUgc3RhcnRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvbHVuZ2VzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9eUljMVliVkxNWjhcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE0XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNCxcclxuICAgICAgICAgICAgdGl0bGU6IFwiZG9ua2V5IGtpY2tzIGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciBsZWZ0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTRyYW5WUURxbGFVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImRvbmtleSBraWNrcyByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YXJ0IHdpdGggeW91ciBrbmVlcyB1bmRlciB5b3VyIGJ1dHQgYW5kIHlvdXIgaGFuZHMgdW5kZXIgeW91ciBzaG91bGRlcnMuIFRoZW4gbGlmdCB5b3VyIHJpZ2h0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj00cmFuVlFEcWxhVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA2LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzdW1vIHNxdWF0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhcnQgaW4gYSB0cmFkaXRpb25hbCBzcXVhdCBzdGFuY2Ugd2l0aCB5b3VyIGZlZXQgYWJvdXQgc2hvdWxkZXItd2lkdGggYXBhcnQgYW5kIHRvZXMgcG9pbnRlZCBmb3J3YXJkLiBDbGFzcCB5b3VyIGhhbmRzIHRvZ2V0aGVyIGF0IHlvdXIgY2hlc3QuIFRha2UgYSBzdGVwIHRvIHRoZSBzaWRlIHdpdGggeW91ciByaWdodCBmb290IHVudGlsIHlvdXIgc3RhbmNlIGlzIDPigJM0IGZlZXQgd2lkZSwgb3Igd2lkZXIgdGhhbiBoaXAgd2lkdGguIFdpZGVyIGlzIE9LIGFzIGxvbmcgYXMgeW91IGNhbiBwZXJmb3JtIHRoZSBtb3ZlIGNvcnJlY3RseS4gTW92ZSB5b3VyIGhpcHMgYmFjayBzbGlnaHRseSBhbmQgYmVuZCB5b3VyIGtuZWVzIGFzIHlvdSBsb3dlciB5b3VyIGJvZHkgaW50byBhIHNxdWF0IHBvc2l0aW9uLiBEcmF3IHlvdXIgdGFpbGJvbmUgc3RyYWlnaHQgZG93biB0byB0aGUgZmxvb3IuIEJlIG1pbmRmdWwgdG8ga2VlcCB5b3VyIHNwaW5lIG5ldXRyYWwsIGNvcmUgZW5nYWdlZCwgYW5kIGV5ZXMgZm9yd2FyZCB0aHJvdWdob3V0IHRoZSBtb3ZlbWVudC4gTG93ZXIgdW50aWwgeW91ciB0aGlnaHMgYXJlIHBhcmFsbGVsIHRvIHRoZSBmbG9vci4gWW91IGNhbiBnbyBsb3dlciBvciBzaG9ydGVuIHRoZSBzcXVhdCBpZiBwYXJhbGxlbCBpcyB0b28gbG93IG9yIGlmIHlvdSBjYW7igJl0IG1haW50YWluIHlvdXIgbGVnIGFsaWdubWVuLiBQYXVzZSBpbiB0aGUgc3F1YXQgcG9zaXRpb24gZm9yIGEgZmV3IHNlY29uZHMuIFRoZW4sIGVuZ2FnaW5nIHlvdXIgZ2x1dGVzLCBwcmVzcyB1cCB0byBzdGFuZGluZywgZHJpdmluZyB1cCB0aHJvdWdoIHlvdXIgaGVlbHMuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc3F1YXRzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9WjJGMGJBclFINXNcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNyxcclxuICAgICAgICAgICAgdGl0bGU6IFwiZnJvZyBwcmVzc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCB5b3VyIGtuZWVzIGJlbnQgdG8gOTAgZGVncmVlcywgdHVybmluZyB0aGVtIG91dHdhcmRzIGxpa2UgYSBmcm9nLiBNYWtlIHN1cmUgdG8ga2VlcCB5b3VyIGhlZWxzIHByZXNzZWQgdG9nZXRoZXIgd2hpbGUgZmxleGluZyB5b3VyIGZlZXQgdG93YXJkcyB5b3UuIFRpZ2h0ZW4geW91ciBzdG9tYWNoIGFuZCBjcnVuY2ggdXAsIGxpZnRpbmcgeW91ciBoZWFkIGFuZCBzaG91bGRlcnMgb2ZmIHRoZSBmbG9vciwgaG9sZGluZyB0aGlzIHBvc2l0aW9uLiBQbGFjZSB5b3VyIGFybXMgZG93biBieSB5b3VyIHNpZGUsIGhvdmVyaW5nIGp1c3QgYWJvdmUgdGhlIGZsb29yLiBTdHJhaWdodGVuIHlvdXIgbGVncyBhd2F5IGZyb20geW91ciBib2R5IGF0IGEgNDUtZGVncmVlIGFuZ2xlLiBSZXR1cm4gdG8gdGhlIHN0YXJ0aW5nIHBvc2l0aW9uLCBjb21wbGV0aW5nIHRoZSBkZXNpcmVkIGFtb3VudCBvZiByZXBldGl0aW9ucy5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9mcm9nX3ByZXNzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9SnZBN3Q5eEtXZ2dcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogOCxcclxuICAgICAgICAgICAgdGl0bGU6IFwiZmlyZSBoeWRyYW50IGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJCZWdpbiBvbiB5b3VyIGhhbmRzIGFuZCBrbmVlcyBvbiB0aGUgZmxvb3IsIHlvdXIgaGFuZHMgZGlyZWN0bHkgYmVuZWF0aCB0aGUgc2hvdWxkZXJzLCBhbmQga25lZXMgdW5kZXIgdGhlIGhpcHMuIFRoZW4gdHJ5IHRvIGxpZnQgeW91ciBsZWZ0IGxlZyB0byB0aGUgc2lkZSBhdCBhIDkwIGRlZ3JlZSBhbmdsZS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9maXJlX2h5ZHJhbmRfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTdMbnVoTGktNzhJXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDksXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImZpcmUgaHlkcmFudCByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkJlZ2luIG9uIHlvdXIgaGFuZHMgYW5kIGtuZWVzIG9uIHRoZSBmbG9vciwgeW91ciBoYW5kcyBkaXJlY3RseSBiZW5lYXRoIHRoZSBzaG91bGRlcnMsIGFuZCBrbmVlcyB1bmRlciB0aGUgaGlwcy4gVGhlbiB0cnkgdG8gbGlmdCB5b3VyIHJpZ2h0IGxlZyB0byB0aGUgc2lkZSBhdCBhIDkwIGRlZ3JlZSBhbmdsZS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9maXJlX2h5ZHJhbmRfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj03TG51aExpLTc4SVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMCxcclxuICAgICAgICAgICAgdGl0bGU6IFwic2lkZSBseWluZyBsZWcgbGlmdCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIGRvd24gb24geW91ciByaWdodCBzaWRlIG9uIGEgbWF0IG9yIHRoZSBmbG9vci4gWW91ciBib2R5IHNob3VsZCBiZSBpbiBhIHN0cmFpZ2h0IGxpbmUgd2l0aCB5b3VyIGxlZ3MgZXh0ZW5kZWQgYW5kIGZlZXQgc3RhY2tlZCBvbiB0b3Agb2YgZWFjaCBvdGhlci4gUGxhY2UgeW91ciBhcm0gc3RyYWlnaHQgb24gdGhlIGZsb29yIHVuZGVyIHlvdXIgaGVhZCBvciBiZW5kIHlvdXIgZWxib3cgYW5kIGNyYWRsZSB5b3VyIGhlYWQgZm9yIHN1cHBvcnQuIFBsYWNlIHlvdXIgbGVmdCBoYW5kIG91dCBmcm9udCBmb3IgZXh0cmEgc3VwcG9ydCBvciBsZXQgaXQgcmVzdCBvbiB5b3VyIGxlZyBvciBoaXAuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2lkZV9seWluZ19sZWdfbGlmdF9sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Vmx3QkpFMVd0T1FcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgbHlpbmcgbGVnIGxpZnQgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgZG93biBvbiB5b3VyIGxlZnQgc2lkZSBvbiBhIG1hdCBvciB0aGUgZmxvb3IuIFlvdXIgYm9keSBzaG91bGQgYmUgaW4gYSBzdHJhaWdodCBsaW5lIHdpdGggeW91ciBsZWdzIGV4dGVuZGVkIGFuZCBmZWV0IHN0YWNrZWQgb24gdG9wIG9mIGVhY2ggb3RoZXIuIFBsYWNlIHlvdXIgYXJtIHN0cmFpZ2h0IG9uIHRoZSBmbG9vciB1bmRlciB5b3VyIGhlYWQgb3IgYmVuZCB5b3VyIGVsYm93IGFuZCBjcmFkbGUgeW91ciBoZWFkIGZvciBzdXBwb3J0LiBQbGFjZSB5b3VyIHJpZ2h0IGhhbmQgb3V0IGZyb250IGZvciBleHRyYSBzdXBwb3J0IG9yIGxldCBpdCByZXN0IG9uIHlvdXIgbGVnIG9yIGhpcC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zaWRlX2x5aW5nX2xlZ19saWZ0X3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Vmx3QkpFMVd0T1FcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTIsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJ1cnBlZXNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFuZCB3aXRoIHlvdXIgZmVldCBzaG91bGRlci13aWR0aCBhcGFydCBhbmQgeW91ciBhcm1zIGJ5IHlvdXIgc2lkZXMuIExvd2VyIGludG8gYSBzcXVhdCBwb3NpdGlvbiBhbmQgcGxhY2UgeW91ciBoYW5kcyBvbiB0aGUgZmxvb3IuIEtpY2sgb3Igc3RlcCB5b3VyIGxlZ3MgYmFjayBpbnRvIGEgcGxhbmsgcG9zaXRpb24uIEp1bXAgb3Igc3RlcCB5b3VyIGxlZ3MgZm9yd2FyZCB0byByZXR1cm4gdG8gYSBzcXVhdCBwb3NpdGlvbi4gUmV0dXJuIHRvIHRoZSBzdGFuZGluZyBwb3NpdGlvbi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9idXJwZWVzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ODE4U2tMQVB5S1lcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDZcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMyxcclxuICAgICAgICAgICAgdGl0bGU6IFwibHVuZ2VzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhcnQgaW4gYSBzdGFuZGluZyBwb3NpdGlvbiB3aXRoIHlvdXIgZmVldCBoaXAtd2lkdGggYXBhcnQuIFN0ZXAgZm9yd2FyZCBsb25nZXIgdGhhbiBhIHdhbGtpbmcgc3RyaWRlIHNvIG9uZSBsZWcgaXMgYWhlYWQgb2YgeW91ciB0b3JzbyBhbmQgdGhlIG90aGVyIGlzIGJlaGluZC4gWW91ciBmb290IHNob3VsZCBsYW5kIGZsYXQgYW5kIHJlbWFpbiBmbGF0IHdoaWxlIGl0IGlzIG9uIHRoZSBncm91bmQuIFlvdXIgcmVhciBoZWVsIHdpbGwgcmlzZSBvZmYgb2YgdGhlIGdyb3VuZC4gQmVuZCB5b3VyIGtuZWVzIHRvIGFwcHJveGltYXRlbHkgOTAgZGVncmVlcyBhcyB5b3UgbG93ZXIgeW91cnNlbGYuIFJlbWVtYmVyIHRvIGtlZXAgeW91ciB0cnVuayB1cHJpZ2h0IGFuZCBjb3JlIGVuZ2FnZWQuIFRoZW4sIGZvcmNlZnVsbHkgcHVzaCBvZmYgZnJvbSB5b3VyIGZyb250IGxlZyB0byByZXR1cm4gdG8gdGhlIHN0YXJ0aW5nIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2x1bmdlcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXlJYzFZYlZMTVo4XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE0LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJkb25rZXkga2lja3MgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YXJ0IHdpdGggeW91ciBrbmVlcyB1bmRlciB5b3VyIGJ1dHQgYW5kIHlvdXIgaGFuZHMgdW5kZXIgeW91ciBzaG91bGRlcnMuIFRoZW4gbGlmdCB5b3VyIGxlZnQgbGVnIGFuZCBzcXVlZXplIHlvdXIgYnV0dCBhcyBtdWNoIGFzIHlvdSBjYW4uIEtlZXAgeW91ciBjb3JlIHRpZ2h0LlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2RvbmtleV9raWNrc19sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NHJhblZRRHFsYVVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImRvbmtleSBraWNrcyByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YXJ0IHdpdGggeW91ciBrbmVlcyB1bmRlciB5b3VyIGJ1dHQgYW5kIHlvdXIgaGFuZHMgdW5kZXIgeW91ciBzaG91bGRlcnMuIFRoZW4gbGlmdCB5b3VyIHJpZ2h0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj00cmFuVlFEcWxhVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxNixcclxuICAgICAgICAgICAgdGl0bGU6IFwic3VtbyBzcXVhdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YXJ0IGluIGEgdHJhZGl0aW9uYWwgc3F1YXQgc3RhbmNlIHdpdGggeW91ciBmZWV0IGFib3V0IHNob3VsZGVyLXdpZHRoIGFwYXJ0IGFuZCB0b2VzIHBvaW50ZWQgZm9yd2FyZC4gQ2xhc3AgeW91ciBoYW5kcyB0b2dldGhlciBhdCB5b3VyIGNoZXN0LiBUYWtlIGEgc3RlcCB0byB0aGUgc2lkZSB3aXRoIHlvdXIgcmlnaHQgZm9vdCB1bnRpbCB5b3VyIHN0YW5jZSBpcyAz4oCTNCBmZWV0IHdpZGUsIG9yIHdpZGVyIHRoYW4gaGlwIHdpZHRoLiBXaWRlciBpcyBPSyBhcyBsb25nIGFzIHlvdSBjYW4gcGVyZm9ybSB0aGUgbW92ZSBjb3JyZWN0bHkuIE1vdmUgeW91ciBoaXBzIGJhY2sgc2xpZ2h0bHkgYW5kIGJlbmQgeW91ciBrbmVlcyBhcyB5b3UgbG93ZXIgeW91ciBib2R5IGludG8gYSBzcXVhdCBwb3NpdGlvbi4gRHJhdyB5b3VyIHRhaWxib25lIHN0cmFpZ2h0IGRvd24gdG8gdGhlIGZsb29yLiBCZSBtaW5kZnVsIHRvIGtlZXAgeW91ciBzcGluZSBuZXV0cmFsLCBjb3JlIGVuZ2FnZWQsIGFuZCBleWVzIGZvcndhcmQgdGhyb3VnaG91dCB0aGUgbW92ZW1lbnQuIExvd2VyIHVudGlsIHlvdXIgdGhpZ2hzIGFyZSBwYXJhbGxlbCB0byB0aGUgZmxvb3IuIFlvdSBjYW4gZ28gbG93ZXIgb3Igc2hvcnRlbiB0aGUgc3F1YXQgaWYgcGFyYWxsZWwgaXMgdG9vIGxvdyBvciBpZiB5b3UgY2Fu4oCZdCBtYWludGFpbiB5b3VyIGxlZyBhbGlnbm1lbi4gUGF1c2UgaW4gdGhlIHNxdWF0IHBvc2l0aW9uIGZvciBhIGZldyBzZWNvbmRzLiBUaGVuLCBlbmdhZ2luZyB5b3VyIGdsdXRlcywgcHJlc3MgdXAgdG8gc3RhbmRpbmcsIGRyaXZpbmcgdXAgdGhyb3VnaCB5b3VyIGhlZWxzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NxdWF0cy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVoyRjBiQXJRSDVzXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE3LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJmcm9nIHByZXNzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIga25lZXMgYmVudCB0byA5MCBkZWdyZWVzLCB0dXJuaW5nIHRoZW0gb3V0d2FyZHMgbGlrZSBhIGZyb2cuIE1ha2Ugc3VyZSB0byBrZWVwIHlvdXIgaGVlbHMgcHJlc3NlZCB0b2dldGhlciB3aGlsZSBmbGV4aW5nIHlvdXIgZmVldCB0b3dhcmRzIHlvdS4gVGlnaHRlbiB5b3VyIHN0b21hY2ggYW5kIGNydW5jaCB1cCwgbGlmdGluZyB5b3VyIGhlYWQgYW5kIHNob3VsZGVycyBvZmYgdGhlIGZsb29yLCBob2xkaW5nIHRoaXMgcG9zaXRpb24uIFBsYWNlIHlvdXIgYXJtcyBkb3duIGJ5IHlvdXIgc2lkZSwgaG92ZXJpbmcganVzdCBhYm92ZSB0aGUgZmxvb3IuIFN0cmFpZ2h0ZW4geW91ciBsZWdzIGF3YXkgZnJvbSB5b3VyIGJvZHkgYXQgYSA0NS1kZWdyZWUgYW5nbGUuIFJldHVybiB0byB0aGUgc3RhcnRpbmcgcG9zaXRpb24sIGNvbXBsZXRpbmcgdGhlIGRlc2lyZWQgYW1vdW50IG9mIHJlcGV0aXRpb25zLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2Zyb2dfcHJlc3MuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1KdkE3dDl4S1dnZ1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxOCxcclxuICAgICAgICAgICAgdGl0bGU6IFwiZmlyZSBoeWRyYW50IGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJCZWdpbiBvbiB5b3VyIGhhbmRzIGFuZCBrbmVlcyBvbiB0aGUgZmxvb3IsIHlvdXIgaGFuZHMgZGlyZWN0bHkgYmVuZWF0aCB0aGUgc2hvdWxkZXJzLCBhbmQga25lZXMgdW5kZXIgdGhlIGhpcHMuIFRoZW4gdHJ5IHRvIGxpZnQgeW91ciBsZWZ0IGxlZyB0byB0aGUgc2lkZSBhdCBhIDkwIGRlZ3JlZSBhbmdsZS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9maXJlX2h5ZHJhbmRfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTdMbnVoTGktNzhJXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE5LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJmaXJlIGh5ZHJhbnQgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJCZWdpbiBvbiB5b3VyIGhhbmRzIGFuZCBrbmVlcyBvbiB0aGUgZmxvb3IsIHlvdXIgaGFuZHMgZGlyZWN0bHkgYmVuZWF0aCB0aGUgc2hvdWxkZXJzLCBhbmQga25lZXMgdW5kZXIgdGhlIGhpcHMuIFRoZW4gdHJ5IHRvIGxpZnQgeW91ciByaWdodCBsZWcgdG8gdGhlIHNpZGUgYXQgYSA5MCBkZWdyZWUgYW5nbGUuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZmlyZV9oeWRyYW5kX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9N0xudWhMaS03OElcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjAsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgbHlpbmcgbGVnIGxpZnQgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBkb3duIG9uIHlvdXIgcmlnaHQgc2lkZSBvbiBhIG1hdCBvciB0aGUgZmxvb3IuIFlvdXIgYm9keSBzaG91bGQgYmUgaW4gYSBzdHJhaWdodCBsaW5lIHdpdGggeW91ciBsZWdzIGV4dGVuZGVkIGFuZCBmZWV0IHN0YWNrZWQgb24gdG9wIG9mIGVhY2ggb3RoZXIuIFBsYWNlIHlvdXIgYXJtIHN0cmFpZ2h0IG9uIHRoZSBmbG9vciB1bmRlciB5b3VyIGhlYWQgb3IgYmVuZCB5b3VyIGVsYm93IGFuZCBjcmFkbGUgeW91ciBoZWFkIGZvciBzdXBwb3J0LiBQbGFjZSB5b3VyIGxlZnQgaGFuZCBvdXQgZnJvbnQgZm9yIGV4dHJhIHN1cHBvcnQgb3IgbGV0IGl0IHJlc3Qgb24geW91ciBsZWcgb3IgaGlwLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfbHlpbmdfbGVnX2xpZnRfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVZsd0JKRTFXdE9RXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIng4XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgbHlpbmcgbGVnIGxpZnQgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgZG93biBvbiB5b3VyIGxlZnQgc2lkZSBvbiBhIG1hdCBvciB0aGUgZmxvb3IuIFlvdXIgYm9keSBzaG91bGQgYmUgaW4gYSBzdHJhaWdodCBsaW5lIHdpdGggeW91ciBsZWdzIGV4dGVuZGVkIGFuZCBmZWV0IHN0YWNrZWQgb24gdG9wIG9mIGVhY2ggb3RoZXIuIFBsYWNlIHlvdXIgYXJtIHN0cmFpZ2h0IG9uIHRoZSBmbG9vciB1bmRlciB5b3VyIGhlYWQgb3IgYmVuZCB5b3VyIGVsYm93IGFuZCBjcmFkbGUgeW91ciBoZWFkIGZvciBzdXBwb3J0LiBQbGFjZSB5b3VyIHJpZ2h0IGhhbmQgb3V0IGZyb250IGZvciBleHRyYSBzdXBwb3J0IG9yIGxldCBpdCByZXN0IG9uIHlvdXIgbGVnIG9yIGhpcC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zaWRlX2x5aW5nX2xlZ19saWZ0X3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Vmx3QkpFMVd0T1FcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDhcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyMixcclxuICAgICAgICAgICAgdGl0bGU6IFwiYnVycGVlc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHdpdGggeW91ciBmZWV0IHNob3VsZGVyLXdpZHRoIGFwYXJ0IGFuZCB5b3VyIGFybXMgYnkgeW91ciBzaWRlcy4gTG93ZXIgaW50byBhIHNxdWF0IHBvc2l0aW9uIGFuZCBwbGFjZSB5b3VyIGhhbmRzIG9uIHRoZSBmbG9vci4gS2ljayBvciBzdGVwIHlvdXIgbGVncyBiYWNrIGludG8gYSBwbGFuayBwb3NpdGlvbi4gSnVtcCBvciBzdGVwIHlvdXIgbGVncyBmb3J3YXJkIHRvIHJldHVybiB0byBhIHNxdWF0IHBvc2l0aW9uLiBSZXR1cm4gdG8gdGhlIHN0YW5kaW5nIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2J1cnBlZXMuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj04MThTa0xBUHlLWVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4NVwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDIzLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJxdWFkIHN0cmV0Y2ggbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHVwIHRhbGwgYW5kIHNoaWZ0IHlvdXIgd2VpZ2h0IHRvIHRoZSByaWdodCBsZWcuIExpZnQgeW91ciBsZWZ0IGZvb3QgYW5kIGdyYXNwIGl0IHdpdGggeW91ciBsZWZ0IGhhbmQuIFB1bGwgdGhlIGxlZnQgZm9vdCB0b3dhcmQgeW91ciBidXR0IHVudGlsIHlvdSBmZWVsIHRoZSBzdHJldGNoIGluIHlvdXIgcXVhZHMuIEhvbGQgdGhpcyBwb3NpdGlvbi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL3F1YWRfc3RyZXRjaF9sZWZ0LmpwZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VGZjUnlZZjdXTGdcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyNCxcclxuICAgICAgICAgICAgdGl0bGU6IFwicXVhZCBzdHJldGNoIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgdXAgdGFsbCBhbmQgc2hpZnQgeW91ciB3ZWlnaHQgdG8gdGhlIHJpZ2h0IGxlZy4gTGlmdCB5b3VyIHJpZ2h0IGZvb3QgYW5kIGdyYXNwIGl0IHdpdGggeW91ciBsZWZ0IGhhbmQuIFB1bGwgdGhlIGxlZnQgZm9vdCB0b3dhcmQgeW91ciBidXR0IHVudGlsIHlvdSBmZWVsIHRoZSBzdHJldGNoIGluIHlvdXIgcXVhZHMuIEhvbGQgdGhpcyBwb3NpdGlvbi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL3F1YWRfc3RyZXRjaF9yaWdodC5qcGdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVRmY1J5WWY3V0xnXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImtuZWUgdG8gY2hlc3Qgc3RyZXRjaCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgbGVncyBleHRlbmRlZCBhbmQgYmFjayBzdHJhaWdodC4gS2VlcCB5b3VyIGhpcHMgbGV2ZWwgYW5kIHlvdXIgbG93ZXIgYmFjayBkb3duIG9uIHRoZSBmbG9vci4gUHVsbCB5b3VyIGxlZnQga25lZSB0b3dhcmRzIHlvdXIgY2hlc3QgYXMgbXVjaCBhcyB5b3UgY2FuIHdoaWxlIGtlZXBpbmcgeW91ciByaWdodCBsZWcgc3RyYWlnaHQgb24gdGhlIGdyb3VuZC4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMva25lZV90b19jaGVzdF9sZWZ0LmpwZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9YkptczlZeWpvQklcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyNixcclxuICAgICAgICAgICAgdGl0bGU6IFwia25lZSB0byBjaGVzdCBzdHJldGNoIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgbGVncyBleHRlbmRlZCBhbmQgYmFjayBzdHJhaWdodC4gS2VlcCB5b3VyIGhpcHMgbGV2ZWwgYW5kIHlvdXIgbG93ZXIgYmFjayBkb3duIG9uIHRoZSBmbG9vci4gUHVsbCB5b3VyIHJpZ2h0IGtuZWUgdG93YXJkcyB5b3VyIGNoZXN0IGFzIG11Y2ggYXMgeW91IGNhbiB3aGlsZSBrZWVwaW5nIHlvdXIgbGVmdCBsZWcgc3RyYWlnaHQgb24gdGhlIGdyb3VuZC4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMva25lZV90b19jaGVzdF9yaWdodC5qcGdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWJKbXM5WXlqb0JJXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogOSxcclxuICAgICAgICB0aXRsZTogXCJUSElHSCBhZHZhbmNlZFwiLFxyXG4gICAgICAgIGV4ZXJjaXNlc0FtdDogXCIyOVwiLFxyXG4gICAgICAgIGV4ZXJjaXNlc1RpbWU6IFwiMjFcIixcclxuICAgICAgICBjb21wbGV4aXR5TGV2ZWw6IHRydWUsXHJcbiAgICAgICAgaW1hZ2U6IFwiLi4vYXNzZXRzL3BuZy90aGlnaC5wbmdcIixcclxuICAgICAgICBjb2xvcjpcclxuICAgICAgICAgIFwibGluZWFyLWdyYWRpZW50KDkwZGVnLCByZ2JhKDI0NCwxMTcsMTE3LDEpIDAlLCByZ2JhKDI1NSwyMDksMjA5LDEpIDEwMCUpXCIsXHJcbiAgICAgICAgZXhlcmNpc2VzOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJoaWdoIHN0ZXBwaW5nXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiUnVuIGluIHBsYWNlIHdoaWxlIHB1bGxpbmcgeW91IGtuZWVzIGFzIGhpZ2ggYXMgcG9zc2libGUgd2l0aCBlYWNoIHN0ZXAuIERvIGl0IGFzIGZhc3QgYXMgeW91IGNhbi4gS2VlcCB5b3VyIGJhY2sgc3RyYWlnaHRcIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9oaWdoX3N0ZXBwaW5nLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Q214cjl4Y05oZ1VcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJidXJwZWVzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgd2l0aCB5b3VyIGZlZXQgc2hvdWxkZXItd2lkdGggYXBhcnQgYW5kIHlvdXIgYXJtcyBieSB5b3VyIHNpZGVzLiBMb3dlciBpbnRvIGEgc3F1YXQgcG9zaXRpb24gYW5kIHBsYWNlIHlvdXIgaGFuZHMgb24gdGhlIGZsb29yLiBLaWNrIG9yIHN0ZXAgeW91ciBsZWdzIGJhY2sgaW50byBhIHBsYW5rIHBvc2l0aW9uLiBKdW1wIG9yIHN0ZXAgeW91ciBsZWdzIGZvcndhcmQgdG8gcmV0dXJuIHRvIGEgc3F1YXQgcG9zaXRpb24uIFJldHVybiB0byB0aGUgc3RhbmRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYnVycGVlcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTgxOFNrTEFQeUtZXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDMsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNxdWF0c1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHdpdGggZmVldCBhIGxpdHRsZSB3aWRlciB0aGFuIGhpcCB3aWR0aCwgdGhlbiBsb3dlciB5b3VyIGJvZHkgdW50aWwgeW91ciB0aGlnaHMgYXJlIHBhcmFsbGVsIHdpdGggdGhlIGZsb29yLiBZb3VyIGtuZWVzIHNob3VsZCBiZSBleHRlbmRlZCBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgeW91ciB0b2VzLiBUaGlzIGV4ZXJjaXNlIHdvcmtzIHRoZSB0aGlnaHMgaGlwcyBidXR0b2NrcywgcXVhZHMsIGhhbXN0cmluZ3MgYW5kIGxvd2VyIGJvZHkuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc3F1YXRzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NDJiRm9kUGFoQlVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE1XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNCxcclxuICAgICAgICAgICAgdGl0bGU6IFwic2lkZSBseWluZyBsZWcgbGlmdCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIGRvd24gb24geW91ciByaWdodCBzaWRlIG9uIGEgbWF0IG9yIHRoZSBmbG9vci4gWW91ciBib2R5IHNob3VsZCBiZSBpbiBhIHN0cmFpZ2h0IGxpbmUgd2l0aCB5b3VyIGxlZ3MgZXh0ZW5kZWQgYW5kIGZlZXQgc3RhY2tlZCBvbiB0b3Agb2YgZWFjaCBvdGhlci4gUGxhY2UgeW91ciBhcm0gc3RyYWlnaHQgb24gdGhlIGZsb29yIHVuZGVyIHlvdXIgaGVhZCBvciBiZW5kIHlvdXIgZWxib3cgYW5kIGNyYWRsZSB5b3VyIGhlYWQgZm9yIHN1cHBvcnQuIFBsYWNlIHlvdXIgbGVmdCBoYW5kIG91dCBmcm9udCBmb3IgZXh0cmEgc3VwcG9ydCBvciBsZXQgaXQgcmVzdCBvbiB5b3VyIGxlZyBvciBoaXAuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2lkZV9seWluZ19sZWdfbGlmdF9sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Vmx3QkpFMVd0T1FcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNSxcclxuICAgICAgICAgICAgdGl0bGU6IFwic2lkZSBseWluZyBsZWcgbGlmdCByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBkb3duIG9uIHlvdXIgbGVmdCBzaWRlIG9uIGEgbWF0IG9yIHRoZSBmbG9vci4gWW91ciBib2R5IHNob3VsZCBiZSBpbiBhIHN0cmFpZ2h0IGxpbmUgd2l0aCB5b3VyIGxlZ3MgZXh0ZW5kZWQgYW5kIGZlZXQgc3RhY2tlZCBvbiB0b3Agb2YgZWFjaCBvdGhlci4gUGxhY2UgeW91ciBhcm0gc3RyYWlnaHQgb24gdGhlIGZsb29yIHVuZGVyIHlvdXIgaGVhZCBvciBiZW5kIHlvdXIgZWxib3cgYW5kIGNyYWRsZSB5b3VyIGhlYWQgZm9yIHN1cHBvcnQuIFBsYWNlIHlvdXIgcmlnaHQgaGFuZCBvdXQgZnJvbnQgZm9yIGV4dHJhIHN1cHBvcnQgb3IgbGV0IGl0IHJlc3Qgb24geW91ciBsZWcgb3IgaGlwLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfbHlpbmdfbGVnX2xpZnRfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1WbHdCSkUxV3RPUVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA2LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzaWRlIGx1bmdlc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YXJ0IHdpdGggeW91ciBmZWV0IHNob3VsZGVyLXdpZHRoIGFwYXJ0LCB0b2VzIHBvaW50ZWQgc3RyYWlnaHQgZm9yd2FyZC4gU3RlcCBvdXQgd2l0aCB5b3VyIHJpZ2h0IGZvb3QgYXMgd2lkZSBhcyBwb3NzaWJsZS4gRW5nYWdlIHRocm91Z2ggdGhlIHJpZ2h0IGhlZWwgYXMgeW91IGRyb3AgeW91ciBoaXBzIGRvd24gYW5kIGJhY2sgd2hpbGUga2VlcGluZyB0aGUgbGVmdCBsZWcgc3RyYWlnaHQsIHN0cmV0Y2hpbmcgdGhlIGdyb2luIG9uIHRoZSBsZWZ0IGxlZyBhbmQga2VlcGluZyBib3RoIHNvbGVzIG9mIHRoZSBmZWV0IG9uIHRoZSBncm91bmQgYW5kIHRvZXMgcG9pbnRlZCBzdHJhaWdodCBmb3J3YXJkLiBNYWtlIHN1cmUgeW91ciByaWdodCBrbmVlIGlzIHRyYWNraW5nIG92ZXIgeW91ciByaWdodCBmb290IHRoZSB3aG9sZSBtb3Rpb24uIFBvd2VyZnVsbHkgeW91ciByaWdodCBoZWVsIGludG8gdGhlIGZsb29yIHRvIHB1c2ggeW91cnNlbGYgYmFjayB0byB0aGUgZnVsbCBzdGFuZGluZyBzdGFydCBwb3NpdGlvbi4gVGhpcyBleGVyY2lzZSBzdHJlbmd0aGVucyB5b3VyIGdsdXRlcyBhbmQgdGhpZ2hzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfbHVuZ2VzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dGxVZzFEWGhIbThcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE0XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNyxcclxuICAgICAgICAgICAgdGl0bGU6IFwiYm90dG9tIGxlZyBsaWZ0IGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBsZWZ0IHNpZGUgd2l0aCB5b3VyIGhlYWQgcmVzdGluZyBvbiB5b3VyIGxlZnQgaGFuZC4gVGhlbiBwdXQgeW91ciByaWdodCBmb290IGZvcndhcmQgb24gdGhlIGZsb29yIExpZnQgeW91ciBsZWZ0IGxlZyB1cCBhbmQgZG93bi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9ib3R0b21fbGVnX2xpZnRfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PURtMUdTWDF2SXRZXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDgsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJvdHRvbSBsZWcgbGlmdCByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIHJpZ2h0IHNpZGUgd2l0aCB5b3VyIGhlYWQgcmVzdGluZyBvbiB5b3VyIHJpZ2h0IGhhbmQuIFRoZW4gcHV0IHlvdXIgbGVmdCBmb290IGZvcndhcmQgb24gdGhlIGZsb29yIExpZnQgeW91ciByaWdodCBsZWcgdXAgYW5kIGRvd24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYm90dG9tX2xlZ19saWZ0X3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9RG0xR1NYMXZJdFlcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogOSxcclxuICAgICAgICAgICAgdGl0bGU6IFwianVtcGluZyBzcXVhdHNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFuZCB3aXRoIGZlZXQgc2hvdWxkZXIgd2lkdGggYW5kIGtuZWVzIHNsaWdodGx5IGJlbnQuIFN0YXJ0IGJ5IGRvaW5nIGEgcmVndWxhciBzcXVhdC4gZW5nYWdlIHlvdXIgY29yZSwgYW5kIGp1bXAgdXAgZXhwbG9zaXZlbHkuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvanVtcGluZ19zcXVhdHMud2VicFwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dHhMRS1qT0NFc2NcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTAsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgbGVnIGNpcmNsZXMgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIHNpZGUsIHdpdGggb25lIGxlZyBzdGFja2VkIG9uIHRvcCBvZiB0aGUgb3RoZXIuIEV4dGVuZCB5b3VyIGJvdHRvbSBhcm0gc3RyYWlnaHQgYW5kIHJlc3QgeW91ciBoZWFkIG9uIGl0LCB3aGlsZSB5b3UgcGxhY2UgeW91ciBvdGhlciBoYW5kIG9uIHRoZSBmbG9vciBpbiBmcm9udCBvZiB5b3VyIGJvZHkgZm9yIHN1cHBvcnQuIExpZnQgdGhlIHRvcCBsZWcgdXAgYW5kIHBlcmZvcm0gbGVnIGNpcmNsZXMuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2lkZV9sZWdfY2lyY2xlc19sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Vmd5c0JQblZKV2dcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgbGVnIGNpcmNsZXMgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBzaWRlLCB3aXRoIG9uZSBsZWcgc3RhY2tlZCBvbiB0b3Agb2YgdGhlIG90aGVyLiBFeHRlbmQgeW91ciBib3R0b20gYXJtIHN0cmFpZ2h0IGFuZCByZXN0IHlvdXIgaGVhZCBvbiBpdCwgd2hpbGUgeW91IHBsYWNlIHlvdXIgb3RoZXIgaGFuZCBvbiB0aGUgZmxvb3IgaW4gZnJvbnQgb2YgeW91ciBib2R5IGZvciBzdXBwb3J0LiBMaWZ0IHRoZSB0b3AgbGVnIHVwIGFuZCBwZXJmb3JtIGxlZyBjaXJjbGVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfbGVnX2NpcmNsZXNfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVZneXNCUG5WSldnXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEyLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJiZW5jaCBnbHV0ZSBraWNrIGJhY2sgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTYW1lIHdpdGggZ2x1dGUga2lja2JhY2tzLCBqdXN0IHdvcmsgd2l0aCBhIGJlbmNoLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2JlbmNoX2dsdXRlX2tpY2tfYmFja19sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TWk0SDZZVVZNQ1FcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDE1XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTMsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJlbmNoIGdsdXRlIGtpY2sgYmFjayByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTYW1lIHdpdGggZ2x1dGUga2lja2JhY2tzLCBqdXN0IHdvcmsgd2l0aCBhIGJlbmNoLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2JlbmNoX2dsdXRlX2tpY2tfYmFja19yaWdodC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PU1pNEg2WVVWTUNRXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxNVwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE0LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJidXJwZWVzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgd2l0aCB5b3VyIGZlZXQgc2hvdWxkZXItd2lkdGggYXBhcnQgYW5kIHlvdXIgYXJtcyBieSB5b3VyIHNpZGVzLiBMb3dlciBpbnRvIGEgc3F1YXQgcG9zaXRpb24gYW5kIHBsYWNlIHlvdXIgaGFuZHMgb24gdGhlIGZsb29yLiBLaWNrIG9yIHN0ZXAgeW91ciBsZWdzIGJhY2sgaW50byBhIHBsYW5rIHBvc2l0aW9uLiBKdW1wIG9yIHN0ZXAgeW91ciBsZWdzIGZvcndhcmQgdG8gcmV0dXJuIHRvIGEgc3F1YXQgcG9zaXRpb24uIFJldHVybiB0byB0aGUgc3RhbmRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYnVycGVlcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTgxOFNrTEFQeUtZXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIng2XCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNxdWF0c1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHdpdGggZmVldCBhIGxpdHRsZSB3aWRlciB0aGFuIGhpcCB3aWR0aCwgdGhlbiBsb3dlciB5b3VyIGJvZHkgdW50aWwgeW91ciB0aGlnaHMgYXJlIHBhcmFsbGVsIHdpdGggdGhlIGZsb29yLiBZb3VyIGtuZWVzIHNob3VsZCBiZSBleHRlbmRlZCBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgeW91ciB0b2VzLiBUaGlzIGV4ZXJjaXNlIHdvcmtzIHRoZSB0aGlnaHMgaGlwcyBidXR0b2NrcywgcXVhZHMsIGhhbXN0cmluZ3MgYW5kIGxvd2VyIGJvZHkuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc3F1YXRzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NDJiRm9kUGFoQlVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTYsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgbHlpbmcgbGVnIGxpZnQgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBkb3duIG9uIHlvdXIgcmlnaHQgc2lkZSBvbiBhIG1hdCBvciB0aGUgZmxvb3IuIFlvdXIgYm9keSBzaG91bGQgYmUgaW4gYSBzdHJhaWdodCBsaW5lIHdpdGggeW91ciBsZWdzIGV4dGVuZGVkIGFuZCBmZWV0IHN0YWNrZWQgb24gdG9wIG9mIGVhY2ggb3RoZXIuIFBsYWNlIHlvdXIgYXJtIHN0cmFpZ2h0IG9uIHRoZSBmbG9vciB1bmRlciB5b3VyIGhlYWQgb3IgYmVuZCB5b3VyIGVsYm93IGFuZCBjcmFkbGUgeW91ciBoZWFkIGZvciBzdXBwb3J0LiBQbGFjZSB5b3VyIGxlZnQgaGFuZCBvdXQgZnJvbnQgZm9yIGV4dHJhIHN1cHBvcnQgb3IgbGV0IGl0IHJlc3Qgb24geW91ciBsZWcgb3IgaGlwLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfbHlpbmdfbGVnX2xpZnRfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVZsd0JKRTFXdE9RXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE3LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzaWRlIGx5aW5nIGxlZyBsaWZ0IHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIGRvd24gb24geW91ciBsZWZ0IHNpZGUgb24gYSBtYXQgb3IgdGhlIGZsb29yLiBZb3VyIGJvZHkgc2hvdWxkIGJlIGluIGEgc3RyYWlnaHQgbGluZSB3aXRoIHlvdXIgbGVncyBleHRlbmRlZCBhbmQgZmVldCBzdGFja2VkIG9uIHRvcCBvZiBlYWNoIG90aGVyLiBQbGFjZSB5b3VyIGFybSBzdHJhaWdodCBvbiB0aGUgZmxvb3IgdW5kZXIgeW91ciBoZWFkIG9yIGJlbmQgeW91ciBlbGJvdyBhbmQgY3JhZGxlIHlvdXIgaGVhZCBmb3Igc3VwcG9ydC4gUGxhY2UgeW91ciByaWdodCBoYW5kIG91dCBmcm9udCBmb3IgZXh0cmEgc3VwcG9ydCBvciBsZXQgaXQgcmVzdCBvbiB5b3VyIGxlZyBvciBoaXAuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2lkZV9seWluZ19sZWdfbGlmdF9yaWdodC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVZsd0JKRTFXdE9RXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDE4LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzaWRlIGx1bmdlc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YXJ0IHdpdGggeW91ciBmZWV0IHNob3VsZGVyLXdpZHRoIGFwYXJ0LCB0b2VzIHBvaW50ZWQgc3RyYWlnaHQgZm9yd2FyZC4gU3RlcCBvdXQgd2l0aCB5b3VyIHJpZ2h0IGZvb3QgYXMgd2lkZSBhcyBwb3NzaWJsZS4gRW5nYWdlIHRocm91Z2ggdGhlIHJpZ2h0IGhlZWwgYXMgeW91IGRyb3AgeW91ciBoaXBzIGRvd24gYW5kIGJhY2sgd2hpbGUga2VlcGluZyB0aGUgbGVmdCBsZWcgc3RyYWlnaHQsIHN0cmV0Y2hpbmcgdGhlIGdyb2luIG9uIHRoZSBsZWZ0IGxlZyBhbmQga2VlcGluZyBib3RoIHNvbGVzIG9mIHRoZSBmZWV0IG9uIHRoZSBncm91bmQgYW5kIHRvZXMgcG9pbnRlZCBzdHJhaWdodCBmb3J3YXJkLiBNYWtlIHN1cmUgeW91ciByaWdodCBrbmVlIGlzIHRyYWNraW5nIG92ZXIgeW91ciByaWdodCBmb290IHRoZSB3aG9sZSBtb3Rpb24uIFBvd2VyZnVsbHkgeW91ciByaWdodCBoZWVsIGludG8gdGhlIGZsb29yIHRvIHB1c2ggeW91cnNlbGYgYmFjayB0byB0aGUgZnVsbCBzdGFuZGluZyBzdGFydCBwb3NpdGlvbi4gVGhpcyBleGVyY2lzZSBzdHJlbmd0aGVucyB5b3VyIGdsdXRlcyBhbmQgdGhpZ2hzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfbHVuZ2VzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dGxVZzFEWGhIbThcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTksXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJvdHRvbSBsZWcgbGlmdCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgbGVmdCBzaWRlIHdpdGggeW91ciBoZWFkIHJlc3Rpbmcgb24geW91ciBsZWZ0IGhhbmQuIFRoZW4gcHV0IHlvdXIgcmlnaHQgZm9vdCBmb3J3YXJkIG9uIHRoZSBmbG9vciBMaWZ0IHlvdXIgbGVmdCBsZWcgdXAgYW5kIGRvd24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYm90dG9tX2xlZ19saWZ0X2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1EbTFHU1gxdkl0WVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyMCxcclxuICAgICAgICAgICAgdGl0bGU6IFwiYm90dG9tIGxlZyBsaWZ0IHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgcmlnaHQgc2lkZSB3aXRoIHlvdXIgaGVhZCByZXN0aW5nIG9uIHlvdXIgcmlnaHQgaGFuZC4gVGhlbiBwdXQgeW91ciBsZWZ0IGZvb3QgZm9yd2FyZCBvbiB0aGUgZmxvb3IgTGlmdCB5b3VyIHJpZ2h0IGxlZyB1cCBhbmQgZG93bi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9ib3R0b21fbGVnX2xpZnRfcmlnaHQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1EbTFHU1gxdkl0WVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyMSxcclxuICAgICAgICAgICAgdGl0bGU6IFwianVtcGluZyBzcXVhdHNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJTdGFuZCB3aXRoIGZlZXQgc2hvdWxkZXIgd2lkdGggYW5kIGtuZWVzIHNsaWdodGx5IGJlbnQuIFN0YXJ0IGJ5IGRvaW5nIGEgcmVndWxhciBzcXVhdC4gZW5nYWdlIHlvdXIgY29yZSwgYW5kIGp1bXAgdXAgZXhwbG9zaXZlbHkuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvanVtcGluZ19zcXVhdHMud2VicFwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dHhMRS1qT0NFc2NcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjIsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgbGVnIGNpcmNsZXMgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIHNpZGUsIHdpdGggb25lIGxlZyBzdGFja2VkIG9uIHRvcCBvZiB0aGUgb3RoZXIuIEV4dGVuZCB5b3VyIGJvdHRvbSBhcm0gc3RyYWlnaHQgYW5kIHJlc3QgeW91ciBoZWFkIG9uIGl0LCB3aGlsZSB5b3UgcGxhY2UgeW91ciBvdGhlciBoYW5kIG9uIHRoZSBmbG9vciBpbiBmcm9udCBvZiB5b3VyIGJvZHkgZm9yIHN1cHBvcnQuIExpZnQgdGhlIHRvcCBsZWcgdXAgYW5kIHBlcmZvcm0gbGVnIGNpcmNsZXMuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2lkZV9sZWdfY2lyY2xlc19sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Vmd5c0JQblZKV2dcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjMsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNpZGUgbGVnIGNpcmNsZXMgcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBzaWRlLCB3aXRoIG9uZSBsZWcgc3RhY2tlZCBvbiB0b3Agb2YgdGhlIG90aGVyLiBFeHRlbmQgeW91ciBib3R0b20gYXJtIHN0cmFpZ2h0IGFuZCByZXN0IHlvdXIgaGVhZCBvbiBpdCwgd2hpbGUgeW91IHBsYWNlIHlvdXIgb3RoZXIgaGFuZCBvbiB0aGUgZmxvb3IgaW4gZnJvbnQgb2YgeW91ciBib2R5IGZvciBzdXBwb3J0LiBMaWZ0IHRoZSB0b3AgbGVnIHVwIGFuZCBwZXJmb3JtIGxlZyBjaXJjbGVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfbGVnX2NpcmNsZXNfbGVmdC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVZneXNCUG5WSldnXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDI0LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJiZW5jaCBnbHV0ZSBraWNrIGJhY2sgbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTYW1lIHdpdGggZ2x1dGUga2lja2JhY2tzLCBqdXN0IHdvcmsgd2l0aCBhIGJlbmNoLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2JlbmNoX2dsdXRlX2tpY2tfYmFja19sZWZ0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TWk0SDZZVVZNQ1FcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImJlbmNoIGdsdXRlIGtpY2sgYmFjayByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTYW1lIHdpdGggZ2x1dGUga2lja2JhY2tzLCBqdXN0IHdvcmsgd2l0aCBhIGJlbmNoLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2JlbmNoX2dsdXRlX2tpY2tfYmFja19yaWdodC5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PU1pNEg2WVVWTUNRXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDI2LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJ3YWxsIHNpdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHdpdGggeW91ciBiYWNrIHRvIGEgd2FsbCwgZmVldCBoaXAtd2lkdGggYXBhcnQgYW5kIHNsaWdodGx5IGluIGZyb250IG9mIHlvdS4gTGVhbiBiYWNrIGludG8gdGhlIHdhbGwsIGFuZCBzbGlkZSBkb3duIGxpa2UgeW91J3JlIHNpdHRpbmcgZG93biBvbnRvIGEgY2hhaXIuIFlvdXIga25lZXMgc2hvdWxkIGJlbnQgYXQgOTAgZGVncmVlcyB3aXRoIHRoZSBrbmVlcyBhYm92ZSB5b3VyIGFua2xlcy4gSG9sZCB0aGlzIHBvc2l0aW9uIGZvciAzMCBzZWNvbmRzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9wbmcvd2FsbF9zaXQucG5nXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1ZcDNad0FDSzl2NFwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDo0MFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDI3LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJxdWFkIHN0cmV0Y2ggbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHVwIHRhbGwgYW5kIHNoaWZ0IHlvdXIgd2VpZ2h0IHRvIHRoZSByaWdodCBsZWcuIExpZnQgeW91ciBsZWZ0IGZvb3QgYW5kIGdyYXNwIGl0IHdpdGggeW91ciBsZWZ0IGhhbmQuIFB1bGwgdGhlIGxlZnQgZm9vdCB0b3dhcmQgeW91ciBidXR0IHVudGlsIHlvdSBmZWVsIHRoZSBzdHJldGNoIGluIHlvdXIgcXVhZHMuIEhvbGQgdGhpcyBwb3NpdGlvbi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL3F1YWRfc3RyZXRjaF9sZWZ0LmpwZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VGZjUnlZZjdXTGdcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyOCxcclxuICAgICAgICAgICAgdGl0bGU6IFwicXVhZCBzdHJldGNoIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgdXAgdGFsbCBhbmQgc2hpZnQgeW91ciB3ZWlnaHQgdG8gdGhlIHJpZ2h0IGxlZy4gTGlmdCB5b3VyIHJpZ2h0IGZvb3QgYW5kIGdyYXNwIGl0IHdpdGggeW91ciBsZWZ0IGhhbmQuIFB1bGwgdGhlIGxlZnQgZm9vdCB0b3dhcmQgeW91ciBidXR0IHVudGlsIHlvdSBmZWVsIHRoZSBzdHJldGNoIGluIHlvdXIgcXVhZHMuIEhvbGQgdGhpcyBwb3NpdGlvbi5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL3F1YWRfc3RyZXRjaF9yaWdodC5qcGdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVRmY1J5WWY3V0xnXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMjksXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImx5aW5nIGJ1dHRlcmZseSBzdHJldGNoXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHRoZSBmbG9vciB3aXRoIHlvdXIgZmVldCB0b2dldGhlci4gT3BlbiB5b3VyIGtuZWVzIHRvIHRoZSBzaWRlcy4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9wbmcvbHlpbmdfYnV0dGVyZmx5X3N0cmV0Y2gucG5nXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1iemZZMFpyM3NVRVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9LFxyXG4gICAgXSxcclxuICB9LFxyXG4gIHtcclxuICAgIHRpdGxlOiBcIlJvdXRpbmVzXCIsXHJcbiAgICBpbWFnZTogXCIuLi9hc3NldHMvaW1hZ2VzL21vcm5pbmdfZXZlbmluZy5qcGdcIixcclxuICAgIGJsb2NrOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogMTAsXHJcbiAgICAgICAgdGl0bGU6IFwiTW9ybmluZyBXYXJtdXBcIixcclxuICAgICAgICBleGVyY2lzZXNBbXQ6IFwiMTFcIixcclxuICAgICAgICBleGVyY2lzZXNUaW1lOiBcIjEwXCIsXHJcbiAgICAgICAgaW1hZ2U6IFwiLi4vYXNzZXRzL2ltYWdlcy9tb3JuaW5nX2V2ZW5pbmcuanBnXCIsXHJcbiAgICAgICAgY29sb3I6XHJcbiAgICAgICAgICBcImxpbmVhci1ncmFkaWVudCg5MGRlZywgcmdiYSgxMjgsMjcsMTUwLDAuNzU2NzQwMTk2MDc4NDMxMykgMCUsIHJnYmEoMjE0LDE4OSwyMjEsMSkgNzglKVwiLFxyXG4gICAgICAgIGV4ZXJjaXNlczogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMSxcclxuICAgICAgICAgICAgdGl0bGU6IFwiYnJpZGdlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIga25lZXMgYmVudC4gVGlnaHRlbiB0aGUgbXVzY2xlcyBpbiB5b3VyIHN0b21hY2guIFJhaXNlIHlvdXIgaGlwcyBvZmYgdGhlIGZsb29yIHVudGlsIHRoZXkgbGluZSB1cCB3aXRoIHlvdXIga25lZXMgYW5kIHNob3VsZGVycy4gSG9sZCBmb3IgdGhyZWUgZGVlcCBicmVhdGhzLiBSZXR1cm4gdG8gdGhlIHN0YXJ0aW5nIHBvc2l0aW9uIGFuZCByZXBlYXQuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy9icmlkZ2UuanBnXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0tS0tBRG5Cc1B6d1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDoyMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDIsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInJldmVyc2UgY3J1bmNoZXNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBiYWNrIHdpdGggeW91ciBrbmVlcyB1cCBhbmQgaGFuZHMgYmVoaW5kIHlvdXIgaGVhZC4gTGlmdCB5b3VyIHNob3VsZGVycyBhbmQgdGhpZ2hzLCBhbmQgdGhlbiBzdHJldGNoIG91dC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9yZXZlcnNlX2NydW5jaGVzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VXdSZlJONWZZUmdcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDIwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMyxcclxuICAgICAgICAgICAgdGl0bGU6IFwiYWJkb21pbmFsIGNydW5jaGVzXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiS2VlcCB5b3VyIGtuZWVzIGNvbWZvcnRhYmx5IGFwYXJ0LiBGb2xkIHlvdXIgYXJtcyBvbiB5b3VyIGNoZXN0IGFuZCB0aWdodGVuIHlvdXIgYWJkb21pbmFsIG11c2NsZXMuIFJhaXNlIHlvdXIgaGVhZCBhbmQgc2hvdWxkZXJzIG9mZiBvZiB0aGUgZmxvb3IuIEhvbGQgZm9yIHRocmVlIGRlZXAgYnJlYXRocywgdGhlbiByZXR1cm4gdG8gc3RhcnRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYWJkb21pbmFsX2NydW5jaGVzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9UlVOckhrYlA0UGNcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwieDIwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNCxcclxuICAgICAgICAgICAgdGl0bGU6IFwiYnV0dCBicmlkZ2VcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBiYWNrIHdpdGgga25lZXMgYmVudCwgZmVldCBmbGF0IG9uIHRoZSBmbG9vciBhbmQgYXJtcyBhdCB5b3VyIHNpZGVzLiBQdXNoIHlvdXIgaGlwcyB1cCwgaG9sZCBmb3Igb25lIHNlY29uZCBhbmQgc2xvd2x5IGxvd2VyIGRvd24uIFRoaXMgZXhlcmNpc2Ugd29ya3MgeW91ciBnbHV0ZXMuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYnV0dF9icmlkZ2UuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj05cW80OENZTjA2d1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCJ4MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA1LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJiaXJkIGRvZ1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkJlZ2luIG9uIGFsbCBmb3VycyBpbiB0aGUgdGFibGV0b3AgcG9zaXRpb24uIFRoZW4gc3RyZXRjaCB5b3VyIHJpZ2h0IGxlZyBhbmQgbGVmdCBhcm0gYXQgdGhlIHNhbWUgdGltZS4gSG9sZCBmb3IgYSBmZXcgc2Vjb25kcywgdGhlbiBnbyBiYWNrIGFuZCByZXBlYXQgd2l0aCB0aGUgb3RoZXIgc2lkZS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9iaXJkX2RvZy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXYwb0NZZThfX2JVXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngyNVwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDYsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInBsYW5rXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiS2VlcCB5b3VyIGFicyB0aWdodCBhbmQgbG9vayBhdCB0aGUgc3BhY2UgYmV0d2VlbiB5b3VyIGhhbmRzIHRvIGVuc3VyZSBhIG5ldXRyYWwgc3BpbmUgcG9zaXRpb24uIEhvbGQgdGhlIHBvc2l0aW9uLiBIb2xkIHRoZSBwb3NpdGlvbiBmb3IgYXMgbG9uZyBhcyB5b3UgY2FuXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvcGxhbmsuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1GY2J3ODJ5a0J2WVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDcsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImNvYnJhIHN0cmV0Y2hcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBiZWxseS4gQmVuZCB5b3VyIGVsYm93cyBhbmQgcGxhY2UgeW91ciBoYW5kcyBvbiB0aGUgZmxvb3IgbmV4dCB0byB5b3VyIHJpYnMsIHN0YWNraW5nIHlvdXIgd3Jpc3QgYW5kIGVsYm93LiBPbiBhbiBpbmhhbGUsIGJlZ2luIHRvIHBlZWwgeW91ciBjaGVzdCBhd2F5IGZyb20gdGhlIGZsb29yLCBsaWZ0aW5nIGludG8gc3BpbmFsIGV4dGVuc2lvbi4gSG9sZCB0aGlzIHBvc2l0aW9uLiBCcmVhdGhlIG5hdHVyYWxseS5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvcG5nL2NvYnJhLnBuZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ejIxTWNISE9wQWdcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA4LFxyXG4gICAgICAgICAgICB0aXRsZTogXCJzaG91bGRlciBzdHJldGNoIGxlZnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJCcmluZyBvbmUgYXJtIGFjcm9zcyB5b3VyIHVwcGVyIGJvZHkgYW5kIGhvbGQgaXQgc3RyYWlnaHQuIEdyYXNwIHRoZSBlbGJvdyB3aXRoIHRoZSBvdGhlciBhcm0gYW5kIGdlbnRseSBwdWxsIHRvd2FyZCB5b3VyIGNoZXN0LiBIb2xkLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3Nob3VsZGVyc19zdHJldGNoX2xlZnQuZ2lmXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj05azBFTjJSQ0dnVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDoyMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDksXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInNob3VsZGVyIHN0cmV0Y2ggcmlnaHRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJCcmluZyBvbmUgYXJtIGFjcm9zcyB5b3VyIHVwcGVyIGJvZHkgYW5kIGhvbGQgaXQgc3RyYWlnaHQuIEdyYXNwIHRoZSBlbGJvdyB3aXRoIHRoZSBvdGhlciBhcm0gYW5kIGdlbnRseSBwdWxsIHRvd2FyZCB5b3VyIGNoZXN0LiBIb2xkLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3Nob3VsZGVyc19zdHJldGNoX3JpZ2h0LmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OWswRU4yUkNHZ1VcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MjBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMCxcclxuICAgICAgICAgICAgdGl0bGU6IFwiYnV0dCBraWNrc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlJ1biBpbiBwbGFjZSB3aGlsZSBraWNraW5nIHlvdXIgaGVlbCB1cCB0byB0b3VjaCB5b3VyIGJ1dHQgd2l0aCBlYWNoIHN0ZXAuIFRyeSB0byBkbyBpdCBhcyBmYXN0IGFzIHlvdSBjYW4uIEtlZXAgeW91ciBjaGVzdCB1cCwgdGlnaHRlbiB5b3VyIGFicy4gSXQncyBhIGdyZWF0IGV4ZXJjaXNlIGZvciB0aGUgZ2x1dGV1cyBhbmQgaGFtc3RyaW5ncy5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9idXR0X2tpY2tzLmdpZlwiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dlhWUHZZMVViSklcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMSxcclxuICAgICAgICAgICAgdGl0bGU6IFwianVtcGluZyBqYWNrc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHVwcmlnaHQgd2l0aCB5b3VyIGxlZ3MgdG9nZXRoZXIsIGFybXMgYXQgeW91ciBzaWRlcyBCZW5kIHlvdXIga25lZXMgc2xpZ2h0bHksIGFuZCBqdW1wIGludG8gdGhlIGFpci4gQXMgeW91IGp1bXAgLCBzcHJlYWQgeW91ciBsZWdzIHRvIGJlIHNob3VsZGVyLXdpZHRoIGFwYXJ0LiBTdHJldGNoIHlvdXIgYXJtcyBvdXQgYW5kIG92ZXIgeW91ciBoZWFkLiBKdW1wIGJhY2sgdG8gc3RhbmRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvanVtcGluZ19qYWNrcy5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTJXNFpOU3dvV180XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIngzMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgaWQ6IDExLFxyXG4gICAgICAgIHRpdGxlOiBcIlNsZWVweSBUaW1lIFN0cmV0Y2hcIixcclxuICAgICAgICBleGVyY2lzZXNBbXQ6IFwiMTNcIixcclxuICAgICAgICBleGVyY2lzZXNUaW1lOiBcIjEzXCIsXHJcbiAgICAgICAgaW1hZ2U6IFwiLi4vYXNzZXRzL2ltYWdlcy9tb3JuaW5nX2V2ZW5pbmcyLmpwZ1wiLFxyXG4gICAgICAgIGNvbG9yOlxyXG4gICAgICAgICAgXCJsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYmEoMTI4LDI3LDE1MCwwLjc1Njc0MDE5NjA3ODQzMTMpIDAlLCByZ2JhKDIxNCwxODksMjIxLDEpIDc4JSlcIixcclxuICAgICAgICBleGVyY2lzZXM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInF1YWQgc3RyZXRjaCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgdXAgdGFsbCBhbmQgc2hpZnQgeW91ciB3ZWlnaHQgdG8gdGhlIHJpZ2h0IGxlZy4gTGlmdCB5b3VyIGxlZnQgZm9vdCBhbmQgZ3Jhc3AgaXQgd2l0aCB5b3VyIGxlZnQgaGFuZC4gUHVsbCB0aGUgbGVmdCBmb290IHRvd2FyZCB5b3VyIGJ1dHQgdW50aWwgeW91IGZlZWwgdGhlIHN0cmV0Y2ggaW4geW91ciBxdWFkcy4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMvcXVhZF9zdHJldGNoX2xlZnQuanBnXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1UZmNSeVlmN1dMZ1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDIsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInF1YWQgc3RyZXRjaCByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHVwIHRhbGwgYW5kIHNoaWZ0IHlvdXIgd2VpZ2h0IHRvIHRoZSByaWdodCBsZWcuIExpZnQgeW91ciByaWdodCBmb290IGFuZCBncmFzcCBpdCB3aXRoIHlvdXIgbGVmdCBoYW5kLiBQdWxsIHRoZSBsZWZ0IGZvb3QgdG93YXJkIHlvdXIgYnV0dCB1bnRpbCB5b3UgZmVlbCB0aGUgc3RyZXRjaCBpbiB5b3VyIHF1YWRzLiBIb2xkIHRoaXMgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy9xdWFkX3N0cmV0Y2hfcmlnaHQuanBnXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1UZmNSeVlmN1dMZ1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDMsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInF1YWQgc3RyZXRjaCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgdXAgdGFsbCBhbmQgc2hpZnQgeW91ciB3ZWlnaHQgdG8gdGhlIHJpZ2h0IGxlZy4gTGlmdCB5b3VyIGxlZnQgZm9vdCBhbmQgZ3Jhc3AgaXQgd2l0aCB5b3VyIGxlZnQgaGFuZC4gUHVsbCB0aGUgbGVmdCBmb290IHRvd2FyZCB5b3VyIGJ1dHQgdW50aWwgeW91IGZlZWwgdGhlIHN0cmV0Y2ggaW4geW91ciBxdWFkcy4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMvcXVhZF9zdHJldGNoX2xlZnQuanBnXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1UZmNSeVlmN1dMZ1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDQsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInF1YWQgc3RyZXRjaCByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIlN0YW5kIHVwIHRhbGwgYW5kIHNoaWZ0IHlvdXIgd2VpZ2h0IHRvIHRoZSByaWdodCBsZWcuIExpZnQgeW91ciByaWdodCBmb290IGFuZCBncmFzcCBpdCB3aXRoIHlvdXIgbGVmdCBoYW5kLiBQdWxsIHRoZSBsZWZ0IGZvb3QgdG93YXJkIHlvdXIgYnV0dCB1bnRpbCB5b3UgZmVlbCB0aGUgc3RyZXRjaCBpbiB5b3VyIHF1YWRzLiBIb2xkIHRoaXMgcG9zaXRpb24uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy9xdWFkX3N0cmV0Y2hfcmlnaHQuanBnXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1UZmNSeVlmN1dMZ1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDUsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcInRyaWNlcHMgc3RyZXRjaCBsZWZ0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgd2l0aCB5b3VyIGFybXMgcmVsYXhlZCBhdCB5b3VyIHNpZGVzLiBXaXRoIHlvdXIgYWZmZWN0ZWQgYXJtLCBnZW50bHkgYmVuZCB5b3VyIGVsYm93IHVwIHRvd2FyZCB5b3UgYXMgZmFyIGFzIHBvc3NpYmxlLiBZb3VyIHBhbG0gc2hvdWxkIGZhY2UgdXAuIFRoZW4gc3RyYWlnaHRlbiB5b3VyIGFybSBhcyBtdWNoIGFzIHlvdSBjYW4uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy90cmljZXBzX3N0cmV0Y2hfbGVmdC5qcGdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUw5SUdPY3JkY0ZrXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNixcclxuICAgICAgICAgICAgdGl0bGU6IFwidHJpY2VwcyBzdHJldGNoIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiU3RhbmQgd2l0aCB5b3VyIGFybXMgcmVsYXhlZCBhdCB5b3VyIHNpZGVzLiBXaXRoIHlvdXIgYWZmZWN0ZWQgYXJtLCBnZW50bHkgYmVuZCB5b3VyIGVsYm93IHVwIHRvd2FyZCB5b3UgYXMgZmFyIGFzIHBvc3NpYmxlLiBZb3VyIHBhbG0gc2hvdWxkIGZhY2UgdXAuIFRoZW4gc3RyYWlnaHRlbiB5b3VyIGFybSBhcyBtdWNoIGFzIHlvdSBjYW4uXCIsXHJcbiAgICAgICAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy90cmljZXBfc3RyZXRjaF9yaWdodC5qcGdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUw5SUdPY3JkY0ZrXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogNyxcclxuICAgICAgICAgICAgdGl0bGU6IFwiY29icmEgc3RyZXRjaFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJlbGx5LiBCZW5kIHlvdXIgZWxib3dzIGFuZCBwbGFjZSB5b3VyIGhhbmRzIG9uIHRoZSBmbG9vciBuZXh0IHRvIHlvdXIgcmlicywgc3RhY2tpbmcgeW91ciB3cmlzdCBhbmQgZWxib3cuIE9uIGFuIGluaGFsZSwgYmVnaW4gdG8gcGVlbCB5b3VyIGNoZXN0IGF3YXkgZnJvbSB0aGUgZmxvb3IsIGxpZnRpbmcgaW50byBzcGluYWwgZXh0ZW5zaW9uLiBIb2xkIHRoaXMgcG9zaXRpb24uIEJyZWF0aGUgbmF0dXJhbGx5LlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9wbmcvY29icmEucG5nXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj16MjFNY0hIT3BBZ1wiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDgsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImNoaWxkIHBvc2VcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJLZWVwIG9uIHRoZSBmbG9vciB3aXRoIHlvdXIgdG9lcyB0b2dldGhlciBhbmQgeW91ciBrbmVlcyBoaXAtd2lkdGggYXBhcnQuIFJlc3QgeW91ciBwYWxtcyBvbiB0b3Agb2YgeW91ciB0aGlnaHMuIE9uIGFuIGV4aGFsZSBsb3dlciB5b3VyIHRvcnNvIGJldHdlZW4geW91ciBrbmVlcy4gRXh0ZW5kIHlvdXIgYXJtcyBhbG9uZ3NpZGUgeW91ciB0b3JzbyB3aXRoIHlvdXIgcGFsbXMgZmFjaW5nIGRvd24uIFJlbGF4IHlvdXIgc2hvdWxkZXJzIHRvd2FyZHMgdGhlIGdyb3VuZC4gUmVzdCBpbiB0aGUgcG9zZSBmb3IgYXMgbG9uZyBhcyB5b3UgbmVlZGVkLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9wbmcvY2hpbGRfcG9zZS5wbmdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PURNd1JQR01QQjEwXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogOSxcclxuICAgICAgICAgICAgdGl0bGU6IFwiY2F0IGNvdyBwb3NlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiS2VlcCB5b3VyIGhhbmRzIHNob3VsZGVyLXdpZHRoIGFwYXJ0IGFuZCB5b3VyIGtuZWVzIGRpcmVjdGx5IGJlbG93IHlvdXIgaGlwcy4gSW5oYWxlIGRlZXBseSB3aGlsZSBjdXJ2aW5nIHlvdXIgbG93ZXIgYmFjayBhbmQgYnJpbmdpbmcgeW91ciBoZWFkIHVwLCB0aWx0aW5nIHlvdXIgcGVsdmlzIHVwIGxpa2UgYSBjb3cuIEV4aGFsZSBkZWVwbHkgYW5kIGJyaW5nIHlvdXIgYWJkb21lbiBpbiwgYXJjaGluZyB5b3VyIHNwaW5lIGFuZCBicmluZ2luZyB5b3VyIGhlYWQgYW5kIHBlbHZpcyBkb3duIGxpa2UgYSBjYXQuIFJlcGVhdCBzZXZlcmFsIHRpbWVzLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2NhdF9jb3dfcG9zZS5naWZcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXdfVUtjSTFGdG44XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTAsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImx5aW5nIGJ1dHRlcmZseSBzdHJldGNoXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiTGllIG9uIHRoZSBmbG9vciB3aXRoIHlvdXIgZmVldCB0b2dldGhlci4gT3BlbiB5b3VyIGtuZWVzIHRvIHRoZSBzaWRlcy4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9wbmcvbHlpbmdfYnV0dGVyZmx5X3N0cmV0Y2gucG5nXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1iemZZMFpyM3NVRVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDExLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJicmlkZ2VcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAgICAgXCJMaWUgb24geW91ciBiYWNrIHdpdGggeW91ciBrbmVlcyBiZW50LiBUaWdodGVuIHRoZSBtdXNjbGVzIGluIHlvdXIgc3RvbWFjaC4gUmFpc2UgeW91ciBoaXBzIG9mZiB0aGUgZmxvb3IgdW50aWwgdGhleSBsaW5lIHVwIHdpdGggeW91ciBrbmVlcyBhbmQgc2hvdWxkZXJzLiBIb2xkIGZvciB0aHJlZSBkZWVwIGJyZWF0aHMuIFJldHVybiB0byB0aGUgc3RhcnRpbmcgcG9zaXRpb24gYW5kIHJlcGVhdC5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL2JyaWRnZS5qcGdcIixcclxuICAgICAgICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PS1LS0FEbkJzUHp3XCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMTIsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcImx5aW5nIHR3aXN0IHN0cmV0Y2ggbGVmdFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCB5b3VyIGFybXMgZXh0ZW5kZWQgYXQgeW91ciBzaWRlcy4gQmVuZCB5b3VyIGxlZ3MgYW5kIHR3aXN0IHlvdXIgbGVncyB0byB0aGUgbGVmdC4gSG9sZCB0aGlzIHBvc2l0aW9uLiBUaGlzIGV4ZXJjaXNlIHN0cmV0Y2hlcyB5b3VyIG9ibGlxdWVzIGFuZCBsb3dlciBiYWNrLlwiLFxyXG4gICAgICAgICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMvbHlpbmdfdHdpc3Rfc3RyZXRjaF9sZWZ0LmpwZ1wiLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Wkktal9QT3R6bFVcIixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAxMyxcclxuICAgICAgICAgICAgdGl0bGU6IFwibHlpbmcgdHdpc3Qgc3RyZXRjaCByaWdodFwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCB5b3VyIGFybXMgZXh0ZW5kZWQgYXQgeW91ciBzaWRlcy4gQmVuZCB5b3VyIGxlZ3MgYW5kIHR3aXN0IHlvdXIgbGVncyB0byB0aGUgcmlnaHQuIEhvbGQgdGhpcyBwb3NpdGlvbi4gVGhpcyBleGVyY2lzZSBzdHJldGNoZXMgeW91ciBvYmxpcXVlcyBhbmQgbG93ZXIgYmFjay5cIixcclxuICAgICAgICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL2x5aW5nX3R3aXN0X3N0cmV0Y2hfcmlnaHQuanBnXCIsXHJcbiAgICAgICAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1aSS1qX1BPdHpsVVwiLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9LFxyXG4gICAgXSxcclxuICB9LFxyXG4gIC8vIHtcclxuICAvLyAgIHRpdGxlOiBgNyB4IDQgQ2hhbGxlbmdlc2AsXHJcbiAgLy8gICBpbWFnZTogXCIuLi9hc3NldHMvcG5nL3dob2xlX2JvZHkyLnBuZ1wiLFxyXG4gIC8vICAgYmxvY2s6IFtcclxuICAvLyAgICAge1xyXG4gIC8vICAgICAgIHRpdGxlOiBcImZ1bGwgYm9keVwiLFxyXG4gIC8vICAgICAgIGV4ZXJjaXNlc0FtdDogXCIxNiAtIDI0XCIsXHJcbiAgLy8gICAgICAgZXhlcmNpc2VzVGltZTogXCIxMyAtIDIyXCIsXHJcbiAgLy8gICAgICAgY29tcGxleGl0eUxldmVsOiB0cnVlLFxyXG4gIC8vICAgICAgIGNvbG9yOlxyXG4gIC8vICAgICAgICAgXCJsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYmEoMTI4LDI3LDE1MCwwLjc1Njc0MDE5NjA3ODQzMTMpIDAlLCByZ2JhKDIxNCwxODksMjIxLDEpIDc4JSlcIixcclxuICAvLyAgICAgfSxcclxuICAvLyAgIF0sXHJcbiAgLy8gfSxcclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHdvcmtvdXRfcGxhbnM7XHJcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvYWJzMy5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2J1dHQucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy90aGlnaC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL3dob2xlX2JvZHkyLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvbW9ybmluZ19ldmVuaW5nLmpwZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvbW9ybmluZ19ldmVuaW5nMi5qcGdcIjsiLCJleHBvcnQgY29uc3QgcGx1c19pbl9jaXJjbGUgPSBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwidXRmLThcIj8+XHJcbjxzdmcgd2lkdGg9XCI0NXB4XCIgaGVpZ2h0PVwiNDVweFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XHJcbjxwYXRoIGQ9XCJNMTMgOEMxMyA3LjQ0NzcyIDEyLjU1MjMgNyAxMiA3QzExLjQ0NzcgNyAxMSA3LjQ0NzcyIDExIDhWMTFIOEM3LjQ0NzcyIDExIDcgMTEuNDQ3NyA3IDEyQzcgMTIuNTUyMyA3LjQ0NzcyIDEzIDggMTNIMTFWMTZDMTEgMTYuNTUyMyAxMS40NDc3IDE3IDEyIDE3QzEyLjU1MjMgMTcgMTMgMTYuNTUyMyAxMyAxNlYxM0gxNkMxNi41NTIzIDEzIDE3IDEyLjU1MjMgMTcgMTJDMTcgMTEuNDQ3NyAxNi41NTIzIDExIDE2IDExSDEzVjhaXCIvPlxyXG48cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNMTIgMkM2LjQ3NzE1IDIgMiA2LjQ3NzE1IDIgMTJDMiAxNy41MjI4IDYuNDc3MTUgMjIgMTIgMjJDMTcuNTIyOCAyMiAyMiAxNy41MjI4IDIyIDEyQzIyIDYuNDc3MTUgMTcuNTIyOCAyIDEyIDJaTTQgMTJDNCA3LjU4MTcyIDcuNTgxNzIgNCAxMiA0QzE2LjQxODMgNCAyMCA3LjU4MTcyIDIwIDEyQzIwIDE2LjQxODMgMTYuNDE4MyAyMCAxMiAyMEM3LjU4MTcyIDIwIDQgMTYuNDE4MyA0IDEyWlwiLz5cclxuPC9zdmc+YDtcclxuXHJcbmV4cG9ydCBjb25zdCBidXJiZWxsID0gYDw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCIgc3RhbmRhbG9uZT1cIm5vXCIgPz5cclxuPCFET0NUWVBFIHN2ZyBQVUJMSUMgXCItLy9XM0MvL0RURCBTVkcgMS4xLy9FTlwiIFwiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkXCI+XHJcbjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHZlcnNpb249XCIxLjFcIiB3aWR0aD1cIjYwXCIgaGVpZ2h0PVwiNjBcIiB2aWV3Qm94PVwiMCAwIDQwMCA0MDBcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPlxyXG48ZGVzYz5DcmVhdGVkIHdpdGggRmFicmljLmpzIDMuNi4yPC9kZXNjPlxyXG48ZGVmcz5cclxuPC9kZWZzPlxyXG48ZyB0cmFuc2Zvcm09XCJtYXRyaXgoMC40MiAwIDAgMC40MiAyMDAgMjAwKVwiICA+XHJcbjxwYXRoIHN0eWxlPVwic3Ryb2tlOiBub25lOyBzdHJva2Utd2lkdGg6IDE7IHN0cm9rZS1kYXNoYXJyYXk6IG5vbmU7IHN0cm9rZS1saW5lY2FwOiBidXR0OyBzdHJva2UtZGFzaG9mZnNldDogMDsgc3Ryb2tlLWxpbmVqb2luOiBtaXRlcjsgc3Ryb2tlLW1pdGVybGltaXQ6IDQ7IGZpbGw6IHJnYig1OCwgNTcsIDU4KTsgZmlsbC1ydWxlOiBub256ZXJvOyBvcGFjaXR5OiAxO1wiICB0cmFuc2Zvcm09XCIgdHJhbnNsYXRlKC0yNTYsIC0yNTYpXCIgZD1cIk0gNDY3IDE3NiBhIDI5Ljk0IDI5Ljk0IDAgMCAwIC0yNS4zMiAxMi41IGEgMiAyIDAgMCAxIC0zLjY0IC0xLjE0IFYgMTUwLjcxIGMgMCAtMjAuNzUgLTE2LjM0IC0zOC4yMSAtMzcuMDggLTM4LjcgQSAzOCAzOCAwIDAgMCAzNjIgMTUwIHYgODIgYSAyIDIgMCAwIDEgLTIgMiBIIDE1MiBhIDIgMiAwIDAgMSAtMiAtMiBWIDE1MC43MSBjIDAgLTIwLjc1IC0xNi4zNCAtMzguMjEgLTM3LjA4IC0zOC43IEEgMzggMzggMCAwIDAgNzQgMTUwIHYgMzcuMzggYSAyIDIgMCAwIDEgLTMuNjQgMS4xNCBBIDI5Ljk0IDI5Ljk0IDAgMCAwIDQ1IDE3NiBjIC0xNi4zIDAuNTEgLTI5IDE0LjMxIC0yOSAzMC42MiB2IDk4LjcyIGMgMCAxNi4zMSAxMi43NCAzMC4xMSAyOSAzMC42MiBhIDI5Ljk0IDI5Ljk0IDAgMCAwIDI1LjMyIC0xMi41IEEgMiAyIDAgMCAxIDc0IDMyNC42MiB2IDM2LjY3IEMgNzQgMzgyIDkwLjM0IDM5OS41IDExMS4wOCA0MDAgQSAzOCAzOCAwIDAgMCAxNTAgMzYyIFYgMjgwIGEgMiAyIDAgMCAxIDIgLTIgSCAzNjAgYSAyIDIgMCAwIDEgMiAyIHYgODEuMjkgYyAwIDIwLjc1IDE2LjM0IDM4LjIxIDM3LjA4IDM4LjcgQSAzOCAzOCAwIDAgMCA0MzggMzYyIFYgMzI0LjYyIGEgMiAyIDAgMCAxIDMuNjQgLTEuMTQgQSAyOS45NCAyOS45NCAwIDAgMCA0NjcgMzM2IGMgMTYuMyAtMC41MSAyOSAtMTQuMzEgMjkgLTMwLjYyIFYgMjA2LjY0IEMgNDk2IDE5MC4zMyA0ODMuMjYgMTc2LjUzIDQ2NyAxNzYgWlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiAvPlxyXG48L2c+XHJcbjwvc3ZnPmA7XHJcblxyXG5leHBvcnQgY29uc3QgY2xvY2sgPSBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiaXNvLTg4NTktMVwiPz5cclxuPCFET0NUWVBFIHN2ZyBQVUJMSUMgXCItLy9XM0MvL0RURCBTVkcgMS4xLy9FTlwiIFwiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkXCI+XHJcbjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCJcclxuXHQgd2lkdGg9XCIzNXB4XCIgaGVpZ2h0PVwiMzVweFwiIHZpZXdCb3g9XCIwIDAgNTEwIDUxMFwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA1MTAgNTEwO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+XHJcbjxnPlxyXG5cdDxnIGlkPVwiYWNjZXNzLXRpbWVcIj5cclxuXHRcdDxwYXRoIHN0eWxlPVwiZmlsbC1vcGFjaXR5OjAuOTtcIiBkPVwiTTI1NSwwQzExNC43NSwwLDAsMTE0Ljc1LDAsMjU1czExNC43NSwyNTUsMjU1LDI1NXMyNTUtMTE0Ljc1LDI1NS0yNTVTMzk1LjI1LDAsMjU1LDB6XHJcblx0XHRcdCBNMjU1LDQ1OWMtMTEyLjIsMC0yMDQtOTEuOC0yMDQtMjA0UzE0Mi44LDUxLDI1NSw1MXMyMDQsOTEuOCwyMDQsMjA0UzM2Ny4yLDQ1OSwyNTUsNDU5elwiLz5cclxuXHRcdDxwb2x5Z29uIHN0eWxlPVwiZmlsbC1vcGFjaXR5OjAuOTtcIiBwb2ludHM9XCIyNjcuNzUsMTI3LjUgMjI5LjUsMTI3LjUgMjI5LjUsMjgwLjUgMzYyLjEsMzYyLjEgMzgyLjUsMzI4Ljk1IDI2Ny43NSwyNjAuMVwiLz5cclxuXHQ8L2c+XHJcbjwvZz5cclxuPC9zdmc+XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgbGlnaHRuaW5nID0gYDw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cImlzby04ODU5LTFcIj8+XHJcbjwhRE9DVFlQRSBzdmcgUFVCTElDIFwiLS8vVzNDLy9EVEQgU1ZHIDEuMS8vRU5cIiBcImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZFwiPlxyXG48c3ZnIHZlcnNpb249XCIxLjFcIiBpZD1cIkNhcGFfMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiXHJcblx0IHdpZHRoPVwiMzBweFwiIGhlaWdodD1cIjMwcHhcIiB2aWV3Qm94PVwiMCAwIDI4Ni45IDI4Ni45XCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDI4Ni45IDI4Ni45O1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCJcclxuXHQ+XHJcbjxnPlxyXG5cdDxwb2x5Z29uIHBvaW50cz1cIjI0OC42NSw3Ni41IDE4MS42NSw3Ni41IDIxMC4zNSwwIDk1LjY1LDAgMzguMjUsMTUzIDg2LjA1LDE1MyAzOC4yNSwyODYuOSBcdFwiLz5cclxuPC9nPlxyXG48L3N2Zz5cclxuYDtcclxuZXhwb3J0IGNvbnN0IGxpZ2h0bmluZzIgPSBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiaXNvLTg4NTktMVwiPz5cclxuPCFET0NUWVBFIHN2ZyBQVUJMSUMgXCItLy9XM0MvL0RURCBTVkcgMS4xLy9FTlwiIFwiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkXCI+XHJcbjxzdmcgdmVyc2lvbj1cIjEuMVwiIGlkPVwiQ2FwYV8xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCJcclxuXHQgd2lkdGg9XCI0NXB4XCIgaGVpZ2h0PVwiNDVweFwiIHZpZXdCb3g9XCIwIDAgMjg2LjkgMjg2LjlcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMjg2LjkgMjg2Ljk7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIlxyXG5cdD5cclxuPGc+XHJcblx0PHBvbHlnb24gcG9pbnRzPVwiMjQ4LjY1LDc2LjUgMTgxLjY1LDc2LjUgMjEwLjM1LDAgOTUuNjUsMCAzOC4yNSwxNTMgODYuMDUsMTUzIDM4LjI1LDI4Ni45IFx0XCIvPlxyXG48L2c+XHJcbjwvc3ZnPlxyXG5gO1xyXG5leHBvcnQgY29uc3Qgdm9sdW1lID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTIsMTdINS42MzhsNS43MjIsNC43NjlBMSwxLDAsMCwwLDEyLDIyYS45ODkuOTg5LDAsMCwwLC40MjQtLjA5NUExLDEsMCwwLDAsMTMsMjFWM2ExLDEsMCwwLDAtMS42NC0uNzY5TDUuNjM4LDdIMkExLDEsMCwwLDAsMSw4djhBMSwxLDAsMCwwLDIsMTdaTTMsOUg2YTEsMSwwLDAsMCwuNjQtLjIzMUwxMSw1LjEzNXYxMy43M0w2LjY0LDE1LjIzMUExLDEsMCwwLDAsNiwxNUgzWm0yMCwzYTcuMDA4LDcuMDA4LDAsMCwxLTcsNywxLDEsMCwwLDEsMC0yQTUsNSwwLDAsMCwxNiw3YTEsMSwwLDAsMSwwLTJBNy4wMDgsNy4wMDgsMCwwLDEsMjMsMTJabS01LDBhMiwyLDAsMCwwLTItMiwxLDEsMCwwLDEsMC0yLDQsNCwwLDAsMSwwLDgsMSwxLDAsMCwxLDAtMkEyLDIsMCwwLDAsMTgsMTJaXCIvPjwvc3ZnPmA7XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0dGluZ3MgPSBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiaXNvLTg4NTktMVwiPz5cclxuPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgaWQ9XCJDYXBhXzFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIlxyXG4gdmlld0JveD1cIjAgMCA1MDcuNDUxIDUwNy40NVwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA1MDcuNDUxIDUwNy40NTtcIlxyXG5cdCB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPlxyXG48Zz5cclxuXHQ8ZyBpZD1cInNldHRpbmdzXCI+XHJcblx0XHQ8cGF0aCBkPVwiTTQ0MC44MTMsMjgwLjVjMC03LjY1LDIuNTUtMTUuMywyLjU1LTI1LjVzMC0xNy44NS0yLjU1LTI1LjVsNTMuNTUtNDMuMzVjNS4xLTUuMSw1LjEtMTAuMiwyLjU1LTE1LjNsLTUxLTg5LjI1XHJcblx0XHRcdGMtMi41NS0yLjU1LTcuNjQ5LTUuMS0xNS4zLTIuNTVsLTYzLjc1LDI1LjVjLTEyLjc1LTEwLjItMjguMDUtMTcuODUtNDMuMzUtMjUuNWwtMTAuMi02Ni4zQzMxNS44NjMsNS4xLDMwOC4yMTIsMCwzMDMuMTEzLDBcclxuXHRcdFx0aC0xMDJjLTUuMTAxLDAtMTIuNzUsNS4xLTEyLjc1LDEwLjJsLTEwLjIsNjguODVjLTE1LjMsNS4xLTI4LjA1LDE1LjMtNDMuMzUsMjUuNWwtNjEuMi0yNS41Yy03LjY1LTIuNTUtMTIuNzUsMC0xNy44NTEsNS4xXHJcblx0XHRcdGwtNTEsODkuMjVjLTIuNTUsMi41NSwwLDEwLjIsNS4xLDE1LjNsNTMuNTUsNDAuOGMwLDcuNjUtMi41NSwxNS4zLTIuNTUsMjUuNXMwLDE3Ljg1LDIuNTUsMjUuNWwtNTMuNTUsNDMuMzVcclxuXHRcdFx0Yy01LjEsNS4xMDEtNS4xLDEwLjItMi41NSwxNS4zMDFsNTEsODkuMjVjMi41NSwyLjU1LDcuNjQ5LDUuMSwxNS4zLDIuNTVsNjMuNzUtMjUuNWMxMi43NSwxMC4yLDI4LjA1LDE3Ljg1LDQzLjM1LDI1LjVcclxuXHRcdFx0bDEwLjIsNjYuM2MwLDUuMSw1LjEsMTAuMiwxMi43NSwxMC4yaDEwMmM1LjEwMSwwLDEyLjc1LTUuMTAxLDEyLjc1LTEwLjJsMTAuMi02Ni4zYzE1LjMtNy42NSwzMC42LTE1LjMsNDMuMzUtMjUuNWw2My43NSwyNS41XHJcblx0XHRcdGM1LjEwMSwyLjU1LDEyLjc1LDAsMTUuMzAxLTUuMTAxbDUxLTg5LjI1YzIuNTUtNS4xLDIuNTUtMTIuNzUtMi41NTEtMTUuM0w0NDAuODEzLDI4MC41eiBNMjUyLjExMywzNDQuMjVcclxuXHRcdFx0Yy00OC40NSwwLTg5LjI1LTQwLjgtODkuMjUtODkuMjVzNDAuOC04OS4yNSw4OS4yNS04OS4yNXM4OS4yNSw0MC44LDg5LjI1LDg5LjI1UzMwMC41NjMsMzQ0LjI1LDI1Mi4xMTMsMzQ0LjI1elwiLz5cclxuXHQ8L2c+XHJcbjwvZz5cclxuPC9zdmc+YDtcclxuXHJcbmV4cG9ydCBjb25zdCBhcnJvd0xlZnQgPSBgPD94bWwgdmVyc2lvbj1cIjEuMFwiID8+PCFET0NUWVBFIHN2ZyAgUFVCTElDICctLy9XM0MvL0RURCBTVkcgMS4xLy9FTicgICdodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGQnPjxzdmcgIGlkPVwiTGF5ZXJfMVwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAzMiAzMjtcIiB2ZXJzaW9uPVwiMS4xXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiICB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIj48cGF0aCBkPVwiTTI4LDE0SDguOGw0LjYyLTQuNjJDMTMuODE0LDguOTg2LDE0LDguNTE2LDE0LDhjMC0wLjk4NC0wLjgxMy0yLTItMmMtMC41MzEsMC0wLjk5NCwwLjE5My0xLjM4LDAuNThsLTcuOTU4LDcuOTU4ICBDMi4zMzQsMTQuODY2LDIsMTUuMjcxLDIsMTZzMC4yNzksMS4wOCwwLjY0NiwxLjQ0N2w3Ljk3NCw3Ljk3M0MxMS4wMDYsMjUuODA3LDExLjQ2OSwyNiwxMiwyNmMxLjE4OCwwLDItMS4wMTYsMi0yICBjMC0wLjUxNi0wLjE4Ni0wLjk4Ni0wLjU4LTEuMzhMOC44LDE4SDI4YzEuMTA0LDAsMi0wLjg5NiwyLTJTMjkuMTA0LDE0LDI4LDE0elwiLz48L3N2Zz5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IHR2ID0gYDw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cInV0Zi04XCI/PlxyXG48IS0tIFN2ZyBWZWN0b3IgSWNvbnMgOiBodHRwOi8vd3d3Lm9ubGluZXdlYmZvbnRzLmNvbS9pY29uIC0tPlxyXG48IURPQ1RZUEUgc3ZnIFBVQkxJQyBcIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOXCIgXCJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGRcIj5cclxuPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAxMDAwIDEwMDBcIiBlbmFibGUtYmFja2dyb3VuZD1cIm5ldyAwIDAgMTAwMCAxMDAwXCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cclxuPG1ldGFkYXRhPiBTdmcgVmVjdG9yIEljb25zIDogaHR0cDovL3d3dy5vbmxpbmV3ZWJmb250cy5jb20vaWNvbiA8L21ldGFkYXRhPlxyXG48Zz48Zz48ZyBpZD1cInBsYXlfbW92aWVcIj48Zz48cGF0aCBkPVwiTTYyNC45LDQwNC44bC0xNjguNi04My40Yy04LjYtNC4yLTE3LTYuMy0yNS02LjNjLTIxLjIsMC00Mi42LDE1LjgtNDIuNiw1MS4zdjE1NS45YzAsMzUuNSwyMS42LDUxLjMsNDMuMSw1MS4zYzgsMCwxNi41LTIuMSwyNS4zLTYuNGwxNjYuNi04My4zYzE4LjgtOS4yLDI5LjYtMjMuOCwyOS42LTQwLjFDNjUzLjMsNDI3LjgsNjQyLjksNDEzLjYsNjI0LjksNDA0Ljh6IE00MzEuNyw1NTEuM2wwLTIyLjNoMFY1NTEuM3ogTTQzNy4zLDUyNy4zYy0xLjQsMC43LTIuNiwxLjEtMy41LDEuNGMtMC4zLTEuNC0wLjYtMy41LTAuNi02LjRWMzY2LjRjMC0yLjgsMC4zLTQuOCwwLjYtNi4yYzAuOCwwLjMsMS43LDAuNiwyLjksMS4yTDYwMy43LDQ0NEw0MzcuMyw1MjcuM3ogTTkyMy4yLDk5LjFINzYuOGMtMzYuOCwwLTY2LjgsMzAtNjYuOCw2Ni44djUzNC41YzAsMzYuOCwzMCw2Ni44LDY2LjgsNjYuOGgzMzQuMXY4OS4xaC04OS4xdjQ0LjVoMzU2LjR2LTQ0LjVoLTg5LjF2LTg5LjFoMzM0LjFjMzYuOCwwLDY2LjgtMzAsNjYuOC02Ni44VjE2NS45Qzk5MCwxMjkuMSw5NjAsOTkuMSw5MjMuMiw5OS4xeiBNNTQ0LjUsODU2LjRoLTg5LjF2LTg5LjFoODkuMVY4NTYuNHogTTk0NS41LDcwMC41YzAsMTIuMy0xMCwyMi4zLTIyLjMsMjIuM0g3Ni44Yy0xMi4zLDAtMjIuMy0xMC0yMi4zLTIyLjNWMTY1LjljMC0xMi4zLDEwLTIyLjMsMjIuMy0yMi4zaDg0Ni40YzEyLjMsMCwyMi4zLDEwLDIyLjMsMjIuM0w5NDUuNSw3MDAuNUw5NDUuNSw3MDAuNXpcIi8+PC9nPjwvZz48L2c+PGc+PC9nPjxnPjwvZz48Zz48L2c+PGc+PC9nPjxnPjwvZz48Zz48L2c+PGc+PC9nPjxnPjwvZz48Zz48L2c+PGc+PC9nPjxnPjwvZz48Zz48L2c+PGc+PC9nPjxnPjwvZz48Zz48L2c+PC9nPlxyXG48L3N2Zz5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRyYXNoID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48dGl0bGU+dHJhc2g8L3RpdGxlPjxnIGlkPVwidHJhc2hcIj48cGF0aCBkPVwiTTMuODgzLDIyLjEyNWEyLDIsMCwwLDAsMiwxLjg3NUgxOC4xMjFhMiwyLDAsMCwwLDItMS44NzVMMjEsOEgzWk0yMSw0SDE4VjNhMywzLDAsMCwwLTMtM0g5QTMsMywwLDAsMCw2LDNWNEgzQTEsMSwwLDAsMCwzLDZIMjFhMSwxLDAsMCwwLDAtMlpNMTYsNEg4VjNBMSwxLDAsMCwxLDksMmg2YTEsMSwwLDAsMSwxLDFaXCIvPjwvZz48L3N2Zz5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IG11ZyA9IGA8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJpc28tODg1OS0xXCI/PlxyXG48c3ZnIHZlcnNpb249XCIxLjFcIiBpZD1cIkNhcGFfMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiXHJcblx0IHZpZXdCb3g9XCIwIDAgNDgyLjc1NCA0ODIuNzU0XCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDQ4Mi43NTQgNDgyLjc1NDtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPlxyXG48Zz5cclxuXHQ8Zz5cclxuXHRcdDxnPlxyXG5cdFx0XHQ8cGF0aCBkPVwiTTQxNi45NDEsMjE2LjIyMkgzMzguMjR2LTM2LjMyNHYtMS43NjhINDcuNjUxdjEuNzY4djI0Mi4xNTd2MTIuMTA4aDAuNzAyYzYuNDQxLDUzLjk1Myw1Ny44NzUsNDguNDMxLDEyMC4zNzYsNDguNDMxXHJcblx0XHRcdFx0aDQ4LjQzMWM2Mi41MjUsMCwxMTMuOTU5LDUuNTIxLDEyMC4zNzYtNDguNDMxaDAuNzAydi0xMi4xMDhWMzQ3LjY0aDc4LjcwMWMxMC4wNSwwLDE4LjE2Mi03Ljg3LDE4LjE2Mi0xNy42Mjl2LTk2LjE4NVxyXG5cdFx0XHRcdEM0MzUuMTAyLDIyNC4wOTIsNDI2Ljk5LDIxNi4yMjIsNDE2Ljk0MSwyMTYuMjIyeiBNNDEwLjg4NywzMTAuMjAzYzAsNy4zMTMtNi43NTYsMTMuMjIyLTE1LjEzNSwxMy4yMjJIMzM4LjI0di04Mi45ODdoNTcuNTEyXHJcblx0XHRcdFx0YzguMzc5LDAsMTUuMTM1LDUuOTA5LDE1LjEzNSwxMy4yMjJWMzEwLjIwM3pcIi8+XHJcblx0XHQ8L2c+XHJcblx0XHQ8Zz5cclxuXHRcdFx0PHBhdGggZD1cIk0xNTUuMjY2LDE1My45MTVsLTcuNTU1LTkuNDY4YzguMTM2LTYuNTE0LDI3Ljk5My0yNi42ODYsMjIuMzI3LTQxLjU1NGMtMi4zNzMtNi4yOTYtNi4zNDUtMTAuNDg1LTEwLjUzNC0xNC45MTdcclxuXHRcdFx0XHRjLTUuMTU4LTUuNDQ5LTEwLjk5NC0xMS41OTktMTMuODUxLTIxLjkzOUMxMzguNDYsNDAuMDA0LDE2Ny43MTMsNC4wMiwxNzEuMDU1LDBsOS4yOTksNy43NDlcclxuXHRcdFx0XHRjLTcuOTkxLDkuNTg5LTI3LjcwMywzOC4xNC0yMy4wMjksNTUuMDY2YzIuMDM0LDcuNDM0LDYuMTc1LDExLjc2OSwxMC45NywxNi44M2M0LjYwMSw0Ljg0Myw5LjgwNywxMC4zNjQsMTMuMDc2LDE4LjkzN1xyXG5cdFx0XHRcdEMxOTEuMjk5LDEyNC43NTksMTU2Ljc0MywxNTIuNzI4LDE1NS4yNjYsMTUzLjkxNXpcIi8+XHJcblx0XHQ8L2c+XHJcblx0XHQ8Zz5cclxuXHRcdFx0PHBhdGggZD1cIk0yMTUuNDksMTQxLjgwN2wtNy41NTUtOS40NjhjNC43NDYtMy44MDIsMTcuNjA1LTE2LjY2LDE0LjI2My0yNS40MDJjLTEuNDUzLTMuODUtMy44NS02LjM5My02LjYxMS05LjI5OVxyXG5cdFx0XHRcdGMtMy41ODQtMy44MDItNy42NzYtOC4xMTItOS43MS0xNS40NzRjLTUuMDYxLTE4LjM4LDE1LjAzOC00My4xMDQsMTcuMzM4LTQ1Ljg2NWw5LjI5OSw3Ljc0OVxyXG5cdFx0XHRcdGMtNy4xNDQsOC41NzItMTcuNTA4LDI1LjYyLTE0Ljk2NSwzNC44NzFjMS4yMzUsNC40NTYsMy43MDUsNy4wNDcsNi44MjksMTAuMzY0YzMuMTk2LDMuMzksNi44MjksNy4yMTYsOS4xNTQsMTMuMzE5XHJcblx0XHRcdFx0QzI0MC41NTQsMTIxLjEwMywyMTguMDgxLDEzOS43NDksMjE1LjQ5LDE0MS44MDd6XCIvPlxyXG5cdFx0PC9nPlxyXG5cdDwvZz5cclxuPC9nPlxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IG11dGUgPSBgPD94bWwgdmVyc2lvbj1cIjEuMFwiID8+PHN2ZyB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxkZWZzPjxzdHlsZT4uY2xzLTF7ZmlsbDojMTAxODIwO308L3N0eWxlPjwvZGVmcz48dGl0bGUvPjxnIGRhdGEtbmFtZT1cIkxheWVyIDM1XCIgaWQ9XCJMYXllcl8zNVwiPjxwYXRoIGNsYXNzPVwiY2xzLTFcIiBkPVwiTTE4LDI5YTEsMSwwLDAsMS0uNTctLjE4bC0xMC03QTEsMSwwLDAsMSw3LDIxVjExYTEsMSwwLDAsMSwuNDMtLjgybDEwLTdhMSwxLDAsMCwxLDEtLjA3QTEsMSwwLDAsMSwxOSw0VjI4YTEsMSwwLDAsMS0uNTQuODlBMSwxLDAsMCwxLDE4LDI5Wk05LDIwLjQ4bDgsNS42VjUuOTJsLTgsNS42WlwiLz48cGF0aCBjbGFzcz1cImNscy0xXCIgZD1cIk04LDIySDRhMywzLDAsMCwxLTMtM1YxM2EzLDMsMCwwLDEsMy0zSDhhMSwxLDAsMCwxLDEsMVYyMUExLDEsMCwwLDEsOCwyMlpNNCwxMmExLDEsMCwwLDAtMSwxdjZhMSwxLDAsMCwwLDEsMUg3VjEyWlwiLz48cmVjdCBjbGFzcz1cImNscy0xXCIgaGVpZ2h0PVwiMTJcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTMuNzcgMjIuOSkgcm90YXRlKC00NSlcIiB3aWR0aD1cIjJcIiB4PVwiMjQuNzZcIiB5PVwiMTBcIi8+PHJlY3QgY2xhc3M9XCJjbHMtMVwiIGhlaWdodD1cIjJcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTMuNzcgMjIuOSkgcm90YXRlKC00NSlcIiB3aWR0aD1cIjEyXCIgeD1cIjE5Ljc2XCIgeT1cIjE1XCIvPjwvZz48L3N2Zz5gO1xyXG4iLCJpbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBJVGVtcGxhdGUsIElFeGVyY2lzZSB9IGZyb20gXCIuLi90eXBlcy9pbmRleFwiO1xyXG5cclxuY2xhc3MgRXhlcmNpc2VNb2RhbCB7XHJcbiAgdGVtcGxhdGU6IElUZW1wbGF0ZTtcclxuICBleGVyY2lzZTogSUV4ZXJjaXNlO1xyXG4gIGJhY2tMYXllcjogSFRNTEVsZW1lbnQ7XHJcbiAgbW9kYWw6IEhUTUxFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3RvcihleGVyY2lzZTogSUV4ZXJjaXNlKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLmV4ZXJjaXNlID0gZXhlcmNpc2U7XHJcbiAgICB0aGlzLmJhY2tMYXllciA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fYmFja2xheWVyXCJcclxuICAgICk7XHJcbiAgICB0aGlzLm1vZGFsID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZXhlcmNpc2UtbW9kYWxcIik7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcclxuICAgIHRoaXMuYmFja0xheWVyLmFwcGVuZCh0aGlzLm1vZGFsKTtcclxuXHJcbiAgICBjb25zdCBjbG9zZUJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fYnV0dG9uLWNsb3NlXCJcclxuICAgICk7XHJcbiAgICB0aGlzLm1vZGFsLmFwcGVuZChjbG9zZUJ1dHRvbik7XHJcblxyXG4gICAgY29uc3QgZXhlcmNpc2VHaWY6IEhUTUxJbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgZXhlcmNpc2VHaWYuY2xhc3NOYW1lID0gXCJleGVyY2lzZS1tb2RhbF9fZ2lmXCI7XHJcbiAgICBjb25zdCBwYXRoOiBzdHJpbmcgPSB0aGlzLmV4ZXJjaXNlLmV4YW1wbGU7XHJcbiAgICBleGVyY2lzZUdpZi5zcmMgPSBwYXRoO1xyXG4gICAgdGhpcy5tb2RhbC5hcHBlbmQoZXhlcmNpc2VHaWYpO1xyXG5cclxuICAgIHRoaXMuY3JlYXRlRXhlcmNpc2VJbmZvKCk7XHJcblxyXG4gICAgY29uc3QgZXhlcmNpc2VEZXNjcmlwdGlvbjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwicFwiLFxyXG4gICAgICBcImV4ZXJjaXNlLW1vZGFsX19kZXNjcmlwdGlvblwiLFxyXG4gICAgICB0aGlzLmV4ZXJjaXNlLmRlc2NyaXB0aW9uXHJcbiAgICApO1xyXG4gICAgdGhpcy5tb2RhbC5hcHBlbmQoZXhlcmNpc2VEZXNjcmlwdGlvbik7XHJcblxyXG4gICAgLy8gdGhpcy5jcmVhdGVDaGFuZ2VCbG9jaygpO1xyXG5cclxuICAgIGRvY3VtZW50LmJvZHkucHJlcGVuZCh0aGlzLmJhY2tMYXllcik7XHJcblxyXG4gICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5jbG9zZUV4ZXJjaXNlTW9kYWwoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gPEhUTUxFbGVtZW50PmUudGFyZ2V0O1xyXG4gICAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImV4ZXJjaXNlLW1vZGFsX19iYWNrbGF5ZXJcIikpIHtcclxuICAgICAgICB0aGlzLmNsb3NlRXhlcmNpc2VNb2RhbCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2xvc2VFeGVyY2lzZU1vZGFsKCkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmJhY2tMYXllcik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUV4ZXJjaXNlSW5mbygpOiB2b2lkIHtcclxuICAgIGNvbnN0IGV4ZXJjaXNlSW5mbzogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiZXhlcmNpc2UtbW9kYWxfX2luZm9cIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGV4ZXJjaXNlTmFtZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwic3BhblwiLFxyXG4gICAgICBcImV4ZXJjaXNlLW1vZGFsX19uYW1lXCIsXHJcbiAgICAgIHRoaXMuZXhlcmNpc2UudGl0bGVcclxuICAgICk7XHJcbiAgICBjb25zdCBleGVyY2lzZVF1YW50aXR5OiBIVE1MU3BhbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwic3BhblwiLFxyXG4gICAgICBcImV4ZXJjaXNlLW1vZGFsX19xdWFudGl0eVwiLFxyXG4gICAgICB0aGlzLmV4ZXJjaXNlLnF1YW50aXR5XHJcbiAgICApO1xyXG4gICAgY29uc3QgeW91dHViZUxpbms6IEhUTUxBbmNob3JFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVMaW5rKFxyXG4gICAgICBcImV4ZXJjaXNlLW1vZGFsX19saW5rXCIsXHJcbiAgICAgIHRoaXMuZXhlcmNpc2UueW91dHViZVxyXG4gICAgKTtcclxuICAgIHlvdXR1YmVMaW5rLnRhcmdldCA9IFwiX2JsYW5rXCI7XHJcbiAgICBleGVyY2lzZUluZm8uYXBwZW5kKGV4ZXJjaXNlTmFtZSwgZXhlcmNpc2VRdWFudGl0eSwgeW91dHViZUxpbmspO1xyXG4gICAgdGhpcy5tb2RhbC5hcHBlbmQoZXhlcmNpc2VJbmZvKTtcclxuICB9XHJcblxyXG4gIC8vIHByaXZhdGUgY3JlYXRlQ2hhbmdlQmxvY2soKTogdm9pZCB7XHJcbiAgLy8gICBjb25zdCBjaGFuZ2VCbG9jayA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAvLyAgICAgXCJkaXZcIixcclxuICAvLyAgICAgXCJleGVyY2lzZS1tb2RhbF9fY2hhbmdlXCJcclxuICAvLyAgICk7XHJcblxyXG4gIC8vICAgY29uc3QgY291bnRlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgLy8gICAgIFwiZGl2XCIsXHJcbiAgLy8gICAgIFwiZXhlcmNpc2UtbW9kYWxfX2NvdW50ZXJcIlxyXG4gIC8vICAgKTtcclxuICAvLyAgIGNoYW5nZUJsb2NrLmFwcGVuZChjb3VudGVyKTtcclxuXHJcbiAgLy8gICBjb25zdCBtaW51c0J1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAvLyAgICAgXCJleGVyY2lzZS1tb2RhbF9fYnV0dG9uLW1pbnVzXCIsXHJcbiAgLy8gICAgIFwiLVwiXHJcbiAgLy8gICApO1xyXG4gIC8vICAgY29uc3QgY3VycmVudFF1YW50aXR5OiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAvLyAgICAgXCJzcGFuXCIsXHJcbiAgLy8gICAgIFwiZXhlcmNpc2UtbW9kYWxfX2N1cnJlbnQtcXVhbnRpdHlcIixcclxuICAvLyAgICAgdGhpcy5leGVyY2lzZS5xdWFudGl0eVxyXG4gIC8vICAgKTtcclxuICAvLyAgIGNvbnN0IHBsdXNCdXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVCdG4oXHJcbiAgLy8gICAgIFwiZXhlcmNpc2UtbW9kYWxfX2J1dHRvbi1wbHVzXCIsXHJcbiAgLy8gICAgIFwiK1wiXHJcbiAgLy8gICApO1xyXG4gIC8vICAgY291bnRlci5hcHBlbmQobWludXNCdXR0b24sIGN1cnJlbnRRdWFudGl0eSwgcGx1c0J1dHRvbik7XHJcblxyXG4gIC8vICAgY29uc3QgY2hhbmdlQnV0dG9uczogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgLy8gICAgIFwiZGl2XCIsXHJcbiAgLy8gICAgIFwiZXhlcmNpc2UtbW9kYWxfX2J1dHRvbnNcIlxyXG4gIC8vICAgKTtcclxuXHJcbiAgLy8gICBjb25zdCBjYW5jZWxCdXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVCdG4oXHJcbiAgLy8gICAgIFwiZXhlcmNpc2UtbW9kYWxfX2J1dHRvbi1jYW5jZWxcIixcclxuICAvLyAgICAgXCJjYW5jZWxcIlxyXG4gIC8vICAgKTtcclxuICAvLyAgIGNvbnN0IHNhdmVCdXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVCdG4oXHJcbiAgLy8gICAgIFwiZXhlcmNpc2UtbW9kYWxfX2J1dHRvbi1zYXZlXCIsXHJcbiAgLy8gICAgIFwic2F2ZVwiXHJcbiAgLy8gICApO1xyXG4gIC8vICAgY2hhbmdlQnV0dG9ucy5hcHBlbmQoY2FuY2VsQnV0dG9uLCBzYXZlQnV0dG9uKTtcclxuICAvLyAgIGNoYW5nZUJsb2NrLmFwcGVuZChjaGFuZ2VCdXR0b25zKTtcclxuXHJcbiAgLy8gICBjYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgLy8gICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAvLyAgICAgdGhpcy5jbG9zZUV4ZXJjaXNlTW9kYWwoKTtcclxuICAvLyAgIH0pO1xyXG5cclxuICAvLyAgIHBsdXNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuYWRkRXhlcmNpc2VRdWFudGl0eSk7XHJcblxyXG4gIC8vICAgbWludXNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMucmVkdWNlRXhlcmNpc2VRdWFudGl0eSk7XHJcblxyXG4gIC8vICAgdGhpcy5tb2RhbC5hcHBlbmQoY2hhbmdlQmxvY2spO1xyXG4gIC8vIH1cclxuXHJcbiAgLy8gcHJpdmF0ZSByZWR1Y2VFeGVyY2lzZVF1YW50aXR5KCkge1xyXG4gIC8vICAgY29uc3QgY3VyUXVhbnRpdHlTcGFuID0gPEhUTUxFbGVtZW50PihcclxuICAvLyAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5leGVyY2lzZS1tb2RhbF9fY3VycmVudC1xdWFudGl0eVwiKVxyXG4gIC8vICAgKTtcclxuICAvLyAgIGNvbnN0IGV4ZXJjaXNlVGV4dCA9IDxzdHJpbmc+Y3VyUXVhbnRpdHlTcGFuLnRleHRDb250ZW50O1xyXG4gIC8vICAgaWYgKGV4ZXJjaXNlVGV4dC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwieFwiKSkge1xyXG4gIC8vICAgICBjb25zdCBjdXJOdW1iZXIgPSBOdW1iZXIoZXhlcmNpc2VUZXh0LnNsaWNlKDEpKTtcclxuICAvLyAgICAgaWYgKGN1ck51bWJlciA9PT0gMCkge1xyXG4gIC8vICAgICAgIHJldHVybjtcclxuICAvLyAgICAgfVxyXG4gIC8vICAgICBjdXJRdWFudGl0eVNwYW4udGV4dENvbnRlbnQgPSBgWCR7Y3VyTnVtYmVyIC0gMX1gO1xyXG4gIC8vICAgfSBlbHNlIHtcclxuICAvLyAgICAgbGV0IG1pbnV0ZXM6IHN0cmluZyA9IGV4ZXJjaXNlVGV4dC5zbGljZSgwLCAyKTtcclxuICAvLyAgICAgbGV0IHNlY29uZHM6IHN0cmluZyA9IGV4ZXJjaXNlVGV4dC5zbGljZSgzKTtcclxuICAvLyAgICAgaWYgKE51bWJlcihzZWNvbmRzKSA9PT0gMCkge1xyXG4gIC8vICAgICAgIGlmIChOdW1iZXIobWludXRlcykgPT09IDApIHtcclxuICAvLyAgICAgICAgIGN1clF1YW50aXR5U3Bhbi50ZXh0Q29udGVudCA9IGAke21pbnV0ZXN9OiR7c2Vjb25kc31gO1xyXG4gIC8vICAgICAgIH1cclxuICAvLyAgICAgICBpZiAoTnVtYmVyKG1pbnV0ZXMpID4gMCAmJiBOdW1iZXIobWludXRlcykgPD0gMTApIHtcclxuICAvLyAgICAgICAgIG1pbnV0ZXMgPSBgMCR7TnVtYmVyKG1pbnV0ZXMpIC0gMX1gO1xyXG4gIC8vICAgICAgICAgc2Vjb25kcyA9IFwiNTlcIjtcclxuICAvLyAgICAgICB9XHJcbiAgLy8gICAgIH0gZWxzZSB7XHJcbiAgLy8gICAgICAgc2Vjb25kcyA9IGAke051bWJlcihzZWNvbmRzKSAtIDF9YDtcclxuICAvLyAgICAgICBpZiAoTnVtYmVyKHNlY29uZHMpIDwgMTApIHtcclxuICAvLyAgICAgICAgIHNlY29uZHMgPSBgMCR7c2Vjb25kc31gO1xyXG4gIC8vICAgICAgIH1cclxuICAvLyAgICAgfVxyXG4gIC8vICAgICBjdXJRdWFudGl0eVNwYW4udGV4dENvbnRlbnQgPSBgJHttaW51dGVzfToke3NlY29uZHN9YDtcclxuICAvLyAgIH1cclxuICAvLyB9XHJcblxyXG4gIC8vIHByaXZhdGUgYWRkRXhlcmNpc2VRdWFudGl0eSgpIHtcclxuICAvLyAgIGNvbnN0IGN1clF1YW50aXR5U3BhbiA9IDxIVE1MRWxlbWVudD4oXHJcbiAgLy8gICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXhlcmNpc2UtbW9kYWxfX2N1cnJlbnQtcXVhbnRpdHlcIilcclxuICAvLyAgICk7XHJcbiAgLy8gICBjb25zdCBleGVyY2lzZVRleHQgPSA8c3RyaW5nPmN1clF1YW50aXR5U3Bhbi50ZXh0Q29udGVudDtcclxuICAvLyAgIGlmIChleGVyY2lzZVRleHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcInhcIikpIHtcclxuICAvLyAgICAgY29uc3QgY3VyTnVtYmVyID0gTnVtYmVyKGV4ZXJjaXNlVGV4dC5zbGljZSgxKSk7XHJcbiAgLy8gICAgIGN1clF1YW50aXR5U3Bhbi50ZXh0Q29udGVudCA9IGBYJHtjdXJOdW1iZXIgKyAxfWA7XHJcbiAgLy8gICB9IGVsc2Uge1xyXG4gIC8vICAgICBsZXQgbWludXRlcyA9IGV4ZXJjaXNlVGV4dC5zbGljZSgwLCAyKTtcclxuICAvLyAgICAgbGV0IHNlY29uZHMgPSBleGVyY2lzZVRleHQuc2xpY2UoMyk7XHJcbiAgLy8gICAgIGlmIChOdW1iZXIoc2Vjb25kcykgPT09IDU5KSB7XHJcbiAgLy8gICAgICAgaWYgKE51bWJlcihtaW51dGVzKSA8IDEwKSB7XHJcbiAgLy8gICAgICAgICBtaW51dGVzID0gYDAke051bWJlcihtaW51dGVzKSArIDF9YDtcclxuICAvLyAgICAgICB9IGVsc2Uge1xyXG4gIC8vICAgICAgICAgbWludXRlcyA9IGAke051bWJlcihtaW51dGVzKSArIDF9YDtcclxuICAvLyAgICAgICB9XHJcbiAgLy8gICAgICAgc2Vjb25kcyA9IFwiMDBcIjtcclxuICAvLyAgICAgfSBlbHNlIHtcclxuICAvLyAgICAgICBpZiAoTnVtYmVyKHNlY29uZHMpIDwgOSkge1xyXG4gIC8vICAgICAgICAgc2Vjb25kcyA9IGAwJHtOdW1iZXIoc2Vjb25kcykgKyAxfWA7XHJcbiAgLy8gICAgICAgfSBlbHNlIHtcclxuICAvLyAgICAgICAgIHNlY29uZHMgPSBgJHtOdW1iZXIoc2Vjb25kcykgKyAxfWA7XHJcbiAgLy8gICAgICAgfVxyXG4gIC8vICAgICB9XHJcbiAgLy8gICAgIGN1clF1YW50aXR5U3Bhbi50ZXh0Q29udGVudCA9IGAke21pbnV0ZXN9OiR7c2Vjb25kc31gO1xyXG4gIC8vICAgfVxyXG4gIC8vIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXhlcmNpc2VNb2RhbDtcclxuIiwiaW1wb3J0IHtcclxuICBJQW5zd2VyQWRkVXNlckluZm8sXHJcbiAgSURhdGFDb21wbGV4LFxyXG4gIElDcmVhdGVFeGVyY2lzZSxcclxuICBJU2VydmVyRXhlcmNpc2VzLFxyXG4gIElDb21wbGV0ZWRDb21wbGV4ZXNSZWNlaXZlZCxcclxuICBJRnVsZmlsbGVkQ29tcGxleFJldHVybmVkLFxyXG4gIElXZWVrbHlTdGF0LFxyXG4gIElVc2VyU2V0dGluZ3MsXHJcbn0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcblxyXG5jbGFzcyBDb21wbGV4IHtcclxuICBwdWJsaWMgYXN5bmMgY3JlYXRlVXNlckluZm8oXHJcbiAgICBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XHJcbiAgKTogUHJvbWlzZTxJQW5zd2VyQWRkVXNlckluZm8gfCB1bmRlZmluZWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgICAgXCJodHRwczovL3JzLWNsb25lLWJhY2stcHJvZHVjdGlvbi1iNGI3LnVwLnJhaWx3YXkuYXBwL2FwaS9jb21wbGV4L2NyZWF0ZVwiLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgICAgY29uc3QgcmVzOiBJQW5zd2VyQWRkVXNlckluZm8gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIHJldHVybiByZXM7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGdldENvbXBsZXgoaWQ6IHN0cmluZyk6IFByb21pc2U8SURhdGFDb21wbGV4W10gfCB1bmRlZmluZWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgICAgYGh0dHBzOi8vcnMtY2xvbmUtYmFjay1wcm9kdWN0aW9uLWI0YjcudXAucmFpbHdheS5hcHAvYXBpL2NvbXBsZXgvZ2V0LWFsbC8ke2lkfWBcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgcmVzOiBQcm9taXNlPElEYXRhQ29tcGxleFtdIHwgdW5kZWZpbmVkPiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICAgIHJldHVybiByZXM7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGRlbGV0ZUNvbXBsZXgoaWQ6IHN0cmluZykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgZmV0Y2goXHJcbiAgICAgICAgYGh0dHBzOi8vcnMtY2xvbmUtYmFjay1wcm9kdWN0aW9uLWI0YjcudXAucmFpbHdheS5hcHAvYXBpL2NvbXBsZXgvZGVsZXRlLyR7aWR9YCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUubWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBjcmVhdGVFeGVyY2lzZShcclxuICAgIGRhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cclxuICApOiBQcm9taXNlPElDcmVhdGVFeGVyY2lzZSB8IHVuZGVmaW5lZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgICAgICBcImh0dHBzOi8vcnMtY2xvbmUtYmFjay1wcm9kdWN0aW9uLWI0YjcudXAucmFpbHdheS5hcHAvYXBpL2V4ZXJjaXNlL2NyZWF0ZVwiLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgICAgY29uc3QgcmVzOiBJQ3JlYXRlRXhlcmNpc2UgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIHJldHVybiByZXM7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGdldEV4ZXJjaXNlcyhcclxuICAgIGlkOiBzdHJpbmdcclxuICApOiBQcm9taXNlPElTZXJ2ZXJFeGVyY2lzZXNbXSB8IHVuZGVmaW5lZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgICAgICBgaHR0cHM6Ly9ycy1jbG9uZS1iYWNrLXByb2R1Y3Rpb24tYjRiNy51cC5yYWlsd2F5LmFwcC9hcGkvZXhlcmNpc2UvZ2V0LWFsbC8ke2lkfWBcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgcmVzOiBQcm9taXNlPFxyXG4gICAgICAgIElTZXJ2ZXJFeGVyY2lzZXNbXSB8IHVuZGVmaW5lZFxyXG4gICAgICA+ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZGVsZXRlRXhlcmNpc2UoaWQ6IHN0cmluZykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgZmV0Y2goXHJcbiAgICAgICAgYGh0dHBzOi8vcnMtY2xvbmUtYmFjay1wcm9kdWN0aW9uLWI0YjcudXAucmFpbHdheS5hcHAvYXBpL2V4ZXJjaXNlL2RlbGV0ZS8ke2lkfWAsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgdXBkYXRlRXhlcmNpc2UoXHJcbiAgICBpZDogc3RyaW5nLFxyXG4gICAgZGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxyXG4gICk6IFByb21pc2U8SUNyZWF0ZUV4ZXJjaXNlIHwgdW5kZWZpbmVkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgICAgIGBodHRwczovL3JzLWNsb25lLWJhY2stcHJvZHVjdGlvbi1iNGI3LnVwLnJhaWx3YXkuYXBwL2FwaS9leGVyY2lzZS91cGRhdGUvJHtpZH1gLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCByZXM6IElDcmVhdGVFeGVyY2lzZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZnVsZmlsbGVkQ29tcGxleChcclxuICAgIGRhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cclxuICApOiBQcm9taXNlPElGdWxmaWxsZWRDb21wbGV4UmV0dXJuZWQgfCB1bmRlZmluZWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgICAgXCJodHRwczovL3JzLWNsb25lLWJhY2stcHJvZHVjdGlvbi1iNGI3LnVwLnJhaWx3YXkuYXBwL2FwaS9jb21wbGV0ZWQvY3JlYXRlXCIsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCByZXM6IElGdWxmaWxsZWRDb21wbGV4UmV0dXJuZWQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIHJldHVybiByZXM7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGdldENvbXBsZXRlZENvbXBsZXhlcyhcclxuICAgIGlkOiBzdHJpbmdcclxuICApOiBQcm9taXNlPElDb21wbGV0ZWRDb21wbGV4ZXNSZWNlaXZlZCB8IHVuZGVmaW5lZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgICAgICBgaHR0cHM6Ly9ycy1jbG9uZS1iYWNrLXByb2R1Y3Rpb24tYjRiNy51cC5yYWlsd2F5LmFwcC9hcGkvY29tcGxldGVkL2dldC1hbGwvJHtpZH1gXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IHJlczogUHJvbWlzZTxcclxuICAgICAgICBJQ29tcGxldGVkQ29tcGxleGVzUmVjZWl2ZWQgfCB1bmRlZmluZWRcclxuICAgICAgPiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICAgIHJldHVybiByZXM7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGdldFdlZWtseVN0YXRpc3RpYyhcclxuICAgIGlkOiBzdHJpbmdcclxuICApOiBQcm9taXNlPElXZWVrbHlTdGF0IHwgdW5kZWZpbmVkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgICAgIGBodHRwczovL3JzLWNsb25lLWJhY2stcHJvZHVjdGlvbi1iNGI3LnVwLnJhaWx3YXkuYXBwL2FwaS9jb21wbGV0ZWQvd2Vla2x5LXdvcmtvdXRzLyR7aWR9YFxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCByZXM6IFByb21pc2U8SVdlZWtseVN0YXQgfCB1bmRlZmluZWQ+ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZ2V0VXNlclNldHRpbmdzKGlkOiBzdHJpbmcpOiBQcm9taXNlPElVc2VyU2V0dGluZ3MgfCB1bmRlZmluZWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgICAgYGh0dHBzOi8vcnMtY2xvbmUtYmFjay1wcm9kdWN0aW9uLWI0YjcudXAucmFpbHdheS5hcHAvYXBpL3VzZXIvZ2V0LyR7aWR9YFxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCByZXM6IFByb21pc2U8SVVzZXJTZXR0aW5ncyB8IHVuZGVmaW5lZD4gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcblxyXG4gICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUubWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyB1cGRhdGVSZXN0VGltZShcclxuICAgIGlkOiBzdHJpbmcsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIHRpbWVSZXN0OiBzdHJpbmc7XHJcbiAgICB9XHJcbiAgKTogUHJvbWlzZTxJVXNlclNldHRpbmdzIHwgdW5kZWZpbmVkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgICAgIGBodHRwczovL3JzLWNsb25lLWJhY2stcHJvZHVjdGlvbi1iNGI3LnVwLnJhaWx3YXkuYXBwL2FwaS91c2VyL3VwZGF0ZS1yZXN0LyR7aWR9YCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgICAgY29uc3QgcmVzOiBJVXNlclNldHRpbmdzID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUubWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyB1cGRhdGVMb2FkKFxyXG4gICAgaWQ6IHN0cmluZyxcclxuICAgIGRhdGE6IHtcclxuICAgICAgbG9hZDogc3RyaW5nO1xyXG4gICAgfVxyXG4gICk6IFByb21pc2U8SVVzZXJTZXR0aW5ncyB8IHVuZGVmaW5lZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgICAgICBgaHR0cHM6Ly9ycy1jbG9uZS1iYWNrLXByb2R1Y3Rpb24tYjRiNy51cC5yYWlsd2F5LmFwcC9hcGkvdXNlci91cGRhdGUtbG9hZC8ke2lkfWAsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IHJlczogSVVzZXJTZXR0aW5ncyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb21wbGV4O1xyXG4iLCJjb25zdCB0cmFpbmluZ3NEYXRhID0ge1xyXG4gIHRyYWluaW5nczogW1xyXG4gICAge1xyXG4gICAgICBpZDogMSxcclxuICAgICAgdGl0bGU6IFwiaGlnaCBzdGVwcGluZ1wiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIlJ1biBpbiBwbGFjZSB3aGlsZSBwdWxsaW5nIHlvdSBrbmVlcyBhcyBoaWdoIGFzIHBvc3NpYmxlIHdpdGggZWFjaCBzdGVwLiBEbyBpdCBhcyBmYXN0IGFzIHlvdSBjYW4uIEtlZXAgeW91ciBiYWNrIHN0cmFpZ2h0XCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvaGlnaF9zdGVwcGluZy5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUNteHI5eGNOaGdVXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIjAwOjIyXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMixcclxuICAgICAgdGl0bGU6IFwic2lkZSBob3BcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJKdW1wIHdpdGggYm90aCBmZWV0IHRvIHRoZSByaWdodCBhbmQgdGhlbiB0byB0aGUgbGVmdCwgaW4gYSBxdWljaywgcmVwZXRpdGl2ZSBtb3ZlbWVudFwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NpZGVfaG9wLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9blltVUVKSUJqM2NcIixcclxuICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAzLFxyXG4gICAgICB0aXRsZTogXCJzcXVhdHNcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFuZCB3aXRoIGZlZXQgYSBsaXR0bGUgd2lkZXIgdGhhbiBoaXAgd2lkdGgsIHRoZW4gbG93ZXIgeW91ciBib2R5IHVudGlsIHlvdXIgdGhpZ2hzIGFyZSBwYXJhbGxlbCB3aXRoIHRoZSBmbG9vci4gWW91ciBrbmVlcyBzaG91bGQgYmUgZXh0ZW5kZWQgaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHlvdXIgdG9lcy4gVGhpcyBleGVyY2lzZSB3b3JrcyB0aGUgdGhpZ2hzIGhpcHMgYnV0dG9ja3MsIHF1YWRzLCBoYW1zdHJpbmdzIGFuZCBsb3dlciBib2R5LlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3NxdWF0cy5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTQyYkZvZFBhaEJVXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDQsXHJcbiAgICAgIHRpdGxlOiBcIndhbGwgcHVzaCB1cHNcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJXaGlsZSBmYWNpbmcgdGhlIHdhbGwsIHN0YW5kIGp1c3Qgb3ZlciBvbmUgYXJtJ3MgbGVuZ3RoIGF3YXkuIFlvdXIgYm9keSBzaG91bGQgY3JlYXRlIGEgNDUtZGVncmVlIGFuZ2xlIHdoZW4geW91IHBsYWNlIHlvdXIgaGFuZHMgYWdhaW5zdCB0aGUgd2FsbC4gS2VlcCB5b3VyIGZlZXQgc2hvdWxkZXItd2lkdGggYXBhcnQuIExvd2VyIHlvdXJzZWxmIGFnYWluc3QgdGhlIHdhbGwuIEtlZXAgeW91ciBib2R5IHN0cmFpZ2h0LlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3dhbGxfcHVzaF91cHMuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1FT2YzY0dJUXBBNFwiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTVcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA1LFxyXG4gICAgICB0aXRsZTogXCJidXR0IGJyaWRnZVwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCBrbmVlcyBiZW50LCBmZWV0IGZsYXQgb24gdGhlIGZsb29yIGFuZCBhcm1zIGF0IHlvdXIgc2lkZXMuIFB1c2ggeW91ciBoaXBzIHVwLCBob2xkIGZvciBvbmUgc2Vjb25kIGFuZCBzbG93bHkgbG93ZXIgZG93bi4gVGhpcyBleGVyY2lzZSB3b3JrcyB5b3VyIGdsdXRlcy5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9idXR0X2JyaWRnZS5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTlxbzQ4Q1lOMDZ3XCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxNFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDYsXHJcbiAgICAgIHRpdGxlOiBcImZpcmUgaHlkcmFudCBsZWZ0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiQmVnaW4gb24geW91ciBoYW5kcyBhbmQga25lZXMgb24gdGhlIGZsb29yLCB5b3VyIGhhbmRzIGRpcmVjdGx5IGJlbmVhdGggdGhlIHNob3VsZGVycywgYW5kIGtuZWVzIHVuZGVyIHRoZSBoaXBzLiBUaGVuIHRyeSB0byBsaWZ0IHlvdXIgbGVmdCBsZWcgdG8gdGhlIHNpZGUgYXQgYSA5MCBkZWdyZWUgYW5nbGUuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZmlyZV9oeWRyYW5kX2xlZnQuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj03TG51aExpLTc4SVwiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA3LFxyXG4gICAgICB0aXRsZTogXCJwbGFua1wiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIktlZXAgeW91ciBhYnMgdGlnaHQgYW5kIGxvb2sgYXQgdGhlIHNwYWNlIGJldHdlZW4geW91ciBoYW5kcyB0byBlbnN1cmUgYSBuZXV0cmFsIHNwaW5lIHBvc2l0aW9uLiBIb2xkIHRoZSBwb3NpdGlvbi4gSG9sZCB0aGUgcG9zaXRpb24gZm9yIGFzIGxvbmcgYXMgeW91IGNhblwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3BsYW5rLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9RmNidzgyeWtCdllcIixcclxuICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA4LFxyXG4gICAgICB0aXRsZTogXCJidXR0IGtpY2tzXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiUnVuIGluIHBsYWNlIHdoaWxlIGtpY2tpbmcgeW91ciBoZWVsIHVwIHRvIHRvdWNoIHlvdXIgYnV0dCB3aXRoIGVhY2ggc3RlcC4gVHJ5IHRvIGRvIGl0IGFzIGZhc3QgYXMgeW91IGNhbi4gS2VlcCB5b3VyIGNoZXN0IHVwLCB0aWdodGVuIHlvdXIgYWJzLiBJdCdzIGEgZ3JlYXQgZXhlcmNpc2UgZm9yIHRoZSBnbHV0ZXVzIGFuZCBoYW1zdHJpbmdzLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2J1dHRfa2lja3MuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj12WFZQdlkxVWJKSVwiLFxyXG4gICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDksXHJcbiAgICAgIHRpdGxlOiBcImNvYnJhIHN0cmV0Y2hcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJMaWUgb24geW91ciBiZWxseS4gQmVuZCB5b3VyIGVsYm93cyBhbmQgcGxhY2UgeW91ciBoYW5kcyBvbiB0aGUgZmxvb3IgbmV4dCB0byB5b3VyIHJpYnMsIHN0YWNraW5nIHlvdXIgd3Jpc3QgYW5kIGVsYm93LiBPbiBhbiBpbmhhbGUsIGJlZ2luIHRvIHBlZWwgeW91ciBjaGVzdCBhd2F5IGZyb20gdGhlIGZsb29yLCBsaWZ0aW5nIGludG8gc3BpbmFsIGV4dGVuc2lvbi4gSG9sZCB0aGlzIHBvc2l0aW9uLiBCcmVhdGhlIG5hdHVyYWxseS5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvcG5nL2NvYnJhLnBuZ1wiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ejIxTWNISE9wQWdcIixcclxuICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAxMCxcclxuICAgICAgdGl0bGU6IFwiY2hpbGQgcG9zZVwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIktlZXAgb24gdGhlIGZsb29yIHdpdGggeW91ciB0b2VzIHRvZ2V0aGVyIGFuZCB5b3VyIGtuZWVzIGhpcC13aWR0aCBhcGFydC4gUmVzdCB5b3VyIHBhbG1zIG9uIHRvcCBvZiB5b3VyIHRoaWdocy4gT24gYW4gZXhoYWxlIGxvd2VyIHlvdXIgdG9yc28gYmV0d2VlbiB5b3VyIGtuZWVzLiBFeHRlbmQgeW91ciBhcm1zIGFsb25nc2lkZSB5b3VyIHRvcnNvIHdpdGggeW91ciBwYWxtcyBmYWNpbmcgZG93bi4gUmVsYXggeW91ciBzaG91bGRlcnMgdG93YXJkcyB0aGUgZ3JvdW5kLiBSZXN0IGluIHRoZSBwb3NlIGZvciBhcyBsb25nIGFzIHlvdSBuZWVkZWQuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL3BuZy9jaGlsZF9wb3NlLnBuZ1wiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9RE13UlBHTVBCMTBcIixcclxuICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAxMSxcclxuICAgICAgdGl0bGU6IFwia25lZSB0byBjaGVzdCBzdHJldGNoIGxlZnRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJMaWUgb24geW91ciBiYWNrIHdpdGggeW91ciBsZWdzIGV4dGVuZGVkIGFuZCBiYWNrIHN0cmFpZ2h0LiBLZWVwIHlvdXIgaGlwcyBsZXZlbCBhbmQgeW91ciBsb3dlciBiYWNrIGRvd24gb24gdGhlIGZsb29yLiBQdWxsIHlvdXIgbGVmdCBrbmVlIHRvd2FyZHMgeW91ciBjaGVzdCBhcyBtdWNoIGFzIHlvdSBjYW4gd2hpbGUga2VlcGluZyB5b3VyIHJpZ2h0IGxlZyBzdHJhaWdodCBvbiB0aGUgZ3JvdW5kLiBIb2xkIHRoaXMgcG9zaXRpb24uXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy9rbmVlX3RvX2NoZXN0X2xlZnQuanBnXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1iSm1zOVl5am9CSVwiLFxyXG4gICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDEyLFxyXG4gICAgICB0aXRsZTogXCJrbmVlIHRvIGNoZXN0IHN0cmV0Y2ggcmlnaHRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJMaWUgb24geW91ciBiYWNrIHdpdGggeW91ciBsZWdzIGV4dGVuZGVkIGFuZCBiYWNrIHN0cmFpZ2h0LiBLZWVwIHlvdXIgaGlwcyBsZXZlbCBhbmQgeW91ciBsb3dlciBiYWNrIGRvd24gb24gdGhlIGZsb29yLiBQdWxsIHlvdXIgcmlnaHQga25lZSB0b3dhcmRzIHlvdXIgY2hlc3QgYXMgbXVjaCBhcyB5b3UgY2FuIHdoaWxlIGtlZXBpbmcgeW91ciBsZWZ0IGxlZyBzdHJhaWdodCBvbiB0aGUgZ3JvdW5kLiBIb2xkIHRoaXMgcG9zaXRpb24uXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy9rbmVlX3RvX2NoZXN0X3JpZ2h0LmpwZ1wiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9YkptczlZeWpvQklcIixcclxuICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAxMyxcclxuICAgICAgdGl0bGU6IFwianVtcGluZyBqYWNrc1wiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIlN0YW5kIHVwcmlnaHQgd2l0aCB5b3VyIGxlZ3MgdG9nZXRoZXIsIGFybXMgYXQgeW91ciBzaWRlcyBCZW5kIHlvdXIga25lZXMgc2xpZ2h0bHksIGFuZCBqdW1wIGludG8gdGhlIGFpci4gQXMgeW91IGp1bXAgLCBzcHJlYWQgeW91ciBsZWdzIHRvIGJlIHNob3VsZGVyLXdpZHRoIGFwYXJ0LiBTdHJldGNoIHlvdXIgYXJtcyBvdXQgYW5kIG92ZXIgeW91ciBoZWFkLiBKdW1wIGJhY2sgdG8gc3RhbmRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvanVtcGluZ19qYWNrcy5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTJXNFpOU3dvV180XCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngzMFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDE0LFxyXG4gICAgICB0aXRsZTogXCJoZWVsIHRvdWNoXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiS2VlcCB5b3VyIGJhY2sgZmxhdCBhbmQgYmVuZCB5b3VyIGtuZWVzIHRvIGEgOTAtZGVncmVlIGFuZ2xlIHdpdGggeW91ciBmZWV0IGZpcm1seSBwbGFudGVkIG9uIHRoZSBmbG9vci4gRW5nYWdlIHlvdXIgY29yZSBhcyB5b3UgYmVuZCB5b3VyIHNwaW5lIHRvIHJlYWNoIHlvdXIgcmlnaHQgaGFuZCB0b3dhcmQgeW91ciByaWdodCBhbmtsZS4gUmVwZWF0IHRoaXMgbW92ZW1lbnQgb24geW91ciBsZWZ0IHNpZGUuIEtlZXAgeW91ciBsb3dlciBiYWNrIG9uIHRoZSBmbG9vci5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9oZWVsX3RvdWNoLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OWJSLWVseW9sQlFcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDIwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMTUsXHJcbiAgICAgIHRpdGxlOiBcImJpcmQgZG9nXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiQmVnaW4gb24gYWxsIGZvdXJzIGluIHRoZSB0YWJsZXRvcCBwb3NpdGlvbi4gVGhlbiBzdHJldGNoIHlvdXIgcmlnaHQgbGVnIGFuZCBsZWZ0IGFybSBhdCB0aGUgc2FtZSB0aW1lLiBIb2xkIGZvciBhIGZldyBzZWNvbmRzLCB0aGVuIGdvIGJhY2sgYW5kIHJlcGVhdCB3aXRoIHRoZSBvdGhlciBzaWRlLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2JpcmRfZG9nLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9djBvQ1llOF9fYlVcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDI1XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMTYsXHJcbiAgICAgIHRpdGxlOiBcInJldmVyc2UgY3J1bmNoZXNcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJMaWUgb24geW91ciBiYWNrIHdpdGggeW91ciBrbmVlcyB1cCBhbmQgaGFuZHMgYmVoaW5kIHlvdXIgaGVhZC4gTGlmdCB5b3VyIHNob3VsZGVycyBhbmQgdGhpZ2hzLCBhbmQgdGhlbiBzdHJldGNoIG91dC5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9yZXZlcnNlX2NydW5jaGVzLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VXdSZlJONWZZUmdcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDE4XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMTcsXHJcbiAgICAgIHRpdGxlOiBcImxlZyByYWlzZXJzXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIG9uIHlvdXIgYmFjaywgbGVncyBzdHJhaWdodCBhbmQgdG9nZXRoZXIuIEtlZXAgeW91ciBsZWdzIHN0cmFpZ2h0IGFuZCBsaWZ0IHRoZW0gYWxsIHRoZSB3YXkgdXAgdG8gdGhlIGNlaWxpbmcgdW50aWwgeW91ciBidXR0IGNvbWVzIG9mZiB0aGUgZmxvb3IuIFNsb3dseSBsb3dlciB5b3VyIGxlZ3MgYmFjayBkb3duIHRpbGwgdGhleSBhcmUganVzdCBhYm92ZSB0aGUgZmxvb3IuIEhvbGQgZm9yIGEgbW9tZW50LiBSYWlzZSB5b3VyIGxlZ3MgYmFjayB1cC4gUmVwZWF0LlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2xlZ19yYWlzZXJzLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ZEdLYlRLTG55bTRcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDhcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAxOCxcclxuICAgICAgdGl0bGU6IFwibHlpbmcgdHdpc3Qgc3RyZXRjaCBsZWZ0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgYXJtcyBleHRlbmRlZCBhdCB5b3VyIHNpZGVzLiBCZW5kIHlvdXIgbGVncyBhbmQgdHdpc3QgeW91ciBsZWdzIHRvIHRoZSBsZWZ0LiBIb2xkIHRoaXMgcG9zaXRpb24uIFRoaXMgZXhlcmNpc2Ugc3RyZXRjaGVzIHlvdXIgb2JsaXF1ZXMgYW5kIGxvd2VyIGJhY2suXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy9seWluZ190d2lzdF9zdHJldGNoX2xlZnQuanBnXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1aSS1qX1BPdHpsVVwiLFxyXG4gICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDE5LFxyXG4gICAgICB0aXRsZTogXCJseWluZyB0d2lzdCBzdHJldGNoIHJpZ2h0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgYXJtcyBleHRlbmRlZCBhdCB5b3VyIHNpZGVzLiBCZW5kIHlvdXIgbGVncyBhbmQgdHdpc3QgeW91ciBsZWdzIHRvIHRoZSByaWdodC4gSG9sZCB0aGlzIHBvc2l0aW9uLiBUaGlzIGV4ZXJjaXNlIHN0cmV0Y2hlcyB5b3VyIG9ibGlxdWVzIGFuZCBsb3dlciBiYWNrLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMvbHlpbmdfdHdpc3Rfc3RyZXRjaF9yaWdodC5qcGdcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVpJLWpfUE90emxVXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMjAsXHJcbiAgICAgIHRpdGxlOiBcIm1vdW50YWluIGNsaW1iZXJcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJQdXQgYm90aCBoYW5kcyBhbmQga25lZXMgb24gdGhlIGZsb29yLiBQbGFjZSB5b3VyIHJpZ2h0IGZvb3QgbmVhciB5b3VyIHJpZ2h0IGhhbmQgYW5kIGV4dGVuZCB5b3VyIGxlZnQgbGVnIGJlaGluZCB5b3UuIEluIG9uZSBzbW9vdGggbW90aW9uIHN3aXRjaCB5b3VyIGxlZ3MsIGtlZXBpbmcgeW91ciBhcm1zIGluIHRoZSBzYW1lIHBvc2l0aW9uLiBTd2l0Y2ggeW91ciBsZWdzIGJhY2sgYW5kIGZvcnRoIHR3aWNlLCBzdWNoIHRoYXQgeW91ciByaWdodCBsZWcgaXMgYWdhaW4gY2xvc2UgdG8geW91ciByaWdodCBoYW5kLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL21vdW50YWluX2NsaW1iZXIuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13UXEzeWJhTFplQVwiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MThcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAyMSxcclxuICAgICAgdGl0bGU6IFwiZG9ua2V5IGtpY2tzIGxlZnRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciBsZWZ0IGxlZyBhbmQgc3F1ZWV6ZSB5b3VyIGJ1dHQgYXMgbXVjaCBhcyB5b3UgY2FuLiBLZWVwIHlvdXIgY29yZSB0aWdodC5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9kb25rZXlfa2lja3NfbGVmdC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTRyYW5WUURxbGFVXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDIyLFxyXG4gICAgICB0aXRsZTogXCJkb25rZXkga2lja3MgcmlnaHRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIga25lZXMgdW5kZXIgeW91ciBidXR0IGFuZCB5b3VyIGhhbmRzIHVuZGVyIHlvdXIgc2hvdWxkZXJzLiBUaGVuIGxpZnQgeW91ciByaWdodCBsZWcgYW5kIHNxdWVlemUgeW91ciBidXR0IGFzIG11Y2ggYXMgeW91IGNhbi4gS2VlcCB5b3VyIGNvcmUgdGlnaHQuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZG9ua2V5X2tpY2tzX3JpZ2h0LmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NHJhblZRRHFsYVVcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMjMsXHJcbiAgICAgIHRpdGxlOiBcImJ1cnBlZXNcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFuZCB3aXRoIHlvdXIgZmVldCBzaG91bGRlci13aWR0aCBhcGFydCBhbmQgeW91ciBhcm1zIGJ5IHlvdXIgc2lkZXMuIExvd2VyIGludG8gYSBzcXVhdCBwb3NpdGlvbiBhbmQgcGxhY2UgeW91ciBoYW5kcyBvbiB0aGUgZmxvb3IuIEtpY2sgb3Igc3RlcCB5b3VyIGxlZ3MgYmFjayBpbnRvIGEgcGxhbmsgcG9zaXRpb24uIEp1bXAgb3Igc3RlcCB5b3VyIGxlZ3MgZm9yd2FyZCB0byByZXR1cm4gdG8gYSBzcXVhdCBwb3NpdGlvbi4gUmV0dXJuIHRvIHRoZSBzdGFuZGluZyBwb3NpdGlvbi5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9idXJwZWVzLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9ODE4U2tMQVB5S1lcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDVcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAyNCxcclxuICAgICAgdGl0bGU6IFwiZmx1dHRlciBraWNrc1wiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2sgd2l0aCB5b3VyIGFybXMgYXQgeW91ciBzaWRlcyBhbmQgbGVncyBzbGlnaHRseSBsaWZ0ZWQuIFRoZW4gcXVpY2tseSByYWlzZSB5b3VyIHJpZ2h0IGxlZyB1cCwgYW5kIHNpbXVsdGFuZW91cyBsb3dlciB5b3VyIGxlZnQgaGFuZC4gVGhpcyBleGVyY2lzZSBjYW4gaW5jcmVhc2UgY29yZSBzdHJlbmd0aCBhbmQgaW1wcm92ZSB5b3VyIGVuZHVyYW5jZS5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9mbHV0dGVyX2tpY2tzLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9SzV3dU1fZ05XeXdcIixcclxuICAgICAgcXVhbnRpdHk6IFwiMDA6MTVcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAyNSxcclxuICAgICAgdGl0bGU6IFwiZmlyZSBoeWRyYW50IHJpZ2h0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiQmVnaW4gb24geW91ciBoYW5kcyBhbmQga25lZXMgb24gdGhlIGZsb29yLCB5b3VyIGhhbmRzIGRpcmVjdGx5IGJlbmVhdGggdGhlIHNob3VsZGVycywgYW5kIGtuZWVzIHVuZGVyIHRoZSBoaXBzLiBUaGVuIHRyeSB0byBsaWZ0IHlvdXIgcmlnaHQgbGVnIHRvIHRoZSBzaWRlIGF0IGEgOTAgZGVncmVlIGFuZ2xlLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2ZpcmVfaHlkcmFuZF9yaWdodC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTdMbnVoTGktNzhJXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDI2LFxyXG4gICAgICB0aXRsZTogXCJpbmNod29ybXNcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFydCB3aXRoIHlvdXIgZmVldCBzaG91bGRlciB3aWR0aCBhcGFydC4gSGluZ2UgeW91ciBib2R5IGZvcndhcmQgYW5kIHdhbGsgeW91ciBoYW5kcyBvdXQgaW4gZnJvbnQgb2YgeW91IGFsb25nIHRoZSBmbG9vciwga2VlcGluZyB5b3VyIGZlZXQgaW4gcGxhY2UuIENvbnRpbnVlIHdhbGtpbmcgeW91ciBhcm1zIG91dCBwYXN0IHRoZSBwbGFuayBwb3NpdGlvbi4gWW91ciBhcm1zIHNob3VsZCBiZSBhYm92ZSB5b3VyIGhlYWQgYW5kIHlvdXIgZmVldCBzaG91bGQgc3RpbGwgYmUgYXQgdGhlIGJhY2sgb2YgdGhlIG1hdC4gU3RhcnQgd2Fsa2luZyB5b3VyIGZlZXQgdG93YXJkcyB5b3VyIGhhbmRzIGluIHNtYWxsIHN0ZXBzLiBDb250aW51ZSBpbmNoaW5nIHlvdXIgYm9keSB1cCB1bnRpbCB5b3VyIGZlZXQgbWVldCB5b3VyIHBhbG1zLCB0aGVuIHJlcGVhdCB0aGUgbW92ZW1lbnQuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvaW5jaHdvcm1zLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9WlkyamlfSG8wZEFcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMjcsXHJcbiAgICAgIHRpdGxlOiBcInNraXBwaW5nIHdpdGhvdXQgcm9wZVwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIlRoaXMgaXMgYSBnb29kIHdhcm0tdXAgZXhlcmNpc2UuIFByZXRlbmQgdG8gaG9sZCBhIHNraXBwaW5nIHJvcGUgaGFuZGxlIGluIGVhY2ggaGFuZC4gSnVtcCBhbmQgYWx0ZXJuYXRlbHkgbGFuZCBvbiB0aGUgYmFsbHMgb2YgeW91ciBmZWV0LCByb3RhdGluZyB5b3VyIHdyaXN0cyBhdCB0aGUgc2FtZSB0aW1lIGFzIHlvdSBhcyBpZiB5b3Ugd2VyZSBzcGlubmluZyBhIHJvcGUuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2tpcHBpbmdfd2l0aG91dF9yb3BlLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Q1lHZWF6bE5iVTRcIixcclxuICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAyOCxcclxuICAgICAgdGl0bGU6IFwibHlpbmcgYnV0dGVyZmx5IHN0cmV0Y2hcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJMaWUgb24gdGhlIGZsb29yIHdpdGggeW91ciBmZWV0IHRvZ2V0aGVyLiBPcGVuIHlvdXIga25lZXMgdG8gdGhlIHNpZGVzLiBIb2xkIHRoaXMgcG9zaXRpb24uXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL3BuZy9seWluZ19idXR0ZXJmbHlfc3RyZXRjaC5wbmdcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWJ6ZlkwWnIzc1VFXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMjksXHJcbiAgICAgIHRpdGxlOiBcImx1bmdlc1wiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIlN0YXJ0IGluIGEgc3RhbmRpbmcgcG9zaXRpb24gd2l0aCB5b3VyIGZlZXQgaGlwLXdpZHRoIGFwYXJ0LiBTdGVwIGZvcndhcmQgbG9uZ2VyIHRoYW4gYSB3YWxraW5nIHN0cmlkZSBzbyBvbmUgbGVnIGlzIGFoZWFkIG9mIHlvdXIgdG9yc28gYW5kIHRoZSBvdGhlciBpcyBiZWhpbmQuIFlvdXIgZm9vdCBzaG91bGQgbGFuZCBmbGF0IGFuZCByZW1haW4gZmxhdCB3aGlsZSBpdCBpcyBvbiB0aGUgZ3JvdW5kLiBZb3VyIHJlYXIgaGVlbCB3aWxsIHJpc2Ugb2ZmIG9mIHRoZSBncm91bmQuIEJlbmQgeW91ciBrbmVlcyB0byBhcHByb3hpbWF0ZWx5IDkwIGRlZ3JlZXMgYXMgeW91IGxvd2VyIHlvdXJzZWxmLiBSZW1lbWJlciB0byBrZWVwIHlvdXIgdHJ1bmsgdXByaWdodCBhbmQgY29yZSBlbmdhZ2VkLiBUaGVuLCBmb3JjZWZ1bGx5IHB1c2ggb2ZmIGZyb20geW91ciBmcm9udCBsZWcgdG8gcmV0dXJuIHRvIHRoZSBzdGFydGluZyBwb3NpdGlvbi5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9sdW5nZXMuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj15SWMxWWJWTE1aOFwiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTRcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAzMCxcclxuICAgICAgdGl0bGU6IFwiY2xhcHMgb3ZlciBoZWFkXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiU3RhbmQgd2l0aCB5b3VyIGZlZXQgc2hvdWxkZXIgd2lkdGggYXBhcnQgYW5kIGFybXMgZXh0ZW5kZWQgdG8gdGhlIHNpZGVzLiBSYWlzZSB5b3VyIGFybXMgYW5kIGNsYXAgb3ZlciB5b3VyIGhlYWQuIEtlZXAgeW91ciBhcm1zIHN0cmFpZ2h0IGR1cmluZyB0aGUgZXhlcmNpc2UuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvY2xhcHNfb3Zlcl9oZWFkLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Mmk4MGZqcDVzYVVcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDE1XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMzEsXHJcbiAgICAgIHRpdGxlOiBcImFkZHVjdG9yIHN0cmV0Y2ggaW4gc3RhbmRpbmdcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFuZCB0YWxsIHdpdGggeW91ciBjaGVzdCB1cCBhbmQgeW91ciBjb3JlIHRpZ2h0LiBTdGVwIGRpcmVjdGx5IHRvIHRoZSBsZWZ0LCBsZWF2aW5nIHlvdXIgcmlnaHQgZm9vdCBpbiBwbGFjZS4gQmVuZCB0aGUgbGVmdCBrbmVlIGFuZCBwYXVzZSBvbmNlIHRoZSB1cHBlciBsZWZ0IHRoaWdoIGlzIHBhcmFsbGVsIHRvIHRoZSBncm91bmQuIHlvdXIgcmlnaHQgbGVnIHNob3VsZCBiZSBjb21wbGV0ZWx5IHN0cmFpZ2h0LiBUb2VzIG9uIGJvdGggZmVldCBzaG91bGQgYmUgcG9pbnRlZCBzdHJhaWdodCBhaGVhZC4gSG9sZCB0aGlzIHN0cmV0Y2ggZm9yIDIwIHRvIDQwIHNlY29uZHMuIFJldHVybiB0byB0aGUgc3RhcnRpbmcgcG9zaXRpb24gYW5kIHJlcGVhdCBvbiB0aGUgb3RoZXIgc2lkZS5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9hZGR1Y3Rvcl9zdHJldGNoX2luX3N0YW5kaW5nLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TWpGYjJNeWFOanNcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDE1XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMzIsXHJcbiAgICAgIHRpdGxlOiBcInN0YW5kaW5nIGJpY3ljbGUgY3J1bmNoZXNcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFuZCB3aXRoIGZlZXQgdG9nZXRoZXIsIGtuZWVzIHNsaWdodGx5IGJlbnQsIGhhbmRzIGJlaGluZCBoZWFkLiBCcmFjZSBhYnMgaW4gdGlnaHQgYW5kIGxpZnQgbGVmdCBrbmVlIHVwIGFzIHJpZ2h0IHNob3VsZGVyIHJvdGF0ZXMgdG93YXJkcyBrbmVlICh0cnkgdG8gdG91Y2gpLiBMb3dlciBiYWNrIHRvIHN0YXJ0LlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3N0YW5kaW5nX2JpY3ljbGVfY3J1bmNoLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OGxzQVh6dlZIcmNcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDE0XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMzMsXHJcbiAgICAgIHRpdGxlOiBcImFybSBzY2lzc29yc1wiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIkJlZ2luIGJ5IHN0YW5kaW5nIHdpdGggZ29vZCBwb3N0dXJlIGFuZCByYWlzaW5nIHlvdXIgYXJtcyBzdHJhaWdodCBvdXQgaW4gZnJvbnQgb2YgeW91ciBib2R5LiBLZWVwaW5nIHlvdXIgYXJtcyBwYXJhbGxlbCB0byB0aGUgZ3JvdW5kLCByZXRyYWN0IHRoZW0gdW50aWwgdGhleSBhcmUgZXZlbiB3aXRoIHlvdXIgdG9yc28uIFJldHVybiB0byB0aGUgc3RhcnQgcG9zaXRpb24gYWxsb3dpbmcgeW91ciBhcm1zIHRvIGNyb3NzIG92ZXIuIFJlcGVhdCB0aGUgbW92ZW1lbnQsIGFsdGVybmF0aW5nIHRoZSByb3AgYW5kIGJvdHRvbSBoYW5kIG9uIGVhY2ggZm9yd2FyZCBwYXNzLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2FybV9zY2lzc29ycy5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXBGckpRLU15TDEwXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIjAwOjE1XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMzQsXHJcbiAgICAgIHRpdGxlOiBcInNpZGUgbHVuZ2VzXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiU3RhcnQgd2l0aCB5b3VyIGZlZXQgc2hvdWxkZXItd2lkdGggYXBhcnQsIHRvZXMgcG9pbnRlZCBzdHJhaWdodCBmb3J3YXJkLiBTdGVwIG91dCB3aXRoIHlvdXIgcmlnaHQgZm9vdCBhcyB3aWRlIGFzIHBvc3NpYmxlLiBFbmdhZ2UgdGhyb3VnaCB0aGUgcmlnaHQgaGVlbCBhcyB5b3UgZHJvcCB5b3VyIGhpcHMgZG93biBhbmQgYmFjayB3aGlsZSBrZWVwaW5nIHRoZSBsZWZ0IGxlZyBzdHJhaWdodCwgc3RyZXRjaGluZyB0aGUgZ3JvaW4gb24gdGhlIGxlZnQgbGVnIGFuZCBrZWVwaW5nIGJvdGggc29sZXMgb2YgdGhlIGZlZXQgb24gdGhlIGdyb3VuZCBhbmQgdG9lcyBwb2ludGVkIHN0cmFpZ2h0IGZvcndhcmQuIE1ha2Ugc3VyZSB5b3VyIHJpZ2h0IGtuZWUgaXMgdHJhY2tpbmcgb3ZlciB5b3VyIHJpZ2h0IGZvb3QgdGhlIHdob2xlIG1vdGlvbi4gUG93ZXJmdWxseSB5b3VyIHJpZ2h0IGhlZWwgaW50byB0aGUgZmxvb3IgdG8gcHVzaCB5b3Vyc2VsZiBiYWNrIHRvIHRoZSBmdWxsIHN0YW5kaW5nIHN0YXJ0IHBvc2l0aW9uLiBUaGlzIGV4ZXJjaXNlIHN0cmVuZ3RoZW5zIHlvdXIgZ2x1dGVzIGFuZCB0aGlnaHMuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2lkZV9sdW5nZXMuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj10bFVnMURYaEhtOFwiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTRcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAzNSxcclxuICAgICAgdGl0bGU6IFwic2lkZSBseWluZyBsZWcgbGlmdCBsZWZ0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIGRvd24gb24geW91ciByaWdodCBzaWRlIG9uIGEgbWF0IG9yIHRoZSBmbG9vci4gWW91ciBib2R5IHNob3VsZCBiZSBpbiBhIHN0cmFpZ2h0IGxpbmUgd2l0aCB5b3VyIGxlZ3MgZXh0ZW5kZWQgYW5kIGZlZXQgc3RhY2tlZCBvbiB0b3Agb2YgZWFjaCBvdGhlci4gUGxhY2UgeW91ciBhcm0gc3RyYWlnaHQgb24gdGhlIGZsb29yIHVuZGVyIHlvdXIgaGVhZCBvciBiZW5kIHlvdXIgZWxib3cgYW5kIGNyYWRsZSB5b3VyIGhlYWQgZm9yIHN1cHBvcnQuIFBsYWNlIHlvdXIgbGVmdCBoYW5kIG91dCBmcm9udCBmb3IgZXh0cmEgc3VwcG9ydCBvciBsZXQgaXQgcmVzdCBvbiB5b3VyIGxlZyBvciBoaXAuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2lkZV9seWluZ19sZWdfbGlmdF9sZWZ0LmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Vmx3QkpFMVd0T1FcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMzYsXHJcbiAgICAgIHRpdGxlOiBcInNpZGUgbHlpbmcgbGVnIGxpZnQgcmlnaHRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJMaWUgZG93biBvbiB5b3VyIGxlZnQgc2lkZSBvbiBhIG1hdCBvciB0aGUgZmxvb3IuIFlvdXIgYm9keSBzaG91bGQgYmUgaW4gYSBzdHJhaWdodCBsaW5lIHdpdGggeW91ciBsZWdzIGV4dGVuZGVkIGFuZCBmZWV0IHN0YWNrZWQgb24gdG9wIG9mIGVhY2ggb3RoZXIuIFBsYWNlIHlvdXIgYXJtIHN0cmFpZ2h0IG9uIHRoZSBmbG9vciB1bmRlciB5b3VyIGhlYWQgb3IgYmVuZCB5b3VyIGVsYm93IGFuZCBjcmFkbGUgeW91ciBoZWFkIGZvciBzdXBwb3J0LiBQbGFjZSB5b3VyIHJpZ2h0IGhhbmQgb3V0IGZyb250IGZvciBleHRyYSBzdXBwb3J0IG9yIGxldCBpdCByZXN0IG9uIHlvdXIgbGVnIG9yIGhpcC5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zaWRlX2x5aW5nX2xlZ19saWZ0X3JpZ2h0LmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Vmx3QkpFMVd0T1FcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMzcsXHJcbiAgICAgIHRpdGxlOiBcImNsYXBwaW5nIGNydW5jaGVzXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiU2l0IG9uIHRoZSBmbG9vciB3aXRoIHlvdXIga25lZXMgYmVudCwgZmVldCBsaWZ0ZWQgYSBsaXR0bGUgYml0IGFuZCBiYWNrIHRpdGxlZCBiYWNrd2FyZHMuIEFsdGVybmF0ZWx5IGxpZnQgeW91ciBsZWdzIGFuZCBjbGFwIHVuZGVyIHlvdXIga25lZXMuIEV4aGFsZSB3aGVuIHlvdSBsaWZ0IHlvdXIgbGVncyBhbmQgY2xhcCB1bmRlciB5b3VyIGtuZWVzLiBLZWVwIHlvdXIgdXBwZXIgYm9keSBzdGlsbCBhbmQgeW91ciBuZWNrIG5ldXRyYWwuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL3BuZy9jbGFwcGluZ19jcnVuY2hlcy5wbmdcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUxVUXQyd1NPRk5NXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxMFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDM4LFxyXG4gICAgICB0aXRsZTogXCJiaWN5Y2xlIGNydW5jaGVzXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIGZsYXQgb24gYW4gZXhlcmNpc2UgbWF0IHdpdGggeW91ciBmYWNlIHVwLCB5b3VyIGxlZ3Mgc3RyYWlnaHQsIHlvdXIgZmVldCBvbiB0aGUgZmxvb3IsIGFuZCB5b3VyIGhlYWQgYW5kIHNob3VsZGVycyBzbGlnaHRseSByYWlzZWQgb2ZmIHRoZSBtYXQuIFBsYWNlIGJvdGggb2YgeW91ciBoYW5kcyBvbiB0aGUgYmFjayBvZiB5b3VyIGhlYWQgd2l0aG91dCBpbnRlcmxvY2tpbmcgeW91ciBmaW5nZXJzLiBSYWlzZSB5b3VyIGtuZWVzIHRvd2FyZCB5b3VyIGNoZXN0IHVudGlsIHlvdXIgc2hpbnMgYXJlIHBhcmFsbGVsIHRvIHRoZSBmbG9vci5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9iaWN5Y2xlX2NydW5jaGVzLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LW5Ka0FKcFFlbUlcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDE0XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogMzksXHJcbiAgICAgIHRpdGxlOiBcInJ1c3NpYW4gdHdpc3RcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTaXQgd2l0aCB5b3VyIGZlZXQgc2xpZ2h0bHkgbGlmdGVkIGFuZCBiYWNrIHRpdGxlZCBiYWNrd2FyZHMuIFRoZW4gaG9sZCB5b3VyIGhhbmRzIHRvZ2V0aGVyIGFuZCB0d2lzdCBmcm9tIHNpZGUgdG8gc2lkZS4gS2VlcCB5b3VyIGxlZ3Mgc3RpbGwgd2hlbiB0d2lzdGluZyBhbmQgeW91ciBuZWNrIG5ldXRyYWwuIFRpZ2h0ZW4geW91ciBhYnMuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvcnVzc2lhbl90d2lzdC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PURKUUdYMko0SVZ3XCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxNlwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDQwLFxyXG4gICAgICB0aXRsZTogXCJyZWNsaW5lZCBvYmxpcXVlIHR3aXN0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIgbGVncyBleHRlbmRlZCBhbmQgeW91ciBlbGJvdyBkaXJlY3RseSB1bmRlciB5b3VyIHNob3VsZGVycy4gTElmdCB5b3VyIGxlZnQgbGVnIHVwIGF0IGEgNDUgZGVncmVlIGFuZ2xlIHdoaWxlIHJlYWNoaW5nIHlvdXIgcmlnaHQgYXJtIG92ZXIgdG8geW91ciBsZWZ0IHNpZGUuIFRoZW4gc2xvd2x5IGdvIGJhY2sgdG8gdGhlIHN0YXJ0aW5nIHBvc2l0aW9uLiBSZXBlYXQgc2V2ZXJhbCB0aW1lcywgYW5kIHRoZW4gc3dpdGNoIHRvIHRoZSBvdGhlciBzaWRlLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3JlY2xpbmVkX29ibGlxdWVfdHdpc3QuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1YS1c1anJ1NXBHb1wiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTZcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA0MSxcclxuICAgICAgdGl0bGU6IFwiaGVlbHMgdG8gdGhlIGhlYXZlblwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIkxpZSBvbiB5b3VyIGJhY2ssIHBvc2l0aW9uIHlvdXIgYXJtcyBvdXQgdG8geW91ciBzaWRlcy4gRnJvbSBoZXJlLCBhY3RpdmF0ZSB0aGUgbG93ZXIgYWJkb21pbmFscyBhbmQgbGlmdCB0aGUgbGVncyB1bnRpbCB0aGV5IGFyZSBwZXJwZW5kaWN1bGFyIHRvIHRoZSBncm91bmQuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvaGVlbHNfdG9fdGhlIGhlYXZlbi5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXdkUzJVNnowSkdZXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDQyLFxyXG4gICAgICB0aXRsZTogXCJjcm9zcyBrbmVlIHBsYW5rXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiR2V0IG9uIHRoZSBmbG9vciBvbiBhbGwgZm91cnMgYW5kIGFzc3VtZSBhIHB1c2ggdXAgb3IgYWIgcGxhbmsgcG9zaXRpb24uIFRvIGV4ZWN1dGUgdGhpcyBtb3ZlLCBzcXVlZXplIHRoZSBhYnMgYW5kIGJyaW5nIHlvdXIgbGVmdCBsZWcgdXAgdG8geW91ciByaWdodCBlbGJvdyBhbmQgYmFjay4gUmVwZWF0IHdpdGggdGhlIG9wcG9zaXRlIGxlZy5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9jcm9zc19rbmVlX3BsYW5rLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TzRmRklZcFl5U1VcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDI4XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNDMsXHJcbiAgICAgIHRpdGxlOiBcImNyb3NzIGFybSBjcnVuY2hlc1wiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIkxpZSBmbGF0IG9uIHlvdXIgYmFjayBhbmQgY3Jvc3MgeW91ciBhcm1zIGFjcm9zcyB5b3VyIGNoZXN0LiBCZW5kIHlvdXIga25lZXMgYW5kIGZpcm1seSBwbGFudCB5b3VyIGZlZXQgb24gdGhlIGZsb29yLiBCcmFjZSB5b3VyIGNvcmUgYW5kIGxpZnQgeW91ciBzaG91bGRlcnMgYW5kIHVwcGVyIGJhY2sgb2ZmIG9mIHRoZSBmbG9vci4gSG9sZCBhdCB0aGUgdG9wIGZvciBhIHNlY29uZCBhbmQgdGhlbiByZXRyYWN0IGJhY2sgZG93biB0byBzdGFydGluZyBwb3NpdGlvbi5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9jcm9zc19hcm1fY3J1bmNoZXMuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1RejN5bHFxSjkwTVwiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MThcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA0NCxcclxuICAgICAgdGl0bGU6IFwieCBtYW4gY3J1bmNoXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIGRvd24gb24gdGhlIGZsb29yLiBUYWtlIHRoZSB4IHBvc2l0aW9uLCBrZWVwaW5nIHlvdXIgaGFuZHMgYW5kIGZlZXQgb2ZmIHRoZSBncm91bmQuIEJyaW5nIHlvdXIgYXJtcyBhbmQgbGVncyB0b2dldGhlciBpbiB0aGUgbWlkZGxlLyBHbyBiYWNrIHRvIHN0YXJ0aW5nIHBvc2l0aW9uLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3hfbWFuX2NydW5jaC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWZfWnNKZ2FxRk5FXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxOFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDQ1LFxyXG4gICAgICB0aXRsZTogXCJzaWRlIGNydW5jaGVzIGxlZnRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJMaWUgb24geW91ciBzaWRlIHdpdGggeW91ciBsZWdzIHN0cmFpZ2h0IGFuZCBhcm0gY2xvc2VzdCB0byB0aGUgZmxvb3IgZXh0ZW5kZWQgb3V0IGluIGZyb250IG9mIHlvdSBmb3Igc3VwcG9ydCAsIHdpdGggeW91ciBvdGhlciBoYW5kIHJlc3Rpbmcgb24geW91ciBoZWFkIGZvciBiYWxhbmNlLiBDcnVuY2ggeW91ciBvYmxpcXVlcy5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zaWRlX2NydW5jaF9sZWZ0LmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dzBPV0ZqZkkzek1cIixcclxuICAgICAgcXVhbnRpdHk6IFwieDE2XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNDYsXHJcbiAgICAgIHRpdGxlOiBcInNpZGUgY3J1bmNoZXMgcmlnaHRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJMaWUgb24geW91ciBzaWRlIHdpdGggeW91ciBsZWdzIHN0cmFpZ2h0IGFuZCBhcm0gY2xvc2VzdCB0byB0aGUgZmxvb3IgZXh0ZW5kZWQgb3V0IGluIGZyb250IG9mIHlvdSBmb3Igc3VwcG9ydCAsIHdpdGggeW91ciBvdGhlciBoYW5kIHJlc3Rpbmcgb24geW91ciBoZWFkIGZvciBiYWxhbmNlLiBDcnVuY2ggeW91ciBvYmxpcXVlcy5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zaWRlX2NydW5jaF9yaWdodC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXcwT1dGamZJM3pNXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxNlwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDQ3LFxyXG4gICAgICB0aXRsZTogXCJ2aG9sZFwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIlNpdCBvbiB0aGUgZmxvb3IsIGxpZnQgeW91ciBsZWdzIHVwIGF0IGEgNDUgZGVncmVlIGFuZ2xlLCBhbmQgbGVhbiB5b3VyIHVwcGVyIGJvZHkgYmFjayBhdCBhIDQ1IGRlZ3JlZSBhbmdsZS4gU3RyZXRjaCB5b3VyIGFybXMgZm9yd2FyZC4gSG9sZCB0aGlzIHBvc2l0aW9uLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9pbWFnZXMvdmhvbGQuanBnXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1XR3dJNjI5YVRBWVwiLFxyXG4gICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDQ4LFxyXG4gICAgICB0aXRsZTogXCJzdGFuZGluZyBnbHV0ZSBraWNrYmFja3MgbGVmdFwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcItChb250cmFjdCB5b3VyIGNvcmUgbXVzY2xlcy4gRXh0ZW5kIHlvdXIgbGVmdCBsZWcgYmFjayBhbmQgdXAuIFRoZSBzb2xlIG9mIHlvdXIgcmlnaHQgZm9vdCBzaG91bGQgYmUgZmFjaW5nIHRoZSBjZWlsaW5nLiBDb250cmFjdCB5b3VyIGdsdXRlIGF0IHRoZSB0b3Agb2YgdGhlIG1vdmUgYW5kIGhvbGQgZm9yIGEgYml0LiBSZXR1cm4gdG8geW91ciBzdGFydGluZyBwb3NpdGlvbiBhbmQgcmVwZWF0LlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3N0YW5kaW5nX2dsdXRlX2tpY2tiYWNrc19sZWZ0LmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9cG4yRVpqRUVfWlVcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNDksXHJcbiAgICAgIHRpdGxlOiBcInN0YW5kaW5nIGdsdXRlIGtpY2tiYWNrcyByaWdodFwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIkdldCBpbnRvIGFsbCBmb3Vycywgd2l0aCBhIHN0cmFpZ2h0IHNwaW5lLCBhbmQgY29udHJhY3QgeW91ciBjb3JlIG11c2NsZXMuIEV4dGVuZCB5b3VyIHJpZ2h0IGxlZyBiYWNrIGFuZCB1cCB1bnRpbCB5b3VyIHRoaWdoIGlzIHBhcmFsbGVsIHdpdGggdGhlIGdyb3VuZC4gVGhlIHNvbGUgb2YgeW91ciByaWdodCBmb290IHNob3VsZCBiZSBmYWNpbmcgdGhlIGNlaWxpbmcuIENvbnRyYWN0IHlvdXIgZ2x1dGUgYXQgdGhlIHRvcCBvZiB0aGUgbW92ZSBhbmQgaG9sZCBmb3IgYSBiaXQuIFJldHVybiB0byB5b3VyIHN0YXJ0aW5nIHBvc2l0aW9uIHdpdGhvdXQgdG91Y2hpbmcgeW91ciBrbmVlIHRvIHRoZSBncm91bmQgYW5kIHJlcGVhdC5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zdGFuZGluZ19nbHV0ZV9raWNrYmFja3NfcmlnaHQuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1wbjJFWmpFRV9aVVwiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTBcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA1MCxcclxuICAgICAgdGl0bGU6IFwia25lZWxpbmcgbHVuZ2Ugc3RyZXRjaCBsZWZ0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiS25lZWwgb24gYSBtYXQgd2l0aCBib3RoIGtuZWVzLCB0aGVuIHBsYWNlIG9uZSBmb290IGZvcndhcmQgc28gdGhhdCB5b3UgaGF2ZSBhIDkwLWRlZ3JlZSBhbmdsZSBhdCB0aGUgaGlwIGFuZCBrbmVlLiBQbGFjZSB5b3VyIGhhbmRzIG9uIHRoZSBmcm9udCBrbmVlIGZvciBzdXBwb3J0IChpZiBuZWVkZWQpLiBUaGlzIGlzIHRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUga25lZWxpbmcgaGlwIGZsZXhvciBzdHJldGNoLiBLZWVwaW5nIHRoZSB0b3JzbyB1cHJpZ2h0LCBzbG93bHkgbGVhbiBmb3J3YXJkIHVudGlsIHlvdSBmZWVsIGEgY29tZm9ydGFibGUgc3RyZXRjaCB0aHJvdWdoIHRoZSBncm9pbiBhbmQgdG9wIG9mIHRoZSB0aGlnaCAocmVhciBsZWcpLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2tuZWVsaW5nX2x1bmdlX3N0cmV0Y2hfbGVmdC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTN3dGhtdktXb09VXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNTEsXHJcbiAgICAgIHRpdGxlOiBcImtuZWVsaW5nIGx1bmdlIHN0cmV0Y2ggcmlnaHRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJLbmVlbCBvbiBhIG1hdCB3aXRoIGJvdGgga25lZXMsIHRoZW4gcGxhY2Ugb25lIGZvb3QgZm9yd2FyZCBzbyB0aGF0IHlvdSBoYXZlIGEgOTAtZGVncmVlIGFuZ2xlIGF0IHRoZSBoaXAgYW5kIGtuZWUuIFBsYWNlIHlvdXIgaGFuZHMgb24gdGhlIGZyb250IGtuZWUgZm9yIHN1cHBvcnQgKGlmIG5lZWRlZCkuIFRoaXMgaXMgdGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBrbmVlbGluZyBoaXAgZmxleG9yIHN0cmV0Y2guIEtlZXBpbmcgdGhlIHRvcnNvIHVwcmlnaHQsIHNsb3dseSBsZWFuIGZvcndhcmQgdW50aWwgeW91IGZlZWwgYSBjb21mb3J0YWJsZSBzdHJldGNoIHRocm91Z2ggdGhlIGdyb2luIGFuZCB0b3Agb2YgdGhlIHRoaWdoIChyZWFyIGxlZykuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMva25lZWxpbmdfbHVuZ2Vfc3RyZXRjaF9yaWdodC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTN3dGhtdktXb09VXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNTIsXHJcbiAgICAgIHRpdGxlOiBcImJvdHRvbSBsZWcgbGlmdCBsZWZ0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIG9uIHlvdXIgbGVmdCBzaWRlIHdpdGggeW91ciBoZWFkIHJlc3Rpbmcgb24geW91ciBsZWZ0IGhhbmQuIFRoZW4gcHV0IHlvdXIgcmlnaHQgZm9vdCBmb3J3YXJkIG9uIHRoZSBmbG9vciBMaWZ0IHlvdXIgbGVmdCBsZWcgdXAgYW5kIGRvd24uXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYm90dG9tX2xlZ19saWZ0X2xlZnQuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1EbTFHU1gxdkl0WVwiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA1MyxcclxuICAgICAgdGl0bGU6IFwiYm90dG9tIGxlZyBsaWZ0IHJpZ2h0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIG9uIHlvdXIgcmlnaHQgc2lkZSB3aXRoIHlvdXIgaGVhZCByZXN0aW5nIG9uIHlvdXIgcmlnaHQgaGFuZC4gVGhlbiBwdXQgeW91ciBsZWZ0IGZvb3QgZm9yd2FyZCBvbiB0aGUgZmxvb3IgTGlmdCB5b3VyIHJpZ2h0IGxlZyB1cCBhbmQgZG93bi5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9ib3R0b21fbGVnX2xpZnRfcmlnaHQuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1EbTFHU1gxdkl0WVwiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA1NCxcclxuICAgICAgdGl0bGU6IFwic3BsaXQgc3F1YXQgbGVmdFwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIkZyb20gYSBzdGFuZGluZyBwb3NpdGlvbiwgdGFrZSBhIGxvbmcgc3RlcCBmb3J3YXJkIGFzIGlmIHBlcmZvcm1pbmcgYSBsdW5nZS4gVGhlIGhlZWwgb2YgeW91ciBiYWNrIGZvb3Qgc2hvdWxkIGJlIHJhaXNlZC4gS2VlcGluZyB5b3VyIHRvcnNvIHN0cmFpZ2h0LCBsb3dlciBzbG93bHkgdW50aWwgeW91ciBiYWNrIGtuZWUgYWxtb3N0IHRvdWNoZXMgdGhlIGZsb29yLCB0aGVuIHB1c2ggYmFjayB1cC5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zcGxpdF9zcXVhdF9sZWZ0LmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9U0ZTWlZLenFuWEFcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNTUsXHJcbiAgICAgIHRpdGxlOiBcImN1cnRzeSBsdW5nZXNcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFuZCB3aXRoIHlvdXIgZmVldCBoaXAtd2lkdGggYXBhcnQsIGhhbmRzIG9uIHlvdXIgaGlwcy4gVGFrZSBhIGJpZyBzdGVwIGJhY2sgd2l0aCB5b3VyIHJpZ2h0IGxlZywgY3Jvc3NpbmcgaXQgYmVoaW5kIHlvdXIgbGVmdC4gQmVuZCB5b3VyIGtuZWVzIGFuZCBsb3dlciB5b3VyIGhpcHMgdW50aWwgeW91ciBsZWZ0IHRoaWdoIGlzIG5lYXJseSBwYXJhbGxlbCB0byB0aGUgZmxvb3IuIEtlZXAgeW91ciB0b3JzbyB1cHJpZ2h0IGFuZCB5b3VyIGhpcHMgYW5kIHNob3VsZGVycyBhcyBzcXVhcmUgYXMgcG9zc2libGUgdG8gdGhlIHdhbGwgaW4gZnJvbnQgb2YgeW91LiBUaGVuIHJlcGVhdCBvbiB0aGUgb3RoZXIgc2lkZS5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9jdXJ0c3lfbHVuZ2VzLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LXJUeUtsSGpZVDhcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDE0XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNTYsXHJcbiAgICAgIHRpdGxlOiBcImx1bmdlIGtuZWUgaG9wcyByaWdodFwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIkZyb20gYSBzdGFuZGluZyBwb3NpdGlvbiwgc3RlcCBiYWNrIGludG8gYSBsdW5nZS4gQnJpbmcgc2FtZSBsZWcgaW4gZnJvbnQgd2l0aCBrbmVlIGJlbnQuIEhvcCBvZmYgdGhlIGdyb3VuZCwgYnJpbmdpbmcga25lZXMgYXMgaGlnaHQgYXMgeW91IGNhbi4gUmVwZWF0IHdpdGggc2FtZSBsZWcgZm9yIHRoaXMgc2VnbWVudC4gU3dpdGNoIGxlZ3MgZm9yIGVhY2ggZm9sbG93aW5nIHNlZ21lbnQuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvbHVuZ2Vfa25lZV9ob3BzX3JpZ2h0LmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TlN5M1FLc1o3dUlcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDEyXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNTcsXHJcbiAgICAgIHRpdGxlOiBcImx1bmdlIGtuZWUgaG9wcyBsZWZ0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiRnJvbSBhIHN0YW5kaW5nIHBvc2l0aW9uLCBzdGVwIGJhY2sgaW50byBhIGx1bmdlLiBCcmluZyBzYW1lIGxlZyBpbiBmcm9udCB3aXRoIGtuZWUgYmVudC4gSG9wIG9mZiB0aGUgZ3JvdW5kLCBicmluZ2luZyBrbmVlcyBhcyBoaWdodCBhcyB5b3UgY2FuLiBSZXBlYXQgd2l0aCBzYW1lIGxlZyBmb3IgdGhpcyBzZWdtZW50LiBTd2l0Y2ggbGVncyBmb3IgZWFjaCBmb2xsb3dpbmcgc2VnbWVudC5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9sdW5nZV9rbmVlX2hvcHNfbGVmdC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PU5TeTNRS3NaN3VJXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDU4LFxyXG4gICAgICB0aXRsZTogXCJiZW5jaCBnbHV0ZSBraWNrIGJhY2sgbGVmdFwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjogXCJTYW1lIHdpdGggZ2x1dGUga2lja2JhY2tzLCBqdXN0IHdvcmsgd2l0aCBhIGJlbmNoLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2JlbmNoX2dsdXRlX2tpY2tfYmFja19sZWZ0LmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TWk0SDZZVVZNQ1FcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDE2XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNTksXHJcbiAgICAgIHRpdGxlOiBcImJlbmNoIGdsdXRlIGtpY2sgYmFjayByaWdodFwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjogXCJTYW1lIHdpdGggZ2x1dGUga2lja2JhY2tzLCBqdXN0IHdvcmsgd2l0aCBhIGJlbmNoLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2JlbmNoX2dsdXRlX2tpY2tfYmFja19yaWdodC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PU1pNEg2WVVWTUNRXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxNlwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDYwLFxyXG4gICAgICB0aXRsZTogXCJzdW1vIHNxdWF0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiU3RhcnQgaW4gYSB0cmFkaXRpb25hbCBzcXVhdCBzdGFuY2Ugd2l0aCB5b3VyIGZlZXQgYWJvdXQgc2hvdWxkZXItd2lkdGggYXBhcnQgYW5kIHRvZXMgcG9pbnRlZCBmb3J3YXJkLiBDbGFzcCB5b3VyIGhhbmRzIHRvZ2V0aGVyIGF0IHlvdXIgY2hlc3QuIFRha2UgYSBzdGVwIHRvIHRoZSBzaWRlIHdpdGggeW91ciByaWdodCBmb290IHVudGlsIHlvdXIgc3RhbmNlIGlzIDPigJM0IGZlZXQgd2lkZSwgb3Igd2lkZXIgdGhhbiBoaXAgd2lkdGguIFdpZGVyIGlzIE9LIGFzIGxvbmcgYXMgeW91IGNhbiBwZXJmb3JtIHRoZSBtb3ZlIGNvcnJlY3RseS4gTW92ZSB5b3VyIGhpcHMgYmFjayBzbGlnaHRseSBhbmQgYmVuZCB5b3VyIGtuZWVzIGFzIHlvdSBsb3dlciB5b3VyIGJvZHkgaW50byBhIHNxdWF0IHBvc2l0aW9uLiBEcmF3IHlvdXIgdGFpbGJvbmUgc3RyYWlnaHQgZG93biB0byB0aGUgZmxvb3IuIEJlIG1pbmRmdWwgdG8ga2VlcCB5b3VyIHNwaW5lIG5ldXRyYWwsIGNvcmUgZW5nYWdlZCwgYW5kIGV5ZXMgZm9yd2FyZCB0aHJvdWdob3V0IHRoZSBtb3ZlbWVudC4gTG93ZXIgdW50aWwgeW91ciB0aGlnaHMgYXJlIHBhcmFsbGVsIHRvIHRoZSBmbG9vci4gWW91IGNhbiBnbyBsb3dlciBvciBzaG9ydGVuIHRoZSBzcXVhdCBpZiBwYXJhbGxlbCBpcyB0b28gbG93IG9yIGlmIHlvdSBjYW7igJl0IG1haW50YWluIHlvdXIgbGVnIGFsaWdubWVuLiBQYXVzZSBpbiB0aGUgc3F1YXQgcG9zaXRpb24gZm9yIGEgZmV3IHNlY29uZHMuIFRoZW4sIGVuZ2FnaW5nIHlvdXIgZ2x1dGVzLCBwcmVzcyB1cCB0byBzdGFuZGluZywgZHJpdmluZyB1cCB0aHJvdWdoIHlvdXIgaGVlbHMuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc3F1YXRzLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9WjJGMGJBclFINXNcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDE1XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNjEsXHJcbiAgICAgIHRpdGxlOiBcInNpbmdsZSBsZWcgYnJpZGdlIGxlZnRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJSYWlzZSB5b3VyIGhpcHMsIHRpZ2h0ZW5pbmcgeW91ciBhYmRvbWluYWxzIGFuZCBidXR0b2NrIG11c2NsZXMgdG8gc3VwcG9ydCB0aGUgbGlmdCwgdW50aWwgeW91ciBzaG91bGRlcnMgYW5kIGtuZWVzIGFyZSBpbiBhIHN0cmFpZ2h0IGxpbmUuIFNxdWVlemUgeW91ciBjb3JlIGF0IHRoZSBzYW1lIHRpbWUsIGFzIGlmIHRyeWluZyB0byBwdWxsIHlvdXIgYmVsbHkgYnV0dG9uIGJhY2sgdG93YXJkIHlvdXIgc3BpbmUuIEhvbGQgdGhpcyBwb3NpdGlvbiBmb3IgYSBjb3VudCBvZiBvbmUgb3IgdHdvLiBMb3dlciB0aGUgaGlwcyB0byB0aGUgZmxvb3Igc2xvd2x5IGFuZCB3aXRoIGNvbnRyb2wsIGtlZXBpbmcgdGhlIGxlZyBleHRlbmRlZCwgdG8gcmV0dXJuIHRvIHRoZSBzdGFydGluZyBwb3NpdGlvbi4gUmVwZWF0IG9uIHRoZSBzYW1lIGxlZyBmb3IgdGhlIGRlc2lyZWQgbnVtYmVyIG9mIHJlcHMuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2luZ2xlX2xlZ19icmlkZ2VfbGVmdC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVpndnpSbi0xNnpJXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDYyLFxyXG4gICAgICB0aXRsZTogXCJzaW5nbGUgbGVnIGJyaWRnZSByaWdodFwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIlJhaXNlIHlvdXIgaGlwcywgdGlnaHRlbmluZyB5b3VyIGFiZG9taW5hbHMgYW5kIGJ1dHRvY2sgbXVzY2xlcyB0byBzdXBwb3J0IHRoZSBsaWZ0LCB1bnRpbCB5b3VyIHNob3VsZGVycyBhbmQga25lZXMgYXJlIGluIGEgc3RyYWlnaHQgbGluZS4gU3F1ZWV6ZSB5b3VyIGNvcmUgYXQgdGhlIHNhbWUgdGltZSwgYXMgaWYgdHJ5aW5nIHRvIHB1bGwgeW91ciBiZWxseSBidXR0b24gYmFjayB0b3dhcmQgeW91ciBzcGluZS4gSG9sZCB0aGlzIHBvc2l0aW9uIGZvciBhIGNvdW50IG9mIG9uZSBvciB0d28uIExvd2VyIHRoZSBoaXBzIHRvIHRoZSBmbG9vciBzbG93bHkgYW5kIHdpdGggY29udHJvbCwga2VlcGluZyB0aGUgbGVnIGV4dGVuZGVkLCB0byByZXR1cm4gdG8gdGhlIHN0YXJ0aW5nIHBvc2l0aW9uLiBSZXBlYXQgb24gdGhlIHNhbWUgbGVnIGZvciB0aGUgZGVzaXJlZCBudW1iZXIgb2YgcmVwcy5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zaW5nbGVfbGVnX2JyaWRnZV9yaWdodC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVpndnpSbi0xNnpJXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIngxMlwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDYzLFxyXG4gICAgICB0aXRsZTogXCJqdW1waW5nIHNxdWF0c1wiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIlN0YW5kIHdpdGggZmVldCBzaG91bGRlciB3aWR0aCBhbmQga25lZXMgc2xpZ2h0bHkgYmVudC4gU3RhcnQgYnkgZG9pbmcgYSByZWd1bGFyIHNxdWF0LiBlbmdhZ2UgeW91ciBjb3JlLCBhbmQganVtcCB1cCBleHBsb3NpdmVseS5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9qdW1waW5nX3NxdWF0cy53ZWJwXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj10eExFLWpPQ0VzY1wiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA2NCxcclxuICAgICAgdGl0bGU6IFwiYmFja3dhcmQgbHVuZ2VcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFuZCB0YWxsIHdpdGggeW91ciBmZWV0IGhpcCBkaXN0YW5jZSBhcGFydC4gVGFrZSBhIGxhcmdlIHN0ZXAgYmFja3dhcmQgYW5kIGxvd2VyIHlvdXIgYm9keSB0b3dhcmQgdGhlIGZsb29yLiAgQm90aCBsZWdzIHNob3VsZCBiZSBiZW50IGF0IGEgOTAtZGVncmVlIGFuZ2xlIGF0IHRoZSBib3R0b20gb2YgdGhlIGx1bmdlLiAgUmlzZSBiYWNrIHRvIHN0YXJ0IGFuZCByZXBlYXQuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYmFja3dhcmRfbHVuZ2UuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1fTEdwRHRFTlo1VVwiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTRcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA2NSxcclxuICAgICAgdGl0bGU6IFwicXVhZCBzdHJldGNoIGxlZnRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFuZCB1cCB0YWxsIGFuZCBzaGlmdCB5b3VyIHdlaWdodCB0byB0aGUgcmlnaHQgbGVnLiBMaWZ0IHlvdXIgbGVmdCBmb290IGFuZCBncmFzcCBpdCB3aXRoIHlvdXIgbGVmdCBoYW5kLiBQdWxsIHRoZSBsZWZ0IGZvb3QgdG93YXJkIHlvdXIgYnV0dCB1bnRpbCB5b3UgZmVlbCB0aGUgc3RyZXRjaCBpbiB5b3VyIHF1YWRzLiBIb2xkIHRoaXMgcG9zaXRpb24uXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy9xdWFkX3N0cmV0Y2hfbGVmdC5qcGdcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVRmY1J5WWY3V0xnXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNjYsXHJcbiAgICAgIHRpdGxlOiBcInF1YWQgc3RyZXRjaCByaWdodFwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIlN0YW5kIHVwIHRhbGwgYW5kIHNoaWZ0IHlvdXIgd2VpZ2h0IHRvIHRoZSByaWdodCBsZWcuIExpZnQgeW91ciByaWdodCBmb290IGFuZCBncmFzcCBpdCB3aXRoIHlvdXIgbGVmdCBoYW5kLiBQdWxsIHRoZSBsZWZ0IGZvb3QgdG93YXJkIHlvdXIgYnV0dCB1bnRpbCB5b3UgZmVlbCB0aGUgc3RyZXRjaCBpbiB5b3VyIHF1YWRzLiBIb2xkIHRoaXMgcG9zaXRpb24uXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy9xdWFkX3N0cmV0Y2hfcmlnaHQuanBnXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1UZmNSeVlmN1dMZ1wiLFxyXG4gICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDY3LFxyXG4gICAgICB0aXRsZTogXCJmcm9nIHByZXNzXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIga25lZXMgYmVudCB0byA5MCBkZWdyZWVzLCB0dXJuaW5nIHRoZW0gb3V0d2FyZHMgbGlrZSBhIGZyb2cuIE1ha2Ugc3VyZSB0byBrZWVwIHlvdXIgaGVlbHMgcHJlc3NlZCB0b2dldGhlciB3aGlsZSBmbGV4aW5nIHlvdXIgZmVldCB0b3dhcmRzIHlvdS4gVGlnaHRlbiB5b3VyIHN0b21hY2ggYW5kIGNydW5jaCB1cCwgbGlmdGluZyB5b3VyIGhlYWQgYW5kIHNob3VsZGVycyBvZmYgdGhlIGZsb29yLCBob2xkaW5nIHRoaXMgcG9zaXRpb24uIFBsYWNlIHlvdXIgYXJtcyBkb3duIGJ5IHlvdXIgc2lkZSwgaG92ZXJpbmcganVzdCBhYm92ZSB0aGUgZmxvb3IuIFN0cmFpZ2h0ZW4geW91ciBsZWdzIGF3YXkgZnJvbSB5b3VyIGJvZHkgYXQgYSA0NS1kZWdyZWUgYW5nbGUuIFJldHVybiB0byB0aGUgc3RhcnRpbmcgcG9zaXRpb24sIGNvbXBsZXRpbmcgdGhlIGRlc2lyZWQgYW1vdW50IG9mIHJlcGV0aXRpb25zLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL2Zyb2dfcHJlc3MuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1KdkE3dDl4S1dnZ1wiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA2OCxcclxuICAgICAgdGl0bGU6IFwic2lkZSBsZWcgY2lyY2xlcyBsZWZ0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIG9uIHlvdXIgc2lkZSwgd2l0aCBvbmUgbGVnIHN0YWNrZWQgb24gdG9wIG9mIHRoZSBvdGhlci4gRXh0ZW5kIHlvdXIgYm90dG9tIGFybSBzdHJhaWdodCBhbmQgcmVzdCB5b3VyIGhlYWQgb24gaXQsIHdoaWxlIHlvdSBwbGFjZSB5b3VyIG90aGVyIGhhbmQgb24gdGhlIGZsb29yIGluIGZyb250IG9mIHlvdXIgYm9keSBmb3Igc3VwcG9ydC4gTGlmdCB0aGUgdG9wIGxlZyB1cCBhbmQgcGVyZm9ybSBsZWcgY2lyY2xlcy5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9zaWRlX2xlZ19jaXJjbGVzX2xlZnQuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1WZ3lzQlBuVkpXZ1wiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTJcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA2OSxcclxuICAgICAgdGl0bGU6IFwid2FsbCBzaXRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFuZCB3aXRoIHlvdXIgYmFjayB0byBhIHdhbGwsIGZlZXQgaGlwLXdpZHRoIGFwYXJ0IGFuZCBzbGlnaHRseSBpbiBmcm9udCBvZiB5b3UuIExlYW4gYmFjayBpbnRvIHRoZSB3YWxsLCBhbmQgc2xpZGUgZG93biBsaWtlIHlvdSdyZSBzaXR0aW5nIGRvd24gb250byBhIGNoYWlyLiBZb3VyIGtuZWVzIHNob3VsZCBiZW50IGF0IDkwIGRlZ3JlZXMgd2l0aCB0aGUga25lZXMgYWJvdmUgeW91ciBhbmtsZXMuIEhvbGQgdGhpcyBwb3NpdGlvbiBmb3IgMzAgc2Vjb25kcy5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvcG5nL3dhbGxfc2l0LnBuZ1wiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9WXAzWndBQ0s5djRcIixcclxuICAgICAgcXVhbnRpdHk6IFwiMDA6NDBcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA3MCxcclxuICAgICAgdGl0bGU6IFwiYnJpZGdlXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiTGllIG9uIHlvdXIgYmFjayB3aXRoIHlvdXIga25lZXMgYmVudC4gVGlnaHRlbiB0aGUgbXVzY2xlcyBpbiB5b3VyIHN0b21hY2guIFJhaXNlIHlvdXIgaGlwcyBvZmYgdGhlIGZsb29yIHVudGlsIHRoZXkgbGluZSB1cCB3aXRoIHlvdXIga25lZXMgYW5kIHNob3VsZGVycy4gSG9sZCBmb3IgdGhyZWUgZGVlcCBicmVhdGhzLiBSZXR1cm4gdG8gdGhlIHN0YXJ0aW5nIHBvc2l0aW9uIGFuZCByZXBlYXQuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy9icmlkZ2UuanBnXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0tS0tBRG5Cc1B6d1wiLFxyXG4gICAgICBxdWFudGl0eTogXCJ4MTRcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA3MSxcclxuICAgICAgdGl0bGU6IFwiYWJkb21pbmFsIGNydW5jaGVzXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiS2VlcCB5b3VyIGtuZWVzIGNvbWZvcnRhYmx5IGFwYXJ0LiBGb2xkIHlvdXIgYXJtcyBvbiB5b3VyIGNoZXN0IGFuZCB0aWdodGVuIHlvdXIgYWJkb21pbmFsIG11c2NsZXMuIFJhaXNlIHlvdXIgaGVhZCBhbmQgc2hvdWxkZXJzIG9mZiBvZiB0aGUgZmxvb3IuIEhvbGQgZm9yIHRocmVlIGRlZXAgYnJlYXRocywgdGhlbiByZXR1cm4gdG8gc3RhcnRpbmcgcG9zaXRpb24uXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvYWJkb21pbmFsX2NydW5jaGVzLmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9UlVOckhrYlA0UGNcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDIwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNzIsXHJcbiAgICAgIHRpdGxlOiBcInNob3VsZGVyIHN0cmV0Y2ggbGVmdFwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIkJyaW5nIG9uZSBhcm0gYWNyb3NzIHlvdXIgdXBwZXIgYm9keSBhbmQgaG9sZCBpdCBzdHJhaWdodC4gR3Jhc3AgdGhlIGVsYm93IHdpdGggdGhlIG90aGVyIGFybSBhbmQgZ2VudGx5IHB1bGwgdG93YXJkIHlvdXIgY2hlc3QuIEhvbGQuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvc2hvdWxkZXJzX3N0cmV0Y2hfbGVmdC5naWZcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTlrMEVOMlJDR2dVXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIjAwOjIwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNzMsXHJcbiAgICAgIHRpdGxlOiBcInNob3VsZGVyIHN0cmV0Y2ggcmlnaHRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJCcmluZyBvbmUgYXJtIGFjcm9zcyB5b3VyIHVwcGVyIGJvZHkgYW5kIGhvbGQgaXQgc3RyYWlnaHQuIEdyYXNwIHRoZSBlbGJvdyB3aXRoIHRoZSBvdGhlciBhcm0gYW5kIGdlbnRseSBwdWxsIHRvd2FyZCB5b3VyIGNoZXN0LiBIb2xkLlwiLFxyXG4gICAgICBleGFtcGxlOiBcIi4uL2Fzc2V0cy9naWZzL3Nob3VsZGVyc19zdHJldGNoX3JpZ2h0LmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OWswRU4yUkNHZ1VcIixcclxuICAgICAgcXVhbnRpdHk6IFwiMDA6MjBcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA3NCxcclxuICAgICAgdGl0bGU6IFwidHJpY2VwcyBzdHJldGNoIGxlZnRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJTdGFuZCB3aXRoIHlvdXIgYXJtcyByZWxheGVkIGF0IHlvdXIgc2lkZXMuIFdpdGggeW91ciBhZmZlY3RlZCBhcm0sIGdlbnRseSBiZW5kIHlvdXIgZWxib3cgdXAgdG93YXJkIHlvdSBhcyBmYXIgYXMgcG9zc2libGUuIFlvdXIgcGFsbSBzaG91bGQgZmFjZSB1cC4gVGhlbiBzdHJhaWdodGVuIHlvdXIgYXJtIGFzIG11Y2ggYXMgeW91IGNhbi5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvaW1hZ2VzL3RyaWNlcHNfc3RyZXRjaF9sZWZ0LmpwZ1wiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9TDlJR09jcmRjRmtcIixcclxuICAgICAgcXVhbnRpdHk6IFwiMDA6MzBcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiA3NSxcclxuICAgICAgdGl0bGU6IFwidHJpY2VwcyBzdHJldGNoIHJpZ2h0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgIFwiU3RhbmQgd2l0aCB5b3VyIGFybXMgcmVsYXhlZCBhdCB5b3VyIHNpZGVzLiBXaXRoIHlvdXIgYWZmZWN0ZWQgYXJtLCBnZW50bHkgYmVuZCB5b3VyIGVsYm93IHVwIHRvd2FyZCB5b3UgYXMgZmFyIGFzIHBvc3NpYmxlLiBZb3VyIHBhbG0gc2hvdWxkIGZhY2UgdXAuIFRoZW4gc3RyYWlnaHRlbiB5b3VyIGFybSBhcyBtdWNoIGFzIHlvdSBjYW4uXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2ltYWdlcy90cmljZXBfc3RyZXRjaF9yaWdodC5qcGdcIixcclxuICAgICAgeW91dHViZTogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUw5SUdPY3JkY0ZrXCIsXHJcbiAgICAgIHF1YW50aXR5OiBcIjAwOjMwXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogNzYsXHJcbiAgICAgIHRpdGxlOiBcImNhdCBjb3cgcG9zZVwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIktlZXAgeW91ciBoYW5kcyBzaG91bGRlci13aWR0aCBhcGFydCBhbmQgeW91ciBrbmVlcyBkaXJlY3RseSBiZWxvdyB5b3VyIGhpcHMuIEluaGFsZSBkZWVwbHkgd2hpbGUgY3VydmluZyB5b3VyIGxvd2VyIGJhY2sgYW5kIGJyaW5naW5nIHlvdXIgaGVhZCB1cCwgdGlsdGluZyB5b3VyIHBlbHZpcyB1cCBsaWtlIGEgY293LiBFeGhhbGUgZGVlcGx5IGFuZCBicmluZyB5b3VyIGFiZG9tZW4gaW4sIGFyY2hpbmcgeW91ciBzcGluZSBhbmQgYnJpbmdpbmcgeW91ciBoZWFkIGFuZCBwZWx2aXMgZG93biBsaWtlIGEgY2F0LiBSZXBlYXQgc2V2ZXJhbCB0aW1lcy5cIixcclxuICAgICAgZXhhbXBsZTogXCIuLi9hc3NldHMvZ2lmcy9jYXRfY293X3Bvc2UuZ2lmXCIsXHJcbiAgICAgIHlvdXR1YmU6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13X1VLY0kxRnRuOFwiLFxyXG4gICAgICBxdWFudGl0eTogXCIwMDozMFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDc3LFxyXG4gICAgICB0aXRsZTogXCJmaXJlIGh5ZHJhbnQgcmlnaHRcIixcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgXCJCZWdpbiBvbiB5b3VyIGhhbmRzIGFuZCBrbmVlcyBvbiB0aGUgZmxvb3IsIHlvdXIgaGFuZHMgZGlyZWN0bHkgYmVuZWF0aCB0aGUgc2hvdWxkZXJzLCBhbmQga25lZXMgdW5kZXIgdGhlIGhpcHMuIFRoZW4gdHJ5IHRvIGxpZnQgeW91ciByaWdodCBsZWcgdG8gdGhlIHNpZGUgYXQgYSA5MCBkZWdyZWUgYW5nbGUuXCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiLi4vYXNzZXRzL2dpZnMvZmlyZV9oeWRyYW5kX3JpZ2h0LmdpZlwiLFxyXG4gICAgICB5b3V0dWJlOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9N0xudWhMaS03OElcIixcclxuICAgICAgcXVhbnRpdHk6IFwieDEwXCIsXHJcbiAgICB9LFxyXG4gIF0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB0cmFpbmluZ3NEYXRhO1xyXG4iLCJpbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgRXhlcmNpc2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvZXhlcmNpc2VcIjtcclxuaW1wb3J0IHJvdXRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9yb3V0ZXJDb21wb25lbnRcIjtcclxuaW1wb3J0IHtcclxuICBJVGVtcGxhdGUsXHJcbiAgSUV4ZXJjaXNlLFxyXG4gIElTaW5nbGVUcmFpbmluZyxcclxuICBJV29ya291dEJsb2NrLFxyXG4gIElFeGVyY2lzZUFkZCxcclxufSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIjtcclxuaW1wb3J0IHdvcmtvdXRfcGxhbnMgZnJvbSBcIi4uL3V0aWxzL3dvcmtvdXQtcGxhbnMtZW5cIjtcclxuaW1wb3J0IFdvcmtvdXRCbG9jayBmcm9tIFwiLi4vY29tcG9uZW50cy93b3Jrb3V0QmxvY2tcIjtcclxuaW1wb3J0IEFkZE5ld0NvbXBsZXggZnJvbSBcIi4uL2NvbXBvbmVudHMvYWRkTmV3Q29tcGxleFwiO1xyXG5pbXBvcnQgQ29tcGxleCBmcm9tIFwiLi4vdXRpbHMv0YFvbXBsZXgucm91dGVzXCI7XHJcbmltcG9ydCB0cmFpbmluZ3NEYXRhIGZyb20gXCIuLi91dGlscy90cmFpbmluZ3MtZGF0YS1lblwiO1xyXG5pbXBvcnQgeyBpbkFjdGl2ZVByZWxvYWRlciB9IGZyb20gXCIuLi91dGlscy9wcmVsb2FkZXJcIjtcclxuXHJcbmNsYXNzIFNpbmdsZVRyYWluaW5nUGFnZSB7XHJcbiAgdGVtcGxhdGU6IElUZW1wbGF0ZTtcclxuICBleFF1YW50aXR5OiBzdHJpbmc7XHJcbiAgZXhUaW1lOiBzdHJpbmc7XHJcbiAgY29sb3I6IHN0cmluZztcclxuICBpbWFnZTogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgd29ya291dDogSVNpbmdsZVRyYWluaW5nIHwgdW5kZWZpbmVkO1xyXG4gIHdvcmtvdXRCbG9jazogSVdvcmtvdXRCbG9jaztcclxuICBhZGROZXdDb21wbGV4O1xyXG4gIGNvbXBsZXg7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5leFF1YW50aXR5ID0gXCJcIjtcclxuICAgIHRoaXMuZXhUaW1lID0gXCJcIjtcclxuICAgIHRoaXMuY29sb3IgPSBcIlwiO1xyXG4gICAgdGhpcy5pbWFnZSA9IFwiXCI7XHJcbiAgICB0aGlzLnRpdGxlID0gXCJcIjtcclxuICAgIHRoaXMud29ya291dDtcclxuICAgIHRoaXMud29ya291dEJsb2NrID0gbmV3IFdvcmtvdXRCbG9jaygpO1xyXG4gICAgdGhpcy5hZGROZXdDb21wbGV4ID0gbmV3IEFkZE5ld0NvbXBsZXgoKTtcclxuICAgIHRoaXMuY29tcGxleCA9IG5ldyBDb21wbGV4KCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZHJhdyhpZDogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJsb2FkZWRcIik7XHJcbiAgICBjb25zdCBtYWluRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW5cIik7XHJcbiAgICBpZiAoIW1haW5FbGVtZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIG1haW5FbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtYWluXCIpO1xyXG5cclxuICAgIG1haW5FbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgIGNvbnN0IG1haW5QYWdlRWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbWFpblBhZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0cmFpbmluZ1wiKTtcclxuICAgIG1haW5FbGVtZW50LmFwcGVuZChtYWluUGFnZUVsZW1lbnQpO1xyXG4gICAgLy8gY29uc3Qgd29ya291dFBsYW5zSW5TdG9yZSA9IEpTT04ucGFyc2UoXHJcbiAgICAvLyAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwid29ya291dFBsYW5zXCIpIHx8IFwiW11cIlxyXG4gICAgLy8gKTtcclxuICAgIGNvbnN0IHNlcnZlckRhdGEgPSBhd2FpdCB0aGlzLmFkZE5ld0NvbXBsZXguY3JlYXRpbmdBcnJheUZyb21EYXRhKCk7XHJcbiAgICBpZiAoaWQpIHtcclxuICAgICAgY29uc3QgZXhlcmNpc2VzVHJhbnNmb3JtZWQgPSBhd2FpdCB0aGlzLnRyYW5zZm9ybUV4ZXJjaXNlcyhpZCk7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VydmVyRGF0YVswXS5ibG9jay5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChpZCA9PT0gc2VydmVyRGF0YVswXS5ibG9ja1tpXS5pZCkge1xyXG4gICAgICAgICAgc2VydmVyRGF0YVswXS5ibG9ja1tpXS5leGVyY2lzZXMucHVzaCguLi5leGVyY2lzZXNUcmFuc2Zvcm1lZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBbLi4uc2VydmVyRGF0YSwgLi4ud29ya291dF9wbGFuc107XHJcbiAgICAgIGRhdGEuZm9yRWFjaCgoZ3JvdXApID0+IHtcclxuICAgICAgICBncm91cC5ibG9jay5mb3JFYWNoKCh0cmFpbmluZzogSVNpbmdsZVRyYWluaW5nKSA9PiB7XHJcbiAgICAgICAgICBpZiAoU3RyaW5nKHRyYWluaW5nLmlkKSA9PT0gaWQpIHtcclxuICAgICAgICAgICAgdGhpcy53b3Jrb3V0ID0gdHJhaW5pbmc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBwYWdlSGVhZGVyID0gYXdhaXQgdGhpcy5jcmVhdGVIZWFkZXIoaWQpO1xyXG4gICAgICBtYWluUGFnZUVsZW1lbnQuYXBwZW5kKHBhZ2VIZWFkZXIpO1xyXG5cclxuICAgICAgY29uc3QgZXhlcmNpc2VzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgZXhlcmNpc2VzLmNsYXNzTmFtZSA9IFwidHJhaW5pbmdfX2V4ZXJjaXNlcyBleGVyY2lzZXNcIjtcclxuICAgICAgbWFpblBhZ2VFbGVtZW50LmFwcGVuZChleGVyY2lzZXMpO1xyXG5cclxuICAgICAgdGhpcy53b3Jrb3V0Py5leGVyY2lzZXMuZm9yRWFjaCgoZXhlcmNpc2U6IElFeGVyY2lzZSkgPT4ge1xyXG4gICAgICAgIGlmIChpZC5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgICBjb25zdCBuZXdFeCA9IG5ldyBFeGVyY2lzZShleGVyY2lzZSwgdHJ1ZSk7XHJcbiAgICAgICAgICBleGVyY2lzZXMuYXBwZW5kKG5ld0V4LmRyYXcoKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IG5ld0V4ID0gbmV3IEV4ZXJjaXNlKGV4ZXJjaXNlLCBmYWxzZSk7XHJcbiAgICAgICAgICBleGVyY2lzZXMuYXBwZW5kKG5ld0V4LmRyYXcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChpZC5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgY29uc3QgcGx1czogSFRNTEVsZW1lbnQgPSB0aGlzLndvcmtvdXRCbG9jay5jcmVhdGVBZGRXb3Jrb3V0UGxhbkNvbnQoXHJcbiAgICAgICAgICBcIkFkZCBuZXcgZXhlcmNpc2VzXCIsXHJcbiAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcGx1cy5jbGFzc0xpc3QuYWRkKFwic2luZ2wtdHJhaW5fX3BsdXNcIik7XHJcbiAgICAgICAgZXhlcmNpc2VzLmFwcGVuZChwbHVzKTtcclxuICAgICAgICBpZiAoIXRoaXMud29ya291dD8uZXhlcmNpc2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgZXhlcmNpc2VzLmFwcGVuZChcclxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICAgICAgICAgIFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgXCJzaW5nbC10cmFpbl9fZW1wdHktdGV4dFwiLFxyXG4gICAgICAgICAgICAgIFwiRXhlcmNpc2UgbGlzdCBpcyBlbXB0eVwiXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4ZXJjaXNlcy5jbGFzc0xpc3QuYWRkKFwiYWRkaXRcIik7XHJcbiAgICAgIH1cclxuICAgICAgbWFpblBhZ2VFbGVtZW50LmFwcGVuZCh0aGlzLmNyZWF0ZURldGFpbHNNb2RhbCgpKTtcclxuICAgICAgaW5BY3RpdmVQcmVsb2FkZXIoZG9jdW1lbnQuYm9keSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgY3JlYXRlSGVhZGVyKGlkOiBzdHJpbmcpIHtcclxuICAgIC8vIGNvbnN0IHdvcmtvdXRQbGFuc0luU3RvcmUgPSBKU09OLnBhcnNlKFxyXG4gICAgLy8gICBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIndvcmtvdXRQbGFuc1wiKSB8fCBcIltdXCJcclxuICAgIC8vICk7XHJcbiAgICBjb25zdCBzZXJ2ZXJEYXRhID0gYXdhaXQgdGhpcy5hZGROZXdDb21wbGV4LmNyZWF0aW5nQXJyYXlGcm9tRGF0YSgpO1xyXG4gICAgY29uc3QgZXhlcmNpc2VzID0gYXdhaXQgdGhpcy50cmFuc2Zvcm1FeGVyY2lzZXMoaWQpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJ2ZXJEYXRhWzBdLmJsb2NrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChpZCA9PT0gc2VydmVyRGF0YVswXS5ibG9ja1tpXS5pZCkge1xyXG4gICAgICAgIHNlcnZlckRhdGFbMF0uYmxvY2tbaV0uZXhlcmNpc2VzLnB1c2goLi4uZXhlcmNpc2VzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgZGF0YSA9IFsuLi5zZXJ2ZXJEYXRhLCAuLi53b3Jrb3V0X3BsYW5zXTtcclxuICAgIGRhdGEuZm9yRWFjaCgocGxhbikgPT4ge1xyXG4gICAgICBwbGFuLmJsb2NrLmZvckVhY2goKHRyYWluaW5nOiBJU2luZ2xlVHJhaW5pbmcpID0+IHtcclxuICAgICAgICBpZiAoU3RyaW5nKHRyYWluaW5nLmlkKSA9PT0gaWQpIHtcclxuICAgICAgICAgIHRoaXMuZXhRdWFudGl0eSA9IFN0cmluZyh0cmFpbmluZy5leGVyY2lzZXMubGVuZ3RoKTtcclxuICAgICAgICAgIHRoaXMuZXhUaW1lID0gU3RyaW5nKFxyXG4gICAgICAgICAgICBNYXRoLnJvdW5kKCh0cmFpbmluZy5leGVyY2lzZXMubGVuZ3RoICogNDUpIC8gNjApXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgdGhpcy5jb2xvciA9IHRyYWluaW5nLmNvbG9yO1xyXG4gICAgICAgICAgdGhpcy5pbWFnZSA9IHRyYWluaW5nLmltYWdlO1xyXG4gICAgICAgICAgdGhpcy50aXRsZSA9IHRyYWluaW5nLnRpdGxlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBoZWFkZXI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcInRyYWluaW5nX19oZWFkZXJcIlxyXG4gICAgKTtcclxuICAgIGlmIChOdW1iZXIoaWQpID09PSAxMCkge1xyXG4gICAgICBoZWFkZXIuc3R5bGUuYmFja2dyb3VuZCA9IGB1cmwoJHt0aGlzLmltYWdlfSlgO1xyXG4gICAgICBoZWFkZXIuc3R5bGUuYmFja2dyb3VuZFJlcGVhdCA9IFwibm8tcmVwZWF0XCI7XHJcbiAgICAgIGhlYWRlci5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSBcInRvcFwiO1xyXG4gICAgICBoZWFkZXIuc3R5bGUuYmFja2dyb3VuZFNpemUgPSBcImNvdmVyXCI7XHJcbiAgICB9IGVsc2UgaWYgKE51bWJlcihpZCkgPT09IDExKSB7XHJcbiAgICAgIGhlYWRlci5zdHlsZS5iYWNrZ3JvdW5kID0gYHVybCgke3RoaXMuaW1hZ2V9KWA7XHJcbiAgICAgIGhlYWRlci5zdHlsZS5iYWNrZ3JvdW5kUmVwZWF0ID0gXCJuby1yZXBlYXRcIjtcclxuICAgICAgaGVhZGVyLnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgIGhlYWRlci5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9IFwiY292ZXJcIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGhlYWRlci5zdHlsZS5iYWNrZ3JvdW5kID0gYHVybCgke3RoaXMuaW1hZ2V9KSwgJHt0aGlzLmNvbG9yfWA7XHJcbiAgICAgIGhlYWRlci5zdHlsZS5iYWNrZ3JvdW5kUmVwZWF0ID0gXCJuby1yZXBlYXRcIjtcclxuICAgICAgaGVhZGVyLnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9IFwicmlnaHQgYm90dG9tXCI7XHJcbiAgICAgIGlmIChpZC5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgaGVhZGVyLnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9IFwiOTAlIGJvdHRvbVwiO1xyXG4gICAgICB9XHJcbiAgICAgIGhlYWRlci5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9IFwiY29udGFpblwiO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVwcGVySGVhZGVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJoZWFkZXItdXBwZXJcIlxyXG4gICAgKTtcclxuICAgIHVwcGVySGVhZGVyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwidHJhbnNwYXJlbnRcIjtcclxuICAgIGhlYWRlci5hcHBlbmQodXBwZXJIZWFkZXIpO1xyXG5cclxuICAgIGNvbnN0IHJldHVybkJ1dHRvbjogSFRNTEFuY2hvckVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUxpbmsoXHJcbiAgICAgIFwiaGVhZGVyLXVwcGVyX19yZXR1cm5cIixcclxuICAgICAgXCIvd29ya291dHNcIlxyXG4gICAgKTtcclxuICAgIHJldHVybkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBjb25zdCBtYWluRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW5cIik7XHJcbiAgICAgIGlmIChtYWluRWxlbWVudCkge1xyXG4gICAgICAgIG1haW5FbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgcm91dGVyLm5hdmlnYXRlKFwid29ya291dHNcIik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgdHJhaW5pbmdzTmFtZTogSFRNTFNwYW5FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICB0cmFpbmluZ3NOYW1lLmNsYXNzTmFtZSA9IFwiaGVhZGVyLXVwcGVyX19uYW1lXCI7XHJcbiAgICB0cmFpbmluZ3NOYW1lLnRleHRDb250ZW50ID0gdGhpcy50aXRsZTtcclxuXHJcbiAgICBjb25zdCB0cmFzaEljb246IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVJY29uKFxyXG4gICAgICBcImhlYWRlci11cHBlcl9faWNvblwiLFxyXG4gICAgICBcImljb24tdHJhc2hcIlxyXG4gICAgKTtcclxuICAgIHRyYXNoSWNvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBpZCk7XHJcblxyXG4gICAgdHJhc2hJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHRoaXMuZGVsZXRlQ29tcGxleCh0cmFzaEljb24pO1xyXG4gICAgICBjb25zdCBtYWluRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW5cIik7XHJcbiAgICAgIGlmIChtYWluRWxlbWVudCkge1xyXG4gICAgICAgIG1haW5FbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgcm91dGVyLm5hdmlnYXRlKGB3b3Jrb3V0c2ApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHVwcGVySGVhZGVyLmFwcGVuZChyZXR1cm5CdXR0b24sIHRyYWluaW5nc05hbWUpO1xyXG4gICAgaWYgKGlkLmxlbmd0aCA+IDIpIHtcclxuICAgICAgdXBwZXJIZWFkZXIuYXBwZW5kKHRyYXNoSWNvbik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYm90dG9tSGVhZGVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJoZWFkZXItYm90dG9tXCJcclxuICAgICk7XHJcbiAgICBoZWFkZXIuYXBwZW5kKGJvdHRvbUhlYWRlcik7XHJcbiAgICBjb25zdCB3b3Jrb3V0TmFtZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwicFwiLFxyXG4gICAgICBcImhlYWRlci1ib3R0b21fX25hbWVcIixcclxuICAgICAgdGhpcy50aXRsZVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHdvcmtvdXRRdWFudGl0eTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwicFwiLFxyXG4gICAgICBcImhlYWRlci1ib3R0b21fX3F1YW50aXR5XCIsXHJcbiAgICAgIGAke3RoaXMuZXhRdWFudGl0eX0gZXhlcmNpc2VzYFxyXG4gICAgKTtcclxuICAgIGNvbnN0IHdvcmtvdXRUaW1lOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJwXCIsXHJcbiAgICAgIFwiaGVhZGVyLWJvdHRvbV9fdGltZVwiLFxyXG4gICAgICBgJHt0aGlzLmV4VGltZX0gbWludXRlc2BcclxuICAgICk7XHJcbiAgICBib3R0b21IZWFkZXIuYXBwZW5kKHdvcmtvdXROYW1lLCB3b3Jrb3V0UXVhbnRpdHksIHdvcmtvdXRUaW1lKTtcclxuXHJcbiAgICBjb25zdCBzdGFydEJ1dHRvbiA9IHRoaXMudGVtcGxhdGUuY3JlYXRlQnRuKFxyXG4gICAgICBcInRyYWluaW5nX19idXR0b24tc3RhcnRcIixcclxuICAgICAgXCJTdGFydCBub3dcIlxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAodGhpcy5leFRpbWUgPT09IFwiMFwiKSB7XHJcbiAgICAgIHN0YXJ0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGNvbnN0IG1haW5FbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibWFpblwiKTtcclxuICAgICAgaWYgKG1haW5FbGVtZW50KSB7XHJcbiAgICAgICAgbWFpbkVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICByb3V0ZXIubmF2aWdhdGUoXCJzdGFydFRyYWluaW5nXCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBoZWFkZXIuYXBwZW5kKHN0YXJ0QnV0dG9uKTtcclxuICAgIHJldHVybiBoZWFkZXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGRlbGV0ZUNvbXBsZXgoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcclxuICAgIGlmIChpZCkge1xyXG4gICAgICBhd2FpdCB0aGlzLmNvbXBsZXguZGVsZXRlQ29tcGxleChpZCk7XHJcbiAgICAgIGNvbnN0IGV4ZXJjaXNlcyA9IGF3YWl0IHRoaXMuY29tcGxleC5nZXRFeGVyY2lzZXMoaWQpO1xyXG4gICAgICBpZiAoZXhlcmNpc2VzKSB7XHJcbiAgICAgICAgZXhlcmNpc2VzLmZvckVhY2goYXN5bmMgKGVsKSA9PiB7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLmNvbXBsZXguZGVsZXRlRXhlcmNpc2UoZWwuX2lkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlRGV0YWlsc01vZGFsKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IG1vZGFsOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJtb2RhbC1hZGROZXdDb21wbGV4XCJcclxuICAgICk7XHJcbiAgICBtb2RhbC5jbGFzc0xpc3QuYWRkKFwiaW52aXNpYmxlXCIpO1xyXG4gICAgcmV0dXJuIG1vZGFsO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIHRyYW5zZm9ybUV4ZXJjaXNlcyhpZDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBleGVyY2lzZXNGcm9tU2VydmVyID0gYXdhaXQgdGhpcy5jb21wbGV4LmdldEV4ZXJjaXNlcyhpZCk7XHJcbiAgICBjb25zdCBleGVyY2lzZXM6IElFeGVyY2lzZUFkZFtdID0gW107XHJcbiAgICBleGVyY2lzZXNGcm9tU2VydmVyPy5mb3JFYWNoKChlbCkgPT4ge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYWluaW5nc0RhdGEudHJhaW5pbmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGVsLmlkRXhlcmNpc2UgPT09IFN0cmluZyh0cmFpbmluZ3NEYXRhLnRyYWluaW5nc1tpXS5pZCkpIHtcclxuICAgICAgICAgIGNvbnN0IG9iamVjdDogSUV4ZXJjaXNlQWRkID0ge1xyXG4gICAgICAgICAgICBpZDogdHJhaW5pbmdzRGF0YS50cmFpbmluZ3NbaV0uaWQsXHJcbiAgICAgICAgICAgIHRpdGxlOiB0cmFpbmluZ3NEYXRhLnRyYWluaW5nc1tpXS50aXRsZSxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHRyYWluaW5nc0RhdGEudHJhaW5pbmdzW2ldLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICBleGFtcGxlOiB0cmFpbmluZ3NEYXRhLnRyYWluaW5nc1tpXS5leGFtcGxlLFxyXG4gICAgICAgICAgICB5b3V0dWJlOiB0cmFpbmluZ3NEYXRhLnRyYWluaW5nc1tpXS55b3V0dWJlLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogZWwuY291bnQsXHJcbiAgICAgICAgICAgIHNlcnZlcklkOiBlbC5faWQsXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgZXhlcmNpc2VzLnB1c2gob2JqZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGV4ZXJjaXNlcztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpbmdsZVRyYWluaW5nUGFnZTtcclxuIiwiaW1wb3J0IHsgSVRlbXBsYXRlLCBJV29ya291dFBsYW4gfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0IFRlbXBsYXRlIGZyb20gXCIuLi90ZW1wbGF0ZXMvdGVtcGxhdGVcIjtcclxuaW1wb3J0IHdvcmtvdXRfcGxhbnMgZnJvbSBcIi4uL3V0aWxzL3dvcmtvdXQtcGxhbnMtZW5cIjtcclxuaW1wb3J0IEV4ZXJjaXNlIGZyb20gXCIuL2V4ZXJjaXNlXCI7XHJcbmltcG9ydCBDb21wbGV4IGZyb20gXCIuLi91dGlscy/RgW9tcGxleC5yb3V0ZXNcIjtcclxuaW1wb3J0IEFkZE5ld0NvbXBsZXggZnJvbSBcIi4vYWRkTmV3Q29tcGxleFwiO1xyXG5pbXBvcnQgU2luZ2xlVHJhaW5pbmdQYWdlIGZyb20gXCIuLi9wYWdlcy9zaW5nbGVUcmFpbmluZ1wiO1xyXG5cclxuY2xhc3MgU2xpZGVyIHtcclxuICB0ZW1wbGF0ZTogSVRlbXBsYXRlO1xyXG4gIGNvbXBsZXg7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5jb21wbGV4ID0gbmV3IENvbXBsZXgoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVOZXh0UHJldkJ0bnMoXHJcbiAgICBsZW5ndGg6IG51bWJlcixcclxuICAgIHdyYXBwZXI6IEhUTUxFbGVtZW50LFxyXG4gICAgZmxhZzogYm9vbGVhbixcclxuICAgIGxhcmdlV3JhcHBlcjogSFRNTEVsZW1lbnRcclxuICApOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBidXR0b25zQ29udDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiYnV0dG9ucy1jb250XCJcclxuICAgICk7XHJcbiAgICBjb25zdCBuZXh0QnRuOiBIVE1MQnV0dG9uRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlQnRuKFwibmV4dC1idG5cIik7XHJcbiAgICBjb25zdCBpY29uTmV4dDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUljb24oXHJcbiAgICAgIFwicHJldi1idG5fX2ljb25cIixcclxuICAgICAgXCJpY29uLWFycm93X2ZvcndhcmRfaW9zXCJcclxuICAgICk7XHJcbiAgICBuZXh0QnRuLmFwcGVuZChpY29uTmV4dCk7XHJcbiAgICBpZiAobGVuZ3RoIDw9IDEgJiYgIWZsYWcpIHtcclxuICAgICAgbmV4dEJ0bi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcmV2QnRuOiBIVE1MQnV0dG9uRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlQnRuKFwicHJldi1idG5cIik7XHJcbiAgICBjb25zdCBpY29uUHJldjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUljb24oXHJcbiAgICAgIFwicHJldi1idG5fX2ljb25cIixcclxuICAgICAgXCJpY29uLWFycm93X2JhY2tfaW9zXCJcclxuICAgICk7XHJcbiAgICBwcmV2QnRuLmFwcGVuZChpY29uUHJldik7XHJcbiAgICBpZiAoIWZsYWcpIHtcclxuICAgICAgcHJldkJ0bi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBidXR0b25zQ29udC5hcHBlbmQocHJldkJ0biwgbmV4dEJ0bik7XHJcbiAgICBpZiAoZmxhZykge1xyXG4gICAgICB0aGlzLnNsaWRlKG5leHRCdG4sIHByZXZCdG4sIHdyYXBwZXIsIGxlbmd0aCwgbGFyZ2VXcmFwcGVyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2xpZGVyKG5leHRCdG4sIHByZXZCdG4sIHdyYXBwZXIsIGxlbmd0aCwgZmxhZyk7XHJcbiAgICB9XHJcbiAgICBpZiAoZmxhZykge1xyXG4gICAgICBzbGlkZXIuY2hhbmdlRXhlcmNpc2VDb250ZW50KHByZXZCdG4sIG5leHRCdG4pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBidXR0b25zQ29udDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzbGlkZXIoXHJcbiAgICBuZXh0QnRuOiBIVE1MQnV0dG9uRWxlbWVudCxcclxuICAgIHByZXZCdG46IEhUTUxCdXR0b25FbGVtZW50LFxyXG4gICAgd3JhcHBlcjogSFRNTEVsZW1lbnQsXHJcbiAgICBsZW5ndGg6IG51bWJlcixcclxuICAgIGZsYWc6IGJvb2xlYW5cclxuICApOiB2b2lkIHtcclxuICAgIGZ1bmN0aW9uIG5DYWxjKCkge1xyXG4gICAgICBsZXQgbiA9IDA7XHJcbiAgICAgIG5leHRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICBpZiAobiA8IGxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIG5leHRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIG4rKztcclxuICAgICAgICAgIHNsaWRlci5jaGFuZ2VJbWdTaXNlKGZsYWcsIG4sIGxlbmd0aCk7XHJcbiAgICAgICAgICBwcmV2QnRuLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBjb25zdCBkZWx0YTogbnVtYmVyID0gKDEwMCAvIGxlbmd0aCkgKiBuO1xyXG4gICAgICAgICAgd3JhcHBlci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwiZmxleC1zdGFydFwiO1xyXG4gICAgICAgICAgd3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKC0ke2RlbHRhfSUpYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4gPj0gbGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgbmV4dEJ0bi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgcHJldkJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgIGlmIChuIDw9IGxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIG5leHRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4gPiAwKSB7XHJcbiAgICAgICAgICBuLS07XHJcbiAgICAgICAgICBzbGlkZXIuY2hhbmdlSW1nU2lzZShmbGFnLCBuLCBsZW5ndGgpO1xyXG4gICAgICAgICAgY29uc3QgZGVsdGEgPSAoMTAwIC8gbGVuZ3RoKSAqIG47XHJcbiAgICAgICAgICB3cmFwcGVyLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJmbGV4LXN0YXJ0XCI7XHJcbiAgICAgICAgICB3cmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoLSR7ZGVsdGF9JSlgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobiA9PT0gMCkge1xyXG4gICAgICAgICAgcHJldkJ0bi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIG5DYWxjKCk7XHJcbiAgfVxyXG5cclxuICBjaGFuZ2VJbWdTaXNlKGZsYWc6IGJvb2xlYW4sIG46IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLndvcmtvdXQtY29udGVudC1jb250YWluZXJcIik7XHJcbiAgICBjb25zdCBwbmdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi53b3Jrb3V0LXBsYW5zLXBuZ1wiKTtcclxuICAgIGlmIChmbGFnKSB7XHJcbiAgICAgIGNvbnRhaW5lcnMuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKFwibGFyZ2VySW1nXCIpO1xyXG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJzbWFsbGVySW1nXCIpO1xyXG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJibHVyXCIpO1xyXG4gICAgICB9KTtcclxuICAgICAgcG5ncy5mb3JFYWNoKChlbCkgPT4gZWwuY2xhc3NMaXN0LnJlbW92ZShcImxhcmdlclBuZ1wiKSk7XHJcbiAgICAgIGNvbnRhaW5lcnNbbl0uY2xhc3NMaXN0LmFkZChcInNtYWxsZXJJbWdcIik7XHJcbiAgICAgIGNvbnRhaW5lcnNbbl0uY2xhc3NMaXN0LmFkZChcImJsdXJcIik7XHJcbiAgICAgIGlmIChuIDwgbGVuZ3RoIC0gMSkge1xyXG4gICAgICAgIHBuZ3NbMSArIG5dLmNsYXNzTGlzdC5hZGQoXCJsYXJnZXJQbmdcIik7XHJcbiAgICAgICAgY29udGFpbmVyc1sxICsgbl0uY2xhc3NMaXN0LmFkZChcImxhcmdlckltZ1wiKTtcclxuICAgICAgICBpZiAobiA8IGxlbmd0aCAtIDIpIHtcclxuICAgICAgICAgIGNvbnRhaW5lcnNbMiArIG5dLmNsYXNzTGlzdC5hZGQoXCJzbWFsbGVySW1nXCIpO1xyXG4gICAgICAgICAgY29udGFpbmVyc1syICsgbl0uY2xhc3NMaXN0LmFkZChcImJsdXJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzbGlkZShcclxuICAgIG5leHRCdG46IEhUTUxCdXR0b25FbGVtZW50LFxyXG4gICAgcHJldkJ0bjogSFRNTEJ1dHRvbkVsZW1lbnQsXHJcbiAgICB3cmFwcGVyOiBIVE1MRWxlbWVudCxcclxuICAgIGxlbmd0aDogbnVtYmVyLFxyXG4gICAgbGFyZ2VXcmFwcGVyOiBIVE1MRWxlbWVudFxyXG4gICk6IHZvaWQge1xyXG4gICAgbGV0IGRpcmVjdGlvbjogbnVtYmVyO1xyXG4gICAgY29uc3QgZGVsdGEgPSAxMDAgLyBsZW5ndGg7XHJcbiAgICBuZXh0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGRpcmVjdGlvbiA9IC0xO1xyXG4gICAgICBuZXh0QnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgLy8gbGFyZ2VXcmFwcGVyLnN0eWxlLmFsaWduSXRlbXMgPSBcImZsZXgtc3RhcnRcIjtcclxuICAgICAgd3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKC0ke2RlbHRhfSUpYDtcclxuICAgICAgc2xpZGVyLmNoYW5nZUltZ1NpemVJbmYoXCJmb3J3YXJkXCIpO1xyXG4gICAgfSk7XHJcbiAgICBwcmV2QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGRpcmVjdGlvbiA9IDE7XHJcbiAgICAgIHByZXZCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAvLyBsYXJnZVdyYXBwZXIuc3R5bGUuYWxpZ25JdGVtcyA9IFwiZmxleC1lbmRcIjtcclxuICAgICAgd3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7ZGVsdGF9JSlgO1xyXG4gICAgICBzbGlkZXIuY2hhbmdlSW1nU2l6ZUluZihcImJhY2t3YXJkXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgd3JhcHBlci5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IC0xKSB7XHJcbiAgICAgICAgaWYgKG5leHRCdG4uZGlzYWJsZWQpIHtcclxuICAgICAgICAgIGlmICh3cmFwcGVyLmZpcnN0RWxlbWVudENoaWxkKSB7XHJcbiAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQod3JhcHBlci5maXJzdEVsZW1lbnRDaGlsZCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBuZXh0QnRuLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gMSkge1xyXG4gICAgICAgIGlmIChwcmV2QnRuLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICBpZiAod3JhcHBlci5sYXN0RWxlbWVudENoaWxkKSB7XHJcbiAgICAgICAgICAgIHdyYXBwZXIucHJlcGVuZCh3cmFwcGVyLmxhc3RFbGVtZW50Q2hpbGQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcHJldkJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgd3JhcHBlci5zdHlsZS50cmFuc2l0aW9uID0gXCJub25lXCI7XHJcbiAgICAgIHdyYXBwZXIuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoMClcIjtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgd3JhcHBlci5zdHlsZS50cmFuc2l0aW9uID0gXCJlYXNlIDAuM3NcIjtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNoYW5nZUltZ1NpemVJbmYoZGlyZWN0OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLndvcmtvdXQtY29udGVudC1jb250YWluZXJcIik7XHJcbiAgICBjb25zdCBwbmdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi53b3Jrb3V0LXBsYW5zLXBuZ1wiKTtcclxuICAgIGNvbnRhaW5lcnMuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShcImxhcmdlckltZ1wiKTtcclxuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShcInNtYWxsZXJJbWdcIik7XHJcbiAgICB9KTtcclxuICAgIHBuZ3MuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShcImxhcmdlclBuZ1wiKTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGRpcmVjdCA9PT0gXCJmb3J3YXJkXCIpIHtcclxuICAgICAgY29udGFpbmVyc1szXS5jbGFzc0xpc3QuYWRkKFwibGFyZ2VySW1nXCIpO1xyXG4gICAgICBwbmdzWzNdLmNsYXNzTGlzdC5hZGQoXCJsYXJnZXJQbmdcIik7XHJcbiAgICAgIGNvbnRhaW5lcnNbM10uY2xhc3NMaXN0LnJlbW92ZShcImJsdXJcIik7XHJcbiAgICAgIGNvbnRhaW5lcnNbMl0uY2xhc3NMaXN0LmFkZChcInNtYWxsZXJJbWdcIik7XHJcbiAgICAgIGNvbnRhaW5lcnNbMl0uY2xhc3NMaXN0LmFkZChcImJsdXJcIik7XHJcbiAgICAgIGNvbnRhaW5lcnNbNF0uY2xhc3NMaXN0LmFkZChcInNtYWxsZXJJbWdcIik7XHJcbiAgICAgIGNvbnRhaW5lcnNbNF0uY2xhc3NMaXN0LmFkZChcImJsdXJcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb250YWluZXJzWzFdLmNsYXNzTGlzdC5hZGQoXCJsYXJnZXJJbWdcIik7XHJcbiAgICAgIHBuZ3NbMV0uY2xhc3NMaXN0LmFkZChcImxhcmdlclBuZ1wiKTtcclxuICAgICAgY29udGFpbmVyc1sxXS5jbGFzc0xpc3QucmVtb3ZlKFwiYmx1clwiKTtcclxuICAgICAgY29udGFpbmVyc1swXS5jbGFzc0xpc3QuYWRkKFwic21hbGxlckltZ1wiKTtcclxuICAgICAgY29udGFpbmVyc1swXS5jbGFzc0xpc3QuYWRkKFwiYmx1clwiKTtcclxuICAgICAgY29udGFpbmVyc1syXS5jbGFzc0xpc3QuYWRkKFwic21hbGxlckltZ1wiKTtcclxuICAgICAgY29udGFpbmVyc1syXS5jbGFzc0xpc3QuYWRkKFwiYmx1clwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGNyZWF0ZUV4ZXJjaXNlcyhpOiBudW1iZXIsIGo6IG51bWJlcikge1xyXG4gICAgY29uc3QgY29udGFpbmVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJleGVyY2lzZXMtY29udGFpbmVyXCJcclxuICAgICk7XHJcbiAgICAvLyBjb25zdCB3b3Jrb3V0UGxhbnNJblN0b3JlID0gSlNPTi5wYXJzZShcclxuICAgIC8vICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ3b3Jrb3V0UGxhbnNcIikgfHwgXCJbXVwiXHJcbiAgICAvLyApO1xyXG4gICAgY29uc3QgYWRkTmV3Q29tcGxleCA9IG5ldyBBZGROZXdDb21wbGV4KCk7XHJcbiAgICBjb25zdCBzZXJ2ZXJEYXRhID0gYXdhaXQgYWRkTmV3Q29tcGxleC5jcmVhdGluZ0FycmF5RnJvbURhdGEoKTtcclxuICAgIGxldCBkYXRhOiBJV29ya291dFBsYW5bXSA9IFtdO1xyXG4gICAgY29uc3Qgc2luZ2xlUGFnZSA9IG5ldyBTaW5nbGVUcmFpbmluZ1BhZ2UoKTtcclxuICAgIGNvbnN0IGlkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjb21wbGV4SWRcIik7XHJcbiAgICBpZiAoaWQpIHtcclxuICAgICAgY29uc3QgZXhlcmNpc2VzID0gYXdhaXQgc2luZ2xlUGFnZS50cmFuc2Zvcm1FeGVyY2lzZXMoSlNPTi5wYXJzZShpZCkpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcnZlckRhdGFbMF0uYmxvY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoSlNPTi5wYXJzZShpZCkgPT09IHNlcnZlckRhdGFbMF0uYmxvY2tbaV0uaWQpIHtcclxuICAgICAgICAgIHNlcnZlckRhdGFbMF0uYmxvY2tbaV0uZXhlcmNpc2VzLnB1c2goLi4uZXhlcmNpc2VzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChzZXJ2ZXJEYXRhLmxlbmd0aCAmJiBzZXJ2ZXJEYXRhWzBdLmJsb2NrLmxlbmd0aCkge1xyXG4gICAgICBkYXRhID0gWy4uLnNlcnZlckRhdGEsIC4uLndvcmtvdXRfcGxhbnNdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGF0YSA9IFsuLi53b3Jrb3V0X3BsYW5zXTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJsb2NrID0gZGF0YVtpXS5ibG9ja1tqXTtcclxuICAgIGlmIChibG9jay5leGVyY2lzZXMubGVuZ3RoKSB7XHJcbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgYmxvY2suZXhlcmNpc2VzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgY29uc3QgZXhlcmNpc2VEYXRhID0gYmxvY2suZXhlcmNpc2VzW2tdO1xyXG4gICAgICAgIGNvbnN0IGV4ZXJjaXNlID0gbmV3IEV4ZXJjaXNlKGV4ZXJjaXNlRGF0YSwgZmFsc2UpLmRyYXcoKTtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKGV4ZXJjaXNlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgXCIuZXhlcmNpc2VzX19zdGFydE5vdy1idG5cIlxyXG4gICAgICAgICkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICB9LCAwKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb250YWluZXI7XHJcbiAgfVxyXG5cclxuICBhc3luYyBjaGFuZ2VFeGVyY2lzZUNvbnRlbnQocHJldkJ0bjogSFRNTEVsZW1lbnQsIG5leHRCdG46IEhUTUxFbGVtZW50KSB7XHJcbiAgICBjb25zdCBhZGROZXdDb21wbGV4ID0gbmV3IEFkZE5ld0NvbXBsZXgoKTtcclxuICAgIGNvbnN0IHNlcnZlckRhdGEgPSBhd2FpdCBhZGROZXdDb21wbGV4LmNyZWF0aW5nQXJyYXlGcm9tRGF0YSgpO1xyXG4gICAgbGV0IGRhdGE6IElXb3Jrb3V0UGxhbltdID0gW107XHJcbiAgICBpZiAoc2VydmVyRGF0YS5sZW5ndGggJiYgc2VydmVyRGF0YVswXS5ibG9jay5sZW5ndGgpIHtcclxuICAgICAgZGF0YSA9IFsuLi5zZXJ2ZXJEYXRhLCAuLi53b3Jrb3V0X3BsYW5zXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRhdGEgPSBbLi4ud29ya291dF9wbGFuc107XHJcbiAgICB9XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBsZXQgaiA9IDA7XHJcbiAgICBpZiAoZGF0YVtpXS5ibG9jay5sZW5ndGggPT09IDEpIHtcclxuICAgICAgaSA9IDE7XHJcbiAgICAgIGogPSAxO1xyXG4gICAgfSBlbHNlIGlmIChkYXRhW2ldLmJsb2NrLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICBpID0gMTtcclxuICAgICAgaiA9IDA7XHJcbiAgICB9IGVsc2UgaWYgKGRhdGFbaV0uYmxvY2subGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGkgPSAxO1xyXG4gICAgICBqID0gMjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGkgPSAwO1xyXG4gICAgICBqID0gMjtcclxuICAgIH1cclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiY29tcGxleElkXCIsIEpTT04uc3RyaW5naWZ5KGRhdGFbaV0uYmxvY2tbal0uaWQpKTtcclxuICAgIG5leHRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3Qgc3RhcnRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIFwiLmV4ZXJjaXNlc19fc3RhcnROb3ctYnRuXCJcclxuICAgICAgKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgaWYgKGogPCBkYXRhW2ldLmJsb2NrLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICBqKys7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGkgPCBkYXRhLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIGogPSAwO1xyXG4gICAgICAgICAgaSsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpID0gMDtcclxuICAgICAgICAgIGogPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNvbXBsZXhJZFwiLCBKU09OLnN0cmluZ2lmeShkYXRhW2ldLmJsb2NrW2pdLmlkKSk7XHJcbiAgICAgIGNvbnN0IGV4ZXJjaXNlc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgXCIuZXhlcmNpc2VzLXdyYXBwZXJcIlxyXG4gICAgICApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICBjb25zdCBuZXdFeGVyY2lzZXMgPSBhd2FpdCBzbGlkZXIuY3JlYXRlRXhlcmNpc2VzKGksIGopO1xyXG4gICAgICBleGVyY2lzZXNDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgZXhlcmNpc2VzQ29udGFpbmVyLmFwcGVuZChuZXdFeGVyY2lzZXMpO1xyXG4gICAgfSk7XHJcbiAgICBwcmV2QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN0YXJ0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBcIi5leGVyY2lzZXNfX3N0YXJ0Tm93LWJ0blwiXHJcbiAgICAgICkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgIGlmIChqID4gMCkge1xyXG4gICAgICAgIGotLTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoaSA+IDApIHtcclxuICAgICAgICAgIGktLTtcclxuICAgICAgICAgIGogPSBkYXRhW2ldLmJsb2NrLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGkgPSBkYXRhLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICBqID0gZGF0YVtpXS5ibG9jay5sZW5ndGggLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNvbXBsZXhJZFwiLCBKU09OLnN0cmluZ2lmeShkYXRhW2ldLmJsb2NrW2pdLmlkKSk7XHJcbiAgICAgIGNvbnN0IGV4ZXJjaXNlc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgXCIuZXhlcmNpc2VzLXdyYXBwZXJcIlxyXG4gICAgICApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICBjb25zdCBuZXdFeGVyY2lzZXMgPSBhd2FpdCBzbGlkZXIuY3JlYXRlRXhlcmNpc2VzKGksIGopO1xyXG4gICAgICBleGVyY2lzZXNDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgZXhlcmNpc2VzQ29udGFpbmVyLmFwcGVuZChuZXdFeGVyY2lzZXMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRDb21wbGV4UGFyYW0oaWQ6IG51bWJlcikge1xyXG4gICAgLy8gY29uc3Qgd29ya291dFBsYW5zSW5TdG9yZSA9IEpTT04ucGFyc2UoXHJcbiAgICAvLyAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwid29ya291dFBsYW5zXCIpIHx8IFwiW11cIlxyXG4gICAgLy8gKTtcclxuICAgIGNvbnN0IGFkZE5ld0NvbXBsZXggPSBuZXcgQWRkTmV3Q29tcGxleCgpO1xyXG4gICAgY29uc3Qgc2VydmVyRGF0YSA9IGF3YWl0IGFkZE5ld0NvbXBsZXguY3JlYXRpbmdBcnJheUZyb21EYXRhKCk7XHJcbiAgICBjb25zdCBkYXRhID0gWy4uLnNlcnZlckRhdGEsIC4uLndvcmtvdXRfcGxhbnNdO1xyXG4gICAgY29uc3QgYXJyYXk6IG51bWJlcltdID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkYXRhW2ldLmJsb2NrLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgaWYgKGRhdGFbaV0uYmxvY2tbal0uaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICBhcnJheS5wdXNoKGksIGopO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH1cclxufVxyXG5cclxuY29uc3Qgc2xpZGVyID0gbmV3IFNsaWRlcigpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2xpZGVyO1xyXG4iLCJpbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBJVGVtcGxhdGUsIElFeGVyY2lzZSwgSUV4ZXJjaXNlQWRkIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcbmltcG9ydCBFeGVyY2lzZSBmcm9tIFwiLi9leGVyY2lzZVwiO1xyXG5pbXBvcnQgQWRkTmV3Q29tcGxleCBmcm9tIFwiLi9hZGROZXdDb21wbGV4XCI7XHJcbmltcG9ydCB7IHRyYXNoIH0gZnJvbSBcIi4vc3ZnXCI7XHJcbmltcG9ydCBTbGlkZXIgZnJvbSBcIi4vc2xpZGVyXCI7XHJcbmltcG9ydCBXb3Jrb3V0QmxvY2sgZnJvbSBcIi4vd29ya291dEJsb2NrXCI7XHJcbmltcG9ydCBDb21wbGV4IGZyb20gXCIuLi91dGlscy/RgW9tcGxleC5yb3V0ZXNcIjtcclxuaW1wb3J0IHRyYWluaW5nc0RhdGEgZnJvbSBcIi4uL3V0aWxzL3RyYWluaW5ncy1kYXRhLWVuXCI7XHJcbmltcG9ydCByb3V0ZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvcm91dGVyQ29tcG9uZW50XCI7XHJcbmNsYXNzIEV4ZXJjaXNlRGV0YWlscyB7XHJcbiAgdGVtcGxhdGU6IElUZW1wbGF0ZTtcclxuICBleGVyY2lzZTogSUV4ZXJjaXNlO1xyXG4gIGJhY2tMYXllcjogSFRNTEVsZW1lbnQ7XHJcbiAgbW9kYWw6IEhUTUxFbGVtZW50O1xyXG4gIGFkZE5ld0NvbXBsZXg7XHJcbiAgc2xpZGVyO1xyXG4gIHdvcmtvdXRCbG9jaztcclxuICBjb21wbGV4O1xyXG5cclxuICBjb25zdHJ1Y3RvcihleGVyY2lzZTogSUV4ZXJjaXNlKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLmV4ZXJjaXNlID0gZXhlcmNpc2U7XHJcbiAgICB0aGlzLmJhY2tMYXllciA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fYmFja2xheWVyXCJcclxuICAgICk7XHJcbiAgICB0aGlzLm1vZGFsID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZXhlcmNpc2UtbW9kYWxcIik7XHJcbiAgICB0aGlzLmFkZE5ld0NvbXBsZXggPSBuZXcgQWRkTmV3Q29tcGxleCgpO1xyXG4gICAgdGhpcy5zbGlkZXIgPSBuZXcgU2xpZGVyKCk7XHJcbiAgICB0aGlzLndvcmtvdXRCbG9jayA9IG5ldyBXb3Jrb3V0QmxvY2soKTtcclxuICAgIHRoaXMuY29tcGxleCA9IG5ldyBDb21wbGV4KCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZHJhdyhcclxuICAgIGV4ZXJjaXNlczogSUV4ZXJjaXNlQWRkLFxyXG4gICAgZmxhZzogYm9vbGVhbixcclxuICAgIGZsYWdUcmFzaD86IGJvb2xlYW5cclxuICApIHtcclxuICAgIHRoaXMuYmFja0xheWVyLmFwcGVuZCh0aGlzLm1vZGFsKTtcclxuICAgIGNvbnN0IGNvbXBsZXhJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY29tcGxleElkXCIpO1xyXG4gICAgY29uc3QgdHJhc2hJY29uID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZGF0ZWlsc19fdHJhc2gtaWNvblwiKTtcclxuICAgIHRyYXNoSWNvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBTdHJpbmcoZXhlcmNpc2VzLmlkKSk7XHJcbiAgICBpZiAoZXhlcmNpc2VzLnNlcnZlcklkKSB7XHJcbiAgICAgIHRyYXNoSWNvbi5zZXRBdHRyaWJ1dGUoXCJzZXJ2ZXJJZFwiLCBleGVyY2lzZXMuc2VydmVySWQpO1xyXG4gICAgfVxyXG4gICAgdHJhc2hJY29uLmlubmVySFRNTCA9IHRyYXNoO1xyXG4gICAgdHJhc2hJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGlmIChleGVyY2lzZXMuc2VydmVySWQpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmNvbXBsZXguZGVsZXRlRXhlcmNpc2UoZXhlcmNpc2VzLnNlcnZlcklkKTtcclxuICAgICAgICBjb25zdCBleGVyY0FmdGVyID0gYXdhaXQgdGhpcy5jb21wbGV4LmdldEV4ZXJjaXNlcyhcclxuICAgICAgICAgIEpTT04ucGFyc2UoU3RyaW5nKGNvbXBsZXhJZCkpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoZXhlcmNBZnRlciAmJiAhZXhlcmNBZnRlci5sZW5ndGgpIHtcclxuICAgICAgICAgIGNvbnN0IHN0YXJ0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICAgXCIudHJhaW5pbmdfX2J1dHRvbi1zdGFydFwiXHJcbiAgICAgICAgICApIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5mb3JDbGlja09uRGVsQnRuKCk7XHJcbiAgICAgIHRoaXMuY3JlYXRlU2VydmVyRXhlcmNpc2VzKEpTT04ucGFyc2UoU3RyaW5nKGNvbXBsZXhJZCkpKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgY2xvc2VCdXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVCdG4oXHJcbiAgICAgIFwiZXhlcmNpc2UtbW9kYWxfX2J1dHRvbi1jbG9zZVwiXHJcbiAgICApO1xyXG4gICAgaWYgKCFmbGFnVHJhc2gpIHtcclxuICAgICAgdGhpcy5tb2RhbC5hcHBlbmQodHJhc2hJY29uKTtcclxuICAgIH1cclxuICAgIHRoaXMubW9kYWwuYXBwZW5kKGNsb3NlQnV0dG9uKTtcclxuXHJcbiAgICBjb25zdCBleGVyY2lzZUdpZjogSFRNTEltYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICBleGVyY2lzZUdpZi5jbGFzc05hbWUgPSBcImV4ZXJjaXNlLW1vZGFsX19naWZcIjtcclxuICAgIGNvbnN0IHBhdGg6IHN0cmluZyA9IHRoaXMuZXhlcmNpc2UuZXhhbXBsZTtcclxuICAgIGV4ZXJjaXNlR2lmLnNyYyA9IHBhdGg7XHJcbiAgICB0aGlzLm1vZGFsLmFwcGVuZChleGVyY2lzZUdpZik7XHJcblxyXG4gICAgdGhpcy5jcmVhdGVFeGVyY2lzZUluZm8oKTtcclxuXHJcbiAgICBjb25zdCBleGVyY2lzZURlc2NyaXB0aW9uOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJwXCIsXHJcbiAgICAgIFwiZXhlcmNpc2UtbW9kYWxfX2Rlc2NyaXB0aW9uXCIsXHJcbiAgICAgIHRoaXMuZXhlcmNpc2UuZGVzY3JpcHRpb25cclxuICAgICk7XHJcbiAgICB0aGlzLm1vZGFsLmFwcGVuZChleGVyY2lzZURlc2NyaXB0aW9uKTtcclxuICAgIHRoaXMuY3JlYXRlQ2hhbmdlQmxvY2soZmxhZyk7XHJcblxyXG4gICAgZG9jdW1lbnQuYm9keS5wcmVwZW5kKHRoaXMuYmFja0xheWVyKTtcclxuXHJcbiAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLmNsb3NlRXhlcmNpc2VNb2RhbCgpO1xyXG4gICAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgXCIubW9kYWwtYWRkTmV3Q29tcGxleFwiXHJcbiAgICAgICkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIG1vZGFsLmNsYXNzTGlzdC5hZGQoXCJpbnZpc2libGVcIik7XHJcbiAgICB9KTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IDxIVE1MRWxlbWVudD5lLnRhcmdldDtcclxuICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJleGVyY2lzZS1tb2RhbF9fYmFja2xheWVyXCIpKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZUV4ZXJjaXNlTW9kYWwoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5iYWNrTGF5ZXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNsb3NlRXhlcmNpc2VNb2RhbCgpIHtcclxuICAgIHRoaXMuYmFja0xheWVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5iYWNrTGF5ZXIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVFeGVyY2lzZUluZm8oKTogdm9pZCB7XHJcbiAgICBjb25zdCBleGVyY2lzZUluZm86IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImV4ZXJjaXNlLW1vZGFsX19pbmZvXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBleGVyY2lzZU5hbWU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInNwYW5cIixcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fbmFtZVwiLFxyXG4gICAgICB0aGlzLmV4ZXJjaXNlLnRpdGxlXHJcbiAgICApO1xyXG4gICAgY29uc3QgZXhlcmNpc2VRdWFudGl0eTogSFRNTFNwYW5FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInNwYW5cIixcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fcXVhbnRpdHlcIixcclxuICAgICAgdGhpcy5leGVyY2lzZS5xdWFudGl0eVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHlvdXR1YmVMaW5rOiBIVE1MQW5jaG9yRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlTGluayhcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fbGlua1wiLFxyXG4gICAgICB0aGlzLmV4ZXJjaXNlLnlvdXR1YmVcclxuICAgICk7XHJcbiAgICB5b3V0dWJlTGluay50YXJnZXQgPSBcIl9ibGFua1wiO1xyXG4gICAgZXhlcmNpc2VJbmZvLmFwcGVuZChleGVyY2lzZU5hbWUsIGV4ZXJjaXNlUXVhbnRpdHksIHlvdXR1YmVMaW5rKTtcclxuICAgIHRoaXMubW9kYWwuYXBwZW5kKGV4ZXJjaXNlSW5mbyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGNyZWF0ZUNoYW5nZUJsb2NrKGZsYWc6IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IGNoYW5nZUJsb2NrID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImV4ZXJjaXNlLW1vZGFsX19jaGFuZ2VcIlxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBjb3VudGVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fY291bnRlclwiXHJcbiAgICApO1xyXG4gICAgY2hhbmdlQmxvY2suYXBwZW5kKGNvdW50ZXIpO1xyXG5cclxuICAgIGNvbnN0IG1pbnVzQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlQnRuKFxyXG4gICAgICBcImV4ZXJjaXNlLW1vZGFsX19idXR0b24tbWludXNcIixcclxuICAgICAgXCItXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBjdXJyZW50UXVhbnRpdHk6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInNwYW5cIixcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fY3VycmVudC1xdWFudGl0eVwiLFxyXG4gICAgICB0aGlzLmV4ZXJjaXNlLnF1YW50aXR5XHJcbiAgICApO1xyXG4gICAgY29uc3QgcGx1c0J1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fYnV0dG9uLXBsdXNcIixcclxuICAgICAgXCIrXCJcclxuICAgICk7XHJcbiAgICBjb3VudGVyLmFwcGVuZChtaW51c0J1dHRvbiwgY3VycmVudFF1YW50aXR5LCBwbHVzQnV0dG9uKTtcclxuXHJcbiAgICBjb25zdCBjaGFuZ2VCdXR0b25zOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fYnV0dG9uc1wiXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGNhbmNlbEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fYnV0dG9uLWNhbmNlbFwiLFxyXG4gICAgICBcImNhbmNlbFwiXHJcbiAgICApO1xyXG4gICAgY29uc3Qgc2F2ZUJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgXCJleGVyY2lzZS1tb2RhbF9fYnV0dG9uLXNhdmVcIixcclxuICAgICAgXCJzYXZlXCJcclxuICAgICk7XHJcbiAgICBzYXZlQnV0dG9uLnNldEF0dHJpYnV0ZShcImlkXCIsIFN0cmluZyh0aGlzLmV4ZXJjaXNlLmlkKSk7XHJcbiAgICBzYXZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGV4ZXJjaXNlQ291bnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIFwiLmV4ZXJjaXNlLW1vZGFsX19jdXJyZW50LXF1YW50aXR5XCJcclxuICAgICAgKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgY29uc3QgdHJhc2hJY29uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBcIi5kYXRlaWxzX190cmFzaC1pY29uXCJcclxuICAgICAgKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgY29uc3Qgc3RhcnRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIFwiLnRyYWluaW5nX19idXR0b24tc3RhcnRcIlxyXG4gICAgICApIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICBjb25zdCBleGVyY2lzZUlkID0gc2F2ZUJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcclxuICAgICAgY29uc3QgY29tcGxleElkID0gSlNPTi5wYXJzZShTdHJpbmcobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjb21wbGV4SWRcIikpKTtcclxuICAgICAgaWYgKGZsYWcpIHtcclxuICAgICAgICBpZiAoZXhlcmNpc2VJZCAmJiBjb21wbGV4SWQpIHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMuY29tcGxleC5jcmVhdGVFeGVyY2lzZSh7XHJcbiAgICAgICAgICAgIGlkQ29tcGxleDogY29tcGxleElkLFxyXG4gICAgICAgICAgICBpZEV4ZXJjaXNlOiBleGVyY2lzZUlkLFxyXG4gICAgICAgICAgICBjb3VudDogZXhlcmNpc2VDb3VudC5pbm5lckhUTUwsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgZXhlcmNpc2VJZFNlcnZlciA9IHRyYXNoSWNvbi5nZXRBdHRyaWJ1dGUoXCJzZXJ2ZXJJZFwiKTtcclxuICAgICAgICBpZiAoZXhlcmNpc2VJZCAmJiBjb21wbGV4SWQgJiYgZXhlcmNpc2VJZFNlcnZlcikge1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5jb21wbGV4LnVwZGF0ZUV4ZXJjaXNlKGV4ZXJjaXNlSWRTZXJ2ZXIsIHtcclxuICAgICAgICAgICAgaWRDb21wbGV4OiBjb21wbGV4SWQsXHJcbiAgICAgICAgICAgIGlkRXhlcmNpc2U6IGV4ZXJjaXNlSWQsXHJcbiAgICAgICAgICAgIGNvdW50OiBleGVyY2lzZUNvdW50LmlubmVySFRNTCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLmZvckNsaWNrT25TYXZlQnRuKCk7XHJcbiAgICAgIHRoaXMuY3JlYXRlU2VydmVyRXhlcmNpc2VzKGNvbXBsZXhJZCk7XHJcbiAgICB9KTtcclxuICAgIGNoYW5nZUJ1dHRvbnMuYXBwZW5kKGNhbmNlbEJ1dHRvbiwgc2F2ZUJ1dHRvbik7XHJcbiAgICBjaGFuZ2VCbG9jay5hcHBlbmQoY2hhbmdlQnV0dG9ucyk7XHJcblxyXG4gICAgY2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuY2xvc2VFeGVyY2lzZU1vZGFsKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBwbHVzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmFkZEV4ZXJjaXNlUXVhbnRpdHkpO1xyXG5cclxuICAgIG1pbnVzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnJlZHVjZUV4ZXJjaXNlUXVhbnRpdHkpO1xyXG5cclxuICAgIHRoaXMubW9kYWwuYXBwZW5kKGNoYW5nZUJsb2NrKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVkdWNlRXhlcmNpc2VRdWFudGl0eSgpIHtcclxuICAgIGNvbnN0IGN1clF1YW50aXR5U3BhbiA9IDxIVE1MRWxlbWVudD4oXHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXhlcmNpc2UtbW9kYWxfX2N1cnJlbnQtcXVhbnRpdHlcIilcclxuICAgICk7XHJcbiAgICBjb25zdCBleGVyY2lzZVRleHQgPSA8c3RyaW5nPmN1clF1YW50aXR5U3Bhbi50ZXh0Q29udGVudDtcclxuICAgIGlmIChleGVyY2lzZVRleHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcInhcIikpIHtcclxuICAgICAgY29uc3QgY3VyTnVtYmVyID0gTnVtYmVyKGV4ZXJjaXNlVGV4dC5zbGljZSgxKSk7XHJcbiAgICAgIGlmIChjdXJOdW1iZXIgPT09IDEpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY3VyUXVhbnRpdHlTcGFuLnRleHRDb250ZW50ID0gYFgke2N1ck51bWJlciAtIDF9YDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCBtaW51dGVzOiBzdHJpbmcgPSBleGVyY2lzZVRleHQuc2xpY2UoMCwgMik7XHJcbiAgICAgIGxldCBzZWNvbmRzOiBzdHJpbmcgPSBleGVyY2lzZVRleHQuc2xpY2UoMyk7XHJcbiAgICAgIGlmIChOdW1iZXIoc2Vjb25kcykgPT09IDEgJiYgTnVtYmVyKG1pbnV0ZXMpID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9IGVsc2UgaWYgKE51bWJlcihzZWNvbmRzKSA9PT0gMCkge1xyXG4gICAgICAgIGlmIChOdW1iZXIobWludXRlcykgPCAxMCkge1xyXG4gICAgICAgICAgbWludXRlcyA9IGAwJHtOdW1iZXIobWludXRlcykgLSAxfWA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG1pbnV0ZXMgPSBgJHtOdW1iZXIobWludXRlcykgLSAxfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlY29uZHMgPSBcIjU5XCI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKE51bWJlcihzZWNvbmRzKSA8PSAxMCkge1xyXG4gICAgICAgICAgc2Vjb25kcyA9IGAwJHtOdW1iZXIoc2Vjb25kcykgLSAxfWA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNlY29uZHMgPSBgJHtOdW1iZXIoc2Vjb25kcykgLSAxfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGN1clF1YW50aXR5U3Bhbi50ZXh0Q29udGVudCA9IGAke21pbnV0ZXN9OiR7c2Vjb25kc31gO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZGRFeGVyY2lzZVF1YW50aXR5KCkge1xyXG4gICAgY29uc3QgY3VyUXVhbnRpdHlTcGFuID0gPEhUTUxFbGVtZW50PihcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5leGVyY2lzZS1tb2RhbF9fY3VycmVudC1xdWFudGl0eVwiKVxyXG4gICAgKTtcclxuICAgIGNvbnN0IGV4ZXJjaXNlVGV4dCA9IDxzdHJpbmc+Y3VyUXVhbnRpdHlTcGFuLnRleHRDb250ZW50O1xyXG4gICAgaWYgKGV4ZXJjaXNlVGV4dC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwieFwiKSkge1xyXG4gICAgICBjb25zdCBjdXJOdW1iZXIgPSBOdW1iZXIoZXhlcmNpc2VUZXh0LnNsaWNlKDEpKTtcclxuICAgICAgY3VyUXVhbnRpdHlTcGFuLnRleHRDb250ZW50ID0gYFgke2N1ck51bWJlciArIDF9YDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCBtaW51dGVzID0gZXhlcmNpc2VUZXh0LnNsaWNlKDAsIDIpO1xyXG4gICAgICBsZXQgc2Vjb25kcyA9IGV4ZXJjaXNlVGV4dC5zbGljZSgzKTtcclxuICAgICAgaWYgKE51bWJlcihzZWNvbmRzKSA9PT0gNTkpIHtcclxuICAgICAgICBpZiAoTnVtYmVyKG1pbnV0ZXMpIDwgMTApIHtcclxuICAgICAgICAgIG1pbnV0ZXMgPSBgMCR7TnVtYmVyKG1pbnV0ZXMpICsgMX1gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBtaW51dGVzID0gYCR7TnVtYmVyKG1pbnV0ZXMpICsgMX1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZWNvbmRzID0gXCIwMFwiO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChOdW1iZXIoc2Vjb25kcykgPCA5KSB7XHJcbiAgICAgICAgICBzZWNvbmRzID0gYDAke051bWJlcihzZWNvbmRzKSArIDF9YDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2Vjb25kcyA9IGAke051bWJlcihzZWNvbmRzKSArIDF9YDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgY3VyUXVhbnRpdHlTcGFuLnRleHRDb250ZW50ID0gYCR7bWludXRlc306JHtzZWNvbmRzfWA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBmb3JDbGlja09uU2F2ZUJ0bigpIHtcclxuICAgIHRoaXMuY2xvc2VFeGVyY2lzZU1vZGFsKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBmb3JDbGlja09uRGVsQnRuKCkge1xyXG4gICAgdGhpcy5jbG9zZUV4ZXJjaXNlTW9kYWwoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlU2VydmVyRXhlcmNpc2VzKGlkOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGV4ZXJjaXNlcyA9IGF3YWl0IHRoaXMuY29tcGxleC5nZXRFeGVyY2lzZXMoaWQpO1xyXG4gICAgY29uc3QgZXhlcmNRdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLmhlYWRlci1ib3R0b21fX3F1YW50aXR5XCJcclxuICAgICkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBjb25zdCBleGVyY1RpbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5oZWFkZXItYm90dG9tX190aW1lXCJcclxuICAgICkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBjb25zdCBleGVyY2lzZVdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5leGVyY2lzZXMtd3JhcHBlclwiXHJcbiAgICApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgY29uc3QgbGFyZ2VXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIudHJhaW5pbmdfX2V4ZXJjaXNlc1wiXHJcbiAgICApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgbGFyZ2VXcmFwcGVyLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICBpZiAoZXhlcmNpc2VzKSB7XHJcbiAgICAgIGV4ZXJjUXQuaW5uZXJIVE1MID0gU3RyaW5nKGAke2V4ZXJjaXNlcy5sZW5ndGh9IGV4ZXJjaXNlc2ApO1xyXG4gICAgICBleGVyY1RpbWUuaW5uZXJIVE1MID0gU3RyaW5nKFxyXG4gICAgICAgIGAke01hdGgucm91bmQoKGV4ZXJjaXNlcy5sZW5ndGggKiA0NSkgLyA2MCl9IG1pbnV0ZXNgXHJcbiAgICAgICk7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXhlcmNpc2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBleGVyY2lzZXNbaV0uaWRFeGVyY2lzZTtcclxuICAgICAgICBjb25zdCBzZXJ2ZXJJZCA9IGV4ZXJjaXNlc1tpXS5faWQ7XHJcbiAgICAgICAgY29uc3Qgc2VydmVyUXQgPSBleGVyY2lzZXNbaV0uY291bnQ7XHJcbiAgICAgICAgdHJhaW5pbmdzRGF0YS50cmFpbmluZ3MuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgICAgIGlmIChTdHJpbmcoZWwuaWQpID09PSBpZCkge1xyXG4gICAgICAgICAgICBjb25zdCBleGVyY2lzZSA9IG5ldyBFeGVyY2lzZShcclxuICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU9iaihlbCwgc2VydmVySWQsIHNlcnZlclF0KSxcclxuICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICkuZHJhdygpO1xyXG4gICAgICAgICAgICBsYXJnZVdyYXBwZXIuYXBwZW5kKGV4ZXJjaXNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBwbHVzOiBIVE1MRWxlbWVudCA9IHRoaXMud29ya291dEJsb2NrLmNyZWF0ZUFkZFdvcmtvdXRQbGFuQ29udChcclxuICAgICAgICBcIkFkZCBuZXcgZXhlcmNpc2VzXCIsXHJcbiAgICAgICAgZmFsc2VcclxuICAgICAgKTtcclxuICAgICAgbGFyZ2VXcmFwcGVyLmFwcGVuZChwbHVzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlT2JqKFxyXG4gICAgZWxlbWVudDogSUV4ZXJjaXNlQWRkLFxyXG4gICAgc2VydklkOiBzdHJpbmcsXHJcbiAgICBzZXJ2UXQ6IHN0cmluZ1xyXG4gICk6IElFeGVyY2lzZUFkZCB7XHJcbiAgICBjb25zdCBvYmplY3Q6IElFeGVyY2lzZUFkZCA9IHtcclxuICAgICAgaWQ6IGVsZW1lbnQuaWQsXHJcbiAgICAgIHRpdGxlOiBlbGVtZW50LnRpdGxlLFxyXG4gICAgICBkZXNjcmlwdGlvbjogZWxlbWVudC5kZXNjcmlwdGlvbixcclxuICAgICAgZXhhbXBsZTogZWxlbWVudC5leGFtcGxlLFxyXG4gICAgICB5b3V0dWJlOiBlbGVtZW50LnlvdXR1YmUsXHJcbiAgICAgIHF1YW50aXR5OiBzZXJ2UXQsXHJcbiAgICAgIHNlcnZlcklkOiBzZXJ2SWQsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIG9iamVjdDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEV4ZXJjaXNlRGV0YWlscztcclxuIiwiaW1wb3J0IFRlbXBsYXRlIGZyb20gXCIuLi90ZW1wbGF0ZXMvdGVtcGxhdGVcIjtcclxuaW1wb3J0IHsgSVRlbXBsYXRlLCBJRXhlcmNpc2UgfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIjtcclxuaW1wb3J0IEV4ZXJjaXNlTW9kYWwgZnJvbSBcIi4uL2NvbXBvbmVudHMvZXhlcmNpc2VNb2RhbFwiO1xyXG5pbXBvcnQgRXhlcmNpc2VEZXRhaWxzIGZyb20gXCIuL2V4ZXJjaXNlRGV0YWlsc1wiO1xyXG5cclxuY2xhc3MgRXhlcmNpc2Uge1xyXG4gIHRlbXBsYXRlOiBJVGVtcGxhdGU7XHJcbiAgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICBleGVyY2lzZTogSUV4ZXJjaXNlO1xyXG4gIGZsYWc6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGV4ZXJjaXNlOiBJRXhlcmNpc2UsIGZsYWc6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMudGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKTtcclxuICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZXhlcmNpc2VcIik7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5pZCA9IGAke2V4ZXJjaXNlLmlkfWA7XHJcbiAgICB0aGlzLmV4ZXJjaXNlID0gZXhlcmNpc2U7XHJcbiAgICB0aGlzLmZsYWcgPSBmbGFnO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRyYXcoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgZXhlcmNpc2VJbmZvOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJleGVyY2lzZV9faW5mb1wiXHJcbiAgICApO1xyXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKGV4ZXJjaXNlSW5mbyk7XHJcblxyXG4gICAgY29uc3QgZXhlcmNpc2VOYW1lOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJwXCIsXHJcbiAgICAgIFwiZXhlcmNpc2VfX25hbWVcIixcclxuICAgICAgdGhpcy5leGVyY2lzZS50aXRsZVxyXG4gICAgKTtcclxuICAgIGV4ZXJjaXNlSW5mby5hcHBlbmQoZXhlcmNpc2VOYW1lKTtcclxuXHJcbiAgICBjb25zdCBleGVyY2lzZVF1YW50aXR5OiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJwXCIsXHJcbiAgICAgIFwiZXhlcmNpc2VfX3F1YW50aXR5XCIsXHJcbiAgICAgIHRoaXMuZXhlcmNpc2UucXVhbnRpdHlcclxuICAgICk7XHJcbiAgICBleGVyY2lzZUluZm8uYXBwZW5kKGV4ZXJjaXNlUXVhbnRpdHkpO1xyXG5cclxuICAgIGNvbnN0IGV4ZXJjaXNlR2lmOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJleGVyY2lzZV9fZ2lmXCJcclxuICAgICk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoZXhlcmNpc2VHaWYpO1xyXG5cclxuICAgIGNvbnN0IGltZzogSFRNTEltYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICBjb25zdCBwYXRoOiBzdHJpbmcgPSB0aGlzLmV4ZXJjaXNlLmV4YW1wbGU7XHJcbiAgICBpbWcuc3JjID0gcGF0aDtcclxuICAgIGV4ZXJjaXNlR2lmLmFwcGVuZChpbWcpO1xyXG5cclxuICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGlmICh0aGlzLmZsYWcpIHtcclxuICAgICAgICBjb25zdCBleGVyY2lzZURldGFpbHMgPSBuZXcgRXhlcmNpc2VEZXRhaWxzKHRoaXMuZXhlcmNpc2UpO1xyXG4gICAgICAgIGV4ZXJjaXNlRGV0YWlscy5kcmF3KHRoaXMuZXhlcmNpc2UsIGZhbHNlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBleGVyY2lzZU1vZGFsID0gbmV3IEV4ZXJjaXNlTW9kYWwodGhpcy5leGVyY2lzZSk7XHJcbiAgICAgICAgZXhlcmNpc2VNb2RhbC5kcmF3KCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEV4ZXJjaXNlO1xyXG4iLCJpbXBvcnQgeyBJRGF0YVVzZXIgfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRVc2VyTG9jYWxTdG9yYWdlKGRhdGFVc2VyOiBJRGF0YVVzZXIpOiB2b2lkIHtcclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInRva2VuXCIsIGRhdGFVc2VyLnRva2VuKTtcclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInVzZXJJZFwiLCBkYXRhVXNlci51c2VySWQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlclRva2VuTG9jYWxTdG9yYWdlKCk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IHRva2VuOiBzdHJpbmcgfCBudWxsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0b2tlblwiKTtcclxuICBpZiAoIXRva2VuKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVXNlckxvY2FsU3RvcmFnZSgpOiB2b2lkIHtcclxuICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInRva2VuXCIpO1xyXG4gIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwidXNlcklkXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlcklkTG9jYWxTdG9yYWdlKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgY29uc3QgdXNlcklkOiBzdHJpbmcgfCBudWxsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ1c2VySWRcIik7XHJcblxyXG4gIGlmICghdXNlcklkKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdXNlcklkO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgSVRlbXBsYXRlLFxyXG4gIElTaW5nbGVUcmFpbmluZyxcclxuICBJV29ya291dFBsYW4sXHJcbiAgSURhdGFDb21wbGV4LFxyXG59IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgd29ya291dF9wbGFucyBmcm9tIFwiLi4vdXRpbHMvd29ya291dC1wbGFucy1lblwiO1xyXG5pbXBvcnQgRXhlcmNpc2UgZnJvbSBcIi4vZXhlcmNpc2VcIjtcclxuaW1wb3J0IEV4ZXJjaXNlRGV0YWlscyBmcm9tIFwiLi9leGVyY2lzZURldGFpbHNcIjtcclxuaW1wb3J0IHsgZ2V0VXNlcklkTG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4uL3V0aWxzL2F1dGhcIjtcclxuaW1wb3J0IENvbXBsZXggZnJvbSBcIi4uL3V0aWxzL9GBb21wbGV4LnJvdXRlc1wiO1xyXG5pbXBvcnQgdHJhaW5pbmdzRGF0YSBmcm9tIFwiLi4vdXRpbHMvdHJhaW5pbmdzLWRhdGEtZW5cIjtcclxuXHJcbmNsYXNzIEFkZE5ld0NvbXBsZXgge1xyXG4gIHRlbXBsYXRlOiBJVGVtcGxhdGU7XHJcbiAgY29tcGxleDtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLmNvbXBsZXggPSBuZXcgQ29tcGxleCgpO1xyXG4gIH1cclxuXHJcbiAgc2hvd0V4ZXJjaXNlcyhmbGFnOiBib29sZWFuKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgZXhlcmNpc2VzV3JhcHBlciA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJleGVyY2lzZXMtd3JhcHBlclwiXHJcbiAgICApO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFpbmluZ3NEYXRhLnRyYWluaW5ncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBleGVyY1dyYXBwZXIgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJ3cmFwLWV4ZXJjaXNlXCIpO1xyXG4gICAgICBjb25zdCBleGVyY2lzZURhdGEgPSB0cmFpbmluZ3NEYXRhLnRyYWluaW5nc1tpXTtcclxuICAgICAgY29uc3QgZXhlcmNpc2UgPSBuZXcgRXhlcmNpc2UoZXhlcmNpc2VEYXRhLCBmbGFnKS5kcmF3KCk7XHJcbiAgICAgIGV4ZXJjV3JhcHBlci5hcHBlbmQoZXhlcmNpc2UpO1xyXG4gICAgICBleGVyY2lzZXNXcmFwcGVyLmFwcGVuZChleGVyY1dyYXBwZXIpO1xyXG4gICAgICBjb25zdCBidXR0b24gPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcImFkZC1leGVyYy1idG5cIiwgXCJhZGRcIik7XHJcbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGV4ZXJjaXNlRGV0YWlscyA9IG5ldyBFeGVyY2lzZURldGFpbHMoZXhlcmNpc2VEYXRhKTtcclxuICAgICAgICBleGVyY2lzZURldGFpbHMuZHJhdyh0cmFpbmluZ3NEYXRhLnRyYWluaW5nc1tpXSwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBleGVyY1dyYXBwZXIuYXBwZW5kKGJ1dHRvbik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZXhlcmNpc2VzV3JhcHBlcjtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUV4ZXJjaXNlc0FycmF5KGFkZEJ0bjogSFRNTEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IG1hdHJpeDogc3RyaW5nIHwgbnVsbCA9IGFkZEJ0bi5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcclxuICAgIGNvbnN0IGkgPSBtYXRyaXg/LnNwbGl0KFwiIFwiKVswXTtcclxuICAgIGNvbnN0IGogPSBtYXRyaXg/LnNwbGl0KFwiIFwiKVsxXTtcclxuICAgIGNvbnN0IGsgPSBtYXRyaXg/LnNwbGl0KFwiIFwiKVsyXTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUNvbXBsZXhOYW1lTW9kYWwoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgbW9kYWw6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImNvbXBsZXgtbmFtZS1vdmVybGF5XCJcclxuICAgICk7XHJcbiAgICBjb25zdCBtYWluOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpblwiKSBhcyBIVE1MRWxlbWVudDtcclxuICAgIG1haW4uYXBwZW5kKG1vZGFsKTtcclxuICAgIHJldHVybiBtb2RhbDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGFkZENvbXBsZXhJbkxvY2FsU3RvcmUoKSB7XHJcbiAgICBjb25zdCBpbnB1dDogSFRNTElucHV0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsLWFkZE5ld0NvbXBsZXhfX2lucHV0XCJcclxuICAgICkgYXMgSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgICBjb25zdCB1c2VySWQxOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBnZXRVc2VySWRMb2NhbFN0b3JhZ2UoKTtcclxuICAgIGlmICghdXNlcklkMSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBhd2FpdCB0aGlzLmNvbXBsZXguY3JlYXRlVXNlckluZm8oe1xyXG4gICAgICB1c2VySWQ6IHVzZXJJZDEsXHJcbiAgICAgIG5hbWU6IGlucHV0LnZhbHVlIHx8IFwibm8gbmFtZVwiLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVTZWxlY3RFeGVyY2lzZXMoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgdGV4dDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwic2luZ2wtdHJhaW5fX2VtcHR5LXRleHRcIixcclxuICAgICAgXCJTZWxlY3QgQW4gRXhlcmNpc2VcIlxyXG4gICAgKTtcclxuICAgIHJldHVybiB0ZXh0O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0Q29tcGxleGVzKCkge1xyXG4gICAgY29uc3QgdXNlcklkMTogc3RyaW5nIHwgdW5kZWZpbmVkID0gZ2V0VXNlcklkTG9jYWxTdG9yYWdlKCk7XHJcbiAgICBpZiAoIXVzZXJJZDEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jb21wbGV4LmdldENvbXBsZXgodXNlcklkMSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY3JlYXRpbmdBcnJheUZyb21EYXRhKCkge1xyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZ2V0Q29tcGxleGVzKCk7XHJcbiAgICBjb25zdCBhcnJheTogSVdvcmtvdXRQbGFuW10gPSBbXHJcbiAgICAgIHtcclxuICAgICAgICB0aXRsZTogXCJXb3Jrb3V0cyB5b3UgY3JlYXRlZFwiLFxyXG4gICAgICAgIGltYWdlOiBcIlwiLFxyXG4gICAgICAgIGJsb2NrOiBbXSxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTnVtYmVyKGRhdGEubGVuZ3RoKTsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgZWxlbTogSVNpbmdsZVRyYWluaW5nID0ge1xyXG4gICAgICAgICAgaWQ6IGRhdGFbaV0uX2lkLFxyXG4gICAgICAgICAgdGl0bGU6IGRhdGFbaV0ubmFtZSxcclxuICAgICAgICAgIGV4ZXJjaXNlc0FtdDogXCIwXCIsXHJcbiAgICAgICAgICBleGVyY2lzZXNUaW1lOiBcIjBcIixcclxuICAgICAgICAgIGltYWdlOiBcIi4uL2Fzc2V0cy9wbmcvd2hvbGVfYm9keTIucG5nXCIsXHJcbiAgICAgICAgICBjb2xvcjpcclxuICAgICAgICAgICAgXCJsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYigyNDEsIDE0NywgMjE1KSAwJSwgcmdiKDI0NSwgMjM3LCAyMzgpIDEwMCUpXCIsXHJcbiAgICAgICAgICBleGVyY2lzZXM6IFtdLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYXJyYXlbMF0uYmxvY2sucHVzaChlbGVtKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWRkTmV3Q29tcGxleDtcclxuIiwiaW1wb3J0IHsgSVRlbXBsYXRlLCBJV29ya291dE1pbmlCbG9jayB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgYWJzUG5nIGZyb20gXCIuLi9hc3NldHMvcG5nL2FiczMucG5nXCI7XHJcbmltcG9ydCBidXR0IGZyb20gXCIuLi9hc3NldHMvcG5nL2J1dHQucG5nXCI7XHJcbmltcG9ydCB0aGlnaCBmcm9tIFwiLi4vYXNzZXRzL3BuZy90aGlnaC5wbmdcIjtcclxuaW1wb3J0IHdob2xlQm9keSBmcm9tIFwiLi4vYXNzZXRzL3BuZy93aG9sZV9ib2R5Mi5wbmdcIjtcclxuaW1wb3J0IG1vcm5pbmcgZnJvbSBcIi4uL2Fzc2V0cy9pbWFnZXMvbW9ybmluZ19ldmVuaW5nLmpwZ1wiO1xyXG5pbXBvcnQgZXZlbmluZyBmcm9tIFwiLi4vYXNzZXRzL2ltYWdlcy9tb3JuaW5nX2V2ZW5pbmcyLmpwZ1wiO1xyXG5pbXBvcnQgeyBidXJiZWxsLCBjbG9jaywgbGlnaHRuaW5nIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvc3ZnXCI7XHJcbmltcG9ydCB7IHBsdXNfaW5fY2lyY2xlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvc3ZnXCI7XHJcbmltcG9ydCBBZGROZXdDb21wbGV4IGZyb20gXCIuL2FkZE5ld0NvbXBsZXhcIjtcclxuXHJcbmNsYXNzIFdvcmtvdXRCbG9jayB7XHJcbiAgdGVtcGxhdGU6IElUZW1wbGF0ZTtcclxuICBhZGROZXdDb21wbGV4O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMudGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKTtcclxuICAgIHRoaXMuYWRkTmV3Q29tcGxleCA9IG5ldyBBZGROZXdDb21wbGV4KCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlV29ya291dEJsb2NrQ29udCh0aXRsZVRleHQ6IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHdvcmtvdXRCbG9ja0NvbnQ6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcIndvcmtvdXQtYmxvY2stY29udFwiXHJcbiAgICApO1xyXG5cclxuICAgIHdvcmtvdXRCbG9ja0NvbnQuYXBwZW5kKHRoaXMuY3JlYXRlVGl0bGUodGl0bGVUZXh0KSk7XHJcblxyXG4gICAgcmV0dXJuIHdvcmtvdXRCbG9ja0NvbnQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlVGl0bGUodGl0bGVUZXh0OiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBibG9ja1RpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJ3b3Jrb3V0LWJsb2NrLXRpdGxlXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBzcGFuOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJzcGFuXCIsXHJcbiAgICAgIFwic3BhblwiLFxyXG4gICAgICB0aXRsZVRleHRcclxuICAgICk7XHJcbiAgICBibG9ja1RpdGxlLmFwcGVuZChzcGFuKTtcclxuICAgIHJldHVybiBibG9ja1RpdGxlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNyZWF0ZVdvcmtvdXRDb250ZW50KFxyXG4gICAgZGF0YTogSVdvcmtvdXRNaW5pQmxvY2ssXHJcbiAgICBpOiBudW1iZXIsXHJcbiAgICBqOiBudW1iZXIsXHJcbiAgICBmbGFnOiBib29sZWFuLFxyXG4gICAgbGVuZ3RoOiBudW1iZXJcclxuICApOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCB3b3Jrb3V0Q29udGVudENvbnQ6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcIndvcmtvdXQtY29udGVudC1jb250YWluZXJcIlxyXG4gICAgKTtcclxuICAgIHdvcmtvdXRDb250ZW50Q29udC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIGRhdGEudGl0bGUpO1xyXG4gICAgd29ya291dENvbnRlbnRDb250LmFwcGVuZChcclxuICAgICAgdGhpcy5jcmVhdGVUZXh0QmxvY2soXHJcbiAgICAgICAgZGF0YS50aXRsZSxcclxuICAgICAgICBTdHJpbmcoZGF0YS5leGVyY2lzZXMubGVuZ3RoKSxcclxuICAgICAgICBTdHJpbmcoTWF0aC5yb3VuZCgoZGF0YS5leGVyY2lzZXMubGVuZ3RoICogNDUpIC8gNjApKSxcclxuICAgICAgICBqLFxyXG4gICAgICAgIGRhdGEuY29tcGxleGl0eUxldmVsXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgICBjb25zdCBhZGRpdENsYXNzID0gZGF0YS50aXRsZS5zcGxpdChcIiBcIilbMF07XHJcbiAgICBpZiAoXHJcbiAgICAgIHdvcmtvdXRDb250ZW50Q29udC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID09PSBcInNsZWVweSB0aW1lIHN0cmV0Y2hcIiB8fFxyXG4gICAgICB3b3Jrb3V0Q29udGVudENvbnQuZ2V0QXR0cmlidXRlKFwibmFtZVwiKSA9PT0gXCJtb3JuaW5nIHdhcm11cFwiXHJcbiAgICApIHtcclxuICAgICAgd29ya291dENvbnRlbnRDb250LnN0eWxlLmJhY2tncm91bmQgPSBcIiNmZmZcIjtcclxuICAgIH1cclxuICAgIGlmIChpIDwgNSkge1xyXG4gICAgICB3b3Jrb3V0Q29udGVudENvbnQuYXBwZW5kKFxyXG4gICAgICAgIHRoaXMuY3JlYXRlUG5nSW1hZ2UoaSwgaiwgYWRkaXRDbGFzcywgZmxhZywgbGVuZ3RoKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB3b3Jrb3V0Q29udGVudENvbnQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlVGV4dEJsb2NrKFxyXG4gICAgZGVzY3JUaXRsZVRleHQ6IHN0cmluZyxcclxuICAgIGV4ZXJjQW10OiBzdHJpbmcsXHJcbiAgICB0aW1lOiBzdHJpbmcsXHJcbiAgICBqOiBudW1iZXIsXHJcbiAgICBjb21wbGV4aXR5TGV2ZWw/OiBib29sZWFuXHJcbiAgKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgdGV4dEJsb2NrOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJ0ZXh0LWJsb2NrXCJcclxuICAgICk7XHJcbiAgICBjb25zdCB0aXRsZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwicFwiLFxyXG4gICAgICBcIndvcmtvdXQtY29udGVudC10aXRsZVwiLFxyXG4gICAgICBkZXNjclRpdGxlVGV4dFxyXG4gICAgKTtcclxuICAgIHRleHRCbG9jay5hcHBlbmQoXHJcbiAgICAgIHRpdGxlLFxyXG4gICAgICB0aGlzLmNyZWF0ZUV4ZXJjQ29udChleGVyY0FtdCksXHJcbiAgICAgIHRoaXMuY3JlYXRlVGltZUNvbnQodGltZSlcclxuICAgICk7XHJcbiAgICBpZiAoY29tcGxleGl0eUxldmVsID09PSB0cnVlKSB7XHJcbiAgICAgIHRleHRCbG9jay5hcHBlbmQodGhpcy5jcmVhdGVMaWdodG5pbmdzKGopKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0ZXh0QmxvY2s7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlUG5nSW1hZ2UoXHJcbiAgICBpOiBudW1iZXIsXHJcbiAgICBqOiBudW1iZXIsXHJcbiAgICBhZGRpdENsYXNzOiBzdHJpbmcsXHJcbiAgICBmbGFnOiBib29sZWFuLFxyXG4gICAgbGVuZ3RoOiBudW1iZXJcclxuICApOiBIVE1MSW1hZ2VFbGVtZW50IHtcclxuICAgIGxldCBwbmc7XHJcbiAgICBpZiAobGVuZ3RoIC0gMSAtIGkgPT09IDMpIHtcclxuICAgICAgcG5nID0gYWJzUG5nO1xyXG4gICAgfSBlbHNlIGlmIChsZW5ndGggLSAxIC0gaSA9PT0gMikge1xyXG4gICAgICBwbmcgPSBidXR0O1xyXG4gICAgfSBlbHNlIGlmIChsZW5ndGggLSAxIC0gaSA9PT0gMSkge1xyXG4gICAgICBwbmcgPSB0aGlnaDtcclxuICAgIH0gZWxzZSBpZiAobGVuZ3RoIC0gMSAtIGkgPT09IDApIHtcclxuICAgICAgaWYgKGogPT09IDApIHtcclxuICAgICAgICBwbmcgPSBtb3JuaW5nO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBuZyA9IGV2ZW5pbmc7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHBuZyA9IHdob2xlQm9keTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBuZ0ltYWdlOiBIVE1MSW1hZ2VFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVJbWFnZShcclxuICAgICAgcG5nLFxyXG4gICAgICBcImFicyBpbWFnZVwiLFxyXG4gICAgICBcIndvcmtvdXQtcGxhbnMtcG5nXCJcclxuICAgICk7XHJcbiAgICBwbmdJbWFnZS5jbGFzc0xpc3QuYWRkKGFkZGl0Q2xhc3MpO1xyXG4gICAgaWYgKHBuZ0ltYWdlLnNyYyA9PT0gd2hvbGVCb2R5KSB7XHJcbiAgICAgIHBuZ0ltYWdlLnN0eWxlLnJpZ2h0ID0gXCItMnB4XCI7XHJcbiAgICB9XHJcbiAgICBpZiAoZmxhZykge1xyXG4gICAgICBwbmdJbWFnZS5jbGFzc0xpc3QuYWRkKFwiYWRhcHRQbmdcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcG5nSW1hZ2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlRXhlcmNDb250KGV4ZXJjQW10OiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBkZXNjckNvbnQ6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImRlc2NyLWNvbnRcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGltYWdlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImJhcmJlbGxcIik7XHJcbiAgICBpbWFnZS5pbm5lckhUTUwgPSBidXJiZWxsO1xyXG4gICAgY29uc3QgdGV4dDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwicFwiLFxyXG4gICAgICBcImRlc2N0aXB0aW9uLXRleHRcIixcclxuICAgICAgYCR7ZXhlcmNBbXR9IGV4ZXJjaXNlc2BcclxuICAgICk7XHJcbiAgICBkZXNjckNvbnQuYXBwZW5kKGltYWdlLCB0ZXh0KTtcclxuICAgIHJldHVybiBkZXNjckNvbnQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlVGltZUNvbnQodGltZTogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgZGVzY3JDb250OiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJkZXNjci1jb250XCJcclxuICAgICk7XHJcbiAgICBjb25zdCBpbWFnZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJkZXNjci10aW1lXCIpO1xyXG4gICAgaW1hZ2UuaW5uZXJIVE1MID0gY2xvY2s7XHJcbiAgICBpbWFnZS5zdHlsZS5maWxsID0gXCJyZ2IoNTgsIDU3LCA1OClcIjtcclxuICAgIGNvbnN0IHRleHQ6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInBcIixcclxuICAgICAgXCJkZXNjdGlwdGlvbi10ZXh0XCIsXHJcbiAgICAgIGAke3RpbWV9IG1pbnV0ZXNgXHJcbiAgICApO1xyXG4gICAgZGVzY3JDb250LmFwcGVuZChpbWFnZSwgdGV4dCk7XHJcbiAgICByZXR1cm4gZGVzY3JDb250O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNyZWF0ZUxpZ2h0bmluZ3MoajogbnVtYmVyKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgbGlnaHRuaW5nc0NvbnQ6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImxpZ2h0bmluZ3MtY29udFwiXHJcbiAgICApO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcclxuICAgICAgY29uc3QgaW1hZ2U6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICAgIFwiZGl2XCIsXHJcbiAgICAgICAgXCJsaWdodG5pbmdcIlxyXG4gICAgICApO1xyXG4gICAgICBpbWFnZS5pbm5lckhUTUwgPSBsaWdodG5pbmc7XHJcbiAgICAgIGlmIChpIDw9IGopIHtcclxuICAgICAgICBpbWFnZS5zdHlsZS5maWxsID0gXCJyZ2IoNTgsIDU3LCA1OClcIjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbWFnZS5zdHlsZS5maWxsID0gXCJyZ2IoMTU4LCAxNTYsIDE1OClcIjtcclxuICAgICAgfVxyXG4gICAgICBsaWdodG5pbmdzQ29udC5hcHBlbmQoaW1hZ2UpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxpZ2h0bmluZ3NDb250O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNvbG9yQmFja2dyb3VuZChlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgY29uc3QgZWxOYW1lQXR0cmlidXRlOiBzdHJpbmcgfCBudWxsID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xyXG4gICAgbGV0IG5hbWVBdHRyaWJ1dGUgPSBcIlwiO1xyXG4gICAgaWYgKGVsTmFtZUF0dHJpYnV0ZSkge1xyXG4gICAgICBuYW1lQXR0cmlidXRlID0gZWxOYW1lQXR0cmlidXRlLnNwbGl0KFwiIFwiKVsxXTtcclxuICAgIH1cclxuICAgIGlmIChuYW1lQXR0cmlidXRlID09PSBcImJlZ2lubmVyXCIpIHtcclxuICAgICAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID1cclxuICAgICAgICBcImxpbmVhci1ncmFkaWVudCg5MGRlZywgcmdiYSgxMzUsMjU0LDI1MiwxKSAwJSwgcmdiYSgyMzMsMjQ0LDI0MywxKSAxMDAlKVwiO1xyXG4gICAgfSBlbHNlIGlmIChuYW1lQXR0cmlidXRlID09PSBcImludGVybWVkaWF0ZVwiKSB7XHJcbiAgICAgIGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9XHJcbiAgICAgICAgXCJsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYmEoMTM1LDE5NSwyNTQsMSkgMCUsIHJnYmEoMjMzLDI0NCwyNDMsMSkgMTAwJSlcIjtcclxuICAgIH0gZWxzZSBpZiAobmFtZUF0dHJpYnV0ZSA9PT0gXCJhZHZhbmNlZFwiKSB7XHJcbiAgICAgIGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9XHJcbiAgICAgICAgXCJsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYmEoMjU0LDE1MSwxMzUsMSkgMCUsIHJnYmEoMjQ3LDI0MiwyNDIsMSkgMTAwJSlcIjtcclxuICAgIH0gZWxzZSBpZiAobmFtZUF0dHJpYnV0ZSA9PT0gXCJXYXJtdXBcIiB8fCBuYW1lQXR0cmlidXRlID09PSBcIlRpbWVcIikge1xyXG4gICAgICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPVxyXG4gICAgICAgIFwibGluZWFyLWdyYWRpZW50KDkwZGVnLCByZ2JhKDEyOCwyNywxNTAsMC43NTY3NDAxOTYwNDMxMykgMCUsIHJnYmEoMjE0LDE4OSwyMjEsMSkgNzglKVwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID1cclxuICAgICAgICBcIiBsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYmEoMjQxLDE0NywyMTUsMSkgMCUsIHJnYmEoMjQ1LDIzNywyMzgsMSkgMTAwJSlcIjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVBZGRXb3Jrb3V0UGxhbkNvbnQoXHJcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxyXG4gICAgZmxhZzogYm9vbGVhblxyXG4gICk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGFkZFdvcmtvdXRQbGFuQ29udDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiYWRkLXdvcmtvdXQtcGxhbnMtY29udFwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgdGV4dDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwicFwiLFxyXG4gICAgICBcImFkZC13b3Jrb3V0cy10ZXh0XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uXHJcbiAgICApO1xyXG4gICAgY29uc3QgcGx1czogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwicGx1cy1pbi1jaXJjbGVcIlxyXG4gICAgKTtcclxuICAgIHBsdXMuaW5uZXJIVE1MID0gcGx1c19pbl9jaXJjbGU7XHJcblxyXG4gICAgYWRkV29ya291dFBsYW5Db250LmFwcGVuZCh0ZXh0LCBwbHVzKTtcclxuICAgIHBsdXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5jbGlja09uUGx1cyhmbGFnKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGFkZFdvcmtvdXRQbGFuQ29udDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2xpY2tPblBsdXMoZmxhZzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgY29uc3QgbW9kYWw6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIubW9kYWwtYWRkTmV3Q29tcGxleFwiXHJcbiAgICApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgaWYgKGZsYWcpIHtcclxuICAgICAgY29uc3QgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIFwiLm1vZGFsLWFkZE5ld0NvbXBsZXhfX2lucHV0XCJcclxuICAgICAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgICBpbnB1dC52YWx1ZSA9IFwiXCI7XHJcbiAgICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJpbnZpc2libGVcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBleGVyY2lzZXNXcmFwcGVyOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgXCIudHJhaW5pbmdfX2V4ZXJjaXNlc1wiXHJcbiAgICAgICkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGV4ZXJjaXNlc1dyYXBwZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgZXhlcmNpc2VzV3JhcHBlci5hcHBlbmQoXHJcbiAgICAgICAgdGhpcy5hZGROZXdDb21wbGV4LmNyZWF0ZVNlbGVjdEV4ZXJjaXNlcygpLFxyXG4gICAgICAgIHRoaXMuYWRkTmV3Q29tcGxleC5zaG93RXhlcmNpc2VzKGZhbHNlKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgV29ya291dEJsb2NrO1xyXG4iLCJpbXBvcnQgQWlyRGF0ZXBpY2tlciBmcm9tICcuL2Fpci1kYXRlcGlja2VyJztcbmV4cG9ydCBkZWZhdWx0IEFpckRhdGVwaWNrZXIiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9haXItZGF0ZXBpY2tlci5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgQXV0aG9yaXphdGlvbiBmcm9tIFwiLi4vdXRpbHMvYXV0aC5yb3V0ZXNcIjtcclxuaW1wb3J0IHtcclxuICBJVGVtcGxhdGUsXHJcbiAgSUF1dGhvcml6YXRpb24sXHJcbiAgSUxpbmVJdGVtLFxyXG4gIElXZWlnaHRDaGFydENvbXBvbmVudCxcclxufSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIjtcclxuaW1wb3J0IHsgZ2V0VXNlcklkTG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4uL3V0aWxzL2F1dGhcIjtcclxuaW1wb3J0IFdlaWdodENoYXJ0Q29tcG9uZW50IGZyb20gXCIuLi9jb21wb25lbnRzL1dlaWdodENoYXJ0Q29tcG9uZW50XCI7XHJcblxyXG5jbGFzcyBQcm9ncmVzcyB7XHJcbiAgcHJpdmF0ZSB0ZW1wbGF0ZTogSVRlbXBsYXRlO1xyXG4gIHByaXZhdGUgbWFpbkNsYXNzOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBtYWluQ2xhc3NUd286IHN0cmluZztcclxuICBwcml2YXRlIGF1dGhvcml6YXRpb246IElBdXRob3JpemF0aW9uO1xyXG4gIHByaXZhdGUgYm1pVmFsdWU6IG51bWJlcjtcclxuICBwcml2YXRlIGJtaUNvbnRlbnQ6IHN0cmluZztcclxuICBwcml2YXRlIGJtaUNsYXNzTmFtZTogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMudGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKTtcclxuICAgIHRoaXMubWFpbkNsYXNzID0gXCJwcm9ncmVzc1wiO1xyXG4gICAgdGhpcy5tYWluQ2xhc3NUd28gPSBcImJtaVwiO1xyXG4gICAgdGhpcy5hdXRob3JpemF0aW9uID0gbmV3IEF1dGhvcml6YXRpb24oKTtcclxuICAgIHRoaXMuYm1pVmFsdWUgPSAwO1xyXG4gICAgdGhpcy5ibWlDb250ZW50ID0gXCJcIjtcclxuICAgIHRoaXMuYm1pQ2xhc3NOYW1lID0gXCJcIjtcclxuICB9XHJcbiAgcHVibGljIGFzeW5jIGNyZWF0ZVByb2dyZXNzKCk6IFByb21pc2U8SFRNTEVsZW1lbnQ+IHtcclxuICAgIGF3YWl0IHRoaXMuY2FsY3VsYXRlQm1pKCk7XHJcblxyXG4gICAgY29uc3QgcHJvZ3Jlc3M6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInNlY3Rpb25cIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9YFxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBibWlCbG9jazogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUJtaUJsb2NrKCk7XHJcblxyXG4gICAgcHJvZ3Jlc3MuYXBwZW5kKGJtaUJsb2NrKTtcclxuICAgIHJldHVybiBwcm9ncmVzcztcclxuICB9XHJcblxyXG4gIC8vIHByaXZhdGUgY3JlYXRlQmxvY2tUaXRsZSgpOiBIVE1MRWxlbWVudCB7XHJcbiAgLy8gICBjb25zdCBibG9ja1RpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAvLyAgICAgXCJkaXZcIixcclxuICAvLyAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X190aXRsZWBcclxuICAvLyAgICk7XHJcbiAgLy8gICBjb25zdCB0aXRsZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgLy8gICAgIFwiaDJcIixcclxuICAvLyAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X190aXRsZS1jb250ZW50YCxcclxuICAvLyAgICAgXCJXZWlnaHQgZHluYW1pY3NcIlxyXG4gIC8vICAgKTtcclxuICAvLyAgIGJsb2NrVGl0bGUuYXBwZW5kKHRpdGxlKTtcclxuICAvLyAgIHJldHVybiBibG9ja1RpdGxlO1xyXG4gIC8vIH1cclxuXHJcbiAgLy8gcHJpdmF0ZSBjcmVhdGVDYW52YXMoKTogSFRNTEVsZW1lbnQge1xyXG4gIC8vICAgY29uc3Qgd2VpZ2h0Q2hhcnQ6IElXZWlnaHRDaGFydENvbXBvbmVudCA9IG5ldyBXZWlnaHRDaGFydENvbXBvbmVudCh7XHJcbiAgLy8gICAgIGNsYXNzTmFtZTogYCR7dGhpcy5tYWluQ2xhc3N9X19jYW52YXNgLFxyXG4gIC8vICAgICBkYXRhOiBbXHJcbiAgLy8gICAgICAge1xyXG4gIC8vICAgICAgICAgZGF0ZTogbmV3IERhdGUoXCIyMDIzLTAyLTIwXCIpLFxyXG4gIC8vICAgICAgICAgd2VpZ2h0OiA1NixcclxuICAvLyAgICAgICB9LFxyXG4gIC8vICAgICAgIHtcclxuICAvLyAgICAgICAgIGRhdGU6IG5ldyBEYXRlKFwiMjAyMy0wMi0yM1wiKSxcclxuICAvLyAgICAgICAgIHdlaWdodDogNjAsXHJcbiAgLy8gICAgICAgfSxcclxuICAvLyAgICAgICB7XHJcbiAgLy8gICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLFxyXG4gIC8vICAgICAgICAgd2VpZ2h0OiAxMDIsXHJcbiAgLy8gICAgICAgfSxcclxuICAvLyAgICAgXSxcclxuICAvLyAgIH0pO1xyXG5cclxuICAvLyAgIHJldHVybiB3ZWlnaHRDaGFydC5nZXRDaGFydCgpO1xyXG4gIC8vIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBjYWxjdWxhdGVCbWkoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCB1c2VySWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGdldFVzZXJJZExvY2FsU3RvcmFnZSgpO1xyXG4gICAgaWYgKCF1c2VySWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdXNlckluZm86XHJcbiAgICAgIHwgUmVjb3JkPHN0cmluZywgc3RyaW5nPlxyXG4gICAgICB8IHVuZGVmaW5lZCA9IGF3YWl0IHRoaXMuYXV0aG9yaXphdGlvbi5nZXRVc2VySW5mbyh1c2VySWQpO1xyXG4gICAgaWYgKCF1c2VySW5mbykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGhlaWdodCA9IE51bWJlcih1c2VySW5mby5oZWlnaHQpO1xyXG4gICAgbGV0IHdlaWdodCA9IE51bWJlcih1c2VySW5mby53ZWlnaHQpO1xyXG5cclxuICAgIGlmICh1c2VySW5mby51bml0cyA9PT0gXCJMYnMtaW5jaGVzXCIpIHtcclxuICAgICAgaGVpZ2h0ID0gTnVtYmVyKHVzZXJJbmZvLmhlaWdodCkgKiAyLjU0O1xyXG4gICAgICB3ZWlnaHQgPSBOdW1iZXIodXNlckluZm8ud2VpZ2h0KSAqIDAuNDU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ibWlWYWx1ZSA9IHBhcnNlRmxvYXQoKHdlaWdodCAvIE1hdGgucG93KGhlaWdodCAvIDEwMCwgMikpLnRvRml4ZWQoMSkpO1xyXG5cclxuICAgIHRoaXMuY3JlYXRlQm1pRGF0YSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVCbWlEYXRhKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuYm1pVmFsdWUgPD0gMTguNSkge1xyXG4gICAgICB0aGlzLmJtaUNvbnRlbnQgPSBcInVuZGVyd2VpZ2h0XCI7XHJcbiAgICAgIHRoaXMuYm1pQ2xhc3NOYW1lID0gYCR7dGhpcy5tYWluQ2xhc3NUd299X19saW5lLXVuZGVyd2VpZ2h0YDtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5ibWlWYWx1ZSA+IDE4LjUgJiYgdGhpcy5ibWlWYWx1ZSA8PSAyNSkge1xyXG4gICAgICB0aGlzLmJtaUNvbnRlbnQgPSBcIm5vcm1hbFwiO1xyXG4gICAgICB0aGlzLmJtaUNsYXNzTmFtZSA9IGAke3RoaXMubWFpbkNsYXNzVHdvfV9fbGluZS1ub3JtYWxgO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmJtaVZhbHVlID4gMjUgJiYgdGhpcy5ibWlWYWx1ZSA8PSAzMCkge1xyXG4gICAgICB0aGlzLmJtaUNvbnRlbnQgPSBcIm92ZXJ3ZWlnaHRcIjtcclxuICAgICAgdGhpcy5ibWlDbGFzc05hbWUgPSBgJHt0aGlzLm1haW5DbGFzc1R3b31fX2xpbmUtb3ZlcndlaWdodGA7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuYm1pVmFsdWUgPiAzMCAmJiB0aGlzLmJtaVZhbHVlIDw9IDM1KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiZ2dnXCIpO1xyXG4gICAgICB0aGlzLmJtaUNvbnRlbnQgPSBcIm9iZXNpdHkgMSBkZWdyZWVcIjtcclxuICAgICAgdGhpcy5ibWlDbGFzc05hbWUgPSBgJHt0aGlzLm1haW5DbGFzc1R3b31fX2xpbmUtb2Jlc2l0eTFgO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmJtaVZhbHVlID4gMzUgJiYgdGhpcy5ibWlWYWx1ZSA8PSA0MCkge1xyXG4gICAgICB0aGlzLmJtaUNvbnRlbnQgPSBcIm9iZXNpdHkgMiBkZWdyZWVcIjtcclxuICAgICAgdGhpcy5ibWlDbGFzc05hbWUgPSBgJHt0aGlzLm1haW5DbGFzc1R3b31fX2xpbmUtb2Jlc2l0eTJgO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmJtaVZhbHVlID4gNDApIHtcclxuICAgICAgdGhpcy5ibWlDb250ZW50ID0gXCJvYmVzaXR5IDMgZGVncmVlXCI7XHJcbiAgICAgIHRoaXMuYm1pQ2xhc3NOYW1lID0gYCR7dGhpcy5tYWluQ2xhc3NUd299X19saW5lLW9iZXNpdHkzYDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQm1pQmxvY2soKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgYm1pQmxvY2s6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc1R3b31gXHJcbiAgICApO1xyXG4gICAgY29uc3QgdGl0bGVDb250YWluZXI6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVCbWlUaXRsZSgpO1xyXG4gICAgY29uc3QgYm1pQ29udGFpbmVyOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlQm1pQ29udGFpbmVyKCk7XHJcbiAgICBibWlCbG9jay5hcHBlbmQodGl0bGVDb250YWluZXIsIGJtaUNvbnRhaW5lcik7XHJcbiAgICByZXR1cm4gYm1pQmxvY2s7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUJtaVRpdGxlKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHRpdGxlQ29udGFpbmVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3NUd299X190aXRsZS1jb250YWluZXJgXHJcbiAgICApO1xyXG4gICAgY29uc3QgdGl0bGU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImgyXCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzVHdvfV9fdGl0bGVgLFxyXG4gICAgICBcIkJvZHkgTWFzcyBJbmRleFwiXHJcbiAgICApO1xyXG4gICAgdGl0bGVDb250YWluZXIuYXBwZW5kKHRpdGxlKTtcclxuICAgIHJldHVybiB0aXRsZUNvbnRhaW5lcjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQm1pQ29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGJtaUNvbnRhaW5lcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzVHdvfV9fY29udGFpbmVyYFxyXG4gICAgKTtcclxuICAgIGNvbnN0IHBhcmFtZXRlcnNCbG9jazogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVBhcmFtZXRlcnNCbG9jaygpO1xyXG4gICAgY29uc3QgYm1pTGluZTogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUJtaUxpbmUoKTtcclxuICAgIGNvbnN0IGJtaVRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlQm1pUGFyYW1ldGVyc1RpdGxlKFxyXG4gICAgICB0aGlzLmJtaUNvbnRlbnQsXHJcbiAgICAgIHRoaXMuYm1pQ2xhc3NOYW1lXHJcbiAgICApO1xyXG4gICAgYm1pQ29udGFpbmVyLmFwcGVuZChwYXJhbWV0ZXJzQmxvY2ssIGJtaUxpbmUsIGJtaVRpdGxlKTtcclxuICAgIHJldHVybiBibWlDb250YWluZXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVBhcmFtZXRlcnNCbG9jaygpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBwYXJhbWV0ZXJzQmxvY2s6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc1R3b31fX3BhcmFtZXRlcnNgXHJcbiAgICApO1xyXG4gICAgY29uc3QgdGl0bGVzOiBIVE1MRWxlbWVudFtdID0gdGhpcy5jcmVhdGVUaXRsZXModGhpcy5ibWlWYWx1ZS50b1N0cmluZygpKTtcclxuICAgIHBhcmFtZXRlcnNCbG9jay5hcHBlbmQoLi4udGl0bGVzKTtcclxuICAgIHJldHVybiBwYXJhbWV0ZXJzQmxvY2s7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVRpdGxlcyhibWk6IHN0cmluZyk6IEhUTUxFbGVtZW50W10ge1xyXG4gICAgY29uc3QgdGl0bGU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc1R3b31fX3BhcmFtZXRlcnMtdGl0bGVgLFxyXG4gICAgICBcIkJNSTpcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHN1YnRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3NUd299X19wYXJhbWV0ZXJzLXN1YnRpdGxlYCxcclxuICAgICAgYm1pXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIFt0aXRsZSwgc3VidGl0bGVdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVCbWlMaW5lKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGNvbnRlbnRMaW5lSXRlbTogSUxpbmVJdGVtW10gPSBbXHJcbiAgICAgIHtcclxuICAgICAgICBjbGFzc05hbWU6IFwiYmx1ZVwiLFxyXG4gICAgICAgIHZhbHVlOiBbXCIxNVwiXSxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGNsYXNzTmFtZTogXCJncmVlblwiLFxyXG4gICAgICAgIHZhbHVlOiBbXCIxOC41XCJdLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgY2xhc3NOYW1lOiBcInllbGxvd1wiLFxyXG4gICAgICAgIHZhbHVlOiBbXCIyNVwiXSxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGNsYXNzTmFtZTogXCJvcmFuZ2VcIixcclxuICAgICAgICB2YWx1ZTogW1wiMzBcIl0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBjbGFzc05hbWU6IFwicmVkXCIsXHJcbiAgICAgICAgdmFsdWU6IFtcIjM1XCIsIFwiNDBcIl0sXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gICAgY29uc3QgYm1pTGluZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzVHdvfV9fbGluZWBcclxuICAgICk7XHJcblxyXG4gICAgY29udGVudExpbmVJdGVtLmZvckVhY2goKGNvbnRlbnQpID0+IHtcclxuICAgICAgY29uc3QgbGluZUl0ZW06IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVMaW5lSXRlbShjb250ZW50KTtcclxuICAgICAgYm1pTGluZS5hcHBlbmQobGluZUl0ZW0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbGluZVRodW1iOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlTGluZVRodW1iKCk7XHJcbiAgICBibWlMaW5lLmFwcGVuZChsaW5lVGh1bWIpO1xyXG4gICAgcmV0dXJuIGJtaUxpbmU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUxpbmVJdGVtKGNvbnRlbnQ6IElMaW5lSXRlbSk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGxpbmVJdGVtOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3NUd299X19saW5lLWl0ZW1gXHJcbiAgICApO1xyXG4gICAgbGluZUl0ZW0uY2xhc3NMaXN0LmFkZChjb250ZW50LmNsYXNzTmFtZSk7XHJcbiAgICBjb250ZW50LnZhbHVlLmZvckVhY2goKHZhbHVlKSA9PiB7XHJcbiAgICAgIGNvbnN0IGxpbmVOdW1iZXI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICAgIFwiZGl2XCIsXHJcbiAgICAgICAgYCR7dGhpcy5tYWluQ2xhc3NUd299X19saW5lLW51bWJlcmAsXHJcbiAgICAgICAgdmFsdWVcclxuICAgICAgKTtcclxuICAgICAgbGluZUl0ZW0uYXBwZW5kKGxpbmVOdW1iZXIpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbGluZUl0ZW07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUxpbmVUaHVtYigpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBsaW5lVGh1bWI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc1R3b31fX2xpbmUtdGh1bWJgXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0aGlzLmJtaVZhbHVlIDwgMTUpIHtcclxuICAgICAgbGluZVRodW1iLnN0eWxlLmxlZnQgPSBcIjAlXCI7XHJcbiAgICAgIHJldHVybiBsaW5lVGh1bWI7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5ibWlWYWx1ZSA+IDQwKSB7XHJcbiAgICAgIGxpbmVUaHVtYi5zdHlsZS5sZWZ0ID0gXCIxMDAlXCI7XHJcbiAgICAgIHJldHVybiBsaW5lVGh1bWI7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbGVmdCA9ICgodGhpcy5ibWlWYWx1ZSAtIDE1KSAqIDEwMCkgLyAyNTtcclxuICAgIGxpbmVUaHVtYi5zdHlsZS5sZWZ0ID0gbGVmdC50b1N0cmluZygpICsgXCIlXCI7XHJcbiAgICByZXR1cm4gbGluZVRodW1iO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVCbWlQYXJhbWV0ZXJzVGl0bGUoXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBjbGFzc05hbWU6IHN0cmluZ1xyXG4gICk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGJtaVRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgY2xhc3NOYW1lLFxyXG4gICAgICBjb250ZW50XHJcbiAgICApO1xyXG4gICAgcmV0dXJuIGJtaVRpdGxlO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJvZ3Jlc3M7XHJcbiIsImltcG9ydCBUZW1wbGF0ZSBmcm9tIFwiLi4vdGVtcGxhdGVzL3RlbXBsYXRlXCI7XHJcbmltcG9ydCB7IElUZW1wbGF0ZSB9IGZyb20gXCIuLi90eXBlcy9pbmRleFwiO1xyXG5pbXBvcnQgeyBvbkNsb3NlTW9kYWwgfSBmcm9tIFwiLi4vdXRpbHMvY29tcG9uZW50LXV0aWxzXCI7XHJcblxyXG5jbGFzcyBNb2RhbCB7XHJcbiAgdGVtcGxhdGU6IElUZW1wbGF0ZTtcclxuICBtYWluQ2xhc3M6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLm1haW5DbGFzcyA9IFwibW9kYWxcIjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVNb2RhbChcclxuICAgIGlkOiBzdHJpbmcsXHJcbiAgICBjb250ZW50OiBIVE1MRWxlbWVudCxcclxuICAgIGlzU2hvd0ljb25DbG9zZTogYm9vbGVhblxyXG4gICk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IG1vZGFsOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgdGhpcy5tYWluQ2xhc3NcclxuICAgICk7XHJcbiAgICBtb2RhbC5pZCA9IGlkO1xyXG4gICAgY29uc3QgYmFja0Ryb3A6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVCYWNrRHJvcChpZCwgaXNTaG93SWNvbkNsb3NlKTtcclxuICAgIGNvbnN0IG1vZGFsSW5uZXI6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVNb2RhbElubmVyKGlkLCBpc1Nob3dJY29uQ2xvc2UpO1xyXG4gICAgbW9kYWxJbm5lci5hcHBlbmQoY29udGVudCk7XHJcbiAgICBtb2RhbC5hcHBlbmQoYmFja0Ryb3AsIG1vZGFsSW5uZXIpO1xyXG4gICAgcmV0dXJuIG1vZGFsO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVCYWNrRHJvcChpZDogc3RyaW5nLCBpc1Nob3dJY29uQ2xvc2U6IGJvb2xlYW4pOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBiYWNrRHJvcCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19iYWNrZHJvcGBcclxuICAgICk7XHJcbiAgICBpZiAoIWlzU2hvd0ljb25DbG9zZSkge1xyXG4gICAgICByZXR1cm4gYmFja0Ryb3A7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBiYWNrRHJvcC5vbmNsaWNrID0gb25DbG9zZU1vZGFsKGlkKTtcclxuICAgICAgcmV0dXJuIGJhY2tEcm9wO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVNb2RhbElubmVyKGlkOiBzdHJpbmcsIGlzU2hvd0ljb25DbG9zZTogYm9vbGVhbik6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IG1vZGFsSW5uZXI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX2lubmVyYFxyXG4gICAgKTtcclxuICAgIGlmIChpc1Nob3dJY29uQ2xvc2UpIHtcclxuICAgICAgY29uc3QgaWNvbjogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUljb25DbG9zZSgpO1xyXG4gICAgICBjb25zdCBidG5DbG9zZTogSFRNTEJ1dHRvbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgICBcImJ0bi1jbG9zZVwiLFxyXG4gICAgICAgIGljb25cclxuICAgICAgKTtcclxuICAgICAgYnRuQ2xvc2Uub25jbGljayA9IG9uQ2xvc2VNb2RhbChpZCk7XHJcbiAgICAgIG1vZGFsSW5uZXIuYXBwZW5kKGJ0bkNsb3NlKTtcclxuICAgICAgcmV0dXJuIG1vZGFsSW5uZXI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gbW9kYWxJbm5lcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlSWNvbkNsb3NlKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGljb246IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFwiaVwiLCBcImljb24tY2xvc2VcIik7XHJcbiAgICByZXR1cm4gaWNvbjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1vZGFsO1xyXG4iLCJpbXBvcnQgeyBJSW5wdXRJbWcsIElUZW1wbGF0ZSwgSVZhbGlkYXRlIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcbmltcG9ydCB7IGFkZENsYXNzZXMgfSBmcm9tIFwiLi4vdXRpbHMvY29tcG9uZW50LXV0aWxzXCI7XHJcbmltcG9ydCBUZW1wbGF0ZSBmcm9tIFwiLi4vdGVtcGxhdGVzL3RlbXBsYXRlXCI7XHJcbmNvbnN0IHRlbXBsYXRlOiBJVGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBJbnB1dEltZyh7XHJcbiAgbWFpbkNsYXNzLFxyXG4gIGNsYXNzTmFtZSxcclxuICBhdHRyaWJ1dGVzLFxyXG4gIGltZ1NyYyxcclxuICBpbWdBbHQsXHJcbiAgdmFsaWRhdGUsXHJcbiAgdW5pdHMsXHJcbiAgY2xhc3NOYW1lVW5pdHMsXHJcbn06IElJbnB1dEltZyk6IEhUTUxFbGVtZW50IHtcclxuICBjb25zdCBpbnB1dEJsb2NrOiBIVE1MRWxlbWVudCA9IHRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICBcImRpdlwiLFxyXG4gICAgYCR7bWFpbkNsYXNzfV9faW5wdXRgXHJcbiAgKTtcclxuICBhZGRDbGFzc2VzKGlucHV0QmxvY2ssIGNsYXNzTmFtZSk7XHJcbiAgY29uc3QgaW5wdXRXcmFwOiBIVE1MRWxlbWVudCA9IHRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICBcImRpdlwiLFxyXG4gICAgYCR7bWFpbkNsYXNzfV9fd3JhcHBlcmBcclxuICApO1xyXG4gIGNvbnN0IGlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gY3JlYXRlSW5wdXQobWFpbkNsYXNzLCBhdHRyaWJ1dGVzKTtcclxuICBjb25zdCBlcnJvcjogSFRNTEVsZW1lbnQgPSB0ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgXCJzcGFuXCIsXHJcbiAgICBgJHttYWluQ2xhc3N9X19lcnJvcmBcclxuICApO1xyXG4gIGNvbnN0IHVuaXRzRWw6IEhUTUxFbGVtZW50ID0gY3JlYXRlVW5pdHNUaXRsZSh1bml0cywgY2xhc3NOYW1lVW5pdHMpO1xyXG5cclxuICBpZiAodmFsaWRhdGUpIHtcclxuICAgIGlucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCB2YWxpZGF0ZURhdGU6IElWYWxpZGF0ZSA9IHZhbGlkYXRlKGlucHV0LnZhbHVlLCB1bml0cyk7XHJcbiAgICAgIGlmICghdmFsaWRhdGVEYXRlLnJlcykge1xyXG4gICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoXCJlcnJvclwiKTtcclxuICAgICAgICBlcnJvci50ZXh0Q29udGVudCA9IHZhbGlkYXRlRGF0ZS5tZXNzYWdlIHx8IFwiXCI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZShcImVycm9yXCIpO1xyXG4gICAgICAgIGVycm9yLnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGltZzogSFRNTEVsZW1lbnQgPSB0ZW1wbGF0ZS5jcmVhdGVJbWFnZShcclxuICAgIGltZ1NyYyxcclxuICAgIGltZ0FsdCxcclxuICAgIGAke21haW5DbGFzc31fX2ltZ2BcclxuICApO1xyXG4gIGlucHV0V3JhcC5hcHBlbmQoaW1nLCBpbnB1dCwgdW5pdHNFbCk7XHJcbiAgaW5wdXRCbG9jay5hcHBlbmQoaW5wdXRXcmFwLCBlcnJvcik7XHJcbiAgcmV0dXJuIGlucHV0QmxvY2s7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUlucHV0KFxyXG4gIG1haW5DbGFzczogc3RyaW5nLFxyXG4gIGF0dHJpYnV0ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cclxuKTogSFRNTElucHV0RWxlbWVudCB7XHJcbiAgY29uc3QgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgaW5wdXQuY2xhc3NMaXN0LmFkZChgJHttYWluQ2xhc3N9X19pbnB1dC1pdGVtYCk7XHJcbiAgYWRkQXR0cmlidXRlcyhpbnB1dCwgYXR0cmlidXRlcyk7XHJcbiAgcmV0dXJuIGlucHV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVVbml0c1RpdGxlKHVuaXRzOiBzdHJpbmcsIGNsYXNzTmFtZVVuaXRzOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XHJcbiAgY29uc3QgdW5pdHNFbDogSFRNTEVsZW1lbnQgPSB0ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgXCJzcGFuXCIsXHJcbiAgICBgJHtjbGFzc05hbWVVbml0c31gLFxyXG4gICAgdW5pdHNcclxuICApO1xyXG4gIHJldHVybiB1bml0c0VsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRBdHRyaWJ1dGVzKFxyXG4gIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50LFxyXG4gIGF0dHJpYnV0ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cclxuKTogdm9pZCB7XHJcbiAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xyXG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9nIH0gZnJvbSBcImNvbnNvbGVcIjtcclxuaW1wb3J0IHsgSVZhbGlkYXRlIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNFbWFpbFZhbGlkKGVtYWlsOiBzdHJpbmcpOiBJVmFsaWRhdGUge1xyXG4gIGNvbnN0IGVtYWlsUmVnZXhwID0gLy4rQC4rXFwuLisvaTtcclxuICBpZiAoIWVtYWlsUmVnZXhwLnRlc3QoZW1haWwpKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXM6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsXCIsXHJcbiAgICB9O1xyXG4gIH1cclxuICByZXR1cm4ge1xyXG4gICAgcmVzOiB0cnVlLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1Bhc3N3b3JkVmFsaWQocGFzc3dvcmQ6IHN0cmluZyk6IElWYWxpZGF0ZSB7XHJcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IDYpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlczogZmFsc2UsXHJcbiAgICAgIG1lc3NhZ2U6IFwiUGFzc3dvcmQgbXVzdCBub3QgYmUgbGVzcyB0aGFuIDYgY2hhcmFjdGVyc1wiLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGlmIChwYXNzd29yZC5pbmNsdWRlcyhcIiBcIikpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlczogZmFsc2UsXHJcbiAgICAgIG1lc3NhZ2U6IFwiUGFzc3dvcmQgbXVzdCBub3QgY29udGFpbiBzcGFjZXNcIixcclxuICAgIH07XHJcbiAgfVxyXG4gIHJldHVybiB7XHJcbiAgICByZXM6IHRydWUsXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzSGVpZ2h0VmFsaWQoaGVpZ2h0OiBzdHJpbmcsIHVuaXRzOiBzdHJpbmcpOiBJVmFsaWRhdGUge1xyXG4gIC8vINC/0LXRgNC10LLQvtC00LjRgiDQtNGO0LnQvNGLINCyINGB0LxcclxuICBjb25zdCB2YWx1ZUhlaWdodDogbnVtYmVyID1cclxuICAgIHVuaXRzID09PSBcImluY2hlc1wiID8gTnVtYmVyKGhlaWdodCkgKiAyLjU0IDogTnVtYmVyKGhlaWdodCk7XHJcblxyXG4gIGlmICh2YWx1ZUhlaWdodCA8IDUwIHx8IHZhbHVlSGVpZ2h0ID4gNjAwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXM6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlOiBcIkVudGVyIHRoZSBjb3JyZWN0IGhlaWdodFwiLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICByZXM6IHRydWUsXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzV2VpZ2h0VmFsaWQod2VpZ2h0OiBzdHJpbmcsIHVuaXRzOiBzdHJpbmcpOiBJVmFsaWRhdGUge1xyXG4gIC8vINC/0LXRgNC10LLQvtC00LjRgiDRhNGD0L3RgtGLINCyINC60LNcclxuICBjb25zdCB2YWx1ZVdlaWdodDogbnVtYmVyID1cclxuICAgIHVuaXRzID09PSBcIkxic1wiID8gTnVtYmVyKHdlaWdodCkgKiAwLjQ1IDogTnVtYmVyKHdlaWdodCk7XHJcblxyXG4gIGlmICh2YWx1ZVdlaWdodCA8IDEgfHwgdmFsdWVXZWlnaHQgPiAxNTAwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXM6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlOiBcIkVudGVyIHRoZSBjb3JyZWN0IHdlaWdodFwiLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICByZXM6IHRydWUsXHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBJRXhlcmNpc2UsIElUZW1wbGF0ZSB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyB2b2x1bWUsIHNldHRpbmdzLCBhcnJvd0xlZnQsIHR2LCBtdXRlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvc3ZnXCI7XHJcbmltcG9ydCBDb21wbGV4IGZyb20gXCIuLi91dGlscy/RgW9tcGxleC5yb3V0ZXNcIjtcclxuaW1wb3J0IHsgZ2V0VXNlcklkTG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4uL3V0aWxzL2F1dGhcIjtcclxuaW1wb3J0IHJvdXRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9yb3V0ZXJDb21wb25lbnRcIjtcclxuXHJcbmNsYXNzIFRha2VBUmVzdCB7XHJcbiAgdGVtcGxhdGU6IElUZW1wbGF0ZTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBkcmF3KGluZGV4OiBudW1iZXIsIGV4ZXJjaXNlQXJyYXk6IElFeGVyY2lzZVtdKSB7XHJcbiAgICBjb25zdCBtb2RhbDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiZXhlcmNpc2VzTW9kYWxzXCJcclxuICAgICk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChtb2RhbCk7XHJcbiAgICBjb25zdCB0YWtlQVJlc3QgPSBhd2FpdCB0aGlzLmNyZWF0ZVRha2VBUmVzdChleGVyY2lzZUFycmF5LCBpbmRleCk7XHJcbiAgICBpZiAodGFrZUFSZXN0KSB7XHJcbiAgICAgIG1vZGFsLmFwcGVuZCh0YWtlQVJlc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBtb2RhbDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGNyZWF0ZVRha2VBUmVzdChleGVyY2lzZXM6IElFeGVyY2lzZVtdLCBpOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHdyYXBwZXI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcInJlc3RfX3dyYXBwZXJcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHVzZXJJZDE6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGdldFVzZXJJZExvY2FsU3RvcmFnZSgpO1xyXG4gICAgaWYgKCF1c2VySWQxKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGNvbXBsZXggPSBuZXcgQ29tcGxleCgpO1xyXG4gICAgY29uc3QgdXNlckRhdGEgPSBhd2FpdCBjb21wbGV4LmdldFVzZXJTZXR0aW5ncyh1c2VySWQxKTtcclxuICAgIHdyYXBwZXIuYXBwZW5kKFxyXG4gICAgICB0aGlzLmNyZWF0ZVNldGlpbmdzQ29udCgpLFxyXG4gICAgICB0aGlzLmNyZWF0ZVRpdGxlKCksXHJcbiAgICAgIHRoaXMuY3JlYXRlQ291bnREb3duKE51bWJlcih1c2VyRGF0YT8udGltZVJlc3QpIHx8IDIwKSxcclxuICAgICAgdGhpcy5jcmVhdGVCdXR0b25zKCksXHJcbiAgICAgIHRoaXMubmV4dEV4ZXJjaXNlVGV4dChleGVyY2lzZXMsIGkpLFxyXG4gICAgICB0aGlzLmNyZWF0ZU5leHRFeGVyY2lzZVdyYXBwZXIoZXhlcmNpc2VzLCBpKVxyXG4gICAgKTtcclxuICAgIHJldHVybiB3cmFwcGVyO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlU2V0aWluZ3NDb250KCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGhlYWRlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwicmVzdF9faGVhZGVyXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBhcnJvdzogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwicmVzdF9fYXJyb3ctbGVmdFwiXHJcbiAgICApO1xyXG4gICAgYXJyb3cuaW5uZXJIVE1MID0gYXJyb3dMZWZ0O1xyXG4gICAgYXJyb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgY29uc3QgbWFpbkVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluXCIpO1xyXG4gICAgICBpZiAobWFpbkVsZW1lbnQpIHtcclxuICAgICAgICBtYWluRWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZShcImV4ZXJjaXNlc1wiKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBzZXR0aW5nc0NvbnQ6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcInJlc3RfX3NldHRpbmdzLWNvbnRcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGltYWdlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJyZXN0X192b2x1bWVcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHNvdW5kID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzb3VuZFwiKTtcclxuICAgIGlmIChzb3VuZCA9PT0gXCJtdXRlZFwiKSB7XHJcbiAgICAgIGltYWdlLmlubmVySFRNTCA9IG11dGU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpbWFnZS5pbm5lckhUTUwgPSB2b2x1bWU7XHJcbiAgICB9XHJcbiAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzb3VuZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic291bmRcIik7XHJcbiAgICAgIGlmIChzb3VuZCA9PT0gXCJ1bm11dGVkXCIgfHwgIXNvdW5kKSB7XHJcbiAgICAgICAgaW1hZ2UuaW5uZXJIVE1MID0gbXV0ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbWFnZS5pbm5lckhUTUwgPSB2b2x1bWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3Qgc2V0dGluZ3NFbDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwicmVzdF9fc2V0dGluZ3NcIlxyXG4gICAgKTtcclxuICAgIHNldHRpbmdzRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgY29uc3Qgc2V0dGluZ3NNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgXCIuc2V0dGluZ3NNb2RhbFwiXHJcbiAgICAgICkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIHNldHRpbmdzTW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcImludmlzaWJsZVwiKTtcclxuICAgIH0pO1xyXG4gICAgc2V0dGluZ3NFbC5pbm5lckhUTUwgPSBzZXR0aW5ncztcclxuICAgIHNldHRpbmdzQ29udC5hcHBlbmQoaW1hZ2UsIHNldHRpbmdzRWwpO1xyXG4gICAgaGVhZGVyLmFwcGVuZChhcnJvdywgc2V0dGluZ3NDb250KTtcclxuICAgIHJldHVybiBoZWFkZXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVRpdGxlKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJoMlwiLFxyXG4gICAgICBcInJlc3RfX3RpdGxlXCIsXHJcbiAgICAgIFwidGFrZSBhIHJlc3RcIlxyXG4gICAgKTtcclxuICAgIHJldHVybiB0aXRsZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQnV0dG9ucygpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBidXR0b25zOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJyZXN0X19idXR0b25zXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBhZGRCdXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVCdG4oXHJcbiAgICAgIFwicmVzdF9fYWRkLWJ0blwiLFxyXG4gICAgICBcIisyMFwiXHJcbiAgICApO1xyXG4gICAgYWRkQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJleGVyY2lzZXNfX3N0YXJ0Tm93LWJ0blwiKTtcclxuICAgIGNvbnN0IHNraXBCdXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVCdG4oXHJcbiAgICAgIFwicmVzdF9fc2tpcC1idG5cIixcclxuICAgICAgXCJza2lwXCJcclxuICAgICk7XHJcbiAgICBza2lwQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJleGVyY2lzZXNfX3N0YXJ0Tm93LWJ0blwiKTtcclxuICAgIGJ1dHRvbnMuYXBwZW5kKGFkZEJ1dHRvbiwgc2tpcEJ1dHRvbik7XHJcbiAgICBhZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5hZGRTZWNvbmRzKCk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBidXR0b25zO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBuZXh0RXhlcmNpc2VUZXh0KGV4ZXJjaXNlczogSUV4ZXJjaXNlW10sIGk6IG51bWJlcik6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHRleHQ6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFwicFwiLCBcInJlc3RfX3RleHRcIik7XHJcbiAgICB0ZXh0LmlubmVySFRNTCA9IGBuZXh0IGV4ZXJjaXNlICR7aSArIDJ9IC8gJHtleGVyY2lzZXMubGVuZ3RofWA7XHJcbiAgICByZXR1cm4gdGV4dDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlTmV4dEV4ZXJjaXNlV3JhcHBlcihcclxuICAgIGV4ZXJjaXNlczogSUV4ZXJjaXNlW10sXHJcbiAgICBpOiBudW1iZXJcclxuICApOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCB3cmFwcGVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJyZXN0X19leGVyYy13cmFwcGVyXCJcclxuICAgICk7XHJcbiAgICB3cmFwcGVyLmFwcGVuZChcclxuICAgICAgdGhpcy5uZXh0RXhlcmNUaXRsZShleGVyY2lzZXMsIGkpLFxyXG4gICAgICB0aGlzLmNyZWF0ZU5leHRFeGVyY2lzZUluZm8oZXhlcmNpc2VzLCBpKVxyXG4gICAgKTtcclxuICAgIHJldHVybiB3cmFwcGVyO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBuZXh0RXhlcmNUaXRsZShleGVyY2lzZXM6IElFeGVyY2lzZVtdLCBpOiBudW1iZXIpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCB3cmFwcGVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJuZXh0LWV4ZXJjaXNlX19jb250XCJcclxuICAgICk7XHJcbiAgICBjb25zdCBleGVyY2lzZVRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJuZXh0LWV4ZXJjaXNlX190aXRsZVwiXHJcbiAgICApO1xyXG4gICAgZXhlcmNpc2VUaXRsZS5pbm5lckhUTUwgPSBgJHtleGVyY2lzZXNbaSArIDFdLnRpdGxlfSAke1xyXG4gICAgICBleGVyY2lzZXNbaSArIDFdLnF1YW50aXR5XHJcbiAgICB9YDtcclxuICAgIGNvbnN0IGxpbmtFbDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUxpbmsoXHJcbiAgICAgIFwibmV4dC1leGVyY2lzZV9fbGlua1wiLFxyXG4gICAgICBleGVyY2lzZXNbaSArIDFdLnlvdXR1YmVcclxuICAgICk7XHJcbiAgICBjb25zdCB0dkVsOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJuZXh0LWV4ZXJjaXNlX190dlwiXHJcbiAgICApO1xyXG5cclxuICAgIGxpbmtFbC5hcHBlbmQodHZFbCk7XHJcbiAgICB0dkVsLmlubmVySFRNTCA9IHR2O1xyXG4gICAgd3JhcHBlci5hcHBlbmQoZXhlcmNpc2VUaXRsZSwgbGlua0VsKTtcclxuICAgIHJldHVybiB3cmFwcGVyO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVOZXh0RXhlcmNpc2VJbmZvKFxyXG4gICAgZXhlcmNpc2VzOiBJRXhlcmNpc2VbXSxcclxuICAgIGk6IG51bWJlclxyXG4gICk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGluZm9XcmFwcHBlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwibmV4dC1leGVyY2lzZV9faW5mb1wiXHJcbiAgICApO1xyXG4gICAgY29uc3QgaW1nV3JhcHBlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwibmV4dC1leGVyY2lzZV9faW1nLXdyYXBwZXJcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGdpZjogSFRNTEltYWdlRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlSW1hZ2UoXHJcbiAgICAgIGV4ZXJjaXNlc1tpICsgMV0uZXhhbXBsZSxcclxuICAgICAgXCJleGVyY2lzZVwiLFxyXG4gICAgICBcIm5leHQtZXhlcmNpc2VfX2dpZlwiXHJcbiAgICApO1xyXG4gICAgaW1nV3JhcHBlci5hcHBlbmQoZ2lmKTtcclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJuZXh0LWV4ZXJjaXNlX19kZXNjcmlwdGlvblwiLFxyXG4gICAgICBleGVyY2lzZXNbaSArIDFdLmRlc2NyaXB0aW9uXHJcbiAgICApO1xyXG5cclxuICAgIGRlc2NyaXB0aW9uLmlubmVySFRNTCA9IGV4ZXJjaXNlc1tpICsgMV0uZGVzY3JpcHRpb24ucmVwbGFjZShcclxuICAgICAgL1xcLiAvZyxcclxuICAgICAgXCIuIDxicj48c3BhbiBjbGFzcz0nbmV3LWxpbmUnPjwvc3Bhbj5cIlxyXG4gICAgKTtcclxuICAgIGluZm9XcmFwcHBlci5hcHBlbmQoaW1nV3JhcHBlciwgZGVzY3JpcHRpb24pO1xyXG4gICAgcmV0dXJuIGluZm9XcmFwcHBlcjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQ291bnREb3duKHNlY29uZHM6IG51bWJlcik6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHRpbWVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJyZXN0X190aW1lclwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgdGltZXJMaW5lQmVmb3JlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJyZXN0X190aW1lci1saW5lLWJlZm9yZVwiXHJcbiAgICApO1xyXG4gICAgdGltZXJMaW5lQmVmb3JlLnN0eWxlLmFuaW1hdGlvbiA9IGBvdmVybGF5X2xlZnQgJHtzZWNvbmRzfXMgc3RlcHMoMSwgZW5kKSBmb3J3YXJkc2A7XHJcbiAgICBjb25zdCB0aW1lckxpbmU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcInJlc3RfX3RpbWVyLWxpbmVcIlxyXG4gICAgKTtcclxuICAgIHRpbWVyTGluZS5zdHlsZS5hbmltYXRpb24gPSBgcm90YXRlICR7c2Vjb25kc31zIGxpbmVhciBmb3J3YXJkc2A7XHJcbiAgICBjb25zdCB0aW1lckxpbmVBZnRlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwicmVzdF9fdGltZXItbGluZS1hZnRlclwiXHJcbiAgICApO1xyXG4gICAgdGltZXJMaW5lQWZ0ZXIuc3R5bGUuYW5pbWF0aW9uID0gYG92ZXJsYXlfcmlnaHQgJHtzZWNvbmRzfXMgc3RlcHMoMSwgZW5kKSBmb3J3YXJkc2A7XHJcbiAgICBjb25zdCB0aW1lckJvZHk6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcInJlc3RfX3RpbWVyLWJvZHlcIlxyXG4gICAgKTtcclxuICAgIHRpbWVyQm9keS5pbm5lckhUTUwgPSBTdHJpbmcoc2Vjb25kcyk7XHJcbiAgICB0aGlzLmNvdW50U2Vjb25kcyh0aW1lckJvZHksIHRpbWVyKTtcclxuICAgIHRpbWVyLmFwcGVuZCh0aW1lckxpbmVCZWZvcmUsIHRpbWVyTGluZSwgdGltZXJMaW5lQWZ0ZXIsIHRpbWVyQm9keSk7XHJcbiAgICByZXR1cm4gdGltZXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNvdW50U2Vjb25kcyhlbGVtZW50OiBIVE1MRWxlbWVudCwgZWxlbWVudDI6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCB0aWt0YWsgPSBuZXcgQXVkaW8oKTtcclxuICAgIGNvbnN0IHNvdW5kID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzb3VuZFwiKTtcclxuICAgIHRpa3Rhay5zcmMgPSBcIi4uL2Fzc2V0cy9zb3VuZHMvdGlrdGFrLm1wM1wiO1xyXG4gICAgaWYgKHNvdW5kID09PSBcInVubXV0ZWRcIiB8fCAhc291bmQpIHtcclxuICAgICAgdGlrdGFrLnBsYXkoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGludCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgaWYgKE51bWJlcihlbGVtZW50LmlubmVySFRNTCkgPiAwKSB7XHJcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBTdHJpbmcoTnVtYmVyKGVsZW1lbnQuaW5uZXJIVE1MKSAtIDEpO1xyXG4gICAgICAgIGlmIChOdW1iZXIoZWxlbWVudC5pbm5lckhUTUwpID09PSAwKSB7XHJcbiAgICAgICAgICB0aWt0YWsucGF1c2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIDEwMDApO1xyXG5cclxuICAgIHJvdXRlci5zdWJzY3JpYmVyc09uY2UucHVzaCgoKSA9PiB7XHJcbiAgICAgIHRpa3Rhay5wYXVzZSgpO1xyXG4gICAgfSk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY29uc3Qgc2tpcEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmVzdF9fc2tpcC1idG5cIikgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGNvbnN0IHZvbHVtZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmVzdF9fdm9sdW1lXCIpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICBjb25zdCBhcnJvd0JhY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIFwiLnJlc3RfX2Fycm93LWxlZnRcIlxyXG4gICAgICApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICBza2lwQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbChpbnQpO1xyXG4gICAgICAgIHRpa3Rhay5wYXVzZSgpO1xyXG4gICAgICB9KTtcclxuICAgICAgYXJyb3dCYWNrLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbChpbnQpO1xyXG4gICAgICAgIHRpa3Rhay5wYXVzZSgpO1xyXG4gICAgICB9KTtcclxuICAgICAgdm9sdW1lQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc291bmQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInNvdW5kXCIpO1xyXG4gICAgICAgIGlmIChzb3VuZCA9PT0gXCJ1bm11dGVkXCIgfHwgIXNvdW5kKSB7XHJcbiAgICAgICAgICB0aWt0YWsucGF1c2UoKTtcclxuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwic291bmRcIiwgXCJtdXRlZFwiKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHNvdW5kID09PSBcIm11dGVkXCIpIHtcclxuICAgICAgICAgIHRpa3Rhay5wbGF5KCk7XHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInNvdW5kXCIsIFwidW5tdXRlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSwgMCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFkZFNlY29uZHMoKTogdm9pZCB7XHJcbiAgICBjb25zdCB0aW1lckJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5yZXN0X190aW1lci1ib2R5XCJcclxuICAgICkgYXMgSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgdGltZXJCb2R5LmlubmVySFRNTCA9IFN0cmluZyhOdW1iZXIodGltZXJCb2R5LmlubmVySFRNTCkgKyAyMCk7XHJcbiAgICBjb25zdCB0aW1lckxpbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5yZXN0X190aW1lci1saW5lXCJcclxuICAgICkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBjb25zdCBiZWZvcmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIi5yZXN0X190aW1lci1saW5lLWJlZm9yZVwiXHJcbiAgICApIGFzIEhUTUxFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0IHByZXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRpbWVyTGluZSkuYW5pbWF0aW9uO1xyXG4gICAgY29uc3QgcmVnZXhwID0gL1xcZHsyLH0vZztcclxuICAgIGNvbnN0IHByZXZWYWwgPSBwcmV2U3R5bGUubWF0Y2gocmVnZXhwKTtcclxuICAgIGNvbnN0IGFmdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIucmVzdF9fdGltZXItbGluZS1hZnRlclwiXHJcbiAgICApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgaWYgKHByZXZWYWwpIHtcclxuICAgICAgYWZ0ZXIuc3R5bGUuYW5pbWF0aW9uID0gYG92ZXJsYXlfcmlnaHQgJHtcclxuICAgICAgICBOdW1iZXIocHJldlZhbFswXSkgKyAyMFxyXG4gICAgICB9cyBzdGVwcygxLCBlbmQpIGZvcndhcmRzYDtcclxuICAgICAgYmVmb3JlLnN0eWxlLmFuaW1hdGlvbiA9IGBvdmVybGF5X2xlZnQgJHtcclxuICAgICAgICBOdW1iZXIocHJldlZhbFswXSkgKyAyMFxyXG4gICAgICB9cyBzdGVwcygxLCBlbmQpIGZvcndhcmRzYDtcclxuICAgICAgdGltZXJMaW5lLnN0eWxlLmFuaW1hdGlvbiA9IGByb3RhdGUgJHtcclxuICAgICAgICBOdW1iZXIocHJldlZhbFswXSkgKyAyMFxyXG4gICAgICB9cyBsaW5lYXIgZm9yd2FyZHNgO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGFrZUFSZXN0O1xyXG4iLCJpbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBJVGVtcGxhdGUsIElFeGVyY2lzZSB9IGZyb20gXCIuLi90eXBlcy9pbmRleFwiO1xyXG5pbXBvcnQgUGF1c2VNb2RhbCBmcm9tIFwiLi4vY29tcG9uZW50cy9wYXVzZU1vZGFsXCI7XHJcbmltcG9ydCByb3V0ZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvcm91dGVyQ29tcG9uZW50XCI7XHJcbmltcG9ydCBFeGVyY2lzZU1vZGFsIGZyb20gXCIuLi9jb21wb25lbnRzL2V4ZXJjaXNlTW9kYWxcIjtcclxuXHJcbmNsYXNzIEV4ZXJjaXNlQmxvY2sge1xyXG4gIHRlbXBsYXRlOiBJVGVtcGxhdGU7XHJcbiAgZXhlcmNpc2VCbG9jazogSFRNTEVsZW1lbnQ7XHJcbiAgY291bnRlcjogSFRNTEVsZW1lbnQ7XHJcbiAgaW50ZXJ2YWw6IE5vZGVKUy5UaW1lciB8IHVuZGVmaW5lZDtcclxuICBleGVyY2lzZTogSUV4ZXJjaXNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihleGVyY2lzZTogSUV4ZXJjaXNlKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLmV4ZXJjaXNlQmxvY2sgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJleGVyY2lzZS1ibG9ja1wiKTtcclxuICAgIHRoaXMuY291bnRlciA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJleGVyY2lzZS1ibG9ja19fY291bnRlclwiXHJcbiAgICApO1xyXG4gICAgdGhpcy5leGVyY2lzZSA9IGV4ZXJjaXNlO1xyXG4gICAgdGhpcy5pbnRlcnZhbDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkcmF3KCk6IEhUTUxFbGVtZW50IHtcclxuICAgIHRoaXMuY3JlYXRlQmxvY2tzSGVhZGVyKCk7XHJcbiAgICBjb25zdCBleGVyY2lzZUdpZjogSFRNTEltYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICBleGVyY2lzZUdpZi5jbGFzc05hbWUgPSBcImV4ZXJjaXNlLWJsb2NrX19naWZcIjtcclxuICAgIGNvbnN0IHBhdGg6IHN0cmluZyA9IHRoaXMuZXhlcmNpc2UuZXhhbXBsZTtcclxuICAgIGV4ZXJjaXNlR2lmLnNyYyA9IHBhdGg7XHJcbiAgICB0aGlzLmV4ZXJjaXNlQmxvY2suYXBwZW5kKGV4ZXJjaXNlR2lmKTtcclxuICAgIHRoaXMuY3JlYXRlRXhlcmNpc2VJbmZvKCk7XHJcbiAgICB0aGlzLmNyZWF0ZUNvdW50ZXIoKTtcclxuICAgIHRoaXMuY3JlYXRlTmF2aWdhdGlvbkJ1dHRvbnMoKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5leGVyY2lzZUJsb2NrO1xyXG4gIH1cclxuXHJcbiAgLy8gZ2V0RXhlcmNpc2VEdXJhdGlvbihleGVyY2lzZTogSUV4ZXJjaXNlKTogbnVtYmVyIHtcclxuICAvLyAgIGNvbnN0IGR1ck1pbnMgPSBOdW1iZXIoZXhlcmNpc2UucXVhbnRpdHkuc2xpY2UoMCwgMikpO1xyXG4gIC8vICAgY29uc3QgZHVyU2Vjb25kcyA9IE51bWJlcihleGVyY2lzZS5xdWFudGl0eS5zbGljZSgzKSk7XHJcbiAgLy8gICBjb25zdCBkdXJhdGlvbjogbnVtYmVyID1cclxuICAvLyAgICAgZHVyTWlucyAhPT0gMCA/IGR1ck1pbnMgKiA2MCArIGR1clNlY29uZHMgOiBkdXJTZWNvbmRzO1xyXG4gIC8vICAgcmV0dXJuIGR1cmF0aW9uO1xyXG4gIC8vIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVCbG9ja3NIZWFkZXIoKTogdm9pZCB7XHJcbiAgICBjb25zdCBibG9ja0hlYWRlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiZXhlcmNpc2UtYmxvY2tfX2hlYWRlclwiXHJcbiAgICApO1xyXG4gICAgdGhpcy5leGVyY2lzZUJsb2NrLmFwcGVuZChibG9ja0hlYWRlcik7XHJcbiAgICBjb25zdCByZXR1cm5CdXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVCdG4oXHJcbiAgICAgIFwiZXhlcmNpc2UtYmxvY2tfX2J1dHRvbi1yZXR1cm5cIlxyXG4gICAgKTtcclxuICAgIHJldHVybkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBjb25zdCBtYWluRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW5cIik7XHJcbiAgICAgIGlmIChtYWluRWxlbWVudCkge1xyXG4gICAgICAgIG1haW5FbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgcm91dGVyLm5hdmlnYXRlKFwiZXhlcmNpc2VzXCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHNldHRpbmdzOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJleGVyY2lzZS1ibG9ja19fc2V0dGluZ3MtYmxvY2tcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHZvbHVtZUJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgXCJleGVyY2lzZS1ibG9ja19fdm9sdW1lXCJcclxuICAgICk7XHJcblxyXG4gICAgY29uc3Qgc291bmQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInNvdW5kXCIpO1xyXG4gICAgaWYgKHNvdW5kID09PSBcIm11dGVkXCIpIHtcclxuICAgICAgdm9sdW1lQnV0dG9uLnN0eWxlLmJhY2tncm91bmQgPSBcInVybCguLi9hc3NldHMvc3ZnL211dGUuc3ZnKVwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdm9sdW1lQnV0dG9uLnN0eWxlLmJhY2tncm91bmQgPSBcInVybCguLi9hc3NldHMvc3ZnL3ZvbHVtZS5zdmcpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgdm9sdW1lQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuc291bmQodm9sdW1lQnV0dG9uKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHNldHRpbmdzQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlQnRuKFxyXG4gICAgICBcImV4ZXJjaXNlLWJsb2NrX19zZXR0aW5nc1wiXHJcbiAgICApO1xyXG4gICAgc2V0dGluZ3NCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgY29uc3Qgc2V0dGluZ3NNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgXCIuc2V0dGluZ3NNb2RhbFwiXHJcbiAgICAgICkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIHNldHRpbmdzTW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcImludmlzaWJsZVwiKTtcclxuICAgIH0pO1xyXG4gICAgc2V0dGluZ3MuYXBwZW5kKHZvbHVtZUJ1dHRvbiwgc2V0dGluZ3NCdXR0b24pO1xyXG4gICAgYmxvY2tIZWFkZXIuYXBwZW5kKHJldHVybkJ1dHRvbiwgc2V0dGluZ3MpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVFeGVyY2lzZUluZm8oKTogdm9pZCB7XHJcbiAgICBjb25zdCBleGVyY2lzZUluZm86IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImV4ZXJjaXNlLWJsb2NrX19pbmZvXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBleGVyY2lzZU5hbWU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImV4ZXJjaXNlLWJsb2NrX19uYW1lXCIsXHJcbiAgICAgIHRoaXMuZXhlcmNpc2UudGl0bGVcclxuICAgICk7XHJcbiAgICBjb25zdCBleHRyYUluZm86IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImV4ZXJjaXNlLWJsb2NrX19leHRyYVwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgaW5mb0xpbms6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVMaW5rKFxyXG4gICAgICBcImV4ZXJjaXNlLWJsb2NrX19pbmZvLWxpbmtcIixcclxuICAgICAgXCIjXCIsXHJcbiAgICAgIFwiSW5mb1wiXHJcbiAgICApO1xyXG5cclxuICAgIGluZm9MaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGNvbnN0IGV4ZXJjaXNlTW9kYWwgPSBuZXcgRXhlcmNpc2VNb2RhbCh0aGlzLmV4ZXJjaXNlKTtcclxuICAgICAgZXhlcmNpc2VNb2RhbC5kcmF3KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB5b3V0dWJlTGluazogSFRNTEFuY2hvckVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUxpbmsoXHJcbiAgICAgIFwiZXhlcmNpc2UtYmxvY2tfX3lvdXR1YmVcIixcclxuICAgICAgdGhpcy5leGVyY2lzZS55b3V0dWJlLFxyXG4gICAgICBcIldhdGNoXCJcclxuICAgICk7XHJcbiAgICB5b3V0dWJlTGluay50YXJnZXQgPSBcIl9ibGFua1wiO1xyXG4gICAgZXh0cmFJbmZvLmFwcGVuZChpbmZvTGluaywgeW91dHViZUxpbmspO1xyXG4gICAgZXhlcmNpc2VJbmZvLmFwcGVuZChleGVyY2lzZU5hbWUsIGV4dHJhSW5mbyk7XHJcbiAgICB0aGlzLmV4ZXJjaXNlQmxvY2suYXBwZW5kKGV4ZXJjaXNlSW5mbywgZXh0cmFJbmZvKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQ291bnRlcigpOiB2b2lkIHtcclxuICAgIGNvbnN0IGN1cnJlbnRRdWFudGl0eTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwic3BhblwiLFxyXG4gICAgICBcImV4ZXJjaXNlLWJsb2NrX19jdXJyZW50LXF1YW50aXR5XCIsXHJcbiAgICAgIHRoaXMuZXhlcmNpc2UucXVhbnRpdHlcclxuICAgICk7XHJcbiAgICB0aGlzLmNvdW50ZXIuYXBwZW5kKGN1cnJlbnRRdWFudGl0eSk7XHJcblxyXG4gICAgaWYgKHRoaXMuZXhlcmNpc2UucXVhbnRpdHkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcInhcIikpIHtcclxuICAgICAgY29uc3QgZG9uZUJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgICBcImV4ZXJjaXNlLWJsb2NrX19idXR0b24tZG9uZVwiLFxyXG4gICAgICAgIFwiRG9uZVwiXHJcbiAgICAgICk7XHJcbiAgICAgIGRvbmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLnBsYXlEb25lQnRuKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLmNvdW50ZXIuYXBwZW5kKGRvbmVCdXR0b24pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgY291bnRkb3duQmFyOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlQ291bnRkb3duQmFyKCk7XHJcbiAgICAgIHRoaXMuY291bnRlci5hcHBlbmQoY291bnRkb3duQmFyKTtcclxuICAgICAgdGhpcy5jb3VudGVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcclxuICAgIH1cclxuICAgIHRoaXMuZXhlcmNpc2VCbG9jay5hcHBlbmQodGhpcy5jb3VudGVyKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQ291bnRkb3duQmFyKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHRpbWVCYXI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImV4ZXJjaXNlLWJsb2NrX190aW1lLWJhclwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgdHJhY2s6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImV4ZXJjaXNlLWJsb2NrX190cmFja1wiXHJcbiAgICApO1xyXG4gICAgY29uc3QgcGF1c2VCdXR0b24gPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgXCJleGVyY2lzZS1ibG9ja19fYnV0dG9uLXBhdXNlXCIsXHJcbiAgICAgIFwiUGF1c2VcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IG5leHRCdXR0b24gPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgXCJleGVyY2lzZS1ibG9ja19fYnV0dG9uLW5leHRcIixcclxuICAgICAgXCJOZXh0XCJcclxuICAgICk7XHJcbiAgICB0aW1lQmFyLmFwcGVuZCh0cmFjaywgcGF1c2VCdXR0b24sIG5leHRCdXR0b24pO1xyXG4gICAgcmV0dXJuIHRpbWVCYXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZU5hdmlnYXRpb25CdXR0b25zKCk6IHZvaWQge1xyXG4gICAgY29uc3QgbmF2aWdhdGlvbkJ1dHRvbnM6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImV4ZXJjaXNlLWJsb2NrX19idXR0b25zXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBwcmV2aW91c0J1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgXCJleGVyY2lzZS1ibG9ja19fYnV0dG9uLXByZXZcIixcclxuICAgICAgXCJQcmV2aW91c1wiXHJcbiAgICApO1xyXG4gICAgY29uc3QgZGVsaW06IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImV4ZXJjaXNlLWJsb2NrX19kZWxpbVwiXHJcbiAgICApO1xyXG4gICAgY29uc3Qgc2tpcEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgXCJleGVyY2lzZS1ibG9ja19fYnV0dG9uLXNraXBcIixcclxuICAgICAgXCJTa2lwXCJcclxuICAgICk7XHJcbiAgICBuYXZpZ2F0aW9uQnV0dG9ucy5hcHBlbmQocHJldmlvdXNCdXR0b24sIGRlbGltLCBza2lwQnV0dG9uKTtcclxuICAgIHRoaXMuZXhlcmNpc2VCbG9jay5hcHBlbmQobmF2aWdhdGlvbkJ1dHRvbnMpO1xyXG4gIH1cclxuXHJcbiAgaGlkZUV4ZXJjaXNlTGlua3MoKTogdm9pZCB7XHJcbiAgICBjb25zdCBsaW5rc0Jsb2NrID0gPEhUTUxFbGVtZW50PihcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5leGVyY2lzZS1ibG9ja19fZXh0cmFcIilcclxuICAgICk7XHJcbiAgICBsaW5rc0Jsb2NrLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gIH1cclxuXHJcbiAgc2hvd0V4ZXJjaXNlTGlua3MoKTogdm9pZCB7XHJcbiAgICBjb25zdCBsaW5rc0Jsb2NrID0gPEhUTUxFbGVtZW50PihcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5leGVyY2lzZS1ibG9ja19fZXh0cmFcIilcclxuICAgICk7XHJcbiAgICBpZiAobGlua3NCbG9jaykge1xyXG4gICAgICBsaW5rc0Jsb2NrLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNob3dOZXh0QnV0dG9uKCk6IHZvaWQge1xyXG4gICAgY29uc3QgbmV4dEJ0biA9IDxIVE1MQnV0dG9uRWxlbWVudD4oXHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXhlcmNpc2UtYmxvY2tfX2J1dHRvbi1uZXh0XCIpXHJcbiAgICApO1xyXG4gICAgaWYgKCFuZXh0QnRuKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIG5leHRCdG4uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICB9XHJcblxyXG4gIGRpc2FibGVQcmV2aW91c0J1dHRvbigpOiB2b2lkIHtcclxuICAgIGNvbnN0IHByZXZpb3VzQnRuID0gPEhUTUxCdXR0b25FbGVtZW50PihcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5leGVyY2lzZS1ibG9ja19fYnV0dG9uLXByZXZcIilcclxuICAgICk7XHJcbiAgICBpZiAoIXByZXZpb3VzQnRuKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHByZXZpb3VzQnRuLmNsYXNzTGlzdC5hZGQoXCJpbmFjdGl2ZVwiKTtcclxuICAgIHByZXZpb3VzQnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVByZXZpb3VzQnV0dG9uKCk6IHZvaWQge1xyXG4gICAgY29uc3QgcHJldmlvdXNCdG4gPSA8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmV4ZXJjaXNlLWJsb2NrX19idXR0b24tcHJldlwiKVxyXG4gICAgKTtcclxuICAgIGlmICghcHJldmlvdXNCdG4pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcHJldmlvdXNCdG4uY2xhc3NMaXN0LnJlbW92ZShcImluYWN0aXZlXCIpO1xyXG4gICAgcHJldmlvdXNCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGRpc2FibGVTa2lwQnV0dG9uKCk6IHZvaWQge1xyXG4gICAgY29uc3Qgc2tpcEJ0biA9IDxIVE1MQnV0dG9uRWxlbWVudD4oXHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXhlcmNpc2UtYmxvY2tfX2J1dHRvbi1za2lwXCIpXHJcbiAgICApO1xyXG4gICAgaWYgKCFza2lwQnRuKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHNraXBCdG4uY2xhc3NMaXN0LmFkZChcImluYWN0aXZlXCIpO1xyXG4gICAgc2tpcEJ0bi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBlbmFibGVTa2lwQnV0dG9uKCk6IHZvaWQge1xyXG4gICAgY29uc3Qgc2tpcEJ0biA9IDxIVE1MQnV0dG9uRWxlbWVudD4oXHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXhlcmNpc2UtYmxvY2tfX2J1dHRvbi1za2lwXCIpXHJcbiAgICApO1xyXG4gICAgaWYgKCFza2lwQnRuKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHNraXBCdG4uY2xhc3NMaXN0LnJlbW92ZShcImluYWN0aXZlXCIpO1xyXG4gICAgc2tpcEJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZGlzYWJsZVBhdXNlQnV0dG9uKCk6IHZvaWQge1xyXG4gICAgY29uc3QgcGF1c2VCdG4gPSA8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmV4ZXJjaXNlLWJsb2NrX19idXR0b24tcGF1c2VcIilcclxuICAgICk7XHJcbiAgICBpZiAoIXBhdXNlQnRuKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHBhdXNlQnRuLmNsYXNzTGlzdC5hZGQoXCJpbmFjdGl2ZVwiKTtcclxuICAgIHBhdXNlQnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVBhdXNlQnV0dG9uKCk6IHZvaWQge1xyXG4gICAgY29uc3QgcGF1c2VCdG4gPSA8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmV4ZXJjaXNlLWJsb2NrX19idXR0b24tcGF1c2VcIilcclxuICAgICk7XHJcbiAgICBpZiAoIXBhdXNlQnRuKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHBhdXNlQnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJpbmFjdGl2ZVwiKTtcclxuICAgIHBhdXNlQnRuLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVUaHJlZUNvdW50KCkge1xyXG4gICAgY29uc3QgdGhyZWVDb3VudGVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJjb3VudGVyLXRocmVlXCJcclxuICAgICk7XHJcbiAgICB0aGlzLmNvdW50ZXIuYXBwZW5kKHRocmVlQ291bnRlcik7XHJcbiAgICBsZXQgY291bnQgPSAzO1xyXG4gICAgdGhyZWVDb3VudGVyLnRleHRDb250ZW50ID0gYCR7Y291bnR9YDtcclxuICAgIHRocmVlQ291bnRlci5jbGFzc0xpc3QuYWRkKFwiZmFkaW5nXCIpO1xyXG4gICAgY29uc3QgdXBkYXRlQ291bnRlciA9ICgpID0+IHtcclxuICAgICAgY291bnQgPSBjb3VudCAtIDE7XHJcbiAgICAgIHRocmVlQ291bnRlci50ZXh0Q29udGVudCA9IGAke2NvdW50fWA7XHJcbiAgICB9O1xyXG4gICAgdGhyZWVDb3VudGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25pdGVyYXRpb25cIiwgdXBkYXRlQ291bnRlcik7XHJcbiAgICB0aHJlZUNvdW50ZXIuYWRkRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbmVuZFwiLCB1cGRhdGVDb3VudGVyKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUNvdW50RG93bigpOiB2b2lkIHtcclxuICAgIGNvbnN0IHJlYWR5VGV4dCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJyZWFkeS10ZXh0XCIsXHJcbiAgICAgIFwicmVhZHkgdG8gZ29cIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGNvdW50ZG93bjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiY291bnRkb3duXCJcclxuICAgICk7XHJcbiAgICB0aGlzLmNvdW50ZXIuYXBwZW5kKHJlYWR5VGV4dCwgY291bnRkb3duKTtcclxuICAgIGNvbnN0IGNpcmNsZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiY291bnRkb3duX19jaXJjbGVcIlxyXG4gICAgKTtcclxuICAgIGNvdW50ZG93bi5hcHBlbmQoY2lyY2xlKTtcclxuICAgIGNvbnN0IGNvdW50RG90OiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJjb3VudGRvd25fX2RvdFwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgY291bnRTdmc6IFNWR0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXHJcbiAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcclxuICAgICAgXCJzdmdcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHN2Z0NpcmNsZTE6IFNWR0NpcmNsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXHJcbiAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcclxuICAgICAgXCJjaXJjbGVcIlxyXG4gICAgKTtcclxuICAgIHN2Z0NpcmNsZTEuc2V0QXR0cmlidXRlKFwiY3hcIiwgXCI3MFwiKTtcclxuICAgIHN2Z0NpcmNsZTEuc2V0QXR0cmlidXRlKFwiY3lcIiwgXCI3MFwiKTtcclxuICAgIHN2Z0NpcmNsZTEuc2V0QXR0cmlidXRlKFwiclwiLCBcIjcwXCIpO1xyXG4gICAgY29uc3Qgc3ZnQ2lyY2xlMjogU1ZHQ2lyY2xlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcclxuICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxyXG4gICAgICBcImNpcmNsZVwiXHJcbiAgICApO1xyXG4gICAgc3ZnQ2lyY2xlMi5zZXRBdHRyaWJ1dGUoXCJjeFwiLCBcIjcwXCIpO1xyXG4gICAgc3ZnQ2lyY2xlMi5zZXRBdHRyaWJ1dGUoXCJjeVwiLCBcIjcwXCIpO1xyXG4gICAgc3ZnQ2lyY2xlMi5zZXRBdHRyaWJ1dGUoXCJyXCIsIFwiNzBcIik7XHJcbiAgICBjb3VudFN2Zy5hcHBlbmQoc3ZnQ2lyY2xlMSwgc3ZnQ2lyY2xlMik7XHJcbiAgICBjb25zdCBjb3VudE51bWJlciA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJjb3VudGRvd25fX251bWJlclwiLFxyXG4gICAgICBcIjEwXCJcclxuICAgICk7XHJcblxyXG4gICAgY2lyY2xlLmFwcGVuZChjb3VudERvdCwgY291bnRTdmcsIGNvdW50TnVtYmVyKTtcclxuXHJcbiAgICBjb25zdCBjb3VudGVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICBjb25zdCBjdXJOdW1iZXIgPSBOdW1iZXIoY291bnROdW1iZXIudGV4dENvbnRlbnQpIC0gMTtcclxuICAgICAgaWYgKGN1ck51bWJlciA9PT0gMCkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwoY291bnRlcik7XHJcbiAgICAgICAgY291bnRkb3duLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICByZWFkeVRleHQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIHRoaXMuc2hvd0V4ZXJjaXNlTGlua3MoKTtcclxuICAgICAgICB0aGlzLmVuYWJsZVNraXBCdXR0b24oKTtcclxuICAgICAgICBjb25zdCBtYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW5cIik7XHJcbiAgICAgIH1cclxuICAgICAgY291bnROdW1iZXIudGV4dENvbnRlbnQgPSBgJHtjdXJOdW1iZXJ9YDtcclxuICAgICAgc3ZnQ2lyY2xlMi5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gYCR7NDQwIC0gKDQ0MCAqIGN1ck51bWJlcikgLyAxMH1gO1xyXG4gICAgICBjb3VudERvdC5zdHlsZS50cmFuc2Zvcm0gPSBgcm90YXRlWigke2N1ck51bWJlciAqIDM2fWRlZylgO1xyXG4gICAgfSwgMTAwMCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNvdW5kKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCBzb3VuZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic291bmRcIik7XHJcblxyXG4gICAgaWYgKHNvdW5kID09PSBcIm11dGVkXCIpIHtcclxuICAgICAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID0gXCJ1cmwoLi4vYXNzZXRzL3N2Zy92b2x1bWUuc3ZnKVwiO1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInNvdW5kXCIsIFwidW5tdXRlZFwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9IFwidXJsKC4uL2Fzc2V0cy9zdmcvbXV0ZS5zdmcpXCI7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwic291bmRcIiwgXCJtdXRlZFwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgcGxheURvbmVCdG4oKTogdm9pZCB7XHJcbiAgICBjb25zdCBkb25lU291bmQgPSBuZXcgQXVkaW8oKTtcclxuICAgIGNvbnN0IHNvdW5kID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzb3VuZFwiKTtcclxuICAgIGRvbmVTb3VuZC5zcmMgPSBcIi4uL2Fzc2V0cy9zb3VuZHMvZG9uZS5tcDNcIjtcclxuICAgIGlmIChzb3VuZCA9PT0gXCJ1bm11dGVkXCIgfHwgIXNvdW5kKSB7XHJcbiAgICAgIGRvbmVTb3VuZC5wbGF5KCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFeGVyY2lzZUJsb2NrO1xyXG4iLCJpbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBJRXhlcmNpc2UsIElUZW1wbGF0ZSwgSVdvcmtvdXRQbGFuIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcbmltcG9ydCBUYWtlQVJlc3QgZnJvbSBcIi4uL2NvbXBvbmVudHMvdGFrZWFSZXN0XCI7XHJcbmltcG9ydCBFeGVyY2lzZUJsb2NrIGZyb20gXCIuLi9jb21wb25lbnRzL2V4ZXJjaXNlQmxvY2tcIjtcclxuaW1wb3J0IFBhdXNlTW9kYWwgZnJvbSBcIi4uL2NvbXBvbmVudHMvcGF1c2VNb2RhbFwiO1xyXG5pbXBvcnQgd29ya291dF9wbGFucyBmcm9tIFwiLi4vdXRpbHMvd29ya291dC1wbGFucy1lblwiO1xyXG5pbXBvcnQgQ29uZ3JhdHMgZnJvbSBcIi4uL2NvbXBvbmVudHMvY29uZ3JhdHNcIjtcclxuaW1wb3J0IHJvdXRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9yb3V0ZXJDb21wb25lbnRcIjtcclxuaW1wb3J0IEFkZE5ld0NvbXBsZXggZnJvbSBcIi4uL2NvbXBvbmVudHMvYWRkTmV3Q29tcGxleFwiO1xyXG5pbXBvcnQgU2luZ2xlVHJhaW5pbmdQYWdlIGZyb20gXCIuL3NpbmdsZVRyYWluaW5nXCI7XHJcbmltcG9ydCB7IG11ZywgbGlnaHRuaW5nMiB9IGZyb20gXCIuLi9jb21wb25lbnRzL3N2Z1wiO1xyXG5pbXBvcnQgQ29tcGxleCBmcm9tIFwiLi4vdXRpbHMv0YFvbXBsZXgucm91dGVzXCI7XHJcbmltcG9ydCB7IGdldFVzZXJJZExvY2FsU3RvcmFnZSB9IGZyb20gXCIuLi91dGlscy9hdXRoXCI7XHJcbmltcG9ydCB7IGluQWN0aXZlUHJlbG9hZGVyIH0gZnJvbSBcIi4uL3V0aWxzL3ByZWxvYWRlclwiO1xyXG5cclxuY2xhc3MgU3RhcnRUcmFpbmluZ1BhZ2Uge1xyXG4gIHRlbXBsYXRlOiBJVGVtcGxhdGU7XHJcbiAgdGFrZUFSZXN0OiBUYWtlQVJlc3Q7XHJcbiAgZXhlcmNpc2VBcnJheTogSUV4ZXJjaXNlW107XHJcbiAgY3VycmVudEV4ZXJjaXNlSW5kZXg6IG51bWJlcjtcclxuICBjb3VudGVyOiBudW1iZXI7XHJcbiAgaW50ZXJ2YWw6IE5vZGVKUy5UaW1lciB8IHVuZGVmaW5lZDtcclxuICBjb21wbGV4OiBDb21wbGV4O1xyXG4gIHRpbWVvdXQ6IE5vZGVKUy5UaW1lb3V0IHwgdW5kZWZpbmVkO1xyXG4gIHJlc3VsdE1pbnM6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLnRha2VBUmVzdCA9IG5ldyBUYWtlQVJlc3QoKTtcclxuICAgIHRoaXMuZXhlcmNpc2VBcnJheSA9IFtdO1xyXG4gICAgdGhpcy5jdXJyZW50RXhlcmNpc2VJbmRleCA9IDA7XHJcbiAgICB0aGlzLmNvdW50ZXIgPSAwO1xyXG4gICAgdGhpcy5pbnRlcnZhbDtcclxuICAgIHRoaXMudGltZW91dDtcclxuICAgIHRoaXMucmVzdWx0TWlucyA9IDA7XHJcbiAgICB0aGlzLmNvbXBsZXggPSBuZXcgQ29tcGxleCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGRyYXcoKSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJsb2FkZWRcIik7XHJcbiAgICBjb25zdCBtYWluRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW5cIik7XHJcbiAgICBpZiAoIW1haW5FbGVtZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIG1haW5FbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtYWluXCIpO1xyXG5cclxuICAgIG1haW5FbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgIGNvbnN0IG1haW5QYWdlRWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbWFpblBhZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJzdGFydFRyYWluaW5nLXBhZ2VcIik7XHJcbiAgICBjb25zdCBzZXR0dGluZ3NNb2RhbDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwic2V0dGluZ3NNb2RhbFwiXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IHVzZXJJZDE6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGdldFVzZXJJZExvY2FsU3RvcmFnZSgpO1xyXG4gICAgaWYgKCF1c2VySWQxKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzZXR0dGluZ3NNb2RhbC5jbGFzc0xpc3QuYWRkKFwiaW52aXNpYmxlXCIpO1xyXG5cclxuICAgIHNldHR0aW5nc01vZGFsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJzZXR0aW5nc01vZGFsXCIpKVxyXG4gICAgICAgIHNldHR0aW5nc01vZGFsLmNsYXNzTGlzdC5hZGQoXCJpbnZpc2libGVcIik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzZXR0dGluZ3NNb2RhbC5jbGFzc0xpc3QuYWRkKFwibW9kYWwtYWRkTmV3Q29tcGxleFwiKTtcclxuICAgIHNldHR0aW5nc01vZGFsLmFwcGVuZCh0aGlzLmNyZWF0ZVNldHRpbmdzTW9kYWwodXNlcklkMSkpO1xyXG4gICAgbWFpbkVsZW1lbnQuYXBwZW5kKG1haW5QYWdlRWxlbWVudCwgc2V0dHRpbmdzTW9kYWwpO1xyXG5cclxuICAgIGNvbnN0IGFkZE5ld0NvbXBsZXggPSBuZXcgQWRkTmV3Q29tcGxleCgpO1xyXG4gICAgY29uc3Qgc2VydmVyRGF0YSA9IGF3YWl0IGFkZE5ld0NvbXBsZXguY3JlYXRpbmdBcnJheUZyb21EYXRhKCk7XHJcbiAgICBsZXQgZGF0YTogSVdvcmtvdXRQbGFuW10gPSBbXTtcclxuICAgIGNvbnN0IHNpbmdsZVBhZ2UgPSBuZXcgU2luZ2xlVHJhaW5pbmdQYWdlKCk7XHJcbiAgICBjb25zdCBpZCA9IEpTT04ucGFyc2UoU3RyaW5nKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY29tcGxleElkXCIpKSk7XHJcbiAgICBpZiAoaWQpIHtcclxuICAgICAgY29uc3QgZXhlcmNpc2VzID0gYXdhaXQgc2luZ2xlUGFnZS50cmFuc2Zvcm1FeGVyY2lzZXMoaWQpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcnZlckRhdGFbMF0uYmxvY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoaWQgPT09IHNlcnZlckRhdGFbMF0uYmxvY2tbaV0uaWQpIHtcclxuICAgICAgICAgIHNlcnZlckRhdGFbMF0uYmxvY2tbaV0uZXhlcmNpc2VzLnB1c2goLi4uZXhlcmNpc2VzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChzZXJ2ZXJEYXRhLmxlbmd0aCAmJiBzZXJ2ZXJEYXRhWzBdLmJsb2NrLmxlbmd0aCkge1xyXG4gICAgICBkYXRhID0gWy4uLnNlcnZlckRhdGEsIC4uLndvcmtvdXRfcGxhbnNdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGF0YSA9IFsuLi53b3Jrb3V0X3BsYW5zXTtcclxuICAgIH1cclxuXHJcbiAgICBkYXRhLmZvckVhY2goKHBsYW4pID0+IHtcclxuICAgICAgcGxhbi5ibG9jay5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgaWYgKFN0cmluZyhpdGVtLmlkKSA9PT0gU3RyaW5nKGlkKSkge1xyXG4gICAgICAgICAgdGhpcy5leGVyY2lzZUFycmF5ID0gaXRlbS5leGVyY2lzZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMucmVzdWx0TWlucyA9IDA7XHJcbiAgICB0aGlzLmNvdW50ZXIgPSAwO1xyXG4gICAgdGhpcy5jdXJyZW50RXhlcmNpc2VJbmRleCA9IDA7XHJcbiAgICBjb25zdCBjdXJFeGVyY2lzZSA9IG5ldyBFeGVyY2lzZUJsb2NrKFxyXG4gICAgICB0aGlzLmV4ZXJjaXNlQXJyYXlbdGhpcy5jdXJyZW50RXhlcmNpc2VJbmRleF1cclxuICAgICk7XHJcbiAgICBtYWluUGFnZUVsZW1lbnQuYXBwZW5kKGN1ckV4ZXJjaXNlLmRyYXcoKSk7XHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuY3VycmVudEV4ZXJjaXNlSW5kZXggPT09IDAgJiZcclxuICAgICAgdGhpcy5leGVyY2lzZUFycmF5W3RoaXMuY3VycmVudEV4ZXJjaXNlSW5kZXhdLnF1YW50aXR5XHJcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAuaW5jbHVkZXMoXCJ4XCIpXHJcbiAgICApIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XHJcbiAgICAgIGN1ckV4ZXJjaXNlLmNyZWF0ZUNvdW50RG93bigpO1xyXG4gICAgICBjdXJFeGVyY2lzZS5oaWRlRXhlcmNpc2VMaW5rcygpO1xyXG4gICAgICBjdXJFeGVyY2lzZS5kaXNhYmxlUHJldmlvdXNCdXR0b24oKTtcclxuICAgICAgY3VyRXhlcmNpc2UuZGlzYWJsZVNraXBCdXR0b24oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XHJcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xyXG4gICAgICBjdXJFeGVyY2lzZS5jcmVhdGVUaHJlZUNvdW50KCk7XHJcbiAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5nZXRFeGVyY2lzZUR1cmF0aW9uKFxyXG4gICAgICAgICAgdGhpcy5leGVyY2lzZUFycmF5W3RoaXMuY3VycmVudEV4ZXJjaXNlSW5kZXhdXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNldFRpbWVDb3VudGVyKGR1cmF0aW9uKTtcclxuICAgICAgICB0aGlzLmVuYWJsZUNvdW50ZXJCbG9jaygpO1xyXG4gICAgICB9LCAzMDAwKTtcclxuICAgICAgY3VyRXhlcmNpc2UuZGlzYWJsZVByZXZpb3VzQnV0dG9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgIG1haW5QYWdlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gPEhUTUxCdXR0b25FbGVtZW50PmUudGFyZ2V0O1xyXG4gICAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImV4ZXJjaXNlLWJsb2NrX19idXR0b24tZG9uZVwiKSkge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRFeGVyY2lzZUluZGV4ID09PSB0aGlzLmV4ZXJjaXNlQXJyYXkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcclxuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xyXG4gICAgICAgICAgdGhpcy5jb3VudGVyKys7XHJcbiAgICAgICAgICB0aGlzLnJlc3VsdE1pbnMgPSB0aGlzLmdldFJlc3VsdE1pbnV0ZXMoc3RhcnQpO1xyXG4gICAgICAgICAgaWYgKHRoaXMucmVzdWx0TWlucyA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdE1pbnMgPSAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5zaG93Q29uZ3JhdHModGhpcy5jb3VudGVyLCB0aGlzLnJlc3VsdE1pbnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XHJcbiAgICAgICAgICB0aGlzLnNob3dSZXN0TW9kYWwoKTtcclxuICAgICAgICAgIHRoaXMuY291bnRlcisrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImV4ZXJjaXNlLWJsb2NrX19idXR0b24tbmV4dFwiKSkge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRFeGVyY2lzZUluZGV4ID09PSB0aGlzLmV4ZXJjaXNlQXJyYXkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcclxuICAgICAgICAgIHRoaXMuY291bnRlcisrO1xyXG4gICAgICAgICAgdGhpcy5yZXN1bHRNaW5zID0gdGhpcy5nZXRSZXN1bHRNaW51dGVzKHN0YXJ0KTtcclxuICAgICAgICAgIGlmICh0aGlzLnJlc3VsdE1pbnMgPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5yZXN1bHRNaW5zID0gMTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuc2hvd0NvbmdyYXRzKHRoaXMuY291bnRlciwgdGhpcy5yZXN1bHRNaW5zKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcclxuICAgICAgICAgIHRoaXMuc2hvd1Jlc3RNb2RhbCgpO1xyXG4gICAgICAgICAgdGhpcy5jb3VudGVyKys7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZXhlcmNpc2UtYmxvY2tfX2J1dHRvbi1za2lwXCIpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEV4ZXJjaXNlSW5kZXggPT09IHRoaXMuZXhlcmNpc2VBcnJheS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XHJcbiAgICAgICAgICB0aGlzLnJlc3VsdE1pbnMgPSB0aGlzLmdldFJlc3VsdE1pbnV0ZXMoc3RhcnQpO1xyXG4gICAgICAgICAgaWYgKHRoaXMucmVzdWx0TWlucyA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdE1pbnMgPSAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5zaG93Q29uZ3JhdHModGhpcy5jb3VudGVyLCB0aGlzLnJlc3VsdE1pbnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcclxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XHJcbiAgICAgICAgICB0aGlzLmxvYWROZXh0RXhlcmNpc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJyZXN0X19za2lwLWJ0blwiKSkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XHJcbiAgICAgICAgdGhpcy5sb2FkTmV4dEV4ZXJjaXNlKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJleGVyY2lzZS1ibG9ja19fYnV0dG9uLXByZXZcIikpIHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50RXhlcmNpc2VJbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XHJcbiAgICAgICAgICB0aGlzLmxvYWRQcmV2aW91c0V4ZXJjaXNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicGF1c2UtbW9kYWxfX2J1dHRvbi1yZXN0YXJ0XCIpKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZU1vZGFsKCk7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gXCJcIjtcclxuICAgICAgICB0aGlzLnJlc3RhcnRFeGVyY2lzZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZXhlcmNpc2UtYmxvY2tfX2J1dHRvbi1wYXVzZVwiKSkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgUGF1c2VNb2RhbChcclxuICAgICAgICAgIHRoaXMuZXhlcmNpc2VBcnJheVt0aGlzLmN1cnJlbnRFeGVyY2lzZUluZGV4XVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgbWFpblBhZ2VFbGVtZW50LnByZXBlbmQobW9kYWwuZHJhdygpKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInBhdXNlLW1vZGFsX19idXR0b24tY29udGludWVcIikpIHtcclxuICAgICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gXCJcIjtcclxuICAgICAgICB0aGlzLmRpc2FibGVDb3VudGVyQmxvY2soKTtcclxuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlVGhyZWVDb3VudCgpO1xyXG4gICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZHVyYXRpb24gPSB0aGlzLmdldEV4ZXJjaXNlRHVyYXRpb24oXHJcbiAgICAgICAgICAgIHRoaXMuZXhlcmNpc2VBcnJheVt0aGlzLmN1cnJlbnRFeGVyY2lzZUluZGV4XVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHRoaXMuc2V0VGltZUNvdW50ZXIoZHVyYXRpb24pO1xyXG4gICAgICAgICAgdGhpcy5lbmFibGVDb3VudGVyQmxvY2soKTtcclxuICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgfVxyXG4gICAgICAvL2luQWN0aXZlUHJlbG9hZGVyKGRvY3VtZW50LmJvZHkpO1xyXG4gICAgfSk7XHJcbiAgICBpbkFjdGl2ZVByZWxvYWRlcihkb2N1bWVudC5ib2R5KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0UmVzdWx0TWludXRlcyhzdGFydE51bTogbnVtYmVyKSB7XHJcbiAgICBjb25zdCByZXN1bHRUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0TnVtO1xyXG4gICAgY29uc3QgcmVzdWx0TWlucyA9IG5ldyBEYXRlKHJlc3VsdFRpbWUpLmdldE1pbnV0ZXMoKTtcclxuICAgIHJldHVybiByZXN1bHRNaW5zO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBsb2FkTmV4dEV4ZXJjaXNlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jdXJyZW50RXhlcmNpc2VJbmRleCA9IHRoaXMuY3VycmVudEV4ZXJjaXNlSW5kZXggKyAxO1xyXG4gICAgdGhpcy5zaG93RXhlcmNpc2UoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbG9hZFByZXZpb3VzRXhlcmNpc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmN1cnJlbnRFeGVyY2lzZUluZGV4ID0gdGhpcy5jdXJyZW50RXhlcmNpc2VJbmRleCAtIDE7XHJcbiAgICB0aGlzLnNob3dFeGVyY2lzZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZXN0YXJ0RXhlcmNpc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNob3dFeGVyY2lzZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzaG93RXhlcmNpc2UoKTogdm9pZCB7XHJcbiAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xyXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XHJcbiAgICBjb25zdCBwYWdlID0gPEhUTUxFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3RhcnRUcmFpbmluZy1wYWdlXCIpO1xyXG4gICAgY29uc3QgY3VyRXhlcmNpc2UgPSBuZXcgRXhlcmNpc2VCbG9jayhcclxuICAgICAgdGhpcy5leGVyY2lzZUFycmF5W3RoaXMuY3VycmVudEV4ZXJjaXNlSW5kZXhdXHJcbiAgICApO1xyXG4gICAgaWYgKFxyXG4gICAgICAhdGhpcy5leGVyY2lzZUFycmF5W3RoaXMuY3VycmVudEV4ZXJjaXNlSW5kZXhdLnF1YW50aXR5XHJcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAuaW5jbHVkZXMoXCJ4XCIpXHJcbiAgICApIHtcclxuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcclxuICAgICAgY3VyRXhlcmNpc2UuY3JlYXRlVGhyZWVDb3VudCgpO1xyXG4gICAgICBpZiAoIXJvdXRlci5pc0FjdGl2ZVJvdXQoXCJzdGFydFRyYWluaW5nXCIpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5nZXRFeGVyY2lzZUR1cmF0aW9uKFxyXG4gICAgICAgICAgdGhpcy5leGVyY2lzZUFycmF5W3RoaXMuY3VycmVudEV4ZXJjaXNlSW5kZXhdXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNldFRpbWVDb3VudGVyKGR1cmF0aW9uKTtcclxuICAgICAgICB0aGlzLmVuYWJsZUNvdW50ZXJCbG9jaygpO1xyXG4gICAgICB9LCAzMDAwKTtcclxuICAgIH1cclxuICAgIGlmICghcGFnZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBwYWdlLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICBwYWdlLmFwcGVuZChjdXJFeGVyY2lzZS5kcmF3KCkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBzaG93UmVzdE1vZGFsKCkge1xyXG4gICAgY29uc3QgcGFnZUNvbnRlbnQgPSA8SFRNTEVsZW1lbnQ+KFxyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnN0YXJ0VHJhaW5pbmctcGFnZVwiKVxyXG4gICAgKTtcclxuICAgIHBhZ2VDb250ZW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICBwYWdlQ29udGVudC5hcHBlbmQoXHJcbiAgICAgIGF3YWl0IHRoaXMudGFrZUFSZXN0LmRyYXcodGhpcy5jdXJyZW50RXhlcmNpc2VJbmRleCwgdGhpcy5leGVyY2lzZUFycmF5KVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHVzZXJJZDE6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGdldFVzZXJJZExvY2FsU3RvcmFnZSgpO1xyXG4gICAgaWYgKCF1c2VySWQxKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHVzZXJEYXRhID0gYXdhaXQgdGhpcy5jb21wbGV4LmdldFVzZXJTZXR0aW5ncyh1c2VySWQxKTtcclxuICAgIHRoaXMuYXV0b0NoYW5nZShOdW1iZXIodXNlckRhdGE/LnRpbWVSZXN0KSB8fCAyMCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIHNob3dDb25ncmF0cyhjb3VudGVyOiBudW1iZXIsIHRpbWU6IG51bWJlcikge1xyXG4gICAgY29uc3QgcGFnZUNvbnRlbnQgPSA8SFRNTEVsZW1lbnQ+KFxyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnN0YXJ0VHJhaW5pbmctcGFnZVwiKVxyXG4gICAgKTtcclxuICAgIGNvbnN0IGNvbmdyYXRzID0gbmV3IENvbmdyYXRzKGNvdW50ZXIsIHRpbWUpO1xyXG4gICAgcGFnZUNvbnRlbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuXHJcbiAgICBwYWdlQ29udGVudC5hcHBlbmQoYXdhaXQgY29uZ3JhdHMuZHJhdygpKTtcclxuXHJcbiAgICBjb25zdCBjb21wbGV0ZUJ0biA9IDxIVE1MQW5jaG9yRWxlbWVudD4oXHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29uZ3JhdHNfX2J1dHRvbi1jb21wbGV0ZVwiKVxyXG4gICAgKTtcclxuXHJcbiAgICBjb21wbGV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBjb25zdCBtYWluRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW5cIik7XHJcbiAgICAgIGlmIChtYWluRWxlbWVudCkge1xyXG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZShcImV4ZXJjaXNlc1wiKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGF1dG9DaGFuZ2Uoc2Vjb25kczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBsZXQgY291bnRlciA9IDA7XHJcbiAgICBjb25zdCBhZGRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlc3RfX2FkZC1idG5cIikgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBjb25zdCBza2lwQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZXN0X19za2lwLWJ0blwiKSBhcyBIVE1MRWxlbWVudDtcclxuICAgIGFkZEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICBjb3VudGVyID0gY291bnRlciAtIDIwO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBpbnQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgIGlmIChjb3VudGVyIDwgc2Vjb25kcykge1xyXG4gICAgICAgIGNvdW50ZXIrKztcclxuICAgICAgICBpZiAoY291bnRlciA9PT0gc2Vjb25kcykge1xyXG4gICAgICAgICAgdGhpcy5sb2FkTmV4dEV4ZXJjaXNlKCk7XHJcbiAgICAgICAgICBjb3VudGVyID0gMDtcclxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIDEwMDApO1xyXG4gICAgc2tpcEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICBjb3VudGVyID0gMDtcclxuICAgICAgY2xlYXJJbnRlcnZhbChpbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRUaW1lQ291bnRlcihkdXJhdGlvbjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xyXG4gICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgY29uc3QgcXVhbnRpdHkgPSA8SFRNTEVsZW1lbnQ+KFxyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXhlcmNpc2UtYmxvY2tfX2N1cnJlbnQtcXVhbnRpdHlcIilcclxuICAgICAgKTtcclxuICAgICAgaWYgKHF1YW50aXR5KSB7XHJcbiAgICAgICAgY29uc3QgdGltZUxlZnQgPSBxdWFudGl0eS50ZXh0Q29udGVudDtcclxuICAgICAgICBsZXQgbWludXRlcyA9IHRpbWVMZWZ0Py5zbGljZSgwLCAyKTtcclxuICAgICAgICBsZXQgc2Vjb25kcyA9IHRpbWVMZWZ0Py5zbGljZSgzKTtcclxuICAgICAgICBpZiAoTnVtYmVyKHNlY29uZHMpID09PSAwKSB7XHJcbiAgICAgICAgICBpZiAoTnVtYmVyKG1pbnV0ZXMpID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRCdG4gPSA8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxyXG4gICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXhlcmNpc2UtYmxvY2tfX2J1dHRvbi1uZXh0XCIpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIG5leHRCdG4uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChOdW1iZXIobWludXRlcykgPiAwICYmIE51bWJlcihtaW51dGVzKSA8PSAxMCkge1xyXG4gICAgICAgICAgICBtaW51dGVzID0gYDAke051bWJlcihtaW51dGVzKSAtIDF9YDtcclxuICAgICAgICAgICAgc2Vjb25kcyA9IFwiNTlcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2Vjb25kcyA9IGAke051bWJlcihzZWNvbmRzKSAtIDF9YDtcclxuICAgICAgICAgIGlmIChOdW1iZXIoc2Vjb25kcykgPCAxMCkge1xyXG4gICAgICAgICAgICBzZWNvbmRzID0gYDAke3NlY29uZHN9YDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcXVhbnRpdHkudGV4dENvbnRlbnQgPSBgJHttaW51dGVzfToke3NlY29uZHN9YDtcclxuICAgICAgICBjb25zdCB3aWR0aEVsID0gPEhUTUxFbGVtZW50PihcclxuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXhlcmNpc2UtYmxvY2tfX3RpbWUtYmFyXCIpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAod2lkdGhFbCkge1xyXG4gICAgICAgICAgY29uc3QgbWF4V2lkdGggPSB3aWR0aEVsLmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgY29uc3QgdHJhY2sgPSA8SFRNTEVsZW1lbnQ+KFxyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmV4ZXJjaXNlLWJsb2NrX190cmFja1wiKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHRyYWNrLnN0eWxlLndpZHRoID0gYCR7KG1heFdpZHRoIC8gZHVyYXRpb24pICogTnVtYmVyKHNlY29uZHMpfXB4YDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIDEwMDApO1xyXG4gIH1cclxuXHJcbiAgZ2V0RXhlcmNpc2VEdXJhdGlvbihleGVyY2lzZTogSUV4ZXJjaXNlKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGR1ck1pbnMgPSBOdW1iZXIoZXhlcmNpc2UucXVhbnRpdHkuc2xpY2UoMCwgMikpO1xyXG4gICAgY29uc3QgZHVyU2Vjb25kcyA9IE51bWJlcihleGVyY2lzZS5xdWFudGl0eS5zbGljZSgzKSk7XHJcbiAgICBjb25zdCBkdXJhdGlvbjogbnVtYmVyID1cclxuICAgICAgZHVyTWlucyAhPT0gMCA/IGR1ck1pbnMgKiA2MCArIGR1clNlY29uZHMgOiBkdXJTZWNvbmRzO1xyXG4gICAgcmV0dXJuIGR1cmF0aW9uO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlVGhyZWVDb3VudCgpOiB2b2lkIHtcclxuICAgIGNvbnN0IHRocmVlQ291bnRlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiY291bnRlci10aHJlZVwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgY291bnRlciA9IDxIVE1MRWxlbWVudD4oXHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXhlcmNpc2UtYmxvY2tfX2NvdW50ZXJcIilcclxuICAgICk7XHJcbiAgICBjb3VudGVyLmFwcGVuZCh0aHJlZUNvdW50ZXIpO1xyXG4gICAgbGV0IGNvdW50ID0gMztcclxuICAgIHRocmVlQ291bnRlci50ZXh0Q29udGVudCA9IGAke2NvdW50fWA7XHJcbiAgICB0aHJlZUNvdW50ZXIuY2xhc3NMaXN0LmFkZChcImZhZGluZ1wiKTtcclxuICAgIGNvbnN0IHVwZGF0ZUNvdW50ZXIgPSAoKSA9PiB7XHJcbiAgICAgIGNvdW50ID0gY291bnQgLSAxO1xyXG4gICAgICB0aHJlZUNvdW50ZXIudGV4dENvbnRlbnQgPSBgJHtjb3VudH1gO1xyXG4gICAgfTtcclxuICAgIHRocmVlQ291bnRlci5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIsIHVwZGF0ZUNvdW50ZXIpO1xyXG4gICAgdGhyZWVDb3VudGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgdXBkYXRlQ291bnRlcik7XHJcbiAgfVxyXG5cclxuICBjbG9zZU1vZGFsKCkge1xyXG4gICAgY29uc3QgYmFja0xheWVyID0gPEhUTUxFbGVtZW50PihcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wYXVzZS1tb2RhbF9fYmFja2xheWVyXCIpXHJcbiAgICApO1xyXG4gICAgYmFja0xheWVyLnJlbW92ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVTZXR0aW5nc01vZGFsKGlkOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCB3cmFwcGVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJtb2RhbC1hZGROZXdDb21wbGV4X19hZGROYW1lXCJcclxuICAgICk7XHJcbiAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJzZXR0aW5nc19fbW9kYWxcIik7XHJcbiAgICBjb25zdCB0aXRsZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiaDJcIixcclxuICAgICAgXCJtb2RhbC1hZGROZXdDb21wbGV4X190aXRsZVwiLFxyXG4gICAgICBcIldvcmtvdXQgU2V0dGluZ3NcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHJlc3RUaW1lQmxvY2sgPSB0aGlzLmNyZWF0ZVNldHRpbmdzVGltZUJsb2NrKFxyXG4gICAgICBcIlJlc3QgdGltZSwgc2Vjb25kc1wiLFxyXG4gICAgICBcIkVudGVyIHNlY29uZHNcIixcclxuICAgICAgbXVnLFxyXG4gICAgICBmYWxzZSxcclxuICAgICAgXCJzZXR0aW5nc19fcmVzdFwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgbG9hZEJsb2NrID0gdGhpcy5jcmVhdGVTZXR0aW5nc1RpbWVCbG9jayhcclxuICAgICAgXCJOdW1iZXIgb2YgV29ya291dHNcIixcclxuICAgICAgXCJFbnRlciBudW1iZXIgb2Ygd29ya291dHNcIixcclxuICAgICAgbGlnaHRuaW5nMixcclxuICAgICAgdHJ1ZSxcclxuICAgICAgXCJzZXR0aW5nc19sb2FkXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBkb25lV3JhcDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwic2V0dGluZ3NfX2J1dHRvbi13cmFwXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBkb25lOiBIVE1MQnV0dG9uRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlQnRuKFxyXG4gICAgICBcIm1vZGFsLWFkZE5ld0NvbXBsZXhfX2NyZWF0ZVwiLFxyXG4gICAgICBcIkRvbmVcIlxyXG4gICAgKTtcclxuICAgIGRvbmVXcmFwLmFwcGVuZChkb25lKTtcclxuICAgIGRvbmUuY2xhc3NMaXN0LmFkZChcInNldHRpbmdzX19kb25lLWJ0blwiKTtcclxuICAgIGRvbmUuY2xhc3NMaXN0LmFkZChcImJ0blwiKTtcclxuICAgIGRvbmUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3Qgc2V0dGluZ3NNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgXCIuc2V0dGluZ3NNb2RhbFwiXHJcbiAgICAgICkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIHNldHRpbmdzTW9kYWwuY2xhc3NMaXN0LmFkZChcImludmlzaWJsZVwiKTtcclxuICAgICAgY29uc3QgcmVzdFRpbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgXCIuc2V0dGluZ3NfX3Jlc3RcIlxyXG4gICAgICApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAgIGNvbnN0IGxvYWRJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgXCIuc2V0dGluZ3NfbG9hZFwiXHJcbiAgICAgICkgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgICAgaWYgKHJlc3RUaW1lSW5wdXQudmFsdWUpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmNvbXBsZXgudXBkYXRlUmVzdFRpbWUoaWQsIHtcclxuICAgICAgICAgIHRpbWVSZXN0OiByZXN0VGltZUlucHV0LnZhbHVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChsb2FkSW5wdXQudmFsdWUpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmNvbXBsZXgudXBkYXRlTG9hZChpZCwge1xyXG4gICAgICAgICAgbG9hZDogbG9hZElucHV0LnZhbHVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB3cmFwcGVyLmFwcGVuZCh0aXRsZSwgcmVzdFRpbWVCbG9jaywgbG9hZEJsb2NrLCBkb25lV3JhcCk7XHJcbiAgICByZXR1cm4gd3JhcHBlcjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlU2V0dGluZ3NUaW1lQmxvY2soXHJcbiAgICB0aXRsZTE6IHN0cmluZyxcclxuICAgIGNvbnRlbnQ6IHN0cmluZyxcclxuICAgIHN2Zzogc3RyaW5nLFxyXG4gICAgZmxhZzogYm9vbGVhbixcclxuICAgIGFkZENsYXNzOiBzdHJpbmdcclxuICApOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCByZXN0VGltZUJsb2NrOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJzZXR0aW5nc01pbmlCbG9ja1wiXHJcbiAgICApO1xyXG4gICAgY29uc3Qgc3F1YXJlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJzZXR0aW5ncy1zcXVhcmVcIlxyXG4gICAgKTtcclxuICAgIHNxdWFyZS5pbm5lckhUTUwgPSBzdmc7XHJcbiAgICBjb25zdCB0ZXh0V3JhcHBlciA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJzZXR0aW5nc19fdGV4dC13cmFwcGVyXCJcclxuICAgICk7XHJcbiAgICBjb25zdCB0ZXh0VGl0bGU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcInNldHRpbmdzX190ZXh0LXRpdGxlXCIsXHJcbiAgICAgIHRpdGxlMVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHRleHRDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgdGV4dENvbnRlbnQucGxhY2Vob2xkZXIgPSBjb250ZW50O1xyXG4gICAgdGV4dENvbnRlbnQuY2xhc3NOYW1lID0gXCJzZXR0aW5nc19fdGV4dC1jb250ZW50XCI7XHJcbiAgICB0ZXh0Q29udGVudC5jbGFzc0xpc3QuYWRkKGFkZENsYXNzKTtcclxuICAgIGlmIChmbGFnKSB7XHJcbiAgICAgIHRleHRDb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgdGV4dENvbnRlbnQudmFsdWUgPSB0ZXh0Q29udGVudC52YWx1ZS5yZXBsYWNlKC8oW14xLTddKXsxfS9nLCBcIlwiKTtcclxuICAgICAgICBpZiAodGV4dENvbnRlbnQudmFsdWUubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgdGV4dENvbnRlbnQudmFsdWUgPSB0ZXh0Q29udGVudC52YWx1ZS5zbGljZSgwLCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGV4dENvbnRlbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICB0ZXh0Q29udGVudC52YWx1ZSA9IHRleHRDb250ZW50LnZhbHVlLnJlcGxhY2UoLyhbXjAtOV0pL2csIFwiXCIpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHRleHRXcmFwcGVyLmFwcGVuZCh0ZXh0VGl0bGUsIHRleHRDb250ZW50KTtcclxuICAgIHJlc3RUaW1lQmxvY2suYXBwZW5kKHNxdWFyZSwgdGV4dFdyYXBwZXIpO1xyXG4gICAgcmV0dXJuIHJlc3RUaW1lQmxvY2s7XHJcbiAgfVxyXG5cclxuICBkaXNhYmxlQ291bnRlckJsb2NrKCkge1xyXG4gICAgY29uc3QgY291bnRlckJsb2NrID0gPEhUTUxCdXR0b25FbGVtZW50PihcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5leGVyY2lzZS1ibG9ja19fY291bnRlclwiKVxyXG4gICAgKTtcclxuICAgIGlmICghY291bnRlckJsb2NrKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvdW50ZXJCbG9jay5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XHJcbiAgfVxyXG5cclxuICBlbmFibGVDb3VudGVyQmxvY2soKSB7XHJcbiAgICBjb25zdCBjb3VudGVyQmxvY2sgPSA8SFRNTEJ1dHRvbkVsZW1lbnQ+KFxyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmV4ZXJjaXNlLWJsb2NrX19jb3VudGVyXCIpXHJcbiAgICApO1xyXG4gICAgaWYgKCFjb3VudGVyQmxvY2spIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY291bnRlckJsb2NrLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIlwiO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3RhcnRUcmFpbmluZ1BhZ2U7XHJcbiIsImltcG9ydCBSb3V0ZXIgZnJvbSBcIi4uL3V0aWxzL1JvdXRpbmdcIjtcclxuaW1wb3J0IE1haW5QYWdlIGZyb20gXCIuLi9wYWdlcy9tYWluXCI7XHJcbmltcG9ydCBFcnJvclBhZ2UgZnJvbSBcIi4uL3BhZ2VzL2Vycm9yXCI7XHJcbmltcG9ydCBUcmFpbmluZ3NQYWdlIGZyb20gXCIuLi9wYWdlcy90cmFpbmluZ3NcIjtcclxuaW1wb3J0IFNpbmdsZVRyYWluaW5nUGFnZSBmcm9tIFwiLi4vcGFnZXMvc2luZ2xlVHJhaW5pbmdcIjtcclxuaW1wb3J0IEV4ZXJjaXNlc1BhZ2UgZnJvbSBcIi4uL3BhZ2VzL2V4ZXJjaXNlc1wiO1xyXG5pbXBvcnQgUHJvZmlsZVBhZ2UgZnJvbSBcIi4uL3BhZ2VzL3Byb2ZpbGVcIjtcclxuaW1wb3J0IFN0YXJ0VHJhaW5pbmdQYWdlIGZyb20gXCIuLi9wYWdlcy9zdGFydFRyYWluaW5nXCI7XHJcbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvaGVhZGVyXCI7XHJcblxyXG5pbXBvcnQge1xyXG4gIElNYWluUGFnZSxcclxuICBJRXJyb3JQYWdlLFxyXG4gIElSb3V0LFxyXG4gIElTaW5nbGVUcmFpbmluZ1BhZ2UsXHJcbiAgSVByb2ZpbGVQYWdlLFxyXG4gIElIZWFkZXIsXHJcbn0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcblxyXG4vL3BhZ2VzXHJcbmNvbnN0IG1haW5QYWdlOiBJTWFpblBhZ2UgPSBuZXcgTWFpblBhZ2UoKTtcclxuY29uc3QgZXJyb3JQYWdlOiBJRXJyb3JQYWdlID0gbmV3IEVycm9yUGFnZSgpO1xyXG5jb25zdCB0cmFpbmluZ3NDcmVhdGlvblBhZ2UgPSBuZXcgVHJhaW5pbmdzUGFnZSgpO1xyXG5jb25zdCBzaW5nbGVUcmFpbmluZ1BhZ2U6IElTaW5nbGVUcmFpbmluZ1BhZ2UgPSBuZXcgU2luZ2xlVHJhaW5pbmdQYWdlKCk7XHJcbmNvbnN0IGV4ZXJjaXNlc1BhZ2UgPSBuZXcgRXhlcmNpc2VzUGFnZSgpO1xyXG5jb25zdCBwcm9maWxlUGFnZTogSVByb2ZpbGVQYWdlID0gbmV3IFByb2ZpbGVQYWdlKCk7XHJcbmNvbnN0IHN0YXJ0VHJhaW5pbmdQYWdlID0gbmV3IFN0YXJ0VHJhaW5pbmdQYWdlKCk7XHJcblxyXG5jb25zdCBkcmF3SGVhZGVyID0gKCkgPT4ge1xyXG4gIGNvbnN0IGhlYWRlcjogSUhlYWRlciA9IG5ldyBIZWFkZXIoKTtcclxuICBoZWFkZXIuZHJhdygpO1xyXG59O1xyXG4vL1xyXG5cclxuLy/RgdC/0LjRgdC+0Log0YHRgtGA0LDQvdC40YYg0YEg0LrQvtC70LHQtdC60LDQvNC4OiDQv9GD0YLRjCDQuCDRh9GC0L4g0LTQtdC70LDRgtGMXHJcbmNvbnN0IHJvdXRzOiBJUm91dFtdID0gW1xyXG4gIHtcclxuICAgIHBhdGg6IFwiXCIsXHJcbiAgICBjYjogbWFpblBhZ2UuZHJhdy5iaW5kKG1haW5QYWdlKSxcclxuICB9LFxyXG4gIHtcclxuICAgIHBhdGg6IFwid29ya291dHNcIixcclxuICAgIGNiOiB0cmFpbmluZ3NDcmVhdGlvblBhZ2UuZHJhdy5iaW5kKHRyYWluaW5nc0NyZWF0aW9uUGFnZSksXHJcbiAgfSxcclxuICB7XHJcbiAgICBwYXRoOiBcImV4ZXJjaXNlc1wiLFxyXG4gICAgY2I6IGV4ZXJjaXNlc1BhZ2UuZHJhdy5iaW5kKGV4ZXJjaXNlc1BhZ2UpLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aDogXCJwcm9maWxlXCIsXHJcbiAgICBjYjogcHJvZmlsZVBhZ2UuZHJhdy5iaW5kKHByb2ZpbGVQYWdlKSxcclxuICB9LFxyXG4gIHtcclxuICAgIHBhdGg6IFwid29ya291dHMvOmlkXCIsXHJcbiAgICBjYjogKGlkKSA9PiB7XHJcbiAgICAgIHNpbmdsZVRyYWluaW5nUGFnZS5kcmF3KGlkKTtcclxuICAgIH0sXHJcbiAgfSxcclxuICB7XHJcbiAgICBwYXRoOiBcInN0YXJ0VHJhaW5pbmdcIixcclxuICAgIGNiOiBzdGFydFRyYWluaW5nUGFnZS5kcmF3LmJpbmQoc3RhcnRUcmFpbmluZ1BhZ2UpLFxyXG4gIH0sXHJcbl07XHJcbi8v0L7QsdGK0LXQutGCINGA0L7Rg9GC0LXRgNCwXHJcblxyXG5jb25zdCByb3V0ZXIgPSBuZXcgUm91dGVyKHJvdXRzLCBlcnJvclBhZ2UuZHJhdyk7XHJcbnJvdXRlci5hZGRTdWJzY3JpYmVycyhkcmF3SGVhZGVyKTtcclxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xyXG4iLCJjbGFzcyBFcnJvclBhZ2Uge1xyXG4gIHB1YmxpYyBkcmF3KCk6IHZvaWQge1xyXG4gICAgY29uc3QgbWFpbkVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluXCIpO1xyXG4gICAgaWYgKCFtYWluRWxlbWVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBtYWluRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIG1haW5FbGVtZW50LmFwcGVuZCh3cmFwcGVyKTtcclxuICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gXCJlcnJvci13cmFwcGVyXCI7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFcnJvclBhZ2U7XHJcbiIsImltcG9ydCBUZW1wbGF0ZSBmcm9tIFwiLi4vdGVtcGxhdGVzL3RlbXBsYXRlXCI7XHJcbmltcG9ydCByb3V0ZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvcm91dGVyQ29tcG9uZW50XCI7XHJcbmltcG9ydCB7XHJcbiAgSVRlbXBsYXRlLFxyXG4gIElXb3Jrb3V0TWluaUJsb2NrLFxyXG4gIElXb3Jrb3V0QmxvY2ssXHJcbiAgSVNsaWRlcixcclxufSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIjtcclxuaW1wb3J0IHdvcmtvdXRfcGxhbnMgZnJvbSBcIi4uL3V0aWxzL3dvcmtvdXQtcGxhbnMtZW5cIjtcclxuaW1wb3J0IFdvcmtvdXRCbG9jayBmcm9tIFwiLi4vY29tcG9uZW50cy93b3Jrb3V0QmxvY2tcIjtcclxuaW1wb3J0IFNsaWRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9zbGlkZXJcIjtcclxuaW1wb3J0IEFkZE5ld0NvbXBsZXggZnJvbSBcIi4uL2NvbXBvbmVudHMvYWRkTmV3Q29tcGxleFwiO1xyXG5pbXBvcnQgQ29tcGxleCBmcm9tIFwiLi4vdXRpbHMv0YFvbXBsZXgucm91dGVzXCI7XHJcbmltcG9ydCBTaW5nbGVUcmFpbmluZ1BhZ2UgZnJvbSBcIi4vc2luZ2xlVHJhaW5pbmdcIjtcclxuaW1wb3J0IHsgaW5BY3RpdmVQcmVsb2FkZXIgfSBmcm9tIFwiLi4vdXRpbHMvcHJlbG9hZGVyXCI7XHJcblxyXG5jbGFzcyBUcmFpbmluZ3NQYWdlIHtcclxuICB0ZW1wbGF0ZTogSVRlbXBsYXRlO1xyXG4gIHdvcmtvdXRCbG9jazogSVdvcmtvdXRCbG9jaztcclxuICBzbGlkZXI7XHJcbiAgYWRkTmV3Q29tcGxleDtcclxuICBjb21wbGV4O1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy53b3Jrb3V0QmxvY2sgPSBuZXcgV29ya291dEJsb2NrKCk7XHJcbiAgICB0aGlzLnNsaWRlciA9IG5ldyBTbGlkZXIoKTtcclxuICAgIHRoaXMuYWRkTmV3Q29tcGxleCA9IG5ldyBBZGROZXdDb21wbGV4KCk7XHJcbiAgICB0aGlzLmNvbXBsZXggPSBuZXcgQ29tcGxleCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGRyYXcoKSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJsb2FkZWRcIik7XHJcbiAgICBjb25zdCBtYWluRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW5cIik7XHJcbiAgICBpZiAoIW1haW5FbGVtZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIG1haW5FbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtYWluXCIpO1xyXG5cclxuICAgIG1haW5FbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgIGNvbnN0IG1haW5QYWdlRWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbWFpblBhZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ3b3Jrb3V0LXBsYW5zLXBhZ2VcIik7XHJcbiAgICBtYWluRWxlbWVudC5hcHBlbmQobWFpblBhZ2VFbGVtZW50KTtcclxuICAgIG1haW5QYWdlRWxlbWVudC5hcHBlbmQoXHJcbiAgICAgIHRoaXMuY3JlYXRlVGl0bGUoKSxcclxuICAgICAgdGhpcy53b3Jrb3V0QmxvY2suY3JlYXRlQWRkV29ya291dFBsYW5Db250KFwiQWRkIG5ldyB3b3Jrb3V0XCIsIHRydWUpLFxyXG4gICAgICBhd2FpdCB0aGlzLmNyZWF0ZVdyYXBwZXIoKSxcclxuICAgICAgYXdhaXQgdGhpcy5jcmVhdGVNb2RhbCgpXHJcbiAgICApO1xyXG4gICAgaW5BY3RpdmVQcmVsb2FkZXIoZG9jdW1lbnQuYm9keSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVRpdGxlKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJoMVwiLFxyXG4gICAgICBcInBhZ2UtdGl0bGVcIixcclxuICAgICAgXCJXb3Jrb3V0IFBsYW5zXCJcclxuICAgICk7XHJcbiAgICByZXR1cm4gdGl0bGU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGNyZWF0ZVdyYXBwZXIoKSB7XHJcbiAgICBjb25zdCB3cmFwcGVyID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcInRyYWluaW5nc19fY29udGVudC13cmFwcGVyXCJcclxuICAgICk7XHJcbiAgICB3cmFwcGVyLmFwcGVuZChhd2FpdCB0aGlzLmNyZWF0ZUNvbnRlbnQoKSk7XHJcbiAgICByZXR1cm4gd3JhcHBlcjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlQ29udGVudCgpIHtcclxuICAgIGNvbnN0IGNvbnRlbnRDb250YWluZXI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcIndvcmtvdXQtY29udGVudC1jb250XCJcclxuICAgICk7XHJcbiAgICBjb25zdCBzZXJ2ZXJEYXRhID0gYXdhaXQgdGhpcy5hZGROZXdDb21wbGV4LmNyZWF0aW5nQXJyYXlGcm9tRGF0YSgpO1xyXG4gICAgLy8gY29uc3Qgd29ya291dFBsYW5zSW5TdG9yZSA9IEpTT04ucGFyc2UoXHJcbiAgICAvLyAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwid29ya291dFBsYW5zXCIpIHx8IFwiW11cIlxyXG4gICAgLy8gKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VydmVyRGF0YVswXS5ibG9jay5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBpZCA9IFN0cmluZyhzZXJ2ZXJEYXRhWzBdLmJsb2NrW2ldLmlkKTtcclxuICAgICAgY29uc3Qgc2luZ2xlVHJhaW5pbmcgPSBuZXcgU2luZ2xlVHJhaW5pbmdQYWdlKCk7XHJcbiAgICAgIGNvbnN0IGV4ZXJjaXNlc1RyYW5zZm9ybWVkID0gYXdhaXQgc2luZ2xlVHJhaW5pbmcudHJhbnNmb3JtRXhlcmNpc2VzKGlkKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJ2ZXJEYXRhWzBdLmJsb2NrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGlkID09PSBzZXJ2ZXJEYXRhWzBdLmJsb2NrW2ldLmlkKSB7XHJcbiAgICAgICAgICBzZXJ2ZXJEYXRhWzBdLmJsb2NrW2ldLmV4ZXJjaXNlcy5wdXNoKC4uLmV4ZXJjaXNlc1RyYW5zZm9ybWVkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBkYXRhID0gW107XHJcbiAgICBpZiAoc2VydmVyRGF0YS5sZW5ndGggJiYgc2VydmVyRGF0YVswXS5ibG9jay5sZW5ndGgpIHtcclxuICAgICAgZGF0YSA9IFsuLi5zZXJ2ZXJEYXRhLCAuLi53b3Jrb3V0X3BsYW5zXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRhdGEgPSBbLi4ud29ya291dF9wbGFuc107XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3Qgd29ya291dEJsb2NrOiBIVE1MRWxlbWVudCA9IHRoaXMud29ya291dEJsb2NrLmNyZWF0ZVdvcmtvdXRCbG9ja0NvbnQoXHJcbiAgICAgICAgZGF0YVtpXS50aXRsZVxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCB3cmFwcGVyID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwid29ya291dC13cmFwcGVyXCIpO1xyXG4gICAgICB3b3Jrb3V0QmxvY2suYXBwZW5kKHdyYXBwZXIpO1xyXG4gICAgICBjb250ZW50Q29udGFpbmVyLmFwcGVuZCh3b3Jrb3V0QmxvY2spO1xyXG4gICAgICBjb25zdCBidXR0b25zID0gdGhpcy5zbGlkZXIuY3JlYXRlTmV4dFByZXZCdG5zKFxyXG4gICAgICAgIGRhdGFbaV0uYmxvY2subGVuZ3RoLFxyXG4gICAgICAgIHdyYXBwZXIsXHJcbiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgd3JhcHBlclxyXG4gICAgICApO1xyXG4gICAgICB3b3Jrb3V0QmxvY2suYXBwZW5kKGJ1dHRvbnMpO1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGRhdGFbaV0uYmxvY2subGVuZ3RoOyBqKyspIHtcclxuICAgICAgICBjb25zdCBsaW5rID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFwiYVwiLCBcImxpbmstdG8tZXhlcmNcIik7XHJcbiAgICAgICAgY29uc3QgaWQ6IG51bWJlciB8IHN0cmluZyA9IGRhdGFbaV0uYmxvY2tbal0uaWQ7XHJcbiAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIGNvbnN0IG1haW5FbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICBcIm1haW5cIlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGlmIChtYWluRWxlbWVudCkge1xyXG4gICAgICAgICAgICBtYWluRWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgICAgICByb3V0ZXIubmF2aWdhdGUoYHdvcmtvdXRzLyR7aWR9YCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNvbXBsZXhJZFwiLCBKU09OLnN0cmluZ2lmeShpZCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrOiBJV29ya291dE1pbmlCbG9jayA9IGRhdGFbaV0uYmxvY2tbal07XHJcbiAgICAgICAgY29uc3QgY29udGVudDogSFRNTEVsZW1lbnQgPSB0aGlzLndvcmtvdXRCbG9jay5jcmVhdGVXb3Jrb3V0Q29udGVudChcclxuICAgICAgICAgIGJsb2NrLFxyXG4gICAgICAgICAgaSxcclxuICAgICAgICAgIGosXHJcbiAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgIGRhdGEubGVuZ3RoXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLndvcmtvdXRCbG9jay5jb2xvckJhY2tncm91bmQoY29udGVudCk7XHJcbiAgICAgICAgbGluay5hcHBlbmQoY29udGVudCk7XHJcbiAgICAgICAgd3JhcHBlci5hcHBlbmQobGluayk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjb250ZW50Q29udGFpbmVyO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVNb2RhbCgpIHtcclxuICAgIGNvbnN0IG1vZGFsOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJtb2RhbC1hZGROZXdDb21wbGV4XCJcclxuICAgICk7XHJcbiAgICBtb2RhbC5jbGFzc0xpc3QuYWRkKFwiaW52aXNpYmxlXCIpO1xyXG4gICAgY29uc3Qgd3JhcHBlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwibW9kYWwtYWRkTmV3Q29tcGxleF9fYWRkTmFtZVwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgdGl0bGU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImgyXCIsXHJcbiAgICAgIFwibW9kYWwtYWRkTmV3Q29tcGxleF9fdGl0bGVcIixcclxuICAgICAgXCJDcmVhdGUgTmV3IFdvcmtvdXRcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgaW5wdXQucGxhY2Vob2xkZXIgPSBcIldvcmtvdXQgTmFtZVwiO1xyXG4gICAgaW5wdXQuY2xhc3NOYW1lID0gXCJtb2RhbC1hZGROZXdDb21wbGV4X19pbnB1dFwiO1xyXG4gICAgY29uc3QgYnV0dG9uczogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwibW9kYWwtYWRkTmV3Q29tcGxleF9fYnRuc1wiXHJcbiAgICApO1xyXG4gICAgY29uc3QgY2FuY2VsOiBIVE1MQnV0dG9uRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlQnRuKFxyXG4gICAgICBcIm1vZGFsLWFkZE5ld0NvbXBsZXhfX2NhbmNlbFwiLFxyXG4gICAgICBcIkNhbmNlbFwiXHJcbiAgICApO1xyXG4gICAgY2FuY2VsLmNsYXNzTGlzdC5hZGQoXCJidG5cIik7XHJcbiAgICBjYW5jZWwuY2xhc3NMaXN0LmFkZChcImJ0bi0tc2Vjb25kXCIpO1xyXG4gICAgY2FuY2VsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIG1vZGFsLmNsYXNzTGlzdC5hZGQoXCJpbnZpc2libGVcIik7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGNyZWF0ZTogSFRNTEJ1dHRvbkVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUJ0bihcclxuICAgICAgXCJtb2RhbC1hZGROZXdDb21wbGV4X19jcmVhdGVcIixcclxuICAgICAgXCJDcmVhdGVcIlxyXG4gICAgKTtcclxuICAgIGNyZWF0ZS5jbGFzc0xpc3QuYWRkKFwiYnRuXCIpO1xyXG4gICAgY3JlYXRlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImxvYWRlZFwiKTtcclxuICAgICAgYXdhaXQgdGhpcy5hZGROZXdDb21wbGV4LmFkZENvbXBsZXhJbkxvY2FsU3RvcmUoKTtcclxuICAgICAgbW9kYWwuY2xhc3NMaXN0LmFkZChcImludmlzaWJsZVwiKTtcclxuICAgICAgY29uc3QgY29udGVudFdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIFwiLnRyYWluaW5nc19fY29udGVudC13cmFwcGVyXCJcclxuICAgICAgKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgY29udGVudFdyYXBwZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgY29udGVudFdyYXBwZXIuYXBwZW5kKGF3YWl0IHRoaXMuY3JlYXRlQ29udGVudCgpKTtcclxuICAgICAgaW5BY3RpdmVQcmVsb2FkZXIoZG9jdW1lbnQuYm9keSk7XHJcbiAgICB9KTtcclxuICAgIGJ1dHRvbnMuYXBwZW5kKGNhbmNlbCwgY3JlYXRlKTtcclxuICAgIHdyYXBwZXIuYXBwZW5kKHRpdGxlLCBpbnB1dCwgYnV0dG9ucyk7XHJcbiAgICBtb2RhbC5hcHBlbmQod3JhcHBlcik7XHJcbiAgICByZXR1cm4gbW9kYWw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUcmFpbmluZ3NQYWdlO1xyXG4iLCJpbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgcm91dGVyIGZyb20gXCIuLi9jb21wb25lbnRzL3JvdXRlckNvbXBvbmVudFwiO1xyXG5pbXBvcnQge1xyXG4gIElTbGlkZXIsXHJcbiAgSVRlbXBsYXRlLFxyXG4gIElXb3Jrb3V0QmxvY2ssXHJcbiAgSVdvcmtvdXRNaW5pQmxvY2ssXHJcbn0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcbmltcG9ydCB3b3Jrb3V0X3BsYW5zIGZyb20gXCIuLi91dGlscy93b3Jrb3V0LXBsYW5zLWVuXCI7XHJcbmltcG9ydCBXb3Jrb3V0QmxvY2sgZnJvbSBcIi4uL2NvbXBvbmVudHMvd29ya291dEJsb2NrXCI7XHJcbmltcG9ydCBTbGlkZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvc2xpZGVyXCI7XHJcbmltcG9ydCBBZGROZXdDb21wbGV4IGZyb20gXCIuLi9jb21wb25lbnRzL2FkZE5ld0NvbXBsZXhcIjtcclxuaW1wb3J0IFNpbmdsZVRyYWluaW5nUGFnZSBmcm9tIFwiLi9zaW5nbGVUcmFpbmluZ1wiO1xyXG5pbXBvcnQgQ29tcGxleCBmcm9tIFwiLi4vdXRpbHMv0YFvbXBsZXgucm91dGVzXCI7XHJcbmltcG9ydCB7IGdldFVzZXJJZExvY2FsU3RvcmFnZSB9IGZyb20gXCIuLi91dGlscy9hdXRoXCI7XHJcbmltcG9ydCB7IGluQWN0aXZlUHJlbG9hZGVyIH0gZnJvbSBcIi4uL3V0aWxzL3ByZWxvYWRlclwiO1xyXG5cclxuY2xhc3MgRXhlcmNpc2VzUGFnZSB7XHJcbiAgdGVtcGxhdGU6IElUZW1wbGF0ZTtcclxuICB3b3Jrb3V0QmxvY2s6IElXb3Jrb3V0QmxvY2s7XHJcbiAgc2xpZGVyO1xyXG4gIGFkZE5ld0NvbXBsZXg7XHJcbiAgY29tcGxleDtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMudGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKTtcclxuICAgIHRoaXMud29ya291dEJsb2NrID0gbmV3IFdvcmtvdXRCbG9jaygpO1xyXG4gICAgdGhpcy5zbGlkZXIgPSBuZXcgU2xpZGVyKCk7XHJcbiAgICB0aGlzLmFkZE5ld0NvbXBsZXggPSBuZXcgQWRkTmV3Q29tcGxleCgpO1xyXG4gICAgdGhpcy5jb21wbGV4ID0gbmV3IENvbXBsZXgoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBkcmF3KCkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwibG9hZGVkXCIpO1xyXG4gICAgdGhpcy5nZXREYXlPZkFXZWVrKCk7XHJcbiAgICBjb25zdCBtYWluRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW5cIik7XHJcbiAgICBpZiAoIW1haW5FbGVtZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIG1haW5FbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtYWluXCIpO1xyXG5cclxuICAgIG1haW5FbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgIGNvbnN0IGZvckRlY29yOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJmb3ItZGVjb3JcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IG1haW5QYWdlRWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbWFpblBhZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJleGVyY2lzZXMtcGFnZVwiKTtcclxuXHJcbiAgICBjb25zdCBtaW5pSGVhZGVyID0gYXdhaXQgdGhpcy5jcmVhdGVNaW5pSGVhZGVyKCk7XHJcbiAgICBjb25zdCBnb2FsQ29udCA9IGF3YWl0IHRoaXMuY3JlYXRlV2Vla0dvYWxDb250KCk7XHJcbiAgICBmb3JEZWNvci5hcHBlbmQodGhpcy5jcmVhdGVEZWNvcmF0aW9uRWwoKSk7XHJcbiAgICBpZiAobWluaUhlYWRlcikge1xyXG4gICAgICBtYWluUGFnZUVsZW1lbnQuYXBwZW5kKG1pbmlIZWFkZXIpO1xyXG4gICAgfVxyXG4gICAgaWYgKGdvYWxDb250KSB7XHJcbiAgICAgIG1haW5QYWdlRWxlbWVudC5hcHBlbmQoZ29hbENvbnQpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZUJsb2NrID0gYXdhaXQgdGhpcy5jcmVhdGVFeGVyY2lzZXNCbG9jaygpO1xyXG4gICAgY29uc3Qgc3RhcnRCdG4gPSB0aGlzLmNyZWF0ZVN0YXJ0QnRuKCk7XHJcbiAgICBjb25zdCBlQ29udCA9IGF3YWl0IHRoaXMuY3JlYXRlRXhlcmNpc2VzQ29udCgpO1xyXG5cclxuICAgIG1haW5QYWdlRWxlbWVudC5hcHBlbmQoZUJsb2NrLCBzdGFydEJ0biwgZUNvbnQpO1xyXG4gICAgZm9yRGVjb3IuYXBwZW5kKG1haW5QYWdlRWxlbWVudCk7XHJcbiAgICBtYWluRWxlbWVudC5hcHBlbmQoZm9yRGVjb3IpO1xyXG4gICAgaW5BY3RpdmVQcmVsb2FkZXIoZG9jdW1lbnQuYm9keSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGNyZWF0ZU1pbmlIZWFkZXIoKSB7XHJcbiAgICBjb25zdCBzdGF0aXN0aWMgPSBhd2FpdCB0aGlzLmdldENvbXBsZXRlc0V4ZXJjaXNlc1N0YXQoKTtcclxuICAgIGNvbnN0IGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwibWluaS1oZWFkZXItY29udFwiXHJcbiAgICApO1xyXG4gICAgaWYgKHN0YXRpc3RpYykge1xyXG4gICAgICBjb25zdCB3b3Jrb3V0c0NvbnQ6IEhUTUxFbGVtZW50ID0gdGhpcy5taW5pSGVhZGVyQmxvY2soXHJcbiAgICAgICAgXCIuLi9hc3NldHMvcG5nL3dlaWdodDIucG5nXCIsXHJcbiAgICAgICAgU3RyaW5nKHN0YXRpc3RpYy50b3RhbENvbXBsZXRlZENvbXBsZXhlcyksXHJcbiAgICAgICAgXCJXb3Jrb3V0c1wiXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IHRpbWVDb250OiBIVE1MRWxlbWVudCA9IHRoaXMubWluaUhlYWRlckJsb2NrKFxyXG4gICAgICAgIFwiLi4vYXNzZXRzL3BuZy9zdG9wd2F0Y2gucG5nXCIsXHJcbiAgICAgICAgU3RyaW5nKHN0YXRpc3RpYy50b3RhbFRpbWUuaG91cnMpLFxyXG4gICAgICAgIFwiaFwiXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IHdyYXBwZXI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICAgIFwiZGl2XCIsXHJcbiAgICAgICAgXCJzdGF0LXdyYXBwZXJcIlxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBzdGF0TnVtOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgICBcImRpdlwiLFxyXG4gICAgICAgIFwic3RhdC1udW1iZXJcIixcclxuICAgICAgICBTdHJpbmcoc3RhdGlzdGljLnRvdGFsVGltZS5taW51dGVzKVxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCB0aXRsZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgICAgXCJwXCIsXHJcbiAgICAgICAgXCJzdGF0LXRpdGxlXCIsXHJcbiAgICAgICAgXCJtaW5cIlxyXG4gICAgICApO1xyXG4gICAgICB3cmFwcGVyLmFwcGVuZChzdGF0TnVtLCB0aXRsZSk7XHJcbiAgICAgIHRpbWVDb250LmFwcGVuZCh3cmFwcGVyKTtcclxuICAgICAgY29udGFpbmVyLmFwcGVuZCh3b3Jrb3V0c0NvbnQsIHRpbWVDb250KTtcclxuICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgbWluaUhlYWRlckJsb2NrKFxyXG4gICAgc291cmNlOiBzdHJpbmcsXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBtaW5pVGl0bGU6IHN0cmluZ1xyXG4gICk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwibWluaS13b3Jrb3V0cy1jb250XCJcclxuICAgICk7XHJcbiAgICBjb25zdCBpbWc6IEhUTUxJbWFnZUVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUltYWdlKFxyXG4gICAgICBzb3VyY2UsXHJcbiAgICAgIFwiYmFyYmVsbFwiLFxyXG4gICAgICBcIm1pbmktY29udC1pbWdcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHdyYXBwZXI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcInN0YXQtd3JhcHBlclwiXHJcbiAgICApO1xyXG4gICAgY29uc3Qgc3RhdE51bTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwic3RhdC1udW1iZXJcIixcclxuICAgICAgY29udGVudFxyXG4gICAgKTtcclxuICAgIGNvbnN0IHRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJwXCIsXHJcbiAgICAgIFwic3RhdC10aXRsZVwiLFxyXG4gICAgICBtaW5pVGl0bGVcclxuICAgICk7XHJcbiAgICB3cmFwcGVyLmFwcGVuZChzdGF0TnVtLCB0aXRsZSk7XHJcbiAgICBjb250YWluZXIuYXBwZW5kKGltZywgd3JhcHBlcik7XHJcbiAgICByZXR1cm4gY29udGFpbmVyO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVXZWVrR29hbENvbnQoKSB7XHJcbiAgICBjb25zdCB1c2VySWQxOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBnZXRVc2VySWRMb2NhbFN0b3JhZ2UoKTtcclxuICAgIGlmICghdXNlcklkMSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdGF0ID0gYXdhaXQgdGhpcy5jb21wbGV4LmdldFdlZWtseVN0YXRpc3RpYyh1c2VySWQxKTtcclxuICAgIGNvbnN0IHdlZWtHb2FsQ29udDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwid2Vlay1nb2FsLWNvbnRcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHN0YXRDb250OiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJ3ZWVrLWdvYWwtc3RhdFwiXHJcbiAgICApO1xyXG4gICAgY29uc3Qgd2Vla0dvYWxUZXh0ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInBcIixcclxuICAgICAgXCJ3ZWVrLWdvYWwtdGV4dFwiLFxyXG4gICAgICBcIldlZWsgR29hbFwiXHJcbiAgICApO1xyXG4gICAgY29uc3Qgd2Vla0dvYWxOdW06IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcIndlZWstZ29hbC1udW1cIixcclxuICAgICAgYCR7c3RhdD8ud2Vla2x5V29ya291dHMubGVuZ3RofS8ke3N0YXQ/LmxvYWR9YFxyXG4gICAgKTtcclxuICAgIHN0YXRDb250LmFwcGVuZCh3ZWVrR29hbFRleHQsIHdlZWtHb2FsTnVtKTtcclxuICAgIGNvbnN0IGRheXNDb250ID0gYXdhaXQgdGhpcy5jcmVhdGVEYXlzQ29udCgpO1xyXG4gICAgd2Vla0dvYWxDb250LmFwcGVuZChzdGF0Q29udCk7XHJcbiAgICBpZiAoZGF5c0NvbnQpIHtcclxuICAgICAgd2Vla0dvYWxDb250LmFwcGVuZChkYXlzQ29udCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd2Vla0dvYWxDb250O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVEYXlzQ29udCgpIHtcclxuICAgIGNvbnN0IHVzZXJJZDE6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGdldFVzZXJJZExvY2FsU3RvcmFnZSgpO1xyXG4gICAgaWYgKCF1c2VySWQxKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHN0YXQgPSBhd2FpdCB0aGlzLmNvbXBsZXguZ2V0V2Vla2x5U3RhdGlzdGljKHVzZXJJZDEpO1xyXG4gICAgY29uc3QgV0VFS0RBWVM6IHN0cmluZ1tdID0gW1xyXG4gICAgICBcIk1vblwiLFxyXG4gICAgICBcIlR1ZVwiLFxyXG4gICAgICBcIldlZFwiLFxyXG4gICAgICBcIlRodVwiLFxyXG4gICAgICBcIkZyaVwiLFxyXG4gICAgICBcIlNhdFwiLFxyXG4gICAgICBcIlN1blwiLFxyXG4gICAgXTtcclxuICAgIGNvbnN0IGRheXNDb250OiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJkYXlzLWNvbnRcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGRheU9mQVdlZWsgPSB0aGlzLmdldERheU9mQVdlZWsoKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNzsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGNpcmNsZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgICAgXCJkaXZcIixcclxuICAgICAgICBcImRheXMtY2lyY2xlXCIsXHJcbiAgICAgICAgV0VFS0RBWVNbaV1cclxuICAgICAgKTtcclxuICAgICAgY2lyY2xlLmNsYXNzTGlzdC5yZW1vdmUoXCJkYXlzLWNpcmNsZS1waW5rXCIpO1xyXG4gICAgICBpZiAoZGF5T2ZBV2VlayA9PT0gaSArIDEpIHtcclxuICAgICAgICBjaXJjbGUuY2xhc3NMaXN0LmFkZChcImRheXMtY2lyY2xlLXBpbmtcIik7XHJcbiAgICAgIH1cclxuICAgICAgZGF5c0NvbnQuYXBwZW5kKGNpcmNsZSk7XHJcbiAgICAgIGNvbnN0IGNoZWNrTWFyayA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImNoZWNrLW1hcmtcIik7XHJcbiAgICAgIGNoZWNrTWFyay5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xyXG4gICAgICBpZiAoc3RhdD8ud2Vla2x5V29ya291dHMuaW5jbHVkZXMoaSArIDEpKSB7XHJcbiAgICAgICAgY2hlY2tNYXJrLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XHJcbiAgICAgIH1cclxuICAgICAgY2lyY2xlLmFwcGVuZChjaGVja01hcmspO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRheXNDb250O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVFeGVyY2lzZXNCbG9jaygpIHtcclxuICAgIGNvbnN0IGV4ZXJjQmxvY2s6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImV4ZXJjLWJsb2NrXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBleGVyY1NsaWRlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiZXhlcmMtc2xpZGVyXCJcclxuICAgICk7XHJcbiAgICBsZXQgbGVuZ3RoID0gMDtcclxuICAgIGNvbnN0IHNlcnZlckRhdGEgPSBhd2FpdCB0aGlzLmFkZE5ld0NvbXBsZXguY3JlYXRpbmdBcnJheUZyb21EYXRhKCk7XHJcbiAgICAvLyBjb25zdCB3b3Jrb3V0UGxhbnNJblN0b3JlID0gSlNPTi5wYXJzZShcclxuICAgIC8vICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ3b3Jrb3V0UGxhbnNcIikgfHwgXCJbXVwiXHJcbiAgICAvLyApO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJ2ZXJEYXRhWzBdLmJsb2NrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGlkID0gU3RyaW5nKHNlcnZlckRhdGFbMF0uYmxvY2tbaV0uaWQpO1xyXG4gICAgICBjb25zdCBzaW5nbGVUcmFpbmluZyA9IG5ldyBTaW5nbGVUcmFpbmluZ1BhZ2UoKTtcclxuICAgICAgY29uc3QgZXhlcmNpc2VzVHJhbnNmb3JtZWQgPSBhd2FpdCBzaW5nbGVUcmFpbmluZy50cmFuc2Zvcm1FeGVyY2lzZXMoaWQpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcnZlckRhdGFbMF0uYmxvY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoaWQgPT09IHNlcnZlckRhdGFbMF0uYmxvY2tbaV0uaWQpIHtcclxuICAgICAgICAgIHNlcnZlckRhdGFbMF0uYmxvY2tbaV0uZXhlcmNpc2VzLnB1c2goLi4uZXhlcmNpc2VzVHJhbnNmb3JtZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgZGF0YSA9IFsuLi5zZXJ2ZXJEYXRhLCAuLi53b3Jrb3V0X3BsYW5zXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGRhdGFbaV0uYmxvY2subGVuZ3RoOyBqKyspIHtcclxuICAgICAgICBsZW5ndGgrKztcclxuICAgICAgICBjb25zdCBibG9jazogSVdvcmtvdXRNaW5pQmxvY2sgPSBkYXRhW2ldLmJsb2NrW2pdO1xyXG4gICAgICAgIGNvbnN0IHdvcmtvdXRCbG9jazogSFRNTEVsZW1lbnQgPSB0aGlzLndvcmtvdXRCbG9jay5jcmVhdGVXb3Jrb3V0Q29udGVudChcclxuICAgICAgICAgIGJsb2NrLFxyXG4gICAgICAgICAgaSxcclxuICAgICAgICAgIGosXHJcbiAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgZGF0YS5sZW5ndGhcclxuICAgICAgICApO1xyXG4gICAgICAgIHdvcmtvdXRCbG9jay5jbGFzc0xpc3QuYWRkKFwiYWRhcHRcIik7XHJcbiAgICAgICAgdGhpcy53b3Jrb3V0QmxvY2suY29sb3JCYWNrZ3JvdW5kKHdvcmtvdXRCbG9jayk7XHJcbiAgICAgICAgd29ya291dEJsb2NrLmNsYXNzTGlzdC5hZGQoXCJibHVyXCIpO1xyXG4gICAgICAgIGlmIChsZW5ndGggPT09IDIgfHwgbGVuZ3RoID09PSA0KSB7XHJcbiAgICAgICAgICB3b3Jrb3V0QmxvY2suY2xhc3NMaXN0LmFkZChcInNtYWxsZXJJbWdcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsZW5ndGggPT09IDMpIHtcclxuICAgICAgICAgIHdvcmtvdXRCbG9jay5jbGFzc0xpc3QuYWRkKFwibGFyZ2VySW1nXCIpO1xyXG4gICAgICAgICAgd29ya291dEJsb2NrLmNsYXNzTGlzdC5yZW1vdmUoXCJibHVyXCIpO1xyXG4gICAgICAgICAgd29ya291dEJsb2NrLmNoaWxkcmVuWzFdLmNsYXNzTGlzdC5hZGQoXCJsYXJnZXJQbmdcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4ZXJjU2xpZGVyLmFwcGVuZCh3b3Jrb3V0QmxvY2spO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBidXR0b25zOiBIVE1MRWxlbWVudCA9IHRoaXMuc2xpZGVyLmNyZWF0ZU5leHRQcmV2QnRucyhcclxuICAgICAgbGVuZ3RoLFxyXG4gICAgICBleGVyY1NsaWRlcixcclxuICAgICAgdHJ1ZSxcclxuICAgICAgZXhlcmNCbG9ja1xyXG4gICAgKTtcclxuICAgIGV4ZXJjQmxvY2suYXBwZW5kKGV4ZXJjU2xpZGVyLCBidXR0b25zKTtcclxuICAgIHJldHVybiBleGVyY0Jsb2NrO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVEZWNvcmF0aW9uRWwoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgZGVjb3JFbCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImRlY29yLWNpcmNsZVwiKTtcclxuICAgIHJldHVybiBkZWNvckVsO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVFeGVyY2lzZXNDb250KCkge1xyXG4gICAgY29uc3QgZXhlcmNpc2VDb250ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImV4ZXJjaXNlcy13cmFwcGVyXCJcclxuICAgICk7XHJcbiAgICAvLyBjb25zdCB3b3Jrb3V0UGxhbnNJblN0b3JlID0gSlNPTi5wYXJzZShcclxuICAgIC8vICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ3b3Jrb3V0UGxhbnNcIikgfHwgXCJbXVwiXHJcbiAgICAvLyApO1xyXG4gICAgY29uc3Qgc2VydmVyRGF0YSA9IGF3YWl0IHRoaXMuYWRkTmV3Q29tcGxleC5jcmVhdGluZ0FycmF5RnJvbURhdGEoKTtcclxuICAgIGNvbnN0IGRhdGEgPSBbLi4uc2VydmVyRGF0YSwgLi4ud29ya291dF9wbGFuc107XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBsZXQgaiA9IDA7XHJcbiAgICBpZiAoZGF0YVtpXS5ibG9jay5sZW5ndGggPT09IDEpIHtcclxuICAgICAgaSA9IDE7XHJcbiAgICAgIGogPSAxO1xyXG4gICAgfSBlbHNlIGlmIChkYXRhW2ldLmJsb2NrLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICBpID0gMTtcclxuICAgICAgaiA9IDA7XHJcbiAgICB9IGVsc2UgaWYgKGRhdGFbaV0uYmxvY2subGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGkgPSAxO1xyXG4gICAgICBqID0gMjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGkgPSAwO1xyXG4gICAgICBqID0gMjtcclxuICAgIH1cclxuICAgIGNvbnN0IGV4ZXJjaXNlczogSFRNTEVsZW1lbnQgPSBhd2FpdCB0aGlzLnNsaWRlci5jcmVhdGVFeGVyY2lzZXMoaSwgaik7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNvbXBsZXhJZFwiLCBKU09OLnN0cmluZ2lmeShkYXRhW2ldLmJsb2NrW2pdLmlkKSk7XHJcbiAgICBleGVyY2lzZUNvbnQuYXBwZW5kKGV4ZXJjaXNlcyk7XHJcbiAgICByZXR1cm4gZXhlcmNpc2VDb250O1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlU3RhcnRCdG4oKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3Qgc3RhcnRCdG46IEhUTUxCdXR0b25FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVCdG4oXHJcbiAgICAgIFwiZXhlcmNpc2VzX19zdGFydE5vdy1idG5cIixcclxuICAgICAgXCJzdGFydCBub3dcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGxpbmsgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXCJhXCIsIFwibGluay10by1leGVyY1wiKTtcclxuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgY29uc3QgbWFpbkVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluXCIpO1xyXG4gICAgICBpZiAobWFpbkVsZW1lbnQpIHtcclxuICAgICAgICBtYWluRWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZShcInN0YXJ0VHJhaW5pbmdcIik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgbGluay5hcHBlbmQoc3RhcnRCdG4pO1xyXG4gICAgcmV0dXJuIGxpbms7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldERheU9mQVdlZWsoKSB7XHJcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgIGNvbnN0IGRheU9mQVdlZWsgPSBbNywgMSwgMiwgMywgNCwgNSwgNl1bZGF0ZS5nZXREYXkoKV07XHJcbiAgICByZXR1cm4gZGF5T2ZBV2VlaztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgZ2V0Q29tcGxldGVzRXhlcmNpc2VzU3RhdCgpIHtcclxuICAgIGNvbnN0IHVzZXJJZDE6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGdldFVzZXJJZExvY2FsU3RvcmFnZSgpO1xyXG4gICAgaWYgKCF1c2VySWQxKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY29tcGxleC5nZXRDb21wbGV0ZWRDb21wbGV4ZXModXNlcklkMSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXhlcmNpc2VzUGFnZTtcclxuIiwiaW1wb3J0IFRlbXBsYXRlIGZyb20gXCIuLi90ZW1wbGF0ZXMvdGVtcGxhdGVcIjtcclxuaW1wb3J0IHtcclxuICBJVGVtcGxhdGUsXHJcbiAgSUNhbGVuZGFyLFxyXG4gIElJbmZvLFxyXG4gIElQcm9ncmVzcyxcclxuICBJTW9kYWxFZGl0UHJvZmlsZSxcclxufSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIjtcclxuaW1wb3J0IENhbGVuZGFyIGZyb20gXCIuLi9jb21wb25lbnRzL2NhbGVuZGFyXCI7XHJcbmltcG9ydCBJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL2luZm9cIjtcclxuaW1wb3J0IEFpckRhdGVwaWNrZXIgZnJvbSBcImFpci1kYXRlcGlja2VyXCI7XHJcbmltcG9ydCBcImFpci1kYXRlcGlja2VyL2Fpci1kYXRlcGlja2VyLmNzc1wiO1xyXG5pbXBvcnQgUHJvZ3Jlc3MgZnJvbSBcIi4uL2NvbXBvbmVudHMvcHJvZ3Jlc3NcIjtcclxuaW1wb3J0IE1vZGFsRWRpdFByb2ZpbGUgZnJvbSBcIi4uL2NvbXBvbmVudHMvbW9kYWxFZGl0UHJvZmlsZVwiO1xyXG5pbXBvcnQgeyBpbkFjdGl2ZVByZWxvYWRlciB9IGZyb20gXCIuLi91dGlscy9wcmVsb2FkZXJcIjtcclxuXHJcbmNsYXNzIFByb2ZpbGVQYWdlIHtcclxuICBwcml2YXRlIHRlbXBsYXRlOiBJVGVtcGxhdGU7XHJcbiAgcHJpdmF0ZSBjYWxlbmRhcjogSUNhbGVuZGFyO1xyXG4gIHByaXZhdGUgaW5mbzogSUluZm87XHJcbiAgcHJpdmF0ZSBtYWluQ2xhc3M6IHN0cmluZztcclxuICBwcml2YXRlIHByb2dyZXNzOiBJUHJvZ3Jlc3M7XHJcbiAgcHJpdmF0ZSBtb2RhbEVkaXRQcm9maWxlOiBJTW9kYWxFZGl0UHJvZmlsZTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLmNhbGVuZGFyID0gbmV3IENhbGVuZGFyKCk7XHJcbiAgICB0aGlzLmluZm8gPSBuZXcgSW5mbygpO1xyXG4gICAgdGhpcy5tYWluQ2xhc3MgPSBcInByb2ZpbGUtcGFnZVwiO1xyXG4gICAgdGhpcy5tb2RhbEVkaXRQcm9maWxlID0gbmV3IE1vZGFsRWRpdFByb2ZpbGUoKTtcclxuICAgIHRoaXMucHJvZ3Jlc3MgPSBuZXcgUHJvZ3Jlc3MoKTtcclxuICB9XHJcbiAgcHVibGljIGFzeW5jIGRyYXcoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJsb2FkZWRcIik7XHJcbiAgICBjb25zdCBtYWluRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tYWluXCIpO1xyXG4gICAgaWYgKCFtYWluRWxlbWVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBtYWluRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICBjb25zdCBwcm9maWxlUGFnZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfWBcclxuICAgICk7XHJcbiAgICBjb25zdCB0aXRsZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiaDJcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X190aXRsZWAsXHJcbiAgICAgIFwiTXkgcHJvZmlsZVwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgZGVjb3JFbDogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZURlY29yRWwoKTtcclxuICAgIGNvbnN0IGNhbGVuZGFyOiBIVE1MRWxlbWVudCA9IHRoaXMuY2FsZW5kYXIuY3JlYXRlQ2FsZW5kYXIoKTtcclxuXHJcbiAgICBjb25zdCBpbmZvOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCA9IGF3YWl0IHRoaXMuaW5mby5jcmVhdGVJbmZvKCk7XHJcbiAgICBpZiAoIWluZm8pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fY29udGFpbmVyYFxyXG4gICAgKTtcclxuICAgIGNvbnN0IHByb2dyZXNzOiBIVE1MRWxlbWVudCA9IGF3YWl0IHRoaXMucHJvZ3Jlc3MuY3JlYXRlUHJvZ3Jlc3MoKTtcclxuXHJcbiAgICBjb250YWluZXIuYXBwZW5kKGNhbGVuZGFyLCBpbmZvKTtcclxuICAgIGNvbnN0IG1vZGFsRWRpdFByb2ZpbGU6XHJcbiAgICAgIHwgSFRNTEVsZW1lbnRcclxuICAgICAgfCB1bmRlZmluZWQgPSBhd2FpdCB0aGlzLm1vZGFsRWRpdFByb2ZpbGUuY3JlYXRlTW9kYWwoXHJcbiAgICAgIHRoaXMuZHJhdy5iaW5kKHRoaXMpXHJcbiAgICApO1xyXG4gICAgaWYgKCFtb2RhbEVkaXRQcm9maWxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGluQWN0aXZlUHJlbG9hZGVyKGRvY3VtZW50LmJvZHkpO1xyXG5cclxuICAgIHByb2ZpbGVQYWdlLmFwcGVuZChkZWNvckVsLCB0aXRsZSwgY29udGFpbmVyLCBwcm9ncmVzcywgbW9kYWxFZGl0UHJvZmlsZSk7XHJcbiAgICBtYWluRWxlbWVudC5hcHBlbmQocHJvZmlsZVBhZ2UpO1xyXG4gICAgbmV3IEFpckRhdGVwaWNrZXIoXCIjYWlyZGF0ZXBpY2tlclwiKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlRGVjb3JFbCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBkZWNvckVsOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImRlY29yXCIpO1xyXG4gICAgcmV0dXJuIGRlY29yRWw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm9maWxlUGFnZTtcclxuIiwiaW1wb3J0IFRlbXBsYXRlIGZyb20gXCIuLi90ZW1wbGF0ZXMvdGVtcGxhdGVcIjtcclxuaW1wb3J0IHsgSVRlbXBsYXRlIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcblxyXG5jbGFzcyBDYWxlbmRhciB7XHJcbiAgdGVtcGxhdGU6IElUZW1wbGF0ZTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlQ2FsZW5kYXIoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgY2FsZW5kYXI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInNlY3Rpb25cIixcclxuICAgICAgXCJjYWxlbmRhclwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgY2FsZW5kYXJXcmFwOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlQ2FsZW5kYXJXcmFwKCk7XHJcbiAgICBjYWxlbmRhci5hcHBlbmQoY2FsZW5kYXJXcmFwKTtcclxuICAgIHJldHVybiBjYWxlbmRhcjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQ2FsZW5kYXJXcmFwKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGNhbGVuZGFyV3JhcDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiY2FsZW5kYXItd3JhcFwiXHJcbiAgICApO1xyXG4gICAgY2FsZW5kYXJXcmFwLmlkID0gXCJhaXJkYXRlcGlja2VyXCI7XHJcbiAgICByZXR1cm4gY2FsZW5kYXJXcmFwO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2FsZW5kYXI7XHJcbiIsImltcG9ydCBUZW1wbGF0ZSBmcm9tIFwiLi4vdGVtcGxhdGVzL3RlbXBsYXRlXCI7XHJcbmltcG9ydCB7IElUZW1wbGF0ZSwgSUF1dGhvcml6YXRpb24gfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIjtcclxuaW1wb3J0IEF1dGhvcml6YXRpb24gZnJvbSBcIi4uL3V0aWxzL2F1dGgucm91dGVzXCI7XHJcbmltcG9ydCB7IGdldFVzZXJJZExvY2FsU3RvcmFnZSB9IGZyb20gXCIuLi91dGlscy9hdXRoXCI7XHJcbmltcG9ydCB7IG9uT3Blbk1vZGFsIH0gZnJvbSBcIi4uL3V0aWxzL2NvbXBvbmVudC11dGlsc1wiO1xyXG5cclxuY2xhc3MgSW5mbyB7XHJcbiAgcHJpdmF0ZSB0ZW1wbGF0ZTogSVRlbXBsYXRlO1xyXG4gIHByaXZhdGUgbWFpbkNsYXNzOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBhdXRob3JpemF0aW9uOiBJQXV0aG9yaXphdGlvbjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLm1haW5DbGFzcyA9IFwiaW5mb1wiO1xyXG4gICAgdGhpcy5hdXRob3JpemF0aW9uID0gbmV3IEF1dGhvcml6YXRpb24oKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBjcmVhdGVJbmZvKCk6IFByb21pc2U8SFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ+IHtcclxuICAgIGNvbnN0IGluZm86IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInNlY3Rpb25cIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9YFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGl0ZW1zOiBIVE1MRWxlbWVudFtdIHwgdW5kZWZpbmVkID0gYXdhaXQgdGhpcy5jcmVhdGVJdGVtcygpO1xyXG4gICAgY29uc3QgYnRuV3JhcDogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUJ0bldyYXAoKTtcclxuICAgIGlmICghaXRlbXMpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaW5mby5hcHBlbmQoLi4uaXRlbXMsIGJ0bldyYXApO1xyXG4gICAgcmV0dXJuIGluZm87XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGNyZWF0ZUl0ZW1zKCk6IFByb21pc2U8SFRNTEVsZW1lbnRbXSB8IHVuZGVmaW5lZD4ge1xyXG4gICAgY29uc3QgdXNlcklkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBnZXRVc2VySWRMb2NhbFN0b3JhZ2UoKTtcclxuICAgIGlmICghdXNlcklkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB1c2VySW5mbzpcclxuICAgICAgfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XHJcbiAgICAgIHwgdW5kZWZpbmVkID0gYXdhaXQgdGhpcy5hdXRob3JpemF0aW9uLmdldFVzZXJJbmZvKHVzZXJJZCk7XHJcbiAgICBpZiAoIXVzZXJJbmZvKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGlmIChyZXMgJiYgcmVzLm1lc3NhZ2UpIHtcclxuICAgIC8vICAgY29uc29sZS5sb2cocmVzLm1lc3NhZ2UpO1xyXG4gICAgLy8gfVxyXG4gICAgY29uc3QgaXRlbXM6IEhUTUxFbGVtZW50W10gPSBbXTtcclxuXHJcbiAgICBjb25zdCB1bml0czogc3RyaW5nW10gPSB1c2VySW5mby51bml0cy5zcGxpdChcIi1cIik7XHJcblxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdXNlckluZm8pIHtcclxuICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICBjYXNlIFwiZ29hbFwiOiB7XHJcbiAgICAgICAgICBjb25zdCBpdGVtR29hbDogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUl0ZW0oXHJcbiAgICAgICAgICAgIGAke2tleX06YCxcclxuICAgICAgICAgICAgdXNlckluZm8uZ29hbFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbUdvYWwpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgXCJsb2FkXCI6IHtcclxuICAgICAgICAgIGNvbnN0IGl0ZW1Mb2FkOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlSXRlbShcclxuICAgICAgICAgICAgYCR7a2V5fTpgLFxyXG4gICAgICAgICAgICBgJHt1c2VySW5mby5sb2FkfSB3b3Jrb3V0cyBwZXIgd2Vla2BcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW1Mb2FkKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FzZSBcIndlaWdodFwiOiB7XHJcbiAgICAgICAgICBjb25zdCBpdGVtV2VpZ2h0OiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlSXRlbShcclxuICAgICAgICAgICAgYCR7a2V5fTpgLFxyXG4gICAgICAgICAgICBgJHt1c2VySW5mby53ZWlnaHR9ICR7dW5pdHNbMF19YFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbVdlaWdodCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhc2UgXCJoZWlnaHRcIjoge1xyXG4gICAgICAgICAgY29uc3QgaXRlbUhlaWdodDogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUl0ZW0oXHJcbiAgICAgICAgICAgIGAke2tleX06YCxcclxuICAgICAgICAgICAgYCR7dXNlckluZm8uaGVpZ2h0fSAke3VuaXRzWzFdfWBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW1IZWlnaHQpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGl0ZW1zO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVJdGVtKG5hbWVUaXRsZTogc3RyaW5nLCBuYW1lRGVzY3JpcHRpb246IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGl0ZW06IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX2l0ZW1gXHJcbiAgICApO1xyXG4gICAgY29uc3QgY29udGVudDogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUNvbnRlbnQobmFtZVRpdGxlLCBuYW1lRGVzY3JpcHRpb24pO1xyXG4gICAgaXRlbS5hcHBlbmQoY29udGVudCk7XHJcbiAgICByZXR1cm4gaXRlbTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQ29udGVudChcclxuICAgIG5hbWVUaXRsZTogc3RyaW5nLFxyXG4gICAgbmFtZURlc2NyaXB0aW9uOiBzdHJpbmdcclxuICApOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBjb250ZW50OiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19pdGVtLWNvbnRlbnRgXHJcbiAgICApO1xyXG4gICAgY29uc3QgdGl0bGU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX2l0ZW0tdGl0bGVgLFxyXG4gICAgICBuYW1lVGl0bGVcclxuICAgICk7XHJcbiAgICBjb25zdCBkZXNjcmlwdGlvbjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9faXRlbS1kZXNjcmlwdGlvbmAsXHJcbiAgICAgIG5hbWVEZXNjcmlwdGlvblxyXG4gICAgKTtcclxuICAgIGNvbnRlbnQuYXBwZW5kKHRpdGxlLCBkZXNjcmlwdGlvbik7XHJcbiAgICByZXR1cm4gY29udGVudDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQnRuV3JhcCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBidG5XcmFwOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19idG4td3JhcGBcclxuICAgICk7XHJcbiAgICBjb25zdCBidG5FZGl0OiBIVE1MQnV0dG9uRWxlbWVudCA9IHRoaXMuY3JlYXRlQnRuRWRpdCgpO1xyXG4gICAgYnRuV3JhcC5hcHBlbmQoYnRuRWRpdCk7XHJcbiAgICByZXR1cm4gYnRuV3JhcDtcclxuICB9XHJcbiAgcHJpdmF0ZSBjcmVhdGVCdG5FZGl0KCk6IEhUTUxCdXR0b25FbGVtZW50IHtcclxuICAgIGNvbnN0IGJ0bkVkaXQ6IEhUTUxCdXR0b25FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVCdG4oXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fZWRpdGAsXHJcbiAgICAgIFwiRWRpdFwiXHJcbiAgICApO1xyXG4gICAgYnRuRWRpdC5jbGFzc0xpc3QuYWRkKFwiYnRuXCIpO1xyXG4gICAgYnRuRWRpdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgb25PcGVuTW9kYWwoXCJtb2RhbC1lZGl0LXByb2ZpbGVcIikpO1xyXG4gICAgcmV0dXJuIGJ0bkVkaXQ7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJbmZvO1xyXG4iLCJpbXBvcnQgTW9kYWwgZnJvbSBcIi4vbW9kYWxcIjtcclxuaW1wb3J0IFRlbXBsYXRlIGZyb20gXCIuLi90ZW1wbGF0ZXMvdGVtcGxhdGVcIjtcclxuaW1wb3J0IHtcclxuICBJTW9kYWwsXHJcbiAgSVRlbXBsYXRlLFxyXG4gIElBdXRob3JpemF0aW9uLFxyXG4gIElBbnN3ZXJBZGRVc2VySW5mbyxcclxuICBJRGF0YUVkaXRQcm9maWxlLFxyXG59IGZyb20gXCIuLi90eXBlcy9pbmRleFwiO1xyXG5pbXBvcnQgeyBJbnB1dEltZyB9IGZyb20gXCIuLi9jb21wb25lbnRzL0lucHV0SW1nXCI7XHJcbmltcG9ydCB7IGlzSGVpZ2h0VmFsaWQgfSBmcm9tIFwiLi4vdXRpbHMvdmFsaWRhdGVcIjtcclxuaW1wb3J0IHsgaXNXZWlnaHRWYWxpZCB9IGZyb20gXCIuLi91dGlscy92YWxpZGF0ZVwiO1xyXG5pbXBvcnQgQXV0aG9yaXphdGlvbiBmcm9tIFwiLi4vdXRpbHMvYXV0aC5yb3V0ZXNcIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcclxuaW1wb3J0IHsgb25DbG9zZU1vZGFsIH0gZnJvbSBcIi4uL3V0aWxzL2NvbXBvbmVudC11dGlsc1wiO1xyXG5pbXBvcnQgeyBnZXRVc2VySWRMb2NhbFN0b3JhZ2UgfSBmcm9tIFwiLi4vdXRpbHMvYXV0aFwiO1xyXG5cclxuY2xhc3MgTW9kYWxFZGl0UHJvZmlsZSB7XHJcbiAgcHJpdmF0ZSB0ZW1wbGF0ZTogSVRlbXBsYXRlO1xyXG4gIHByaXZhdGUgbW9kYWw6IElNb2RhbDtcclxuICBwcml2YXRlIG1haW5DbGFzczogc3RyaW5nO1xyXG4gIHByaXZhdGUgYXV0aG9yaXphdGlvbjogSUF1dGhvcml6YXRpb247XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5tb2RhbCA9IG5ldyBNb2RhbCgpO1xyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5tYWluQ2xhc3MgPSBcImVkaXQtZm9ybVwiO1xyXG4gICAgdGhpcy5hdXRob3JpemF0aW9uID0gbmV3IEF1dGhvcml6YXRpb24oKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBjcmVhdGVNb2RhbChcclxuICAgIGRyYXdQcm9maWxlUGFnZTogKCkgPT4gUHJvbWlzZTx2b2lkPlxyXG4gICk6IFByb21pc2U8SFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ+IHtcclxuICAgIGNvbnN0IGVkaXRGb3JtOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCA9IGF3YWl0IHRoaXMuY3JlYXRlRWRpdEZvcm0oXHJcbiAgICAgIGRyYXdQcm9maWxlUGFnZVxyXG4gICAgKTtcclxuICAgIGlmICghZWRpdEZvcm0pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbW9kYWw6IEhUTUxFbGVtZW50ID0gdGhpcy5tb2RhbC5jcmVhdGVNb2RhbChcclxuICAgICAgXCJtb2RhbC1lZGl0LXByb2ZpbGVcIixcclxuICAgICAgZWRpdEZvcm0sXHJcbiAgICAgIHRydWVcclxuICAgICk7XHJcbiAgICByZXR1cm4gbW9kYWw7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGNyZWF0ZUVkaXRGb3JtKFxyXG4gICAgZHJhd1Byb2ZpbGVQYWdlOiAoKSA9PiBQcm9taXNlPHZvaWQ+XHJcbiAgKTogUHJvbWlzZTxIVE1MRWxlbWVudCB8IHVuZGVmaW5lZD4ge1xyXG4gICAgY29uc3QgZWRpdEZvcm06IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICB0aGlzLm1haW5DbGFzc1xyXG4gICAgKTtcclxuICAgIGNvbnN0IHRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlVGl0bGUoKTtcclxuICAgIGNvbnN0IGZvcm06IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkID0gYXdhaXQgdGhpcy5jcmVhdGVGb3JtKFxyXG4gICAgICBkcmF3UHJvZmlsZVBhZ2VcclxuICAgICk7XHJcbiAgICBpZiAoIWZvcm0pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZWRpdEZvcm0uYXBwZW5kKHRpdGxlLCBmb3JtKTtcclxuXHJcbiAgICByZXR1cm4gZWRpdEZvcm07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGdldFVzZXJJbmZvKCk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHVuZGVmaW5lZD4ge1xyXG4gICAgY29uc3QgdXNlcklkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBnZXRVc2VySWRMb2NhbFN0b3JhZ2UoKTtcclxuICAgIGlmICghdXNlcklkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHVzZXJJbmZvOlxyXG4gICAgICB8IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cclxuICAgICAgfCB1bmRlZmluZWQgPSBhd2FpdCB0aGlzLmF1dGhvcml6YXRpb24uZ2V0VXNlckluZm8odXNlcklkKTtcclxuICAgIGlmICghdXNlckluZm8pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVzZXJJbmZvO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVUaXRsZSgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCB0aXRsZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fdGl0bGVgLFxyXG4gICAgICBcIkVkaXQgeW91ciB3ZWlnaHQvaGVpZ2h0XCJcclxuICAgICk7XHJcbiAgICByZXR1cm4gdGl0bGU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGNyZWF0ZUZvcm0oXHJcbiAgICBkcmF3UHJvZmlsZVBhZ2U6ICgpID0+IFByb21pc2U8dm9pZD5cclxuICApOiBQcm9taXNlPEhUTUxGb3JtRWxlbWVudCB8IHVuZGVmaW5lZD4ge1xyXG4gICAgY29uc3QgdXNlckluZm86XHJcbiAgICAgIHwgUmVjb3JkPHN0cmluZywgc3RyaW5nPlxyXG4gICAgICB8IHVuZGVmaW5lZCA9IGF3YWl0IHRoaXMuZ2V0VXNlckluZm8oKTtcclxuICAgIGlmICghdXNlckluZm8pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVuaXRzOiBzdHJpbmdbXSA9IHVzZXJJbmZvLnVuaXRzLnNwbGl0KFwiLVwiKTtcclxuICAgIGNvbnN0IGZvcm06IEhUTUxGb3JtRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRm9ybShcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19mb3JtYCxcclxuICAgICAgXCIvXCJcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgaW5wdXRXcmFwOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19pbnB1dC13cmFwYFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGlucHV0QmxvY2tPbmU6IEhUTUxFbGVtZW50ID0gSW5wdXRJbWcoe1xyXG4gICAgICBtYWluQ2xhc3M6IHRoaXMubWFpbkNsYXNzLFxyXG4gICAgICBjbGFzc05hbWU6IFtdLFxyXG4gICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgaWQ6IFwid2VpZ2h0XCIsXHJcbiAgICAgICAgbmFtZTogXCJ3ZWlnaHRcIixcclxuICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxyXG4gICAgICAgIHBsYWNlaG9sZGVyOiBcIkVudGVyIHdlaWdodFwiLFxyXG4gICAgICAgIHZhbHVlOiB1c2VySW5mby53ZWlnaHQsXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZ1NyYzogXCIuLi9hc3NldHMvc3ZnL3NjYWxlcy5zdmdcIixcclxuICAgICAgaW1nQWx0OiBcInNjYWxlcy1pbWdcIixcclxuICAgICAgdmFsaWRhdGU6IGlzV2VpZ2h0VmFsaWQsXHJcbiAgICAgIHVuaXRzOiB1bml0c1swXSxcclxuICAgICAgY2xhc3NOYW1lVW5pdHM6IGAke3RoaXMubWFpbkNsYXNzfV9fdW5pdHMtd2VpZ2h0YCxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGlucHV0QmxvY2tUd286IEhUTUxFbGVtZW50ID0gSW5wdXRJbWcoe1xyXG4gICAgICBtYWluQ2xhc3M6IHRoaXMubWFpbkNsYXNzLFxyXG4gICAgICBjbGFzc05hbWU6IFtdLFxyXG4gICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgaWQ6IFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgbmFtZTogXCJoZWlnaHRcIixcclxuICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxyXG4gICAgICAgIHBsYWNlaG9sZGVyOiBcIkVudGVyIGhlaWdodFwiLFxyXG4gICAgICAgIHZhbHVlOiB1c2VySW5mby5oZWlnaHQsXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZ1NyYzogXCIuLi9hc3NldHMvc3ZnL2hlaWdodC5zdmdcIixcclxuICAgICAgaW1nQWx0OiBcImhlaWdodC1pbWdcIixcclxuICAgICAgdmFsaWRhdGU6IGlzSGVpZ2h0VmFsaWQsXHJcbiAgICAgIHVuaXRzOiB1bml0c1sxXSxcclxuICAgICAgY2xhc3NOYW1lVW5pdHM6IGAke3RoaXMubWFpbkNsYXNzfV9fdW5pdHMtaGVpZ2h0YCxcclxuICAgIH0pO1xyXG5cclxuICAgIGlucHV0V3JhcC5hcHBlbmQoaW5wdXRCbG9ja09uZSwgaW5wdXRCbG9ja1R3byk7XHJcbiAgICBjb25zdCBtZXNzYWdlOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlTWVzc2FnZSgpO1xyXG4gICAgY29uc3QgYnRuRWRpdDogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUJ0blVwZGF0ZSgpO1xyXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XHJcbiAgICAgIHRoaXMub25TdWJtaXRIYW5kbGVyRm9ybShlLCBmb3JtLCBkcmF3UHJvZmlsZVBhZ2UsIHVuaXRzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZvcm0uYXBwZW5kKGlucHV0V3JhcCwgbWVzc2FnZSwgYnRuRWRpdCk7XHJcbiAgICByZXR1cm4gZm9ybTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlTWVzc2FnZSgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBtZXNzYWdlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJzcGFuXCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fbWVzc2FnZS1mb3JtYFxyXG4gICAgKTtcclxuICAgIHJldHVybiBtZXNzYWdlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVCdG5VcGRhdGUoKTogSFRNTEJ1dHRvbkVsZW1lbnQge1xyXG4gICAgY29uc3QgYnRuVXBkYXRlOiBIVE1MQnV0dG9uRWxlbWVudCA9IEJ1dHRvbih7XHJcbiAgICAgIGNvbnRlbnQ6IFwidXBkYXRlXCIsXHJcbiAgICAgIGNsYXNzTmFtZTogW2Ake3RoaXMubWFpbkNsYXNzfV9fYnRuYCwgXCJidG5cIl0sXHJcbiAgICAgIHR5cGU6IFwic3VibWl0XCIsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBidG5VcGRhdGU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uU3VibWl0SGFuZGxlckZvcm0oXHJcbiAgICBlOiBFdmVudCxcclxuICAgIGZvcm06IEhUTUxGb3JtRWxlbWVudCxcclxuICAgIGRyYXdQcm9maWxlUGFnZTogKCkgPT4gUHJvbWlzZTx2b2lkPixcclxuICAgIHVuaXRzOiBzdHJpbmdbXVxyXG4gICk6IHZvaWQge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgZm9ybURhdGE6IEZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pO1xyXG4gICAgY29uc3QgdmFsdWVXZWlnaHQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGZvcm1EYXRhLmdldChcIndlaWdodFwiKT8udG9TdHJpbmcoKTtcclxuICAgIGNvbnN0IHZhbHVlSGVpZ2h0OiBzdHJpbmcgfCB1bmRlZmluZWQgPSBmb3JtRGF0YS5nZXQoXCJoZWlnaHRcIik/LnRvU3RyaW5nKCk7XHJcblxyXG4gICAgaWYgKCF2YWx1ZVdlaWdodCB8fCAhdmFsdWVIZWlnaHQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGVpZ2h0VmFsaWQ6IGJvb2xlYW4gPSBpc0hlaWdodFZhbGlkKHZhbHVlSGVpZ2h0LCB1bml0c1sxXSkucmVzO1xyXG4gICAgY29uc3Qgd2VpZ2h0VmFsaWQ6IGJvb2xlYW4gPSBpc1dlaWdodFZhbGlkKHZhbHVlV2VpZ2h0LCB1bml0c1swXSkucmVzO1xyXG5cclxuICAgIGlmICghd2VpZ2h0VmFsaWQgfHwgIWhlaWdodFZhbGlkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHVzZXJJZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gZ2V0VXNlcklkTG9jYWxTdG9yYWdlKCk7XHJcbiAgICBpZiAoIXVzZXJJZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnVwZGF0ZUluZm9Vc2VyKFxyXG4gICAgICB7XHJcbiAgICAgICAgaWQ6IHVzZXJJZCxcclxuICAgICAgICB3ZWlnaHQ6IHZhbHVlV2VpZ2h0LFxyXG4gICAgICAgIGhlaWdodDogdmFsdWVIZWlnaHQsXHJcbiAgICAgIH0sXHJcbiAgICAgIGRyYXdQcm9maWxlUGFnZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgdXBkYXRlSW5mb1VzZXIoXHJcbiAgICBkYXRhRWRpdFByb2ZpbGU6IElEYXRhRWRpdFByb2ZpbGUsXHJcbiAgICBkcmF3UHJvZmlsZVBhZ2U6ICgpID0+IFByb21pc2U8dm9pZD5cclxuICApOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IHJlczpcclxuICAgICAgfCBJQW5zd2VyQWRkVXNlckluZm9cclxuICAgICAgfCB1bmRlZmluZWQgPSBhd2FpdCB0aGlzLmF1dGhvcml6YXRpb24udXBkYXRlVXNlckluZm8oZGF0YUVkaXRQcm9maWxlKTtcclxuXHJcbiAgICBpZiAoIXJlcykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJlcy5lcnJvcnMgJiYgcmVzLm1lc3NhZ2UpIHtcclxuICAgICAgdGhpcy5FcnJvckhhbmRsZXIocmVzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IG1lc3NhZ2VFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBgLiR7dGhpcy5tYWluQ2xhc3N9X19tZXNzYWdlLWZvcm1gXHJcbiAgICAgICk7XHJcbiAgICAgIGlmIChtZXNzYWdlRWwpIHtcclxuICAgICAgICBtZXNzYWdlRWwudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgICAgIG1lc3NhZ2VFbC5jbGFzc0xpc3QucmVtb3ZlKFwiZXJyb3JcIik7XHJcbiAgICAgIH1cclxuICAgICAgb25DbG9zZU1vZGFsKFwibW9kYWwtZWRpdC1wcm9maWxlXCIpKCk7XHJcbiAgICAgIGRyYXdQcm9maWxlUGFnZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBFcnJvckhhbmRsZXIocmVzOiBJQW5zd2VyQWRkVXNlckluZm8pOiB2b2lkIHtcclxuICAgIGNvbnN0IGlucHV0czogTm9kZUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX2lucHV0YFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGFycklucHV0czogSFRNTEVsZW1lbnRbXSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGlucHV0cyk7XHJcblxyXG4gICAgYXJySW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoXCJlcnJvclwiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IG1lc3NhZ2VFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgYC4ke3RoaXMubWFpbkNsYXNzfV9fbWVzc2FnZS1mb3JtYFxyXG4gICAgKTtcclxuICAgIGlmICghbWVzc2FnZUVsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIG1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IHJlcy5tZXNzYWdlO1xyXG4gICAgbWVzc2FnZUVsLmNsYXNzTGlzdC5hZGQoXCJlcnJvclwiKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1vZGFsRWRpdFByb2ZpbGU7XHJcbiIsImltcG9ydCBUZW1wbGF0ZSBmcm9tIFwiLi4vdGVtcGxhdGVzL3RlbXBsYXRlXCI7XHJcbmltcG9ydCB7IElUZW1wbGF0ZSwgSUV4ZXJjaXNlIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcblxyXG5jbGFzcyBQYXVzZU1vZGFsIHtcclxuICB0ZW1wbGF0ZTogSVRlbXBsYXRlO1xyXG4gIGV4ZXJjaXNlOiBJRXhlcmNpc2U7XHJcbiAgYmFja0xheWVyOiBIVE1MRWxlbWVudDtcclxuICBtb2RhbDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGV4ZXJjaXNlOiBJRXhlcmNpc2UpIHtcclxuICAgIHRoaXMudGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKTtcclxuICAgIHRoaXMuZXhlcmNpc2UgPSBleGVyY2lzZTtcclxuICAgIHRoaXMuYmFja0xheWVyID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcInBhdXNlLW1vZGFsX19iYWNrbGF5ZXJcIlxyXG4gICAgKTtcclxuICAgIHRoaXMubW9kYWwgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJwYXVzZS1tb2RhbFwiKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkcmF3KCk6IEhUTUxFbGVtZW50IHtcclxuICAgIHRoaXMuYmFja0xheWVyLmFwcGVuZCh0aGlzLm1vZGFsKTtcclxuICAgIGNvbnN0IHRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJwYXVzZS1tb2RhbF9fdGl0bGVcIixcclxuICAgICAgXCJwYXVzZVwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgZXhlcmNpc2VJbmZvOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJwYXVzZS1tb2RhbF9faW5mb1wiXHJcbiAgICApO1xyXG4gICAgY29uc3QgZXhlcmNpc2VOYW1lOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJwYXVzZS1tb2RhbF9fZXhlcmNpc2UtbmFtZVwiLFxyXG4gICAgICB0aGlzLmV4ZXJjaXNlLnRpdGxlXHJcbiAgICApO1xyXG4gICAgY29uc3QgZXhlcmNpc2VHaWY6IEhUTUxJbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgZXhlcmNpc2VHaWYuY2xhc3NOYW1lID0gXCJwYXVzZS1tb2RhbF9fZXhlcmNpc2UtZ2lmXCI7XHJcbiAgICBleGVyY2lzZUdpZi5zcmMgPSB0aGlzLmV4ZXJjaXNlLmV4YW1wbGU7XHJcbiAgICBleGVyY2lzZUluZm8uYXBwZW5kKGV4ZXJjaXNlTmFtZSwgZXhlcmNpc2VHaWYpO1xyXG4gICAgdGhpcy5tb2RhbC5hcHBlbmQodGl0bGUsIGV4ZXJjaXNlSW5mbyk7XHJcbiAgICB0aGlzLmNyZWF0ZU1vZGFsQnV0dG9ucygpO1xyXG4gICAgcmV0dXJuIHRoaXMuYmFja0xheWVyO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVNb2RhbEJ1dHRvbnMoKSB7XHJcbiAgICBjb25zdCBtb2RhbEJ1dHRvbnM6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcInBhdXNlLW1vZGFsX19idXR0b25zXCJcclxuICAgICk7XHJcbiAgICBjb25zdCByZXN0YXJ0QnRuOiBIVE1MQnV0dG9uRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlQnRuKFxyXG4gICAgICBcInBhdXNlLW1vZGFsX19idXR0b24tcmVzdGFydFwiLFxyXG4gICAgICBcIlJlc3RhcnQgRXhlcmNpc2VcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGNvbnRpbnVlQnRuOiBIVE1MQnV0dG9uRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlQnRuKFxyXG4gICAgICBcInBhdXNlLW1vZGFsX19idXR0b24tY29udGludWVcIixcclxuICAgICAgXCJDb250aW51ZVwiXHJcbiAgICApO1xyXG4gICAgbW9kYWxCdXR0b25zLmFwcGVuZChyZXN0YXJ0QnRuLCBjb250aW51ZUJ0bik7XHJcbiAgICB0aGlzLm1vZGFsLmFwcGVuZChtb2RhbEJ1dHRvbnMpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGF1c2VNb2RhbDtcclxuIiwiaW1wb3J0IFRlbXBsYXRlIGZyb20gXCIuLi90ZW1wbGF0ZXMvdGVtcGxhdGVcIjtcclxuaW1wb3J0IHsgSVRlbXBsYXRlIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcbmltcG9ydCBDb21wbGV4IGZyb20gXCIuLi91dGlscy/RgW9tcGxleC5yb3V0ZXNcIjtcclxuaW1wb3J0IHsgZ2V0VXNlcklkTG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4uL3V0aWxzL2F1dGhcIjtcclxuaW1wb3J0IHsgaW5BY3RpdmVQcmVsb2FkZXIgfSBmcm9tIFwiLi4vdXRpbHMvcHJlbG9hZGVyXCI7XHJcblxyXG5jbGFzcyBDb25ncmF0cyB7XHJcbiAgdGVtcGxhdGU6IElUZW1wbGF0ZTtcclxuICBjb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gIGNvdW50ZXI6IG51bWJlcjtcclxuICB0aW1lOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvdW50ZXI6IG51bWJlciwgdGltZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImNvbmdyYXRzXCIpO1xyXG4gICAgdGhpcy5jb3VudGVyID0gY291bnRlcjtcclxuICAgIHRoaXMudGltZSA9IHRpbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZHJhdygpIHtcclxuICAgIGF3YWl0IHRoaXMuc2F2ZUNvbXBsZXRlZENvbXBsZXgoKTtcclxuICAgIGNvbnN0IGNvbmdyYXRzVGV4dDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiY29uZ3JhdHNfX3RleHRcIixcclxuICAgICAgXCJ3ZWxsIGRvbmUhXCJcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgaWNvbnNCbG9jazogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiY29uZ3JhdHNfX2ljb25zXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBleGVyY2lzZUJsb2NrOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJjb25ncmF0c19fZXhlcmNpc2VzLXJlc3VsdFwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgZXhlcmNpc2VOdW1iZXI6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImNvbmdyYXRzX19leGVyY2lzZXMtbnVtYmVyXCIsXHJcbiAgICAgIGAke3RoaXMuY291bnRlcn1gXHJcbiAgICApO1xyXG4gICAgY29uc3QgZXhlcmNpc2VUZXh0OiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJjb25ncmF0c19fZXhlcmNpc2VzLXRleHRcIixcclxuICAgICAgXCJFeGVyY2lzZXNcIlxyXG4gICAgKTtcclxuICAgIGV4ZXJjaXNlQmxvY2suYXBwZW5kKGV4ZXJjaXNlTnVtYmVyLCBleGVyY2lzZVRleHQpO1xyXG5cclxuICAgIGNvbnN0IG1pbnV0ZXNCbG9jazogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiY29uZ3JhdHNfX21pbnV0ZXMtcmVzdWx0XCJcclxuICAgICk7XHJcbiAgICBjb25zdCBtaW51dGVzTnVtYmVyOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgXCJjb25ncmF0c19fbWludXRlcy1udW1iZXJcIixcclxuICAgICAgYCR7dGhpcy50aW1lfWBcclxuICAgICk7XHJcbiAgICBjb25zdCBtaW51dGVzVGV4dDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiY29uZ3JhdHNfX21pbnV0ZXMtdGV4dFwiLFxyXG4gICAgICBcIk1pbnV0ZXNcIlxyXG4gICAgKTtcclxuICAgIG1pbnV0ZXNCbG9jay5hcHBlbmQobWludXRlc051bWJlciwgbWludXRlc1RleHQpO1xyXG4gICAgaWNvbnNCbG9jay5hcHBlbmQoZXhlcmNpc2VCbG9jaywgbWludXRlc0Jsb2NrKTtcclxuXHJcbiAgICBjb25zdCBjb21wbGV0ZUJ1dHRvbjogSFRNTEFuY2hvckVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUxpbmsoXHJcbiAgICAgIFwiY29uZ3JhdHNfX2J1dHRvbi1jb21wbGV0ZVwiLFxyXG4gICAgICBcIi9leGVyY2lzZXNcIixcclxuICAgICAgXCJDb21wbGV0ZVwiXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGZpbmlzaFNvdW5kID0gbmV3IEF1ZGlvKCk7XHJcbiAgICBmaW5pc2hTb3VuZC5zcmMgPSBcIi4uL2Fzc2V0cy9zb3VuZHMvZmluaXNoLm1wM1wiO1xyXG4gICAgY29uc3Qgc291bmQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInNvdW5kXCIpO1xyXG4gICAgaWYgKHNvdW5kID09PSBcInVubXV0ZWRcIikge1xyXG4gICAgICBmaW5pc2hTb3VuZC5wbGF5KCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoY29uZ3JhdHNUZXh0LCBpY29uc0Jsb2NrLCBjb21wbGV0ZUJ1dHRvbik7XHJcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzYXZlQ29tcGxldGVkQ29tcGxleCgpIHtcclxuICAgIGNvbnN0IGNvbXBsZXggPSBuZXcgQ29tcGxleCgpO1xyXG4gICAgY29uc3QgdXNlcklkMTogc3RyaW5nIHwgdW5kZWZpbmVkID0gZ2V0VXNlcklkTG9jYWxTdG9yYWdlKCk7XHJcbiAgICBpZiAoIXVzZXJJZDEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY29tcGxleElkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjb21wbGV4SWRcIik7XHJcbiAgICBhd2FpdCBjb21wbGV4LmZ1bGZpbGxlZENvbXBsZXgoe1xyXG4gICAgICB1c2VySWQ6IHVzZXJJZDEsXHJcbiAgICAgIGlkQ29tcGxleDogSlNPTi5wYXJzZShTdHJpbmcoY29tcGxleElkKSksXHJcbiAgICAgIHRpbWU6IFN0cmluZyh0aGlzLnRpbWUpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb25ncmF0cztcclxuIiwiaW1wb3J0IHsgSVJvdXQgfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIjtcclxuXHJcbmNsYXNzIFJvdXRlciB7XHJcbiAgcHJpdmF0ZSByb3V0ZXM6IElSb3V0W107XHJcbiAgcHJpdmF0ZSByb290OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBzdWJzY3JpYmVyczogKCgpID0+IHZvaWQpW107XHJcbiAgcHJpdmF0ZSBlcnJvckFjdGlvbjogKCkgPT4gdm9pZDtcclxuICBwcml2YXRlIGN1cnJlbnRSb3V0OiBzdHJpbmc7XHJcbiAgcHVibGljIHN1YnNjcmliZXJzT25jZTogKCgpID0+IHZvaWQpW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJvdXRlczogSVJvdXRbXSwgZXJyb3JBY3Rpb246ICgpID0+IHZvaWQpIHtcclxuICAgIHRoaXMucm91dGVzID0gcm91dGVzO1xyXG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xyXG4gICAgdGhpcy5zdWJzY3JpYmVyc09uY2UgPSBbXTtcclxuICAgIHRoaXMuY3VycmVudFJvdXQgPSBcIlwiO1xyXG4gICAgdGhpcy5yb290ID0gXCIvcnMtY2xvbmUtZGVwbG95L1wiOyAvL9C00L7QsdCw0LLQuNGC0Ywg0L3QsNC40LzQtdC90L7QstCw0L3QuNC1INGA0LXQv9C+0LfQuNGC0L7RgNC40Y8g0L/QtdGA0LXQtCDQtNC10L/Qu9C+0LXQvCAvcnMtY2xvbmUtZGVwbG95L1xyXG4gICAgdGhpcy5lcnJvckFjdGlvbiA9IGVycm9yQWN0aW9uO1xyXG4gIH1cclxuXHJcbiAgLy/QvNC10YLQvtC0INC00LvRjyDQv9C10YDQtdGF0L7QtNCwINC90LAg0YHRgtGA0LDQvdC40YbRg1xyXG4gIHB1YmxpYyBuYXZpZ2F0ZSA9IChwYXRoOiBzdHJpbmcpOiB2b2lkID0+IHtcclxuICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBcIlwiLCB0aGlzLnJvb3QgKyBwYXRoKTtcclxuICAgIHRoaXMuYWN0aW9uKHBhdGgpO1xyXG4gICAgdGhpcy5jdXJyZW50Um91dCA9IHBhdGg7XHJcbiAgICB0aGlzLnN0YXJ0U3Vic2NyaWJlcnMoKTtcclxuICB9O1xyXG5cclxuICAvL9C80LXRgtC+0LQg0LTQu9GPINC/0YDQvtCy0LXRgNC60Lgg0LrQsNC60LDRjyDRgdC10LnRh9Cw0YEg0YHRgtGA0LDQvdC40YbQsCDQv9GA0Lgg0L/QtdGA0LXQt9Cw0LPRgNGD0LfQutC1XHJcbiAgcHVibGljIGluaXQoKTogdm9pZCB7XHJcbiAgICBjb25zdCBwYXRoOiBzdHJpbmcgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSh0aGlzLnJvb3QsIFwiXCIpO1xyXG4gICAgdGhpcy5jdXJyZW50Um91dCA9IHBhdGgucmVwbGFjZSgvXFwvJC8sIFwiXCIpO1xyXG4gICAgdGhpcy5hY3Rpb24ocGF0aC5yZXBsYWNlKC9cXC8kLywgXCJcIikpO1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgKGUpID0+IHtcclxuICAgICAgLy/Qv9C10YDQtdGA0LjRgdC+0LLQutCwINC/0YDQuCDQvdCw0LbQsNGC0LjQuCDQutC90L7Qv9C+0Log0LIg0LHRgNCw0YPQt9C10YDQtSBmb3J3YXJkL2JhY2tcclxuICAgICAgdGhpcy5hY3Rpb24od2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UodGhpcy5yb290LCBcIlwiKSk7IC8v0LHQtdGA0LXRgiDRgtC10LrRg9GJ0LjQuSDQv9GD0YLRjCwg0L/QvtGB0LvQtSDRgtC+0LPQviDQutCw0Log0YHQtNC10LvQsNC7INGI0LDQsyDQvdCw0LfQsNC0XHJcbiAgICB9KTtcclxuICAgIHRoaXMuc3RhcnRTdWJzY3JpYmVycygpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFkZFN1YnNjcmliZXJzKGZ1bmM6ICgpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChmdW5jKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpc0FjdGl2ZVJvdXQocm91dDogc3RyaW5nLCBleGFjdCA9IGZhbHNlKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoZXhhY3QpIHtcclxuICAgICAgcmV0dXJuIHJvdXQgPT09IHRoaXMuY3VycmVudFJvdXQ7XHJcbiAgICB9XHJcbiAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYF4oW1xcXFx3LV0rXFxcXC98KSR7cm91dH0oXFxcXC9bXFxcXHctXSp8KSRgKTtcclxuICAgIHJldHVybiByZS50ZXN0KHRoaXMuY3VycmVudFJvdXQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGFydFN1YnNjcmliZXJzKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuc3Vic2NyaWJlcnMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaCgoZnVuYzogKCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIGZ1bmMoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuc3Vic2NyaWJlcnNPbmNlLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLnN1YnNjcmliZXJzT25jZS5mb3JFYWNoKChmdW5jOiAoKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgZnVuYygpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN1YnNjcmliZXJzT25jZSA9IFtdO1xyXG4gIH1cclxuXHJcbiAgLy/QvNC10YLQvtC0INC00LvRjyDQstGL0LfQvtCy0LAg0LrQvtC70LHQtdC60LAg0YHQvtC+0YLQstC10YLRgdGC0LLRg9GJ0LXQs9C+INGA0L7Rg9GC0LBcclxuICBwcml2YXRlIGFjdGlvbihwYXRoOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnN0IGN1cnJlbnQ6IElSb3V0IHwgdW5kZWZpbmVkID0gdGhpcy5yb3V0ZXMuZmluZCgocm91dDogSVJvdXQpID0+IHtcclxuICAgICAgaWYgKHJvdXQucGF0aC5pbmRleE9mKFwiLzpcIikgIT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIHJvdXQucGF0aC5yZXBsYWNlKC9cXC86LiskLywgXCJcIikgPT09IHBhdGgucmVwbGFjZSgvXFwvW1xcd10rJC8sIFwiXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByb3V0LnBhdGggPT09IHBhdGg7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICBjb25zdCBwYXJhbTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5nZXRQYXJhbShwYXRoLCBjdXJyZW50LnBhdGgpO1xyXG4gICAgICBjdXJyZW50LmNiKHBhcmFtKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZXJyb3JBY3Rpb24oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8v0LzQtdGC0L7QtCDQstC+0LfQstGA0LDRidCy0LXRgiDQv9Cw0YDQsNC80LXRgtGAINC00LvRjyDRgdGB0YvQu9C60Lgg0LLQuNC00LAgcHJvZHVjdHMvOmlkXHJcbiAgcHJpdmF0ZSBnZXRQYXJhbShwYXRoOiBzdHJpbmcsIGN1cnJlbnQ6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICBpZiAoY3VycmVudC5pbmRleE9mKFwiLzpcIikgPT09IC0xKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG1hdGNoOiBzdHJpbmdbXSB8IG51bGwgPSBwYXRoLm1hdGNoKC9cXC8uKyQvKTtcclxuXHJcbiAgICBsZXQgcGFyYW06IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgIGlmIChtYXRjaCkge1xyXG4gICAgICBwYXJhbSA9IG1hdGNoWzBdLnJlcGxhY2UoXCIvXCIsIFwiXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwYXJhbTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjtcclxuIiwiaW1wb3J0IFRlbXBsYXRlIGZyb20gXCIuLi90ZW1wbGF0ZXMvdGVtcGxhdGVcIjtcclxuaW1wb3J0IE1vZGFsTW9iaWxlTWVudSBmcm9tIFwiLi4vY29tcG9uZW50cy9tb2RhbE1vYmlsZU1lbnVcIjtcclxuaW1wb3J0IHsgSVRlbXBsYXRlLCBJTW9kYWxNb2JpbGVNZW51IH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvQnV0dG9uXCI7XHJcbmltcG9ydCB7IG9uT3Blbk1vZGFsIH0gZnJvbSBcIi4uL3V0aWxzL2NvbXBvbmVudC11dGlsc1wiO1xyXG5pbXBvcnQgcm91dGVyIGZyb20gXCIuL3JvdXRlckNvbXBvbmVudFwiO1xyXG5pbXBvcnQge1xyXG4gIGdldFVzZXJUb2tlbkxvY2FsU3RvcmFnZSxcclxuICByZW1vdmVVc2VyTG9jYWxTdG9yYWdlLFxyXG59IGZyb20gXCIuLi91dGlscy9hdXRoXCI7XHJcblxyXG5jbGFzcyBIZWFkZXIge1xyXG4gIHRlbXBsYXRlOiBJVGVtcGxhdGU7XHJcbiAgbWFpbkNsYXNzOiBzdHJpbmc7XHJcbiAgbW9kYWxNb2JpbGVNZW51OiBJTW9kYWxNb2JpbGVNZW51O1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5tYWluQ2xhc3MgPSBcImhlYWRlclwiO1xyXG4gICAgdGhpcy5tb2RhbE1vYmlsZU1lbnUgPSBuZXcgTW9kYWxNb2JpbGVNZW51KCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcclxuICAgIGNvbnN0IGhlYWRlcjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImhlYWRlclwiKTtcclxuICAgIGlmICghaGVhZGVyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGhlYWRlci50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICBjb25zdCBpc0F1dGggPSBnZXRVc2VyVG9rZW5Mb2NhbFN0b3JhZ2UoKTtcclxuXHJcbiAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZChgJHt0aGlzLm1haW5DbGFzc31gKTtcclxuICAgIGNvbnN0IHdyYXA6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVXcmFwKCk7XHJcbiAgICBpZiAoaXNBdXRoKSB7XHJcbiAgICAgIHdyYXAuYXBwZW5kKFxyXG4gICAgICAgIHRoaXMuY3JlYXRlTGlzdE1lbnUoKSxcclxuICAgICAgICB0aGlzLmNyZWF0ZU1vZGFsKCksXHJcbiAgICAgICAgdGhpcy5jcmVhdGVCdG5TaWduT3V0KCksXHJcbiAgICAgICAgdGhpcy5jcmVhdGVCdXJnZXJCdG4oKVxyXG4gICAgICApO1xyXG4gICAgICBoZWFkZXIuYXBwZW5kKHRoaXMuY3JlYXRlTG9nbygpLCB3cmFwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdyYXAuYXBwZW5kKHRoaXMuY3JlYXRlQnV0dG9ucygpKTtcclxuICAgICAgaGVhZGVyLmFwcGVuZCh0aGlzLmNyZWF0ZUxvZ28oKSwgd3JhcCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUxvZ28oKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgbG9nbzogSFRNTEFuY2hvckVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUxpbmsoXCJsb2dvXCIsIFwiL1wiKTtcclxuICAgIGNvbnN0IHNwYW5PbmU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInNwYW5cIixcclxuICAgICAgXCJsb2dvX19jb250ZW50XCIsXHJcbiAgICAgIFwiV29tZW4gV29ya291dHNcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHNwYW5Ud286IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInNwYW5cIixcclxuICAgICAgXCJsb2dvX19jb250ZW50XCIsXHJcbiAgICAgIFwiV29tZW4gV29ya291dHNcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHNwYW5UaHJlZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwic3BhblwiLFxyXG4gICAgICBcImxvZ29fX21vYmlsZVwiLFxyXG4gICAgICBcIldXXCJcclxuICAgICk7XHJcbiAgICBsb2dvLmFwcGVuZChzcGFuT25lLCBzcGFuVHdvLCBzcGFuVGhyZWUpO1xyXG4gICAgbG9nby5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgdGhpcy5vbmNsaWNrSGFuZGxlckxvZ28oZSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBsb2dvO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvbmNsaWNrSGFuZGxlckxvZ28oZTogRXZlbnQpOiB2b2lkIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIHJvdXRlci5uYXZpZ2F0ZShcIlwiKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQnV0dG9ucygpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBidXR0b25zOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19idXR0b25zYFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGJ0blNpZ25JbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSBCdXR0b24oe1xyXG4gICAgICBjb250ZW50OiBcIlNpZ24gSW5cIixcclxuICAgICAgY2xhc3NOYW1lOiBbYCR7dGhpcy5tYWluQ2xhc3N9X19idG5gXSxcclxuICAgICAgb25DbGljazogb25PcGVuTW9kYWwoXCJtb2RhbC1zaWduLWluXCIpLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBidG5TaWduVXA6IEhUTUxCdXR0b25FbGVtZW50ID0gQnV0dG9uKHtcclxuICAgICAgY29udGVudDogXCJTaWduIFVwXCIsXHJcbiAgICAgIGNsYXNzTmFtZTogW2Ake3RoaXMubWFpbkNsYXNzfV9fYnRuYF0sXHJcbiAgICAgIHZhcmlhbnQ6IFwic2Vjb25kXCIsXHJcbiAgICAgIG9uQ2xpY2s6IG9uT3Blbk1vZGFsKFwibW9kYWwtc2lnbi11cFwiKSxcclxuICAgIH0pO1xyXG5cclxuICAgIGJ1dHRvbnMuYXBwZW5kKGJ0blNpZ25JbiwgYnRuU2lnblVwKTtcclxuICAgIHJldHVybiBidXR0b25zO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVCdG5TaWduT3V0KCk6IEhUTUxCdXR0b25FbGVtZW50IHtcclxuICAgIGNvbnN0IGJ0blNpZ25PdXQ6IEhUTUxCdXR0b25FbGVtZW50ID0gQnV0dG9uKHtcclxuICAgICAgY29udGVudDogXCJTaWduIE91dFwiLFxyXG4gICAgICBjbGFzc05hbWU6IFtgJHt0aGlzLm1haW5DbGFzc31fX2J0bmBdLFxyXG4gICAgICBvbkNsaWNrOiB0aGlzLmV4aXRBcHAuYmluZCh0aGlzKSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGJ0blNpZ25PdXQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZU1vZGFsKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IG1vZGFsOiBIVE1MRWxlbWVudCA9IHRoaXMubW9kYWxNb2JpbGVNZW51LmNyZWF0ZU1vZGFsKFxyXG4gICAgICBcIm1vZGFsLW1vYmlsZVwiLFxyXG4gICAgICB0aGlzLmNyZWF0ZVZlcnRpY2FsTWVudSgpLFxyXG4gICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIG1vZGFsO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVXcmFwKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHdyYXA6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX3dyYXBgXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHdyYXA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUJ1cmdlckJ0bigpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBidG46IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImJ1dHRvblwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX21vYmlsZS1idG5gXHJcbiAgICApO1xyXG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIG9uT3Blbk1vZGFsKFwibW9kYWwtbW9iaWxlXCIpKCk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGljb246IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVJY29uKFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX21vYmlsZS1pY29uYCxcclxuICAgICAgXCJpY29uLWJ1cmdlci1idG5cIlxyXG4gICAgKTtcclxuICAgIGJ0bi5hcHBlbmQoaWNvbik7XHJcbiAgICByZXR1cm4gYnRuO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVWZXJ0aWNhbE1lbnUoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgbWFpbkNsYXNzID0gXCJ2ZXJ0aWNhbC1tZW51XCI7XHJcbiAgICBjb25zdCB2ZXJ0aWNhbE1lbnU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHttYWluQ2xhc3N9YFxyXG4gICAgKTtcclxuICAgIHZlcnRpY2FsTWVudS5hcHBlbmQodGhpcy5jcmVhdGVMaXN0TWVudSgpKTtcclxuICAgIHJldHVybiB2ZXJ0aWNhbE1lbnU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUxpc3RNZW51KCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGxpc3Q6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInVsXCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fbGlzdGBcclxuICAgICk7XHJcbiAgICBjb25zdCBsaW5rc01lbnU6IEhUTUxFbGVtZW50W10gPSB0aGlzLmNyZWF0ZUxpbmtzTWVudSgpO1xyXG4gICAgbGlzdC5hcHBlbmQoLi4ubGlua3NNZW51KTtcclxuICAgIHJldHVybiBsaXN0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVMaW5rc01lbnUoKTogSFRNTEVsZW1lbnRbXSB7XHJcbiAgICBjb25zdCBsaW5rc01lbnU6IEhUTUxFbGVtZW50W10gPSBbXTtcclxuICAgIGNvbnN0IG5hbWVMaW5rc01lbnUgPSBbXCJ3b3Jrb3V0c1wiLCBcImV4ZXJjaXNlc1wiLCBcInByb2ZpbGVcIl07XHJcbiAgICBuYW1lTGlua3NNZW51LmZvckVhY2goKG5hbWVMaW5rKSA9PiB7XHJcbiAgICAgIGNvbnN0IGxpc3RJdGVtOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgICBcImxpXCIsXHJcbiAgICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19saXN0LWl0ZW1gXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IGxpbms6IEhUTUxBbmNob3JFbGVtZW50ID0gdGhpcy5jcmVhdGVMaW5rKG5hbWVMaW5rKTtcclxuICAgICAgbGlzdEl0ZW0uYXBwZW5kKGxpbmspO1xyXG4gICAgICBsaW5rc01lbnUucHVzaChsaXN0SXRlbSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBsaW5rc01lbnU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUxpbmsobmFtZTogc3RyaW5nKTogSFRNTEFuY2hvckVsZW1lbnQge1xyXG4gICAgY29uc3QgbGluazogSFRNTEFuY2hvckVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUxpbmsoXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fbGlua2AsXHJcbiAgICAgIFwiL1wiLFxyXG4gICAgICBuYW1lXHJcbiAgICApO1xyXG4gICAgaWYgKHJvdXRlci5pc0FjdGl2ZVJvdXQobmFtZSkpIHtcclxuICAgICAgbGluay5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG4gICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgdGhpcy5vbkNsaWNrSGFuZGxlckxpbmtNZW51KGUsIG5hbWUpO1xyXG4gICAgfSk7XHJcbiAgICBsaW5rLmFwcGVuZCh0aGlzLmNyZWF0ZUJvcmRlckxpbmsoKSk7XHJcbiAgICByZXR1cm4gbGluaztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQm9yZGVyTGluaygpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBib3JkZXJMaW5rOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJzcGFuXCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fbGluay1ib3JkZXJgXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIGJvcmRlckxpbms7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uQ2xpY2tIYW5kbGVyTGlua01lbnUoZTogRXZlbnQsIHNyYzogc3RyaW5nKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICByb3V0ZXIubmF2aWdhdGUoc3JjKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZXhpdEFwcCgpOiB2b2lkIHtcclxuICAgIHJlbW92ZVVzZXJMb2NhbFN0b3JhZ2UoKTtcclxuICAgIHRoaXMuZHJhdygpO1xyXG4gICAgcm91dGVyLm5hdmlnYXRlKFwiXCIpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyO1xyXG4iLCJpbXBvcnQgeyBJSW5wdXRJY29uLCBJVGVtcGxhdGUsIElWYWxpZGF0ZSB9IGZyb20gXCIuLi90eXBlcy9pbmRleFwiO1xyXG5pbXBvcnQgeyBhZGRDbGFzc2VzIH0gZnJvbSBcIi4uL3V0aWxzL2NvbXBvbmVudC11dGlsc1wiO1xyXG5pbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIElucHV0SWNvbih7XHJcbiAgY2xhc3NOYW1lLFxyXG4gIGF0dHJpYnV0ZXMsXHJcbiAgY2xhc3NOYW1lSWNvbixcclxuICB2YWxpZGF0ZSxcclxufTogSUlucHV0SWNvbik6IEhUTUxFbGVtZW50IHtcclxuICBjb25zdCB0ZW1wbGF0ZTogSVRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgY29uc3QgbWFpbkNsYXNzID0gXCJpbnB1dFwiO1xyXG4gIGNvbnN0IGlucHV0QmxvY2s6IEhUTUxFbGVtZW50ID0gdGVtcGxhdGUuY3JlYXRlRWxlbWVudChcImRpdlwiLCBtYWluQ2xhc3MpO1xyXG4gIGFkZENsYXNzZXMoaW5wdXRCbG9jaywgY2xhc3NOYW1lKTtcclxuICBjb25zdCBpbnB1dDogSFRNTElucHV0RWxlbWVudCA9IGNyZWF0ZUlucHV0KG1haW5DbGFzcywgYXR0cmlidXRlcyk7XHJcbiAgY29uc3QgZXJyb3I6IEhUTUxFbGVtZW50ID0gdGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgIFwic3BhblwiLFxyXG4gICAgYCR7bWFpbkNsYXNzfV9fZXJyb3JgXHJcbiAgKTtcclxuXHJcbiAgaWYgKHZhbGlkYXRlKSB7XHJcbiAgICBpbnB1dC5vbmNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgb25DaGFuZ2VIYW5kbGVySW5wdXQodmFsaWRhdGUsIGlucHV0LCBlcnJvcik7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29uc3QgaWNvbjogSFRNTEVsZW1lbnQgPSB0ZW1wbGF0ZS5jcmVhdGVJY29uKFxyXG4gICAgYCR7bWFpbkNsYXNzfV9faWNvbmAsXHJcbiAgICBjbGFzc05hbWVJY29uXHJcbiAgKTtcclxuICBpbnB1dEJsb2NrLmFwcGVuZChpbnB1dCwgaWNvbiwgZXJyb3IpO1xyXG4gIHJldHVybiBpbnB1dEJsb2NrO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvbkNoYW5nZUhhbmRsZXJJbnB1dChcclxuICB2YWxpZGF0ZTogKGlucHV0VmFsdWU6IHN0cmluZykgPT4gSVZhbGlkYXRlLFxyXG4gIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50LFxyXG4gIGVycm9yOiBIVE1MRWxlbWVudFxyXG4pOiB2b2lkIHtcclxuICBjb25zdCB2YWxpZGF0ZURhdGU6IElWYWxpZGF0ZSA9IHZhbGlkYXRlKGlucHV0LnZhbHVlKTtcclxuICBpZiAoIXZhbGlkYXRlRGF0ZS5yZXMpIHtcclxuICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoXCJlcnJvclwiKTtcclxuICAgIGVycm9yLnRleHRDb250ZW50ID0gdmFsaWRhdGVEYXRlLm1lc3NhZ2UgfHwgXCJcIjtcclxuICB9IGVsc2Uge1xyXG4gICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZShcImVycm9yXCIpO1xyXG4gICAgZXJyb3IudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlSW5wdXQoXHJcbiAgbWFpbkNsYXNzOiBzdHJpbmcsXHJcbiAgYXR0cmlidXRlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxyXG4pOiBIVE1MSW5wdXRFbGVtZW50IHtcclxuICBjb25zdCBpbnB1dDogSFRNTElucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICBpbnB1dC5jbGFzc0xpc3QuYWRkKGAke21haW5DbGFzc31fX2l0ZW1gKTtcclxuICBhZGRBdHRyaWJ1dGVzKGlucHV0LCBhdHRyaWJ1dGVzKTtcclxuICByZXR1cm4gaW5wdXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEF0dHJpYnV0ZXMoXHJcbiAgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQsXHJcbiAgYXR0cmlidXRlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxyXG4pOiB2b2lkIHtcclxuICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XHJcbiAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJbnB1dEljb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JbnB1dEljb25cIjtcclxuaW1wb3J0IHsgSVRlbXBsYXRlIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcbmltcG9ydCBUZW1wbGF0ZSBmcm9tIFwiLi4vdGVtcGxhdGVzL3RlbXBsYXRlXCI7XHJcbmltcG9ydCB7IGlzUGFzc3dvcmRWYWxpZCB9IGZyb20gXCIuLi91dGlscy92YWxpZGF0ZVwiO1xyXG5jb25zdCB0ZW1wbGF0ZTogSVRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gUGFzc3dvcmRJbnB1dCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgY29uc3QgaW5wdXRCbG9jazogSFRNTEVsZW1lbnQgPSBJbnB1dEljb24oe1xyXG4gICAgY2xhc3NOYW1lOiBbXSxcclxuICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgdHlwZTogXCJwYXNzd29yZFwiLFxyXG4gICAgICBwbGFjZWhvbGRlcjogXCJFbnRlciB5b3VyIHBhc3N3b3JkXCIsXHJcbiAgICAgIG5hbWU6IFwicGFzc3dvcmRcIixcclxuICAgICAgcmVxdWlyZWQ6IFwidHJ1ZVwiLFxyXG4gICAgfSxcclxuXHJcbiAgICBjbGFzc05hbWVJY29uOiBcImljb24tbG9ja19vdXRsaW5lXCIsXHJcbiAgICB2YWxpZGF0ZTogaXNQYXNzd29yZFZhbGlkLFxyXG4gIH0pO1xyXG4gIGNvbnN0IG1haW5DbGFzcyA9IFwiaW5wdXRcIjtcclxuICBjb25zdCBpY29uOiBIVE1MRWxlbWVudCA9IGNyZWF0ZUljb24obWFpbkNsYXNzLCBpbnB1dEJsb2NrKTtcclxuICBpbnB1dEJsb2NrLmFwcGVuZChpY29uKTtcclxuICByZXR1cm4gaW5wdXRCbG9jaztcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlSWNvbihtYWluQ2xhc3M6IHN0cmluZywgaW5wdXRCbG9jazogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB7XHJcbiAgY29uc3QgaWNvbjogSFRNTEVsZW1lbnQgPSB0ZW1wbGF0ZS5jcmVhdGVJY29uKFxyXG4gICAgYCR7bWFpbkNsYXNzfV9fcmlnaHQtaWNvbmAsXHJcbiAgICBcImljb24tZXllLWJsb2NrZWRcIlxyXG4gICk7XHJcbiAgY29uc3QgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsID0gaW5wdXRCbG9jay5xdWVyeVNlbGVjdG9yKFxyXG4gICAgYC4ke21haW5DbGFzc31fX2l0ZW1gXHJcbiAgKTtcclxuICBpY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICBvbkNsaWNrSGFuZGxlckljb24oaWNvbiwgaW5wdXQpO1xyXG4gIH0pO1xyXG4gIHJldHVybiBpY29uO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvbkNsaWNrSGFuZGxlckljb24oXHJcbiAgaWNvbjogSFRNTEVsZW1lbnQsXHJcbiAgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsXHJcbik6IHZvaWQge1xyXG4gIGlmICghaW5wdXQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKGljb24uY2xhc3NMaXN0LmNvbnRhaW5zKFwiaWNvbi1leWUtYmxvY2tlZFwiKSkge1xyXG4gICAgaWNvbi5jbGFzc0xpc3QucmVtb3ZlKFwiaWNvbi1leWUtYmxvY2tlZFwiKTtcclxuICAgIGljb24uY2xhc3NMaXN0LmFkZChcImljb24tZXllXCIpO1xyXG4gICAgaW5wdXQudHlwZSA9IFwidGV4dFwiO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpY29uLmNsYXNzTGlzdC5yZW1vdmUoXCJpY29uLWV5ZVwiKTtcclxuICAgIGljb24uY2xhc3NMaXN0LmFkZChcImljb24tZXllLWJsb2NrZWRcIik7XHJcbiAgICBpbnB1dC50eXBlID0gXCJwYXNzd29yZFwiO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgTW9kYWwgZnJvbSBcIi4uL2NvbXBvbmVudHMvbW9kYWxcIjtcclxuaW1wb3J0IFRlbXBsYXRlIGZyb20gXCIuLi90ZW1wbGF0ZXMvdGVtcGxhdGVcIjtcclxuaW1wb3J0IHtcclxuICBJTW9kYWwsXHJcbiAgSVRlbXBsYXRlLFxyXG4gIElBdXRob3JpemF0aW9uLFxyXG4gIElBbnN3ZXJBdXRoLFxyXG4gIElIZWFkZXIsXHJcbn0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcbmltcG9ydCB7IElucHV0SWNvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL0lucHV0SWNvblwiO1xyXG5pbXBvcnQgeyBQYXNzd29yZElucHV0IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUGFzc3dvcmRJbnB1dFwiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi9jb21wb25lbnRzL0J1dHRvblwiO1xyXG5pbXBvcnQgeyBvbk9wZW5Nb2RhbCwgb25DbG9zZU1vZGFsIH0gZnJvbSBcIi4uL3V0aWxzL2NvbXBvbmVudC11dGlsc1wiO1xyXG5pbXBvcnQgQXV0aG9yaXphdGlvbiBmcm9tIFwiLi4vdXRpbHMvYXV0aC5yb3V0ZXNcIjtcclxuaW1wb3J0IHsgaXNFbWFpbFZhbGlkIH0gZnJvbSBcIi4uL3V0aWxzL3ZhbGlkYXRlXCI7XHJcbmltcG9ydCB7IHNldFVzZXJMb2NhbFN0b3JhZ2UgfSBmcm9tIFwiLi4vdXRpbHMvYXV0aFwiO1xyXG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuLi9jb21wb25lbnRzL2hlYWRlclwiO1xyXG5cclxuY2xhc3MgTW9kYWxTaWduSW4ge1xyXG4gIHRlbXBsYXRlOiBJVGVtcGxhdGU7XHJcbiAgbW9kYWw6IElNb2RhbDtcclxuICBtYWluQ2xhc3M6IHN0cmluZztcclxuICBhdXRob3JpemF0aW9uOiBJQXV0aG9yaXphdGlvbjtcclxuICBoZWFkZXI6IElIZWFkZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5tb2RhbCA9IG5ldyBNb2RhbCgpO1xyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5tYWluQ2xhc3MgPSBcImxvZ2luLWZvcm1cIjtcclxuICAgIHRoaXMuYXV0aG9yaXphdGlvbiA9IG5ldyBBdXRob3JpemF0aW9uKCk7XHJcbiAgICB0aGlzLmhlYWRlciA9IG5ldyBIZWFkZXIoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkcmF3KCk6IHZvaWQge1xyXG4gICAgY29uc3QgbG9naW5Gb3JtOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlTG9naW5Gb3JtKCk7XHJcbiAgICBjb25zdCBtb2RhbDogSFRNTEVsZW1lbnQgPSB0aGlzLm1vZGFsLmNyZWF0ZU1vZGFsKFxyXG4gICAgICBcIm1vZGFsLXNpZ24taW5cIixcclxuICAgICAgbG9naW5Gb3JtLFxyXG4gICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmQobW9kYWwpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVMb2dpbkZvcm0oKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgbG9naW5Gb3JtOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgdGhpcy5tYWluQ2xhc3NcclxuICAgICk7XHJcbiAgICBjb25zdCB0aXRsZTogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVRpdGxlKCk7XHJcbiAgICBjb25zdCBmb3JtOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlRm9ybSgpO1xyXG4gICAgY29uc3QgcXVlc3Rpb246IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVRdWVzdGlvbigpO1xyXG4gICAgbG9naW5Gb3JtLmFwcGVuZCh0aXRsZSwgZm9ybSwgcXVlc3Rpb24pO1xyXG5cclxuICAgIHJldHVybiBsb2dpbkZvcm07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVRpdGxlKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X190aXRsZWAsXHJcbiAgICAgIFwiTG9nIGluXCJcclxuICAgICk7XHJcbiAgICByZXR1cm4gdGl0bGU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUZvcm0oKSB7XHJcbiAgICBjb25zdCBmb3JtOiBIVE1MRm9ybUVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUZvcm0oXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fZm9ybWAsXHJcbiAgICAgIFwiL1wiXHJcbiAgICApO1xyXG4gICAgY29uc3QgaW5wdXRCbG9ja0VtYWlsOiBIVE1MRWxlbWVudCA9IElucHV0SWNvbih7XHJcbiAgICAgIGNsYXNzTmFtZTogW10sXHJcbiAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICB0eXBlOiBcInRleHRcIixcclxuICAgICAgICBwbGFjZWhvbGRlcjogXCJFbnRlciB5b3VyIGVtYWlsXCIsXHJcbiAgICAgICAgbmFtZTogXCJlbWFpbFwiLFxyXG4gICAgICAgIHJlcXVpcmVkOiBcInRydWVcIixcclxuICAgICAgfSxcclxuICAgICAgY2xhc3NOYW1lSWNvbjogXCJpY29uLW1haWxfb3V0bGluZVwiLFxyXG4gICAgICB2YWxpZGF0ZTogaXNFbWFpbFZhbGlkLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBpbnB1dEJsb2NrUGFzc3dvcmQ6IEhUTUxFbGVtZW50ID0gUGFzc3dvcmRJbnB1dCgpO1xyXG4gICAgY29uc3QgYnRuV3JhcDogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUJ0bldyYXAoKTtcclxuICAgIGNvbnN0IG1lc3NhZ2U6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVNZXNzYWdlRm9ybSgpO1xyXG5cclxuICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xyXG4gICAgICB0aGlzLm9uU3VibWl0SGFuZGxlckZvcm0oZSwgZm9ybSwgbWVzc2FnZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmb3JtLmFwcGVuZChpbnB1dEJsb2NrRW1haWwsIGlucHV0QmxvY2tQYXNzd29yZCwgbWVzc2FnZSwgYnRuV3JhcCk7XHJcbiAgICByZXR1cm4gZm9ybTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgb25TdWJtaXRIYW5kbGVyRm9ybShcclxuICAgIGU6IEV2ZW50LFxyXG4gICAgZm9ybTogSFRNTEZvcm1FbGVtZW50LFxyXG4gICAgbWVzc2FnZTogSFRNTEVsZW1lbnRcclxuICApOiB2b2lkIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGZvcm1EYXRhOiBGb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKTtcclxuICAgIGNvbnN0IHZhbHVlRW1haWw6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGZvcm1EYXRhLmdldChcImVtYWlsXCIpPy50b1N0cmluZygpO1xyXG4gICAgY29uc3QgdmFsdWVQc3c6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGZvcm1EYXRhLmdldChcInBhc3N3b3JkXCIpPy50b1N0cmluZygpO1xyXG4gICAgaWYgKCF2YWx1ZUVtYWlsIHx8ICF2YWx1ZVBzdykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnNlbmRBdXRoKFxyXG4gICAgICB7XHJcbiAgICAgICAgZW1haWw6IHZhbHVlRW1haWwsXHJcbiAgICAgICAgcGFzc3dvcmQ6IHZhbHVlUHN3LFxyXG4gICAgICB9LFxyXG4gICAgICBtZXNzYWdlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVNZXNzYWdlRm9ybSgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBtZXNzYWdlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJzcGFuXCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fbWVzc2FnZWBcclxuICAgICk7XHJcbiAgICByZXR1cm4gbWVzc2FnZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQnRuV3JhcCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBtYWluQ2xhc3MgPSBcImJ0bi13cmFwXCI7XHJcbiAgICBjb25zdCBidG5XcmFwOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcImRpdlwiLCBtYWluQ2xhc3MpO1xyXG4gICAgY29uc3QgYnRuOiBIVE1MQnV0dG9uRWxlbWVudCA9IEJ1dHRvbih7XHJcbiAgICAgIGNvbnRlbnQ6IFwiU2lnbiBJblwiLFxyXG4gICAgICBjbGFzc05hbWU6IFtgJHttYWluQ2xhc3N9X19idG5gXSxcclxuICAgICAgdHlwZTogXCJzdWJtaXRcIixcclxuICAgIH0pO1xyXG5cclxuICAgIGJ0bldyYXAuYXBwZW5kKGJ0bik7XHJcbiAgICByZXR1cm4gYnRuV3JhcDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgc2VuZEF1dGgoXHJcbiAgICBkYXRhSW5wdXRBdXRoOiB7IGVtYWlsOiBzdHJpbmc7IHBhc3N3b3JkOiBzdHJpbmcgfSxcclxuICAgIG1lc3NhZ2VFbDogSFRNTEVsZW1lbnRcclxuICApOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IHJlczogSUFuc3dlckF1dGggfCB1bmRlZmluZWQgPSBhd2FpdCB0aGlzLmF1dGhvcml6YXRpb24uYXV0aG9yaXphdGlvbihcclxuICAgICAgZGF0YUlucHV0QXV0aFxyXG4gICAgKTtcclxuICAgIGlmICghcmVzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVzLnRva2VuICYmIHJlcy51c2VySWQpIHtcclxuICAgICAgc2V0VXNlckxvY2FsU3RvcmFnZSh7IHRva2VuOiByZXMudG9rZW4sIHVzZXJJZDogcmVzLnVzZXJJZCB9KTtcclxuICAgICAgbWVzc2FnZUVsLnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgICAgbWVzc2FnZUVsLmNsYXNzTGlzdC5yZW1vdmUoXCJlcnJvclwiKTtcclxuICAgICAgdGhpcy5oZWFkZXIuZHJhdygpO1xyXG4gICAgICBvbkNsb3NlTW9kYWwoXCJtb2RhbC1zaWduLWluXCIpKCk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVzLm1lc3NhZ2UpIHtcclxuICAgICAgdGhpcy5FcnJvckhhbmRsZXIocmVzLCBtZXNzYWdlRWwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBFcnJvckhhbmRsZXIocmVzOiBJQW5zd2VyQXV0aCwgbWVzc2FnZUVsOiBIVE1MRWxlbWVudCkge1xyXG4gICAgY29uc3QgaW5wdXRzOiBOb2RlTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgIFwiLmxvZ2luLWZvcm0gLmlucHV0X19pdGVtXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBhcnJJbnB1dHM6IEhUTUxFbGVtZW50W10gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChpbnB1dHMpO1xyXG4gICAgYXJySW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoXCJlcnJvclwiKTtcclxuICAgIH0pO1xyXG4gICAgbWVzc2FnZUVsLmNsYXNzTGlzdC5hZGQoXCJlcnJvclwiKTtcclxuICAgIGlmIChyZXMubWVzc2FnZSkge1xyXG4gICAgICBtZXNzYWdlRWwudGV4dENvbnRlbnQgPSByZXMubWVzc2FnZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlUXVlc3Rpb24oKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgcXVlc3Rpb246IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX3F1ZXN0aW9uYFxyXG4gICAgKTtcclxuICAgIGNvbnN0IHF1ZXN0aW9uQ29udGVudDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwic3BhblwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX3RleHRgLFxyXG4gICAgICBcIkRvbid0IGhhdmUgYW4gYWNjb3VudD9cIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGxpbmtTaWduVXA6IEhUTUxBbmNob3JFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVMaW5rKFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX2xpbmtgLFxyXG4gICAgICBcIi9cIixcclxuICAgICAgXCJTaW5nIHVwXCJcclxuICAgICk7XHJcbiAgICBsaW5rU2lnblVwLm9uY2xpY2sgPSBvbk9wZW5Nb2RhbChcIm1vZGFsLXNpZ24tdXBcIiwgXCJtb2RhbC1zaWduLWluXCIpO1xyXG4gICAgcXVlc3Rpb24uYXBwZW5kKHF1ZXN0aW9uQ29udGVudCwgbGlua1NpZ25VcCk7XHJcbiAgICByZXR1cm4gcXVlc3Rpb247XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNb2RhbFNpZ25JbjtcclxuIiwiaW1wb3J0IHtcclxuICBJRGF0YUlucHV0UmFkaW8sXHJcbiAgSURhdGFMYWJlbCxcclxuICBJVGVtcGxhdGUsXHJcbiAgSUJ0blJhZGlvLFxyXG59IGZyb20gXCIuLi90eXBlcy9pbmRleFwiO1xyXG5pbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5cclxuY29uc3QgdGVtcGxhdGU6IElUZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSgpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEJ1dHRvblJhZGlvKFxyXG4gIGRhdGFJbnB1dDogSURhdGFJbnB1dFJhZGlvLFxyXG4gIGRhdGFMYWJlbDogSURhdGFMYWJlbFxyXG4pOiBJQnRuUmFkaW9bXSB7XHJcbiAgY29uc3QgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBjcmVhdGVJbnB1dChkYXRhSW5wdXQpO1xyXG4gIGNvbnN0IGxhYmVsOiBIVE1MTGFiZWxFbGVtZW50ID0gY3JlYXRlTGFiZWwoZGF0YUxhYmVsKTtcclxuICByZXR1cm4gW2lucHV0LCBsYWJlbF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUlucHV0KHtcclxuICB0eXBlLFxyXG4gIGlkLFxyXG4gIG5hbWUsXHJcbiAgY2hlY2tlZCxcclxuICBjbGFzc05hbWUsXHJcbiAgdmFsdWUsXHJcbiAgb25DaGFuZ2UsXHJcbn06IElEYXRhSW5wdXRSYWRpbyk6IEhUTUxJbnB1dEVsZW1lbnQge1xyXG4gIGNvbnN0IGlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gdGVtcGxhdGUuY3JlYXRlSW5wdXQoY2xhc3NOYW1lLCB7XHJcbiAgICB0eXBlOiB0eXBlLFxyXG4gICAgaWQ6IGlkLFxyXG4gICAgbmFtZTogbmFtZSxcclxuICAgIGNoZWNrZWQ6IGNoZWNrZWQgfHwgXCJcIixcclxuICAgIHZhbHVlOiB2YWx1ZSxcclxuICB9KTtcclxuICBpZiAob25DaGFuZ2UpIHtcclxuICAgIGlucHV0Lm9uY2hhbmdlID0gb25DaGFuZ2U7XHJcbiAgfVxyXG4gIHJldHVybiBpbnB1dDtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlTGFiZWwoe1xyXG4gIGZvck5hbWUsXHJcbiAgY29udGVudCxcclxuICBjbGFzc05hbWUsXHJcbn06IElEYXRhTGFiZWwpOiBIVE1MTGFiZWxFbGVtZW50IHtcclxuICBjb25zdCBsYWJlbDogSFRNTExhYmVsRWxlbWVudCA9IHRlbXBsYXRlLmNyZWF0ZUxhYmVsKFxyXG4gICAgY2xhc3NOYW1lLFxyXG4gICAgZm9yTmFtZSxcclxuICAgIGNvbnRlbnRcclxuICApO1xyXG4gIHJldHVybiBsYWJlbDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uUmFkaW87XHJcbiIsImltcG9ydCBNb2RhbCBmcm9tIFwiLi4vY29tcG9uZW50cy9tb2RhbFwiO1xyXG5pbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQge1xyXG4gIElNb2RhbCxcclxuICBJVGVtcGxhdGUsXHJcbiAgSUJ0blJhZGlvLFxyXG4gIElEYXRhRm9ybVF1ZXN0aW9ucyxcclxuICBJQW5zd2VyQWRkVXNlckluZm8sXHJcbiAgSUF1dGhvcml6YXRpb24sXHJcbn0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcbmltcG9ydCB7IEJ1dHRvblJhZGlvIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQnV0dG9uUmFkaW9cIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcclxuaW1wb3J0IHsgSW5wdXRJbWcgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JbnB1dEltZ1wiO1xyXG5pbXBvcnQgeyBpc0hlaWdodFZhbGlkIH0gZnJvbSBcIi4uL3V0aWxzL3ZhbGlkYXRlXCI7XHJcbmltcG9ydCB7IGlzV2VpZ2h0VmFsaWQgfSBmcm9tIFwiLi4vdXRpbHMvdmFsaWRhdGVcIjtcclxuaW1wb3J0IHsgZm9ybVNsaWRlciwgSUZvcm1TbGlkZXIgfSBmcm9tIFwiLi4vdXRpbHMvZm9ybVNsaWRlclwiO1xyXG5pbXBvcnQgQXV0aG9yaXphdGlvbiBmcm9tIFwiLi4vdXRpbHMvYXV0aC5yb3V0ZXNcIjtcclxuaW1wb3J0IHsgb25DbG9zZU1vZGFsIH0gZnJvbSBcIi4uL3V0aWxzL2NvbXBvbmVudC11dGlsc1wiO1xyXG5pbXBvcnQgeyBnZXRVc2VySWRMb2NhbFN0b3JhZ2UgfSBmcm9tIFwiLi4vdXRpbHMvYXV0aFwiO1xyXG5cclxuY2xhc3MgTW9kYWxRdWVzdGlvbnMge1xyXG4gIHRlbXBsYXRlOiBJVGVtcGxhdGU7XHJcbiAgbW9kYWw6IElNb2RhbDtcclxuICBtYWluQ2xhc3M6IHN0cmluZztcclxuICBtYWluQ2xhc3NTZWNvbmQ6IHN0cmluZztcclxuICBzbGlkZXI6IElGb3JtU2xpZGVyO1xyXG4gIGF1dGhvcml6YXRpb246IElBdXRob3JpemF0aW9uO1xyXG4gIHVuaXRzV2VpZ2h0OiBzdHJpbmc7XHJcbiAgdW5pdHNIZWlnaHQ6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLm1vZGFsID0gbmV3IE1vZGFsKCk7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLm1haW5DbGFzcyA9IFwic2xpZGVyLXF1ZXN0aW9uc1wiO1xyXG4gICAgdGhpcy5tYWluQ2xhc3NTZWNvbmQgPSBcInNsaWRlLWluZm9cIjtcclxuICAgIHRoaXMuc2xpZGVyID0gZm9ybVNsaWRlcih7IHNsaWRlQ291bnQ6IDMgfSk7XHJcbiAgICB0aGlzLmF1dGhvcml6YXRpb24gPSBuZXcgQXV0aG9yaXphdGlvbigpO1xyXG4gICAgdGhpcy51bml0c1dlaWdodCA9IFwia2dcIjtcclxuICAgIHRoaXMudW5pdHNIZWlnaHQgPSBcImNtXCI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcclxuICAgIGNvbnN0IHNsaWRlcldyYXA6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVTbGlkZXJXcmFwKCk7XHJcbiAgICBjb25zdCBtb2RhbDogSFRNTEVsZW1lbnQgPSB0aGlzLm1vZGFsLmNyZWF0ZU1vZGFsKFxyXG4gICAgICBcIm1vZGFsLXF1ZXN0aW9uc1wiLFxyXG4gICAgICBzbGlkZXJXcmFwLFxyXG4gICAgICBmYWxzZVxyXG4gICAgKTtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKG1vZGFsKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlU2xpZGVyV3JhcCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBtYWluQ2xhc3MgPSBcInNsaWRlci13cmFwcGVyXCI7XHJcbiAgICBjb25zdCBzbGlkZXJXcmFwOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgbWFpbkNsYXNzXHJcbiAgICApO1xyXG4gICAgY29uc3Qgc2xpZGVyOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlU2xpZGVyKCk7XHJcbiAgICBjb25zdCBzbGlkZXJDb250cm9sOiBIVE1MRWxlbWVudCA9IHRoaXMuc2xpZGVyQ29udHJvbCgpO1xyXG5cclxuICAgIHNsaWRlcldyYXAuYXBwZW5kKHNsaWRlciwgc2xpZGVyQ29udHJvbCk7XHJcbiAgICByZXR1cm4gc2xpZGVyV3JhcDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2xpZGVyQ29udHJvbCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBtYWluQ2xhc3MgPSBcInNsaWRlci1jb250cm9sXCI7XHJcbiAgICBjb25zdCBzbGlkZXJDb250cm9sOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgbWFpbkNsYXNzXHJcbiAgICApO1xyXG4gICAgY29uc3QgYXJyb3dCYWNrOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJpXCIsXHJcbiAgICAgIGAke21haW5DbGFzc31fX2JhY2tgXHJcbiAgICApO1xyXG4gICAgYXJyb3dCYWNrLmNsYXNzTGlzdC5hZGQoXCJpY29uLWFycm93X2JhY2tfaW9zXCIpO1xyXG4gICAgYXJyb3dCYWNrLm9uY2xpY2sgPSB0aGlzLnNsaWRlci5wcmV2U2xpZGU7XHJcbiAgICB0aGlzLnNsaWRlci5zZXRQcmV2QnRuKGFycm93QmFjayk7XHJcbiAgICBjb25zdCBzbGlkZXJQb2ludHM6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVTbGlkZXJQb2ludHMoKTtcclxuICAgIHRoaXMuc2xpZGVyLnNldFBvaW50ZXJDb250YWluZXIoc2xpZGVyUG9pbnRzKTtcclxuICAgIGNvbnN0IGFycm93Rm9yd2FyZDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiaVwiLFxyXG4gICAgICBgJHttYWluQ2xhc3N9X19mb3J3YXJkYFxyXG4gICAgKTtcclxuICAgIGFycm93Rm9yd2FyZC5jbGFzc0xpc3QuYWRkKFwiaWNvbi1hcnJvd19mb3J3YXJkX2lvc1wiKTtcclxuICAgIGFycm93Rm9yd2FyZC5vbmNsaWNrID0gdGhpcy5zbGlkZXIubmV4dFNsaWRlO1xyXG4gICAgdGhpcy5zbGlkZXIuc2V0TmV4dEJ0bihhcnJvd0ZvcndhcmQpO1xyXG4gICAgc2xpZGVyQ29udHJvbC5hcHBlbmQoYXJyb3dCYWNrLCBzbGlkZXJQb2ludHMsIGFycm93Rm9yd2FyZCk7XHJcbiAgICByZXR1cm4gc2xpZGVyQ29udHJvbDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlU2xpZGVyKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHNsaWRlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIHRoaXMubWFpbkNsYXNzXHJcbiAgICApO1xyXG4gICAgY29uc3Qgc2xpZGVyRm9ybTogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVNsaWRlckZvcm0oKTtcclxuICAgIHNsaWRlci5hcHBlbmQoc2xpZGVyRm9ybSk7XHJcbiAgICByZXR1cm4gc2xpZGVyO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVTbGlkZXJGb3JtKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHNsaWRlckZvcm06IEhUTUxGb3JtRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRm9ybShcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19mb3JtYCxcclxuICAgICAgXCIvXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBzbGlkZUxpc3Q6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVTbGlkZXJMaXN0KCk7XHJcbiAgICBzbGlkZXJGb3JtLmFwcGVuZChzbGlkZUxpc3QpO1xyXG4gICAgc2xpZGVyRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XHJcbiAgICAgIHRoaXMub25TdWJtaXRIYW5kbGVyRm9ybShlLCBzbGlkZXJGb3JtKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHNsaWRlckZvcm07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZvcm1WYWxpZGF0aW9uKGZvcm1EYXRhOiBGb3JtRGF0YSk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgdW5pdHM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkID0gZm9ybURhdGFcclxuICAgICAgLmdldChcInVuaXRzXCIpXHJcbiAgICAgID8udG9TdHJpbmcoKVxyXG4gICAgICAuc3BsaXQoXCItXCIpO1xyXG4gICAgY29uc3QgdmFsdWVIZWlnaHQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGZvcm1EYXRhLmdldChcImhlaWdodFwiKT8udG9TdHJpbmcoKTtcclxuICAgIGNvbnN0IHZhbHVlV2VpZ2h0OiBzdHJpbmcgfCB1bmRlZmluZWQgPSBmb3JtRGF0YS5nZXQoXCJ3ZWlnaHRcIik/LnRvU3RyaW5nKCk7XHJcbiAgICBpZiAoIXZhbHVlSGVpZ2h0IHx8ICF2YWx1ZVdlaWdodCB8fCAhdW5pdHMpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGVpZ2h0VmFsaWQ6IGJvb2xlYW4gPSBpc0hlaWdodFZhbGlkKHZhbHVlSGVpZ2h0LCB1bml0c1sxXSkucmVzO1xyXG4gICAgY29uc3Qgd2VpZ2h0VmFsaWQ6IGJvb2xlYW4gPSBpc1dlaWdodFZhbGlkKHZhbHVlV2VpZ2h0LCB1bml0c1swXSkucmVzO1xyXG5cclxuICAgIGlmICghd2VpZ2h0VmFsaWQgfHwgIWhlaWdodFZhbGlkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvblN1Ym1pdEhhbmRsZXJGb3JtKGU6IEV2ZW50LCBmb3JtOiBIVE1MRm9ybUVsZW1lbnQpOiB2b2lkIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IHF1ZXN0aW9uczogc3RyaW5nW10gPSBbXCJnb2FsXCIsIFwibG9hZFwiLCBcIndlaWdodFwiLCBcImhlaWdodFwiLCBcInVuaXRzXCJdO1xyXG4gICAgY29uc3QgZm9ybURhdGE6IEZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pO1xyXG4gICAgaWYgKCF0aGlzLmZvcm1WYWxpZGF0aW9uKGZvcm1EYXRhKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdmFsdWVzRm9ybTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xyXG4gICAgcXVlc3Rpb25zLmZvckVhY2goKHF1ZXN0aW9uKSA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbDogc3RyaW5nIHwgbnVsbCB8IEZpbGUgPSBmb3JtRGF0YS5nZXQocXVlc3Rpb24pO1xyXG5cclxuICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgIHZhbHVlc0Zvcm1bcXVlc3Rpb25dID0gdmFsLnRvU3RyaW5nKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgdXNlcklkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBnZXRVc2VySWRMb2NhbFN0b3JhZ2UoKTtcclxuICAgIGlmICghdXNlcklkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhbHVlc0Zvcm0udXNlcklkID0gdXNlcklkO1xyXG4gICAgdGhpcy5zZW5kSW5mb1VzZXIodmFsdWVzRm9ybSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVNsaWRlckxpc3QoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgZGF0YUZvcm1RdWVzdGlvbnM6IElEYXRhRm9ybVF1ZXN0aW9uc1tdID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgdGl0bGU6IFwiQmVmb3JlIHdlIHN0YXJ0XCIsXHJcbiAgICAgICAgcXVlc3Rpb246IFwiV2hhdCBpcyB5b3VyIGdvYWw/XCIsXHJcbiAgICAgICAgbmFtZTogXCJnb2FsXCIsXHJcbiAgICAgICAgbmFtZUJ0bjogW1wiS2VlcCBGaXRcIiwgXCJMb3NlIFdlaWdodFwiLCBcIkdldCBTdHJvbmdlclwiXSxcclxuICAgICAgICB2YWx1ZXM6IFtcImtlZXAtZml0XCIsIFwibG9zZS13ZWlnaHRcIiwgXCJnZXQtc3Ryb25nZXJcIl0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0aXRsZTogXCJMb2FkXCIsXHJcbiAgICAgICAgcXVlc3Rpb246IFwiV2hhdCBsb2FkIHdvdWxkIHlvdSBsaWtlP1wiLFxyXG4gICAgICAgIG5hbWU6IFwibG9hZFwiLFxyXG4gICAgICAgIG5hbWVCdG46IFtcIkxvd1wiLCBcIk1pZGRsZVwiLCBcIkhpZ2hcIl0sXHJcbiAgICAgICAgdmFsdWVzOiBbXCIxXCIsIFwiM1wiLCBcIjVcIl0sXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG5cclxuICAgIGNvbnN0IHNsaWRlckxpc3Q6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX2xpc3RgXHJcbiAgICApO1xyXG4gICAgdGhpcy5zbGlkZXIuc2V0Q29udGFpbmVyKHNsaWRlckxpc3QpO1xyXG4gICAgZGF0YUZvcm1RdWVzdGlvbnMuZm9yRWFjaCgoc2xpZGVEYXRhOiBJRGF0YUZvcm1RdWVzdGlvbnMpID0+IHtcclxuICAgICAgY29uc3Qgc2xpZGU6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVTbGlkZShzbGlkZURhdGEpO1xyXG4gICAgICBzbGlkZXJMaXN0LmFwcGVuZChzbGlkZSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGNyZWF0ZVNsaWRlQWJvdXRNZTogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVNsaWRlQWJvdXRNZSgpO1xyXG4gICAgc2xpZGVyTGlzdC5hcHBlbmQoY3JlYXRlU2xpZGVBYm91dE1lKTtcclxuICAgIHJldHVybiBzbGlkZXJMaXN0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVTbGlkZSh7XHJcbiAgICB0aXRsZSxcclxuICAgIHF1ZXN0aW9uLFxyXG4gICAgbmFtZSxcclxuICAgIG5hbWVCdG4sXHJcbiAgICB2YWx1ZXMsXHJcbiAgfTogSURhdGFGb3JtUXVlc3Rpb25zKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3Qgc2xpZGU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX3NsaWRlYFxyXG4gICAgKTtcclxuICAgIGNvbnN0IHNsaWRlQ29udGVudDogSFRNTEVsZW1lbnRbXSA9IHRoaXMuY3JlYXRlU2xpZGVDb250ZW50KFxyXG4gICAgICB0aXRsZSxcclxuICAgICAgcXVlc3Rpb25cclxuICAgICk7XHJcbiAgICBjb25zdCBidG5XcmFwOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlQnRuV3JhcChuYW1lLCBuYW1lQnRuLCB2YWx1ZXMpO1xyXG4gICAgY29uc3QgbWVzc2FnZTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwic3BhblwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX21lc3NhZ2VgXHJcbiAgICApO1xyXG4gICAgc2xpZGUuYXBwZW5kKC4uLnNsaWRlQ29udGVudCwgYnRuV3JhcCwgbWVzc2FnZSk7XHJcbiAgICByZXR1cm4gc2xpZGU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVNsaWRlQ29udGVudCh0aXRsZTogc3RyaW5nLCBxdWVzdGlvbjogc3RyaW5nKTogSFRNTEVsZW1lbnRbXSB7XHJcbiAgICBjb25zdCB0aXRsZUVsOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X190aXRsZWAsXHJcbiAgICAgIHRpdGxlXHJcbiAgICApO1xyXG4gICAgY29uc3QgcXVlc3Rpb25FbDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwic3BhblwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX3F1ZXN0aW9uYCxcclxuICAgICAgcXVlc3Rpb25cclxuICAgICk7XHJcbiAgICByZXR1cm4gW3RpdGxlRWwsIHF1ZXN0aW9uRWxdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVTbGlkZUFib3V0TWUoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3Qgc2xpZGU6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX3NsaWRlYFxyXG4gICAgKTtcclxuICAgIGNvbnN0IHRpdGxlRWw6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX3RpdGxlYCxcclxuICAgICAgXCJUZWxsIHVzIGFib3V0IHlvdXJzZWxmXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBpbnB1dFdyYXA6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVTbGlkZUFib3V0TWVJbnB1dFdyYXAoKTtcclxuICAgIGNvbnN0IGJ0bkJsb2NrOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlU2xpZGVBYm91dE1lQnRuQmxvY2soKTtcclxuICAgIGNvbnN0IG1lc3NhZ2U6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInNwYW5cIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19tZXNzYWdlLWZvcm1gXHJcbiAgICApO1xyXG4gICAgY29uc3QgYnRuU3VibWl0OiBIVE1MQnV0dG9uRWxlbWVudCA9IHRoaXMuY3JlYXRlQnRuU3VibWl0Rm9ybSgpO1xyXG4gICAgc2xpZGUuYXBwZW5kKHRpdGxlRWwsIGlucHV0V3JhcCwgYnRuQmxvY2ssIG1lc3NhZ2UsIGJ0blN1Ym1pdCk7XHJcbiAgICByZXR1cm4gc2xpZGU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVNsaWRlQWJvdXRNZUlucHV0V3JhcCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBpbnB1dFdyYXA6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc1NlY29uZH1fX2lucHV0LXdyYXBgXHJcbiAgICApO1xyXG4gICAgY29uc3QgaW5wdXRzQmxvY2s6IEhUTUxFbGVtZW50W10gPSB0aGlzLmNyZWF0ZUlucHV0c0Jsb2NrKCk7XHJcbiAgICBpbnB1dFdyYXAuYXBwZW5kKC4uLmlucHV0c0Jsb2NrKTtcclxuICAgIHJldHVybiBpbnB1dFdyYXA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUlucHV0c0Jsb2NrKCk6IEhUTUxFbGVtZW50W10ge1xyXG4gICAgY29uc3QgaW5wdXRCbG9ja09uZTogSFRNTEVsZW1lbnQgPSBJbnB1dEltZyh7XHJcbiAgICAgIG1haW5DbGFzczogdGhpcy5tYWluQ2xhc3NTZWNvbmQsXHJcbiAgICAgIGNsYXNzTmFtZTogW10sXHJcbiAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICBpZDogXCJ3ZWlnaHRcIixcclxuICAgICAgICBuYW1lOiBcIndlaWdodFwiLFxyXG4gICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXHJcbiAgICAgICAgcGxhY2Vob2xkZXI6IFwiRW50ZXIgd2VpZ2h0XCIsXHJcbiAgICAgICAgcmVxdWlyZWQ6IFwidHJ1ZVwiLFxyXG4gICAgICB9LFxyXG4gICAgICBpbWdTcmM6IFwiLi4vYXNzZXRzL3N2Zy9zY2FsZXMuc3ZnXCIsXHJcbiAgICAgIGltZ0FsdDogXCJzY2FsZXMtaW1nXCIsXHJcbiAgICAgIHZhbGlkYXRlOiBpc1dlaWdodFZhbGlkLFxyXG4gICAgICB1bml0czogdGhpcy51bml0c1dlaWdodCxcclxuICAgICAgY2xhc3NOYW1lVW5pdHM6IGAke3RoaXMubWFpbkNsYXNzfV9fdW5pdHMtd2VpZ2h0YCxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGlucHV0QmxvY2tUd286IEhUTUxFbGVtZW50ID0gSW5wdXRJbWcoe1xyXG4gICAgICBtYWluQ2xhc3M6IHRoaXMubWFpbkNsYXNzU2Vjb25kLFxyXG4gICAgICBjbGFzc05hbWU6IFtdLFxyXG4gICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgaWQ6IFwiaGVpZ2h0XCIsXHJcbiAgICAgICAgbmFtZTogXCJoZWlnaHRcIixcclxuICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxyXG4gICAgICAgIHBsYWNlaG9sZGVyOiBcIkVudGVyIGhlaWdodFwiLFxyXG4gICAgICAgIHJlcXVpcmVkOiBcInRydWVcIixcclxuICAgICAgfSxcclxuICAgICAgaW1nU3JjOiBcIi4uL2Fzc2V0cy9zdmcvaGVpZ2h0LnN2Z1wiLFxyXG4gICAgICBpbWdBbHQ6IFwiaGVpZ2h0LWltZ1wiLFxyXG4gICAgICB2YWxpZGF0ZTogaXNIZWlnaHRWYWxpZCxcclxuICAgICAgdW5pdHM6IHRoaXMudW5pdHNIZWlnaHQsXHJcbiAgICAgIGNsYXNzTmFtZVVuaXRzOiBgJHt0aGlzLm1haW5DbGFzc31fX3VuaXRzLWhlaWdodGAsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBbaW5wdXRCbG9ja09uZSwgaW5wdXRCbG9ja1R3b107XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uQ2hhbmdlSGFuZGxlckJ0blJhZGlvKGU6IEV2ZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCBpbnB1dDogSFRNTElucHV0RWxlbWVudCA9IGUuY3VycmVudFRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgY29uc3QgdmFsdWU6IHN0cmluZyA9IGlucHV0LnZhbHVlO1xyXG4gICAgY29uc3QgdW5pdHNXZWlnaHQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLnNsaWRlci1xdWVzdGlvbnNfX3VuaXRzLXdlaWdodFwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgdW5pdHNIZWlnaHQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLnNsaWRlci1xdWVzdGlvbnNfX3VuaXRzLWhlaWdodFwiXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh1bml0c1dlaWdodCAmJiB1bml0c0hlaWdodCAmJiB2YWx1ZSA9PT0gXCJMYnMtaW5jaGVzXCIpIHtcclxuICAgICAgdW5pdHNXZWlnaHQudGV4dENvbnRlbnQgPSBcIkxic1wiO1xyXG4gICAgICB1bml0c0hlaWdodC50ZXh0Q29udGVudCA9IFwiaW5jaGVzXCI7XHJcbiAgICB9XHJcbiAgICBpZiAodW5pdHNXZWlnaHQgJiYgdW5pdHNIZWlnaHQgJiYgdmFsdWUgPT09IFwia2ctY21cIikge1xyXG4gICAgICB1bml0c1dlaWdodC50ZXh0Q29udGVudCA9IFwia2dcIjtcclxuICAgICAgdW5pdHNIZWlnaHQudGV4dENvbnRlbnQgPSBcImNtXCI7XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbnB1dFdyYXA6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLnNsaWRlLWluZm9fX2lucHV0LXdyYXBcIlxyXG4gICAgKTtcclxuICAgIGlmIChpbnB1dFdyYXApIHtcclxuICAgICAgdGhpcy51bml0c0hlaWdodCA9IHRoaXMudW5pdHNIZWlnaHQgPT09IFwiY21cIiA/IFwiaW5jaGVzXCIgOiBcImNtXCI7XHJcbiAgICAgIHRoaXMudW5pdHNXZWlnaHQgPSB0aGlzLnVuaXRzV2VpZ2h0ID09PSBcImtnXCIgPyBcIkxic1wiIDogXCJrZ1wiO1xyXG4gICAgICBpbnB1dFdyYXAudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgICBjb25zdCBpbnB1dHNCbG9jazogSFRNTEVsZW1lbnRbXSA9IHRoaXMuY3JlYXRlSW5wdXRzQmxvY2soKTtcclxuXHJcbiAgICAgIGlucHV0V3JhcC5hcHBlbmQoLi4uaW5wdXRzQmxvY2spO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVTbGlkZUFib3V0TWVCdG5CbG9jaygpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBidG5XcmFwT25lOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3NTZWNvbmR9X19idG4td3JhcGBcclxuICAgICk7XHJcbiAgICBjb25zdCBtZXNzYWdlT25lOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJzcGFuXCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzU2Vjb25kfV9fbWVzc2FnZWBcclxuICAgICk7XHJcbiAgICBjb25zdCBidG5PbmU6IEhUTUxFbGVtZW50W10gPSBCdXR0b25SYWRpbyhcclxuICAgICAge1xyXG4gICAgICAgIHR5cGU6IFwicmFkaW9cIixcclxuICAgICAgICBpZDogXCJrZy1jbVwiLFxyXG4gICAgICAgIG5hbWU6IFwidW5pdHNcIixcclxuICAgICAgICBjbGFzc05hbWU6IGAke3RoaXMubWFpbkNsYXNzU2Vjb25kfV9fYnRuYCxcclxuICAgICAgICB2YWx1ZTogXCJrZy1jbVwiLFxyXG4gICAgICAgIGNoZWNrZWQ6IFwiY2hlY2tlZFwiLFxyXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlSGFuZGxlckJ0blJhZGlvLmJpbmQodGhpcyksXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBmb3JOYW1lOiBcImtnLWNtXCIsXHJcbiAgICAgICAgY29udGVudDogXCJrZy9jbVwiLFxyXG4gICAgICAgIGNsYXNzTmFtZTogYCR7dGhpcy5tYWluQ2xhc3NTZWNvbmR9X19idG4tdGl0bGVgLFxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGJ0bldyYXBPbmUuYXBwZW5kKC4uLmJ0bk9uZSwgbWVzc2FnZU9uZSk7XHJcbiAgICBjb25zdCBidG5XcmFwVHdvOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3NTZWNvbmR9X19idG4td3JhcGBcclxuICAgICk7XHJcbiAgICBjb25zdCBtZXNzYWdlVHdvOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJzcGFuXCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzU2Vjb25kfV9fbWVzc2FnZWBcclxuICAgICk7XHJcbiAgICBjb25zdCBidG5Ud286IEhUTUxFbGVtZW50W10gPSBCdXR0b25SYWRpbyhcclxuICAgICAge1xyXG4gICAgICAgIHR5cGU6IFwicmFkaW9cIixcclxuICAgICAgICBpZDogXCJMYnMtaW5jaGVzXCIsXHJcbiAgICAgICAgbmFtZTogXCJ1bml0c1wiLFxyXG4gICAgICAgIGNsYXNzTmFtZTogYCR7dGhpcy5tYWluQ2xhc3NTZWNvbmR9X19idG5gLFxyXG4gICAgICAgIHZhbHVlOiBcIkxicy1pbmNoZXNcIixcclxuICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZUhhbmRsZXJCdG5SYWRpby5iaW5kKHRoaXMpLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgZm9yTmFtZTogXCJMYnMtaW5jaGVzXCIsXHJcbiAgICAgICAgY29udGVudDogXCJMYnMvaW5jaGVzXCIsXHJcbiAgICAgICAgY2xhc3NOYW1lOiBgJHt0aGlzLm1haW5DbGFzc1NlY29uZH1fX2J0bi10aXRsZWAsXHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgICBidG5XcmFwVHdvLmFwcGVuZCguLi5idG5Ud28sIG1lc3NhZ2VUd28pO1xyXG4gICAgY29uc3QgYnRuQmxvY2s6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc1NlY29uZH1fX2J1dHRvbnNgXHJcbiAgICApO1xyXG4gICAgYnRuQmxvY2suYXBwZW5kKGJ0bldyYXBPbmUsIGJ0bldyYXBUd28pO1xyXG4gICAgcmV0dXJuIGJ0bkJsb2NrO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVCdG5XcmFwKFxyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgbmFtZUJ0bjogc3RyaW5nW10sXHJcbiAgICB2YWx1ZXM6IHN0cmluZ1tdXHJcbiAgKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgYnRuV3JhcDogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fYnV0dG9uc2BcclxuICAgICk7XHJcbiAgICB2YWx1ZXMuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XHJcbiAgICAgIGNvbnN0IGJ0blJhZGlvOiBJQnRuUmFkaW9bXSA9IEJ1dHRvblJhZGlvKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHR5cGU6IFwicmFkaW9cIixcclxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICAgIGlkOiBuYW1lICsgaW5kZXgsXHJcbiAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgY2xhc3NOYW1lOiBgJHt0aGlzLm1haW5DbGFzc31fX2lucHV0YCxcclxuICAgICAgICAgIGNoZWNrZWQ6IGluZGV4ID09PSAxID8gXCJjaGVja2VkXCIgOiBcIlwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZm9yTmFtZTogbmFtZSArIGluZGV4LFxyXG4gICAgICAgICAgY29udGVudDogbmFtZUJ0bltpbmRleF0sXHJcbiAgICAgICAgICBjbGFzc05hbWU6IGAke3RoaXMubWFpbkNsYXNzfV9fbGFiZWxgLFxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgICAgYnRuV3JhcC5hcHBlbmQoLi4uYnRuUmFkaW8pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gYnRuV3JhcDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQnRuU3VibWl0Rm9ybSgpOiBIVE1MQnV0dG9uRWxlbWVudCB7XHJcbiAgICBjb25zdCBidG46IEhUTUxCdXR0b25FbGVtZW50ID0gQnV0dG9uKHtcclxuICAgICAgY29udGVudDogXCJTdWJtaXRcIixcclxuICAgICAgY2xhc3NOYW1lOiBbYCR7dGhpcy5tYWluQ2xhc3N9X19idG4tc3VibWl0YCwgXCJidG5cIl0sXHJcbiAgICAgIHR5cGU6IFwic3VibWl0XCIsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBidG47XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVNsaWRlclBvaW50cygpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBtYWluQ2xhc3MgPSBcInNsaWRlci1wb2ludHNcIjtcclxuICAgIGNvbnN0IHNsaWRlclBvaW50czogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke21haW5DbGFzc31gXHJcbiAgICApO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgY29uc3Qgc2xpZGVySXRlbTogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVNsaWRlclBvaW50c0VsZW1lbnRzKFxyXG4gICAgICAgIG1haW5DbGFzc1xyXG4gICAgICApO1xyXG4gICAgICBzbGlkZXJJdGVtLm9uY2xpY2sgPSB0aGlzLnNsaWRlcj8uZ29Ub1NsaWRlKGkpO1xyXG4gICAgICBzbGlkZXJQb2ludHMuYXBwZW5kKHNsaWRlckl0ZW0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNsaWRlclBvaW50cztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlU2xpZGVyUG9pbnRzRWxlbWVudHMoY2xhc3NOYW1lOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBzbGlkZXJJdGVtOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7Y2xhc3NOYW1lfV9faXRlbWBcclxuICAgICk7XHJcbiAgICByZXR1cm4gc2xpZGVySXRlbTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgc2VuZEluZm9Vc2VyKFxyXG4gICAgZGF0YUluZm9Vc2VyOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XHJcbiAgKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCByZXM6XHJcbiAgICAgIHwgSUFuc3dlckFkZFVzZXJJbmZvXHJcbiAgICAgIHwgdW5kZWZpbmVkID0gYXdhaXQgdGhpcy5hdXRob3JpemF0aW9uLmNyZWF0ZVVzZXJJbmZvKGRhdGFJbmZvVXNlcik7XHJcblxyXG4gICAgaWYgKCFyZXMpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlcy5lcnJvcnMgJiYgcmVzLm1lc3NhZ2UpIHtcclxuICAgICAgdGhpcy5FcnJvckhhbmRsZXIocmVzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IG1lc3NhZ2VFbDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBgLiR7dGhpcy5tYWluQ2xhc3N9X19tZXNzYWdlLWZvcm1gXHJcbiAgICAgICk7XHJcbiAgICAgIGlmIChtZXNzYWdlRWwpIHtcclxuICAgICAgICBtZXNzYWdlRWwudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgICAgIG1lc3NhZ2VFbC5jbGFzc0xpc3QucmVtb3ZlKFwiZXJyb3JcIik7XHJcbiAgICAgIH1cclxuICAgICAgb25DbG9zZU1vZGFsKFwibW9kYWwtcXVlc3Rpb25zXCIpKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIEVycm9ySGFuZGxlcihyZXM6IElBbnN3ZXJBZGRVc2VySW5mbyk6IHZvaWQge1xyXG4gICAgY29uc3QgaW5wdXRzOiBOb2RlTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzU2Vjb25kfV9faW5wdXRgXHJcbiAgICApO1xyXG4gICAgY29uc3QgYXJySW5wdXRzOiBIVE1MRWxlbWVudFtdID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoaW5wdXRzKTtcclxuXHJcbiAgICBhcnJJbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZChcImVycm9yXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbWVzc2FnZUVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgLiR7dGhpcy5tYWluQ2xhc3N9X19tZXNzYWdlLWZvcm1gXHJcbiAgICApO1xyXG4gICAgaWYgKCFtZXNzYWdlRWwpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbWVzc2FnZUVsLnRleHRDb250ZW50ID0gcmVzLm1lc3NhZ2U7XHJcbiAgICBtZXNzYWdlRWwuY2xhc3NMaXN0LmFkZChcImVycm9yXCIpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTW9kYWxRdWVzdGlvbnM7XHJcbiIsImV4cG9ydCBpbnRlcmZhY2UgSUZvcm1TbGlkZXIge1xyXG4gIG5leHRTbGlkZTogKCkgPT4gdm9pZDtcclxuICBwcmV2U2xpZGU6ICgpID0+IHZvaWQ7XHJcbiAgZ29Ub1NsaWRlOiAoY3VycmVudFNsaWRlTnVtOiBudW1iZXIpID0+ICgpID0+IHZvaWQ7XHJcbiAgc2V0Q29udGFpbmVyOiAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHZvaWQ7XHJcbiAgc2V0UHJldkJ0bjogKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB2b2lkO1xyXG4gIHNldE5leHRCdG46IChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gdm9pZDtcclxuICBzZXRQb2ludGVyQ29udGFpbmVyOiAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUZvcm1TbGlkZXJQYXJhbXMge1xyXG4gIHNsaWRlQ291bnQ6IG51bWJlcjtcclxuICBodG1Db250YWluZXI/OiBIVE1MRWxlbWVudDtcclxuICBwcmV2QnRuPzogSFRNTEVsZW1lbnQ7XHJcbiAgbmV4dEJ0bj86IEhUTUxFbGVtZW50O1xyXG4gIHBvaW50Q29udGFpbmVyPzogSFRNTEVsZW1lbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JtU2xpZGVyKHtcclxuICBzbGlkZUNvdW50LFxyXG4gIGh0bUNvbnRhaW5lcixcclxuICBwcmV2QnRuLFxyXG4gIG5leHRCdG4sXHJcbiAgcG9pbnRDb250YWluZXIsXHJcbn06IElGb3JtU2xpZGVyUGFyYW1zKTogSUZvcm1TbGlkZXIge1xyXG4gIGxldCBzbGlkZU51bSA9IDA7XHJcblxyXG4gIGNvbnN0IG1vdmVTbGlkZXIgPSAoaW5kZXg6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgaWYgKCFodG1Db250YWluZXIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaHRtQ29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKC0ke2luZGV4ICogMTAwfSUpYDtcclxuICAgIGNoZWNrUHJldkJ1dHRvbigpO1xyXG4gICAgY2hlY2tOZXh0QnV0dG9uKCk7XHJcbiAgICBjaGFuZ2VBY3RpdmVQb2ludHMoKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBjaGFuZ2VBY3RpdmVQb2ludHMgPSAoKTogdm9pZCA9PiB7XHJcbiAgICBpZiAoIXBvaW50Q29udGFpbmVyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwb2ludHM6IEhUTUxDb2xsZWN0aW9uID0gcG9pbnRDb250YWluZXIuY2hpbGRyZW47XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBmb3IgKGNvbnN0IHBvaW50IG9mIHBvaW50cykge1xyXG4gICAgICB1cGRhdGVQb2ludENsYXNzKHBvaW50LCBpKTtcclxuICAgICAgaSsrO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHVwZGF0ZVBvaW50Q2xhc3MgPSAocG9pbnQ6IEVsZW1lbnQsIG51bTogbnVtYmVyKTogdm9pZCA9PiB7XHJcbiAgICBpZiAobnVtID09PSBzbGlkZU51bSkge1xyXG4gICAgICBwb2ludC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcG9pbnQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBjaGVja1ByZXZCdXR0b24gPSAoKTogdm9pZCA9PiB7XHJcbiAgICBpZiAoIXByZXZCdG4pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHNsaWRlTnVtID09PSAwKSB7XHJcbiAgICAgIHByZXZCdG4uY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcHJldkJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgY2hlY2tOZXh0QnV0dG9uID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgaWYgKCFuZXh0QnRuKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChpc0xhc3RTbGlkZSgpKSB7XHJcbiAgICAgIG5leHRCdG4uY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV4dEJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaXNMYXN0U2xpZGUgPSAoKTogYm9vbGVhbiA9PiB7XHJcbiAgICByZXR1cm4gc2xpZGVOdW0gKyAxID49IHNsaWRlQ291bnQ7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgbmV4dFNsaWRlID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgaWYgKGlzTGFzdFNsaWRlKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc2xpZGVOdW0gKz0gMTtcclxuICAgIG1vdmVTbGlkZXIoc2xpZGVOdW0pO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHByZXZTbGlkZSA9ICgpOiB2b2lkID0+IHtcclxuICAgIGlmIChzbGlkZU51bSAtIDEgPCAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHNsaWRlTnVtIC09IDE7XHJcbiAgICBtb3ZlU2xpZGVyKHNsaWRlTnVtKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBnb1RvU2xpZGUgPSAoY3VycmVudFNsaWRlTnVtOiBudW1iZXIpOiAoKCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgcmV0dXJuICgpOiB2b2lkID0+IHtcclxuICAgICAgaWYgKHNsaWRlTnVtIDwgMCB8fCBzbGlkZU51bSA+PSBzbGlkZUNvdW50KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzbGlkZU51bSA9IGN1cnJlbnRTbGlkZU51bTtcclxuICAgICAgbW92ZVNsaWRlcihzbGlkZU51bSk7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNldENvbnRhaW5lciA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQgPT4ge1xyXG4gICAgaHRtQ29udGFpbmVyID0gZWxlbWVudDtcclxuICB9O1xyXG5cclxuICBjb25zdCBzZXRQcmV2QnRuID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCA9PiB7XHJcbiAgICBwcmV2QnRuID0gZWxlbWVudDtcclxuICAgIGNoZWNrUHJldkJ1dHRvbigpO1xyXG4gIH07XHJcbiAgY29uc3Qgc2V0TmV4dEJ0biA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQgPT4ge1xyXG4gICAgbmV4dEJ0biA9IGVsZW1lbnQ7XHJcbiAgICBjaGVja05leHRCdXR0b24oKTtcclxuICB9O1xyXG4gIGNvbnN0IHNldFBvaW50ZXJDb250YWluZXIgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkID0+IHtcclxuICAgIHBvaW50Q29udGFpbmVyID0gZWxlbWVudDtcclxuICAgIGNoYW5nZUFjdGl2ZVBvaW50cygpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBuZXh0U2xpZGUsXHJcbiAgICBwcmV2U2xpZGUsXHJcbiAgICBnb1RvU2xpZGUsXHJcbiAgICBzZXRDb250YWluZXIsXHJcbiAgICBzZXRQcmV2QnRuLFxyXG4gICAgc2V0TmV4dEJ0bixcclxuICAgIHNldFBvaW50ZXJDb250YWluZXIsXHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgXCIuL3Nhc3Mvc3R5bGUuc2Nzc1wiO1xyXG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuL2NvbXBvbmVudHMvaGVhZGVyXCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vY29tcG9uZW50cy9mb290ZXJcIjtcclxuaW1wb3J0IE1vZGFsU2lnbkluIGZyb20gXCIuL2NvbXBvbmVudHMvbW9kYWxTaWduSW5cIjtcclxuaW1wb3J0IE1vZGFsU2lnblVwIGZyb20gXCIuL2NvbXBvbmVudHMvbW9kYWxTaWduVXBcIjtcclxuaW1wb3J0IE1vZGFsUXVlc3Rpb25zIGZyb20gXCIuL2NvbXBvbmVudHMvbW9kYWxRdWVzdGlvbnNcIjtcclxuaW1wb3J0IFByZWxvYWRlciBmcm9tIFwiLi9jb21wb25lbnRzL3ByZWxvYWRlclwiO1xyXG5pbXBvcnQgcm91dGVyIGZyb20gXCIuL2NvbXBvbmVudHMvcm91dGVyQ29tcG9uZW50XCI7XHJcblxyXG5pbXBvcnQge1xyXG4gIElIZWFkZXIsXHJcbiAgSU1vZGFsU2lnbkluLFxyXG4gIElNb2RhbFNpZ25VcCxcclxuICBJTW9kYWxRdWVzdGlvbnMsXHJcbiAgSUZvb3RlcixcclxuICBJUHJlbG9hZGVyLFxyXG59IGZyb20gXCIuL3R5cGVzL2luZGV4XCI7XHJcblxyXG5jb25zdCBwcmVsb2FkZXI6IElQcmVsb2FkZXIgPSBuZXcgUHJlbG9hZGVyKCk7XHJcbnByZWxvYWRlci5kcmF3KCk7XHJcblxyXG5jb25zdCBoZWFkZXI6IElIZWFkZXIgPSBuZXcgSGVhZGVyKCk7XHJcbmhlYWRlci5kcmF3KCk7XHJcblxyXG5jb25zdCBmb290ZXI6IElGb290ZXIgPSBuZXcgRm9vdGVyKCk7XHJcbmZvb3Rlci5kcmF3KCk7XHJcblxyXG5jb25zdCBtb2RhbFNpZ25JbjogSU1vZGFsU2lnbkluID0gbmV3IE1vZGFsU2lnbkluKCk7XHJcbm1vZGFsU2lnbkluLmRyYXcoKTtcclxuXHJcbmNvbnN0IG1vZGFsU2lnblVwOiBJTW9kYWxTaWduVXAgPSBuZXcgTW9kYWxTaWduVXAoKTtcclxubW9kYWxTaWduVXAuZHJhdygpO1xyXG5cclxuY29uc3QgbW9kYWxRdWVzdGlvbnM6IElNb2RhbFF1ZXN0aW9ucyA9IG5ldyBNb2RhbFF1ZXN0aW9ucygpO1xyXG5tb2RhbFF1ZXN0aW9ucy5kcmF3KCk7XHJcblxyXG5yb3V0ZXIuaW5pdCgpO1xyXG4iLCJpbXBvcnQgVGVtcGxhdGUgZnJvbSBcIi4uL3RlbXBsYXRlcy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBJVGVtcGxhdGUgfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZWxvYWRlciB7XHJcbiAgdGVtcGxhdGU6IElUZW1wbGF0ZTtcclxuICBtYWluQ2xhc3M6IHN0cmluZztcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMudGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoKTtcclxuICAgIHRoaXMubWFpbkNsYXNzID0gXCJwcmVsb2FkZXJcIjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkcmF3KCk6IHZvaWQge1xyXG4gICAgY29uc3QgcHJlbG9hZGVyOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlUHJlbG9hZGVyKCk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJsb2FkZWRcIik7XHJcbiAgICBkb2N1bWVudC5ib2R5LnByZXBlbmQocHJlbG9hZGVyKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlUHJlbG9hZGVyKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHByZWxvYWRlcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfWBcclxuICAgICk7XHJcbiAgICBjb25zdCByb3c6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVSb3coKTtcclxuICAgIHByZWxvYWRlci5hcHBlbmQocm93KTtcclxuICAgIHJldHVybiBwcmVsb2FkZXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVJvdygpIHtcclxuICAgIGNvbnN0IHJvdzogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fcm93YFxyXG4gICAgKTtcclxuICAgIHJvdy5hcHBlbmQodGhpcy5jcmVhdGVJdGVtKCksIHRoaXMuY3JlYXRlSXRlbSgpKTtcclxuICAgIHJldHVybiByb3c7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUl0ZW0oKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgaXRlbTogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9faXRlbWBcclxuICAgICk7XHJcbiAgICByZXR1cm4gaXRlbTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFRlbXBsYXRlIGZyb20gXCIuLi90ZW1wbGF0ZXMvdGVtcGxhdGVcIjtcclxuaW1wb3J0IHsgSVRlbXBsYXRlIH0gZnJvbSBcIi4uL3R5cGVzL2luZGV4XCI7XHJcblxyXG5jbGFzcyBGb290ZXIge1xyXG4gIHRlbXBsYXRlOiBJVGVtcGxhdGU7XHJcbiAgZm9vdGVyOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLmZvb3RlciA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcImZvb3RlclwiLCBcImZvb3RlclwiKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlR2l0SHVicygpOiB2b2lkIHtcclxuICAgIGNvbnN0IGdpdEh1YnM6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICBcImZvb3Rlcl9faHVic1wiXHJcbiAgICApO1xyXG4gICAgY29uc3QgZmlyc3RMaW5rOiBIVE1MQW5jaG9yRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlTGluayhcclxuICAgICAgXCJmb290ZXJfX2h1YnMtbGlua1wiLFxyXG4gICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9vb2xlbmthem9sb3RcIlxyXG4gICAgKTtcclxuICAgIGZpcnN0TGluay50YXJnZXQgPSBcIl9ibGFua1wiO1xyXG4gICAgZmlyc3RMaW5rLnRleHRDb250ZW50ID0gXCJvb2xlbmthem9sb3RcIjtcclxuICAgIGNvbnN0IHNlY29uZExpbms6IEhUTUxBbmNob3JFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVMaW5rKFxyXG4gICAgICBcImZvb3Rlcl9faHVicy1saW5rXCIsXHJcbiAgICAgIFwiaHR0cHM6Ly9naXRodWIuY29tL2FsaXNhdG9ua3NcIlxyXG4gICAgKTtcclxuICAgIHNlY29uZExpbmsudGFyZ2V0ID0gXCJfYmxhbmtcIjtcclxuICAgIHNlY29uZExpbmsudGV4dENvbnRlbnQgPSBcImFsaXNhdG9ua3NcIjtcclxuICAgIGNvbnN0IHRoaXJkTGluazogSFRNTEFuY2hvckVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUxpbmsoXHJcbiAgICAgIFwiZm9vdGVyX19odWJzLWxpbmtcIixcclxuICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vc3ZldGlrLWtcIlxyXG4gICAgKTtcclxuICAgIHRoaXJkTGluay50YXJnZXQgPSBcIl9ibGFua1wiO1xyXG4gICAgdGhpcmRMaW5rLnRleHRDb250ZW50ID0gXCJzdmV0aWsta1wiO1xyXG4gICAgZ2l0SHVicy5hcHBlbmQoZmlyc3RMaW5rLCBzZWNvbmRMaW5rLCB0aGlyZExpbmspO1xyXG4gICAgdGhpcy5mb290ZXIuYXBwZW5kKGdpdEh1YnMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRyYXcoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgdGhpcy5mb290ZXIudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgdGhpcy5jcmVhdGVHaXRIdWJzKCk7XHJcblxyXG4gICAgY29uc3QgeWVhcjogSFRNTEVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoXHJcbiAgICAgIFwiZGl2XCIsXHJcbiAgICAgIFwiZm9vdGVyX195ZWFyXCIsXHJcbiAgICAgIFwiMjAyM1wiXHJcbiAgICApO1xyXG4gICAgdGhpcy5mb290ZXIuYXBwZW5kKHllYXIpO1xyXG5cclxuICAgIGNvbnN0IHNjaG9vbDogSFRNTEFuY2hvckVsZW1lbnQgPSB0aGlzLnRlbXBsYXRlLmNyZWF0ZUxpbmsoXHJcbiAgICAgIFwiZm9vdGVyX19zY2hvb2xcIixcclxuICAgICAgXCJodHRwczovL3JzLnNjaG9vbC9qcy9cIlxyXG4gICAgKTtcclxuICAgIHNjaG9vbC50YXJnZXQgPSBcIl9ibGFua1wiO1xyXG5cclxuICAgIHRoaXMuZm9vdGVyLmFwcGVuZChzY2hvb2wpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmQodGhpcy5mb290ZXIpO1xyXG4gICAgcmV0dXJuIHRoaXMuZm9vdGVyO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyO1xyXG4iLCJpbXBvcnQgTW9kYWwgZnJvbSBcIi4uL2NvbXBvbmVudHMvbW9kYWxcIjtcclxuaW1wb3J0IFRlbXBsYXRlIGZyb20gXCIuLi90ZW1wbGF0ZXMvdGVtcGxhdGVcIjtcclxuaW1wb3J0IHtcclxuICBJTW9kYWwsXHJcbiAgSVRlbXBsYXRlLFxyXG4gIElBdXRob3JpemF0aW9uLFxyXG4gIElBbnN3ZXJBdXRoLFxyXG4gIElIZWFkZXIsXHJcbiAgSU1vZGFsUXVlc3Rpb25zLFxyXG59IGZyb20gXCIuLi90eXBlcy9pbmRleFwiO1xyXG5pbXBvcnQgeyBJbnB1dEljb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JbnB1dEljb25cIjtcclxuaW1wb3J0IHsgUGFzc3dvcmRJbnB1dCB9IGZyb20gXCIuLi9jb21wb25lbnRzL1Bhc3N3b3JkSW5wdXRcIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcclxuaW1wb3J0IHsgb25PcGVuTW9kYWwgfSBmcm9tIFwiLi4vdXRpbHMvY29tcG9uZW50LXV0aWxzXCI7XHJcbmltcG9ydCB7IGlzRW1haWxWYWxpZCB9IGZyb20gXCIuLi91dGlscy92YWxpZGF0ZVwiO1xyXG5pbXBvcnQgQXV0aG9yaXphdGlvbiBmcm9tIFwiLi4vdXRpbHMvYXV0aC5yb3V0ZXNcIjtcclxuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9oZWFkZXJcIjtcclxuaW1wb3J0IHsgc2V0VXNlckxvY2FsU3RvcmFnZSB9IGZyb20gXCIuLi91dGlscy9hdXRoXCI7XHJcbmltcG9ydCBNb2RhbFF1ZXN0aW9ucyBmcm9tIFwiLi4vY29tcG9uZW50cy9tb2RhbFF1ZXN0aW9uc1wiO1xyXG5cclxuY2xhc3MgTW9kYWxTaWduVXAge1xyXG4gIHRlbXBsYXRlOiBJVGVtcGxhdGU7XHJcbiAgbW9kYWw6IElNb2RhbDtcclxuICBtYWluQ2xhc3M6IHN0cmluZztcclxuICBhdXRob3JpemF0aW9uOiBJQXV0aG9yaXphdGlvbjtcclxuICBoZWFkZXI6IElIZWFkZXI7XHJcbiAgbW9kYWxRdWVzdGlvbnM6IElNb2RhbFF1ZXN0aW9ucztcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLm1vZGFsID0gbmV3IE1vZGFsKCk7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLm1haW5DbGFzcyA9IFwicmVnaXN0cmF0aW9uLWZvcm1cIjtcclxuICAgIHRoaXMuYXV0aG9yaXphdGlvbiA9IG5ldyBBdXRob3JpemF0aW9uKCk7XHJcbiAgICB0aGlzLmhlYWRlciA9IG5ldyBIZWFkZXIoKTtcclxuICAgIHRoaXMubW9kYWxRdWVzdGlvbnMgPSBuZXcgTW9kYWxRdWVzdGlvbnMoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkcmF3KCk6IHZvaWQge1xyXG4gICAgY29uc3QgcmVnaXN0cmF0aW9uRm9ybTogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVJlZ2lzdHJhdGlvbkZvcm0oKTtcclxuICAgIGNvbnN0IG1vZGFsOiBIVE1MRWxlbWVudCA9IHRoaXMubW9kYWwuY3JlYXRlTW9kYWwoXHJcbiAgICAgIFwibW9kYWwtc2lnbi11cFwiLFxyXG4gICAgICByZWdpc3RyYXRpb25Gb3JtLFxyXG4gICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmQobW9kYWwpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVSZWdpc3RyYXRpb25Gb3JtKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHJlZ2lzdHJhdGlvbkZvcm06IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcImRpdlwiLFxyXG4gICAgICB0aGlzLm1haW5DbGFzc1xyXG4gICAgKTtcclxuICAgIGNvbnN0IHRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlVGl0bGUoKTtcclxuICAgIGNvbnN0IGZvcm06IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVGb3JtKCk7XHJcbiAgICBjb25zdCBxdWVzdGlvbjogSFRNTEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVF1ZXN0aW9uKCk7XHJcbiAgICByZWdpc3RyYXRpb25Gb3JtLmFwcGVuZCh0aXRsZSwgZm9ybSwgcXVlc3Rpb24pO1xyXG4gICAgcmV0dXJuIHJlZ2lzdHJhdGlvbkZvcm07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVRpdGxlKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHRpdGxlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X190aXRsZWAsXHJcbiAgICAgIFwiV2VsY29tZSB0byBXb21lbiBXb3Jrb3V0c1wiXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHRpdGxlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVGb3JtKCkge1xyXG4gICAgY29uc3QgZm9ybTogSFRNTEZvcm1FbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVGb3JtKFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX2Zvcm1gLFxyXG4gICAgICBcIi9cIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGlucHV0QmxvY2tFbWFpbDogSFRNTEVsZW1lbnQgPSBJbnB1dEljb24oe1xyXG4gICAgICBjbGFzc05hbWU6IFtdLFxyXG4gICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXHJcbiAgICAgICAgcGxhY2Vob2xkZXI6IFwiRW50ZXIgeW91ciBlbWFpbFwiLFxyXG4gICAgICAgIG5hbWU6IFwiZW1haWxcIixcclxuICAgICAgICByZXF1aXJlZDogXCJ0cnVlXCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIGNsYXNzTmFtZUljb246IFwiaWNvbi1tYWlsX291dGxpbmVcIixcclxuICAgICAgdmFsaWRhdGU6IGlzRW1haWxWYWxpZCxcclxuICAgIH0pO1xyXG4gICAgY29uc3QgaW5wdXRCbG9ja1Bhc3N3b3JkOiBIVE1MRWxlbWVudCA9IFBhc3N3b3JkSW5wdXQoKTtcclxuICAgIGNvbnN0IGJ0bldyYXA6IEhUTUxFbGVtZW50ID0gdGhpcy5jcmVhdGVCdG5XcmFwKCk7XHJcbiAgICBjb25zdCBtZXNzYWdlOiBIVE1MRWxlbWVudCA9IHRoaXMuY3JlYXRlTWVzc2FnZUVsKCk7XHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBjb25zdCBmb3JtRGF0YTogRm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XHJcbiAgICAgIGNvbnN0IHZhbHVlRW1haWw6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGZvcm1EYXRhLmdldChcImVtYWlsXCIpPy50b1N0cmluZygpO1xyXG4gICAgICBjb25zdCB2YWx1ZVBzdzogc3RyaW5nIHwgdW5kZWZpbmVkID0gZm9ybURhdGEuZ2V0KFwicGFzc3dvcmRcIik/LnRvU3RyaW5nKCk7XHJcbiAgICAgIGlmICghdmFsdWVFbWFpbCB8fCAhdmFsdWVQc3cpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zZW5kUmVnaXN0cmF0aW9uKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGVtYWlsOiB2YWx1ZUVtYWlsLFxyXG4gICAgICAgICAgcGFzc3dvcmQ6IHZhbHVlUHN3LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWVzc2FnZVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZm9ybS5hcHBlbmQoaW5wdXRCbG9ja0VtYWlsLCBpbnB1dEJsb2NrUGFzc3dvcmQsIG1lc3NhZ2UsIGJ0bldyYXApO1xyXG4gICAgcmV0dXJuIGZvcm07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZU1lc3NhZ2VFbCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBtZXNzYWdlOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJzcGFuXCIsXHJcbiAgICAgIGAke3RoaXMubWFpbkNsYXNzfV9fbWVzc2FnZWBcclxuICAgICk7XHJcbiAgICByZXR1cm4gbWVzc2FnZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQnRuV3JhcCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBtYWluQ2xhc3MgPSBcImJ0bi13cmFwXCI7XHJcbiAgICBjb25zdCBidG5XcmFwOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcImRpdlwiLCBtYWluQ2xhc3MpO1xyXG4gICAgY29uc3QgYnRuOiBIVE1MQnV0dG9uRWxlbWVudCA9IEJ1dHRvbih7XHJcbiAgICAgIGNvbnRlbnQ6IFwiU2lnbiBVcFwiLFxyXG4gICAgICBjbGFzc05hbWU6IFtgJHttYWluQ2xhc3N9X19idG5gXSxcclxuICAgICAgdHlwZTogXCJzdWJtaXRcIixcclxuICAgIH0pO1xyXG4gICAgYnRuV3JhcC5hcHBlbmQoYnRuKTtcclxuICAgIHJldHVybiBidG5XcmFwO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBzZW5kUmVnaXN0cmF0aW9uKFxyXG4gICAgZGF0YUlucHV0QXV0aDogeyBlbWFpbDogc3RyaW5nOyBwYXNzd29yZDogc3RyaW5nIH0sXHJcbiAgICBtZXNzYWdlRWw6IEhUTUxFbGVtZW50XHJcbiAgKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCByZXM6IElBbnN3ZXJBdXRoIHwgdW5kZWZpbmVkID0gYXdhaXQgdGhpcy5hdXRob3JpemF0aW9uLnJlZ2lzdHJhdGlvbihcclxuICAgICAgZGF0YUlucHV0QXV0aFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoIXJlcykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAocmVzLnRva2VuICYmIHJlcy51c2VySWQpIHtcclxuICAgICAgc2V0VXNlckxvY2FsU3RvcmFnZSh7IHRva2VuOiByZXMudG9rZW4sIHVzZXJJZDogcmVzLnVzZXJJZCB9KTtcclxuICAgICAgbWVzc2FnZUVsLnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgICAgbWVzc2FnZUVsLmNsYXNzTGlzdC5yZW1vdmUoXCJlcnJvclwiKTtcclxuICAgICAgdGhpcy5oZWFkZXIuZHJhdygpO1xyXG4gICAgICBvbk9wZW5Nb2RhbChcIm1vZGFsLXF1ZXN0aW9uc1wiLCBcIm1vZGFsLXNpZ24tdXBcIikoKTtcclxuICAgIH1cclxuICAgIGlmIChyZXMubWVzc2FnZSkge1xyXG4gICAgICB0aGlzLkVycm9ySGFuZGxlcihyZXMsIG1lc3NhZ2VFbCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIEVycm9ySGFuZGxlcihyZXM6IElBbnN3ZXJBdXRoLCBtZXNzYWdlRWw6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBjb25zdCBpbnB1dHM6IE5vZGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgICAgXCIucmVnaXN0cmF0aW9uLWZvcm0gLmlucHV0X19pdGVtXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBhcnJJbnB1dHM6IEhUTUxFbGVtZW50W10gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChpbnB1dHMpO1xyXG4gICAgYXJySW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoXCJlcnJvclwiKTtcclxuICAgIH0pO1xyXG4gICAgbWVzc2FnZUVsLmNsYXNzTGlzdC5hZGQoXCJlcnJvclwiKTtcclxuICAgIGlmICghcmVzLm1lc3NhZ2UpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbWVzc2FnZUVsLnRleHRDb250ZW50ID0gcmVzLm1lc3NhZ2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVF1ZXN0aW9uKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHF1ZXN0aW9uOiBIVE1MRWxlbWVudCA9IHRoaXMudGVtcGxhdGUuY3JlYXRlRWxlbWVudChcclxuICAgICAgXCJkaXZcIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X19xdWVzdGlvbmBcclxuICAgICk7XHJcbiAgICBjb25zdCBxdWVzdGlvbkNvbnRlbnQ6IEhUTUxFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxyXG4gICAgICBcInNwYW5cIixcclxuICAgICAgYCR7dGhpcy5tYWluQ2xhc3N9X190ZXh0YCxcclxuICAgICAgXCJBbHJlYWR5IGhhdmUgYW4gYWNjb3VudD9cIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IGxpbmtTaWduSW46IEhUTUxBbmNob3JFbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5jcmVhdGVMaW5rKFxyXG4gICAgICBgJHt0aGlzLm1haW5DbGFzc31fX2xpbmtgLFxyXG4gICAgICBcIi9cIixcclxuICAgICAgXCJTaW5nIGluXCJcclxuICAgICk7XHJcblxyXG4gICAgbGlua1NpZ25Jbi5vbmNsaWNrID0gb25PcGVuTW9kYWwoXCJtb2RhbC1zaWduLWluXCIsIFwibW9kYWwtc2lnbi11cFwiKTtcclxuXHJcbiAgICBxdWVzdGlvbi5hcHBlbmQocXVlc3Rpb25Db250ZW50LCBsaW5rU2lnbkluKTtcclxuICAgIHJldHVybiBxdWVzdGlvbjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1vZGFsU2lnblVwO1xyXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImUiLCJkIiwidCIsImkiLCJzIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlZmF1bHQiLCJLIiwiZGF5cyIsIm1vbnRocyIsInllYXJzIiwiZGF5IiwibW9udGgiLCJ5ZWFyIiwiZXZlbnRDaGFuZ2VWaWV3RGF0ZSIsImV2ZW50Q2hhbmdlQ3VycmVudFZpZXciLCJldmVudENoYW5nZUZvY3VzRGF0ZSIsImV2ZW50Q2hhbmdlU2VsZWN0ZWREYXRlIiwiZXZlbnRDaGFuZ2VUaW1lIiwiZXZlbnRDaGFuZ2VMYXN0U2VsZWN0ZWREYXRlIiwiYWN0aW9uU2VsZWN0RGF0ZSIsImFjdGlvblVuc2VsZWN0RGF0ZSIsImNzc0NsYXNzV2Vla2VuZCIsImNsYXNzZXMiLCJpbmxpbmUiLCJsb2NhbGUiLCJkYXlzU2hvcnQiLCJkYXlzTWluIiwibW9udGhzU2hvcnQiLCJ0b2RheSIsImNsZWFyIiwiZGF0ZUZvcm1hdCIsInRpbWVGb3JtYXQiLCJmaXJzdERheSIsInN0YXJ0RGF0ZSIsIkRhdGUiLCJ3ZWVrZW5kcyIsImFsdEZpZWxkIiwiYWx0RmllbGREYXRlRm9ybWF0IiwidG9nZ2xlU2VsZWN0ZWQiLCJrZXlib2FyZE5hdiIsInNlbGVjdGVkRGF0ZXMiLCJjb250YWluZXIiLCJpc01vYmlsZSIsInZpc2libGUiLCJwb3NpdGlvbiIsIm9mZnNldCIsInZpZXciLCJtaW5WaWV3Iiwic2hvd090aGVyTW9udGhzIiwic2VsZWN0T3RoZXJNb250aHMiLCJtb3ZlVG9PdGhlck1vbnRoc09uU2VsZWN0Iiwic2hvd090aGVyWWVhcnMiLCJzZWxlY3RPdGhlclllYXJzIiwibW92ZVRvT3RoZXJZZWFyc09uU2VsZWN0IiwibWluRGF0ZSIsIm1heERhdGUiLCJkaXNhYmxlTmF2V2hlbk91dE9mUmFuZ2UiLCJtdWx0aXBsZURhdGVzIiwibXVsdGlwbGVEYXRlc1NlcGFyYXRvciIsInJhbmdlIiwiZHluYW1pY1JhbmdlIiwiYnV0dG9ucyIsIm1vbnRoc0ZpZWxkIiwic2hvd0V2ZW50IiwiYXV0b0Nsb3NlIiwicHJldkh0bWwiLCJuZXh0SHRtbCIsIm5hdlRpdGxlcyIsInRpbWVwaWNrZXIiLCJvbmx5VGltZXBpY2tlciIsImRhdGVUaW1lU2VwYXJhdG9yIiwibWluSG91cnMiLCJtYXhIb3VycyIsIm1pbk1pbnV0ZXMiLCJtYXhNaW51dGVzIiwiaG91cnNTdGVwIiwibWludXRlc1N0ZXAiLCJvblNlbGVjdCIsIm9uQ2hhbmdlVmlld0RhdGUiLCJvbkNoYW5nZVZpZXciLCJvblJlbmRlckNlbGwiLCJvblNob3ciLCJvbkhpZGUiLCJvbkNsaWNrRGF5TmFtZSIsImEiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJuIiwidGFnTmFtZSIsImNsYXNzTmFtZSIsImlubmVySHRtbCIsImlkIiwiYXR0cnMiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwic3BsaXQiLCJpbm5lckhUTUwiLCJyIiwiZW50cmllcyIsInNldEF0dHJpYnV0ZSIsImgiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiaG91cnMiLCJkYXlQZXJpb2QiLCJsIiwiZnVsbE1vbnRoIiwiZGF0ZSIsImZ1bGxEYXRlIiwiZ2V0RGF5IiwiZnVsbEhvdXJzIiwiaG91cnMxMiIsImZ1bGxIb3VyczEyIiwibWludXRlcyIsImdldE1pbnV0ZXMiLCJmdWxsTWludXRlcyIsImMiLCJNYXRoIiwiZmxvb3IiLCJ1IiwiQXJyYXkiLCJmb3JFYWNoIiwicHVzaCIsImpvaW4iLCJwIiwibSIsImciLCJnZXRUaW1lIiwidiIsIkQiLCJzZXRIb3VycyIsInkiLCJhZGRFdmVudExpc3RlbmVyIiwiZiIsIkRvY3VtZW50RnJhZ21lbnQiLCJtYXRjaGVzIiwicGFyZW50Tm9kZSIsInciLCJiIiwiZmlsdGVyIiwidG9TdHJpbmciLCJpc0FycmF5IiwiayIsImlzTmFOIiwiY29uc29sZSIsImxvZyIsIkMiLCJSZWdFeHAiLCIkIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiXyIsImNvbnN0cnVjdG9yIiwidHlwZSIsImRwIiwib3B0cyIsImJvZHkiLCJ0aGlzIiwiJGNlbGwiLCJmb2N1c2VkIiwicmVtb3ZlIiwic2VsZWN0ZWQiLCJpc0Rpc2FibGVkIiwiX2hhbmRsZVNlbGVjdGVkU3RhdHVzIiwiX2hhbmRsZVJhbmdlU3RhdHVzIiwicmVtb3ZlRm9jdXMiLCJmb2N1cyIsIl9nZXRIdG1sIiwiYWRwQ2VsbCIsInNpbmdsZVR5cGUiLCJzbGljZSIsImN1c3RvbURhdGEiLCJpbml0IiwiY2VsbFR5cGUiLCJkYXRlcGlja2VyIiwiX2NyZWF0ZUVsZW1lbnQiLCJfYmluZERhdGVwaWNrZXJFdmVudHMiLCJfaGFuZGxlSW5pdGlhbEZvY3VzU3RhdHVzIiwiaGFzU2VsZWN0ZWREYXRlcyIsIm9uIiwib25DaGFuZ2VTZWxlY3RlZERhdGUiLCJvbkNoYW5nZUZvY3VzRGF0ZSIsInVuYmluZERhdGVwaWNrZXJFdmVudHMiLCJvZmYiLCJfZ2V0Q2xhc3NOYW1lIiwiX2lzT3V0T2ZNaW5NYXhSYW5nZSIsImRpc2FibGVkIiwiaXNXZWVrZW5kIiwiaXNPdGhlck1vbnRoIiwiaXNPdGhlckRlY2FkZSIsImh0bWwiLCJkZXN0cm95IiwicmFuZ2VEYXRlRnJvbSIsInJhbmdlRGF0ZVRvIiwiX2NoZWNrSWZEYXRlSXNTZWxlY3RlZCIsInNlbGVjdCIsInJlbW92ZVNlbGVjdCIsImZvY3VzRGF0ZSIsIk0iLCJTIiwiVCIsIkYiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiaXNNaW5WaWV3UmVhY2hlZCIsImRvd24iLCJfaGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXMiLCJzZWxlY3REYXRlIiwiZ2V0QXR0cmlidXRlIiwiZGF5SW5kZXgiLCJOdW1iZXIiLCJoaWRlIiwic2hvdyIsInJlbmRlciIsInNldEZvY3VzRGF0ZSIsImhhbmRsZUNsaWNrIiwiaGFuZGxlRGF5TmFtZUNsaWNrIiwicHJlc3NlZCIsInJhbmdlRnJvbUZvY3VzZWQiLCJyYW5nZVRvRm9jdXNlZCIsInByZXZlbnREZWZhdWx0Iiwic2V0TWludXRlcyIsInJlcGxhY2VEYXRlIiwiaXNWaXNpYmxlIiwiY3VycmVudFZpZXciLCJkZXN0cm95Q2VsbHMiLCJfZ2VuZXJhdGVDZWxscyIsImNlbGxzIiwiJGNlbGxzIiwiYXBwZW5kQ2hpbGQiLCIkZWwiLCJfYnVpbGRCYXNlSHRtbCIsInJlbmRlckRheU5hbWVzIiwiX2JpbmRFdmVudHMiLCJvbk1vdXNlT3ZlckNlbGwiLCJvbk1vdXNlT3V0Q2VsbCIsIm9uQ2xpY2tCb2R5Iiwib25Nb3VzZURvd24iLCJvbk1vdXNlTW92ZSIsIndpbmRvdyIsIm9uTW91c2VVcCIsIm9uQ2hhbmdlQ3VycmVudFZpZXciLCIkbmFtZXMiLCJfZ2V0RGF5TmFtZXNIdG1sIiwiX2dldERheXNDZWxscyIsInZpZXdEYXRlIiwiX2dlbmVyYXRlQ2VsbCIsIl9nZW5lcmF0ZURheUNlbGxzIiwiX2dlbmVyYXRlTW9udGhDZWxscyIsInBhcnNlZFZpZXdEYXRlIiwiX2dlbmVyYXRlWWVhckNlbGxzIiwiViIsIngiLCJkYXRhc2V0IiwiYWN0aW9uIiwiX3Jlc2V0TmF2U3RhdHVzIiwiaGFuZGxlTmF2U3RhdHVzIiwiaXNGaW5hbFZpZXciLCJ1cCIsIiRwcmV2IiwiJG5leHQiLCJzZXRUaW1lb3V0IiwiJHRpdGxlIiwiX2dldFRpdGxlIiwiX2RlZmluZURPTSIsIm9uQ2xpY2tOYXYiLCJvbkNsaWNrTmF2VGl0bGUiLCJpc05hdklzRnVuY3Rpb24iLCJyZW5kZXJEZWxheSIsImZvcm1hdERhdGUiLCJfZGlzYWJsZU5hdiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJrZXlzIiwiZmluZCIsIkgiLCJjb250ZW50Iiwib25DbGljayIsInNldFZpZXdEYXRlIiwiRSIsInJlbW92ZUNoaWxkIiwiY2xlYXJIdG1sIiwiZ2VuZXJhdGVCdXR0b25zIiwiY3JlYXRlQnV0dG9uIiwiYXR0YWNoRXZlbnRUb0J1dHRvbiIsIkwiLCJPIiwidGltZXBpY2tlcklzQWN0aXZlIiwidXBkYXRlVGltZSIsInNldE1pbk1heFRpbWUiLCJzZXRDdXJyZW50VGltZSIsImFkZFRpbWVUb0RhdGUiLCJzZXRUaW1lIiwidXBkYXRlVGV4dCIsInRyaWdnZXIiLCIkbWludXRlc1RleHQiLCIkaG91cnNUZXh0IiwidG9nZ2xlIiwidG9nZ2xlVGltZXBpY2tlcklzQWN0aXZlIiwibWF0Y2giLCJhbXBtIiwibGFzdFNlbGVjdGVkRGF0ZSIsImJ1aWxkSHRtbCIsImRlZmluZURPTSIsImJpbmREYXRlcGlja2VyRXZlbnRzIiwiYmluZERPTUV2ZW50cyIsIm9uQ2hhbmdlTGFzdFNlbGVjdGVkRGF0ZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIiRyYW5nZXMiLCJvbkNoYW5nZUlucHV0UmFuZ2UiLCJvbk1vdXNlRW50ZXJMZWF2ZSIsIm9uRm9jdXMiLCJvbkJsdXIiLCJkaXNwbGF5SG91cnMiLCIkaG91cnMiLCIkbWludXRlcyIsIiRhbXBtIiwic2V0TWluTWF4VGltZUZyb21PcHRpb25zIiwic2V0TWluVGltZUZyb21NaW5EYXRlIiwic2V0TWF4VGltZUZyb21NYXhEYXRlIiwidXBkYXRlU2xpZGVycyIsIm1pbiIsIm1heCIsIl9ob3VycyIsIkEiLCJOIiwiU2V0IiwiTWFwIiwiaG90S2V5cyIsImdldEluaXRpYWxGb2N1c0RhdGUiLCJnZXRDbGFtcGVkRGF0ZSIsInZpZXdEYXRlVHJhbnNpdGlvbiIsInByZXNzZWRLZXlzIiwic2l6ZSIsImhhcyIsImV2ZXJ5Iiwia2V5Iiwid2hpY2giLCJyZWdpc3RlcktleSIsImlzSG90S2V5UHJlc3NlZCIsImhhbmRsZUhvdEtleSIsImlzQXJyb3ciLCJmb2N1c05leHRDZWxsIiwicmVtb3ZlS2V5IiwiYmluZEtleWJvYXJkRXZlbnRzIiwib25LZXlEb3duIiwib25LZXlVcCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZWxldGUiLCJJIiwiX19ldmVudHMiLCJyZW1vdmVBbGxFdmVudHMiLCJQIiwiaiIsIlIiLCJCIiwic3RhdGljIiwiaGlkZUFuaW1hdGlvbiIsIl9kZXN0cm95Q29tcG9uZW50cyIsIiRjb250YWluZXIiLCIkZGF0ZXBpY2tlciIsImN1c3RvbUhpZGUiLCIkdGFyZ2V0IiwiJHBvaW50ZXIiLCJpc1ZpZXdDaGFuZ2UiLCJkb25lIiwiX2ZpbmlzaEhpZGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvZmZzZXRQYXJlbnQiLCJzY3JvbGxZIiwic2Nyb2xsWCIsInN0eWxlIiwiY3NzVGV4dCIsInRvcCIsIm9mZnNldFRvcCIsImxlZnQiLCJvZmZzZXRMZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJ0ZXN0IiwiJGFsdEZpZWxkIiwiX2dldElucHV0VmFsdWUiLCJtYXAiLCJzb21lIiwiX2NhbmNlbFNjaGVkdWxlZENhbGwiLCJfb25UcmFuc2l0aW9uRW5kIiwib25jZSIsImRlY2FkZSIsImN1ckRlY2FkZSIsIl9oYW5kbGVSYW5nZU9uRm9jdXMiLCJ2aWV3SW5kZXhlcyIsImluY2x1ZGVzIiwiZWxJc0lucHV0Iiwic2V0UG9zaXRpb24iLCJ2aWV3cyIsInNob3VsZFVwZGF0ZURPTSIsIiRjb250ZW50IiwiX29uRm9jdXMiLCJfb25CbHVyIiwiX29uUmVzaXplIiwiX3JlbW92ZU1vYmlsZUF0dHJpYnV0ZXMiLCJuYXYiLCIkY3VzdG9tQ29udGFpbmVyIiwidHJlYXRBc0lubGluZSIsIl9jcmVhdGVNaW5NYXhEYXRlcyIsIl9saW1pdFZpZXdEYXRlQnlNYXhNaW5EYXRlcyIsIl9oYW5kbGVMb2NhbGUiLCJzZXRDdXJyZW50VmlldyIsIl9zZXRJbnB1dFZhbHVlIiwiJHRpbWVwaWNrZXIiLCJfYWRkVGltZXBpY2tlciIsIl9hZGRCdXR0b25zIiwiJGJ1dHRvbnMiLCJfY3JlYXRlTW9iaWxlT3ZlcmxheSIsIl9hZGRNb2JpbGVBdHRyaWJ1dGVzIiwiX3Nob3dNb2JpbGVPdmVybGF5IiwidXBkYXRlIiwic2lsZW50IiwiX3RyaWdnZXJPblNlbGVjdCIsImlzT3RoZXJZZWFyIiwiZ2V0Q2VsbCIsImN1cnJlbnRWaWV3U2luZ3VsYXIiLCJpbkZvY3VzIiwibm9kZU5hbWUiLCJpbml0ZWQiLCJpbml0aWFsUmVhZG9ubHkiLCJjb250YWlucyIsImJ1aWxkR2xvYmFsQ29udGFpbmVyIiwiZGVmYXVsdEdsb2JhbENvbnRhaW5lcklkIiwiX2JpbmRTdWJFdmVudHMiLCJfY3JlYXRlQ29tcG9uZW50cyIsIl9zZXRQb3NpdGlvbkNsYXNzZXMiLCIkbmF2IiwiX29uQ2xpY2tPdmVybGF5IiwicmVtb3ZlQXR0cmlidXRlIiwiX29uQ2hhbmdlU2VsZWN0ZWREYXRlIiwiX29uQ2hhbmdlRm9jdXNlZERhdGUiLCJfb25DaGFuZ2VUaW1lIiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJfb25Nb3VzZURvd24iLCJfb25Nb3VzZVVwIiwicmVwbGFjZXIiLCJtbSIsImhoIiwiSEgiLCJhYSIsIkFBIiwidG9VcHBlckNhc2UiLCJFRUVFIiwiZGQiLCJNTSIsIk1NTSIsIk1NTU0iLCJ5eSIsInl5eXkiLCJ5eXl5MSIsInl5eXkyIiwiX2hhbmRsZVVwRG93bkFjdGlvbnMiLCJQcm9taXNlIiwiX3VwZGF0ZUxhc3RTZWxlY3RlZERhdGUiLCJ1bnNlbGVjdERhdGUiLCJzcGxpY2UiLCJpbmRleE9mIiwiX3NjaGVkdWxlQ2FsbEFmdGVyVHJhbnNpdGlvbiIsIl9oYXNUcmFuc2l0aW9uIiwiYmx1ciIsImZvcm1hdHRlZERhdGUiLCJ2aWV3SW5kZXgiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInJlZHVjZSIsInBhcnNlRmxvYXQiLCJyZXBsYWNlIiwiVSIsImFzc2lnbiIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJpdGVtIiwiY29uY2F0IiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJfaXRlbSIsIl9hcnJheVdpdGhIb2xlcyIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwibmV4dCIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm1pbkxlbiIsIm5hbWUiLCJmcm9tIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsIm1lbW8iLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwiaW5zZXJ0IiwiRXJyb3IiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJzdHlsZVNoZWV0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsImFwcGx5VG9UYWciLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlSW5kZXgiLCJiaW5kIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwiYWxsIiwiYXRvYiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJwcm9wIiwibmMiLCJteUNsYXNzIiwibmV3RWxlbSIsInRleHRDb250ZW50IiwiY3JlYXRlTGluayIsImhyZWYiLCJjcmVhdGVCdG4iLCJidG4iLCJhcHBlbmQiLCJjcmVhdGVGb3JtIiwiZm9ybSIsImNyZWF0ZUljb24iLCJjbGFzc05hbWVJY29uIiwiaWNvbiIsImNyZWF0ZVZpZGVvIiwic3JjIiwiYXV0b3BsYXkiLCJtdXRlZCIsImxvb3AiLCJjcmVhdGVJbWFnZSIsImFsdCIsImltZ0NsYXNzTmFtZSIsIm5ld0ltYWdlIiwiY3JlYXRlTGFiZWwiLCJmb3JOYW1lIiwibGFiZWwiLCJjcmVhdGVJbnB1dCIsIm1haW5DbGFzcyIsImlucHV0IiwiYWRkQXR0cmlidXRlcyIsImFkZENsYXNzZXMiLCJlbGVtZW50Iiwib25PcGVuTW9kYWwiLCJpZE9wZW5Nb2RhbCIsImlkQ2xvc2VNb2RhbCIsIm9uQ2xvc2VNb2RhbCIsIm1vZGFsIiwiZ2V0RWxlbWVudEJ5SWQiLCJ2YXJpYW50IiwiYWRkQ29udGVudCIsIm9uY2xpY2siLCJyZWdpc3RyYXRpb24iLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsInJlcyIsImpzb24iLCJtZXNzYWdlIiwiYXV0aG9yaXphdGlvbiIsImNyZWF0ZVVzZXJJbmZvIiwiZ2V0VXNlckluZm8iLCJ1cGRhdGVVc2VySW5mbyIsImRhdGFFZGl0UHJvZmlsZSIsIndlaWdodCIsImluQWN0aXZlUHJlbG9hZGVyIiwiaGFuZGxlclZpZGVvQ2FucGxheSIsImlzTG9hZGVkIiwiY3VycmVudFRhcmdldCIsInRpdGxlIiwiaW1hZ2UiLCJibG9jayIsImV4ZXJjaXNlc0FtdCIsImV4ZXJjaXNlc1RpbWUiLCJjb21wbGV4aXR5TGV2ZWwiLCJjb2xvciIsImV4ZXJjaXNlcyIsImRlc2NyaXB0aW9uIiwiZXhhbXBsZSIsInlvdXR1YmUiLCJxdWFudGl0eSIsInZvbHVtZSIsIm11dGUiLCJleGVyY2lzZSIsInRlbXBsYXRlIiwiYmFja0xheWVyIiwiZHJhdyIsImNsb3NlQnV0dG9uIiwiZXhlcmNpc2VHaWYiLCJwYXRoIiwiY3JlYXRlRXhlcmNpc2VJbmZvIiwiZXhlcmNpc2VEZXNjcmlwdGlvbiIsInByZXBlbmQiLCJjbG9zZUV4ZXJjaXNlTW9kYWwiLCJleGVyY2lzZUluZm8iLCJleGVyY2lzZU5hbWUiLCJleGVyY2lzZVF1YW50aXR5IiwieW91dHViZUxpbmsiLCJnZXRDb21wbGV4IiwiZGVsZXRlQ29tcGxleCIsImNyZWF0ZUV4ZXJjaXNlIiwiZ2V0RXhlcmNpc2VzIiwiZGVsZXRlRXhlcmNpc2UiLCJ1cGRhdGVFeGVyY2lzZSIsImZ1bGZpbGxlZENvbXBsZXgiLCJnZXRDb21wbGV0ZWRDb21wbGV4ZXMiLCJnZXRXZWVrbHlTdGF0aXN0aWMiLCJnZXRVc2VyU2V0dGluZ3MiLCJ1cGRhdGVSZXN0VGltZSIsInVwZGF0ZUxvYWQiLCJ0cmFpbmluZ3MiLCJleFF1YW50aXR5IiwiZXhUaW1lIiwid29ya291dCIsIndvcmtvdXRCbG9jayIsImFkZE5ld0NvbXBsZXgiLCJjb21wbGV4IiwibWFpbkVsZW1lbnQiLCJtYWluUGFnZUVsZW1lbnQiLCJzZXJ2ZXJEYXRhIiwiY3JlYXRpbmdBcnJheUZyb21EYXRhIiwiZXhlcmNpc2VzVHJhbnNmb3JtZWQiLCJ0cmFuc2Zvcm1FeGVyY2lzZXMiLCJncm91cCIsInRyYWluaW5nIiwicGFnZUhlYWRlciIsImNyZWF0ZUhlYWRlciIsIm5ld0V4IiwicGx1cyIsImNyZWF0ZUFkZFdvcmtvdXRQbGFuQ29udCIsImNyZWF0ZURldGFpbHNNb2RhbCIsInBsYW4iLCJyb3VuZCIsImhlYWRlciIsImJhY2tncm91bmQiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiYmFja2dyb3VuZFNpemUiLCJ1cHBlckhlYWRlciIsImJhY2tncm91bmRDb2xvciIsInJldHVybkJ1dHRvbiIsInRyYWluaW5nc05hbWUiLCJ0cmFzaEljb24iLCJib3R0b21IZWFkZXIiLCJ3b3Jrb3V0TmFtZSIsIndvcmtvdXRRdWFudGl0eSIsIndvcmtvdXRUaW1lIiwic3RhcnRCdXR0b24iLCJlbCIsIl9pZCIsImV4ZXJjaXNlc0Zyb21TZXJ2ZXIiLCJpZEV4ZXJjaXNlIiwib2JqZWN0Iiwic2VydmVySWQiLCJTbGlkZXIiLCJjcmVhdGVOZXh0UHJldkJ0bnMiLCJ3cmFwcGVyIiwiZmxhZyIsImxhcmdlV3JhcHBlciIsImJ1dHRvbnNDb250IiwibmV4dEJ0biIsImljb25OZXh0IiwicHJldkJ0biIsImljb25QcmV2Iiwic2xpZGUiLCJzbGlkZXIiLCJjaGFuZ2VFeGVyY2lzZUNvbnRlbnQiLCJjaGFuZ2VJbWdTaXNlIiwiZGVsdGEiLCJqdXN0aWZ5Q29udGVudCIsInRyYW5zZm9ybSIsIm5DYWxjIiwiY29udGFpbmVycyIsInBuZ3MiLCJkaXJlY3Rpb24iLCJjaGFuZ2VJbWdTaXplSW5mIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJsYXN0RWxlbWVudENoaWxkIiwidHJhbnNpdGlvbiIsImRpcmVjdCIsImNyZWF0ZUV4ZXJjaXNlcyIsInNpbmdsZVBhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiZXhlcmNpc2VEYXRhIiwic2V0SXRlbSIsImV4ZXJjaXNlc0NvbnRhaW5lciIsIm5ld0V4ZXJjaXNlcyIsImdldENvbXBsZXhQYXJhbSIsImFycmF5IiwiZmxhZ1RyYXNoIiwiY29tcGxleElkIiwiZXhlcmNBZnRlciIsImZvckNsaWNrT25EZWxCdG4iLCJjcmVhdGVTZXJ2ZXJFeGVyY2lzZXMiLCJjcmVhdGVDaGFuZ2VCbG9jayIsImRpc3BsYXkiLCJjaGFuZ2VCbG9jayIsImNvdW50ZXIiLCJtaW51c0J1dHRvbiIsImN1cnJlbnRRdWFudGl0eSIsInBsdXNCdXR0b24iLCJjaGFuZ2VCdXR0b25zIiwiY2FuY2VsQnV0dG9uIiwic2F2ZUJ1dHRvbiIsImV4ZXJjaXNlQ291bnQiLCJleGVyY2lzZUlkIiwiaWRDb21wbGV4IiwiZXhlcmNpc2VJZFNlcnZlciIsImZvckNsaWNrT25TYXZlQnRuIiwiYWRkRXhlcmNpc2VRdWFudGl0eSIsInJlZHVjZUV4ZXJjaXNlUXVhbnRpdHkiLCJjdXJRdWFudGl0eVNwYW4iLCJleGVyY2lzZVRleHQiLCJ0b0xvd2VyQ2FzZSIsImN1ck51bWJlciIsInNlY29uZHMiLCJleGVyY1F0IiwiZXhlcmNUaW1lIiwic2VydmVyUXQiLCJjcmVhdGVPYmoiLCJzZXJ2SWQiLCJzZXJ2UXQiLCJpbWciLCJzZXRVc2VyTG9jYWxTdG9yYWdlIiwiZGF0YVVzZXIiLCJ0b2tlbiIsInVzZXJJZCIsImdldFVzZXJJZExvY2FsU3RvcmFnZSIsInNob3dFeGVyY2lzZXMiLCJleGVyY2lzZXNXcmFwcGVyIiwiZXhlcmNXcmFwcGVyIiwiYnV0dG9uIiwiY3JlYXRlRXhlcmNpc2VzQXJyYXkiLCJhZGRCdG4iLCJtYXRyaXgiLCJjcmVhdGVDb21wbGV4TmFtZU1vZGFsIiwiYWRkQ29tcGxleEluTG9jYWxTdG9yZSIsInVzZXJJZDEiLCJjcmVhdGVTZWxlY3RFeGVyY2lzZXMiLCJnZXRDb21wbGV4ZXMiLCJlbGVtIiwiY3JlYXRlV29ya291dEJsb2NrQ29udCIsInRpdGxlVGV4dCIsIndvcmtvdXRCbG9ja0NvbnQiLCJjcmVhdGVUaXRsZSIsImJsb2NrVGl0bGUiLCJzcGFuIiwiY3JlYXRlV29ya291dENvbnRlbnQiLCJ3b3Jrb3V0Q29udGVudENvbnQiLCJjcmVhdGVUZXh0QmxvY2siLCJhZGRpdENsYXNzIiwiY3JlYXRlUG5nSW1hZ2UiLCJkZXNjclRpdGxlVGV4dCIsImV4ZXJjQW10IiwidGltZSIsInRleHRCbG9jayIsImNyZWF0ZUV4ZXJjQ29udCIsImNyZWF0ZVRpbWVDb250IiwiY3JlYXRlTGlnaHRuaW5ncyIsInBuZyIsImJ1dHQiLCJ0aGlnaCIsInBuZ0ltYWdlIiwicmlnaHQiLCJkZXNjckNvbnQiLCJ0ZXh0IiwiZmlsbCIsImxpZ2h0bmluZ3NDb250IiwiY29sb3JCYWNrZ3JvdW5kIiwiZWxOYW1lQXR0cmlidXRlIiwibmFtZUF0dHJpYnV0ZSIsImFkZFdvcmtvdXRQbGFuQ29udCIsImNsaWNrT25QbHVzIiwiY3JlYXRlTW9kYWwiLCJpc1Nob3dJY29uQ2xvc2UiLCJiYWNrRHJvcCIsImNyZWF0ZUJhY2tEcm9wIiwibW9kYWxJbm5lciIsImNyZWF0ZU1vZGFsSW5uZXIiLCJjcmVhdGVJY29uQ2xvc2UiLCJidG5DbG9zZSIsIklucHV0SW1nIiwiaW1nU3JjIiwiaW1nQWx0IiwidmFsaWRhdGUiLCJ1bml0cyIsImNsYXNzTmFtZVVuaXRzIiwiaW5wdXRCbG9jayIsImlucHV0V3JhcCIsImVycm9yIiwidW5pdHNFbCIsImNyZWF0ZVVuaXRzVGl0bGUiLCJvbmNoYW5nZSIsInZhbGlkYXRlRGF0ZSIsImlzRW1haWxWYWxpZCIsImVtYWlsIiwiaXNQYXNzd29yZFZhbGlkIiwicGFzc3dvcmQiLCJpc0hlaWdodFZhbGlkIiwidmFsdWVIZWlnaHQiLCJpc1dlaWdodFZhbGlkIiwidmFsdWVXZWlnaHQiLCJleGVyY2lzZUJsb2NrIiwiaW50ZXJ2YWwiLCJjcmVhdGVCbG9ja3NIZWFkZXIiLCJjcmVhdGVDb3VudGVyIiwiY3JlYXRlTmF2aWdhdGlvbkJ1dHRvbnMiLCJibG9ja0hlYWRlciIsInNldHRpbmdzIiwidm9sdW1lQnV0dG9uIiwic291bmQiLCJzZXR0aW5nc0J1dHRvbiIsImV4dHJhSW5mbyIsImluZm9MaW5rIiwiZG9uZUJ1dHRvbiIsInBsYXlEb25lQnRuIiwiY291bnRkb3duQmFyIiwiY3JlYXRlQ291bnRkb3duQmFyIiwicG9pbnRlckV2ZW50cyIsInRpbWVCYXIiLCJ0cmFjayIsInBhdXNlQnV0dG9uIiwibmV4dEJ1dHRvbiIsIm5hdmlnYXRpb25CdXR0b25zIiwicHJldmlvdXNCdXR0b24iLCJkZWxpbSIsInNraXBCdXR0b24iLCJoaWRlRXhlcmNpc2VMaW5rcyIsInZpc2liaWxpdHkiLCJzaG93RXhlcmNpc2VMaW5rcyIsImxpbmtzQmxvY2siLCJzaG93TmV4dEJ1dHRvbiIsImRpc2FibGVQcmV2aW91c0J1dHRvbiIsInByZXZpb3VzQnRuIiwiZW5hYmxlUHJldmlvdXNCdXR0b24iLCJkaXNhYmxlU2tpcEJ1dHRvbiIsInNraXBCdG4iLCJlbmFibGVTa2lwQnV0dG9uIiwiZGlzYWJsZVBhdXNlQnV0dG9uIiwicGF1c2VCdG4iLCJlbmFibGVQYXVzZUJ1dHRvbiIsImNyZWF0ZVRocmVlQ291bnQiLCJ0aHJlZUNvdW50ZXIiLCJ1cGRhdGVDb3VudGVyIiwiY3JlYXRlQ291bnREb3duIiwicmVhZHlUZXh0IiwiY291bnRkb3duIiwiY2lyY2xlIiwiY291bnREb3QiLCJjb3VudFN2ZyIsImNyZWF0ZUVsZW1lbnROUyIsInN2Z0NpcmNsZTEiLCJzdmdDaXJjbGUyIiwiY291bnROdW1iZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzdHJva2VEYXNob2Zmc2V0IiwiZG9uZVNvdW5kIiwiQXVkaW8iLCJwbGF5IiwibWFpblBhZ2UiLCJjcmVhdGVJbnRyb1NlY3Rpb24iLCJpbnRyb1NlY3Rpb24iLCJpbnRyb1dyYXBwZXIiLCJsZWZ0VmlkZW9zIiwiY3JlYXRlVmlkZW9CbG9jayIsInJpZ2h0VmlkZW9zIiwiY2VudHJhbCIsImNlbnRyYWxUZXh0IiwiZ29vZ2xlTGluayIsInZpZGVvRmlsZXMiLCJ2aWRlbyIsInZpZGVvRWwiLCJjcmVhdGVBYm91dFNlY3Rpb24iLCJhYm91dFNlY3Rpb24iLCJhYm91dFdyYXBwZXIiLCJhYm91dEluZm8iLCJhYm91dFRpdGxlIiwiYWJvdXRUZXh0IiwiYWJvdXRQaWN0dXJlIiwiYWJvdXRJbWFnZSIsInBpYzEiLCJjcmVhdGVGZWF0dXJlc1NlY3Rpb24iLCJmZWF0dXJlc1NlY3Rpb24iLCJmZWF0dXJlc1dyYXBwZXIiLCJmZWF0dXJlc0xpc3QiLCJmZWF0dXJlIiwiZmVhdHVyZUl0ZW0iLCJlcnJvclBhZ2UiLCJ0cmFpbmluZ3NDcmVhdGlvblBhZ2UiLCJjcmVhdGVXcmFwcGVyIiwiY3JlYXRlQ29udGVudCIsImNvbnRlbnRDb250YWluZXIiLCJzaW5nbGVUcmFpbmluZyIsImxpbmsiLCJwbGFjZWhvbGRlciIsImNhbmNlbCIsImNyZWF0ZSIsImNvbnRlbnRXcmFwcGVyIiwic2luZ2xlVHJhaW5pbmdQYWdlIiwiZXhlcmNpc2VzUGFnZSIsImdldERheU9mQVdlZWsiLCJmb3JEZWNvciIsIm1pbmlIZWFkZXIiLCJjcmVhdGVNaW5pSGVhZGVyIiwiZ29hbENvbnQiLCJjcmVhdGVXZWVrR29hbENvbnQiLCJjcmVhdGVEZWNvcmF0aW9uRWwiLCJlQmxvY2siLCJjcmVhdGVFeGVyY2lzZXNCbG9jayIsInN0YXJ0QnRuIiwiY3JlYXRlU3RhcnRCdG4iLCJlQ29udCIsImNyZWF0ZUV4ZXJjaXNlc0NvbnQiLCJzdGF0aXN0aWMiLCJnZXRDb21wbGV0ZXNFeGVyY2lzZXNTdGF0Iiwid29ya291dHNDb250IiwibWluaUhlYWRlckJsb2NrIiwidG90YWxDb21wbGV0ZWRDb21wbGV4ZXMiLCJ0aW1lQ29udCIsInRvdGFsVGltZSIsInN0YXROdW0iLCJtaW5pVGl0bGUiLCJzdGF0Iiwid2Vla0dvYWxDb250Iiwic3RhdENvbnQiLCJ3ZWVrR29hbFRleHQiLCJ3ZWVrR29hbE51bSIsIndlZWtseVdvcmtvdXRzIiwibG9hZCIsImRheXNDb250IiwiY3JlYXRlRGF5c0NvbnQiLCJXRUVLREFZUyIsImRheU9mQVdlZWsiLCJjaGVja01hcmsiLCJleGVyY0Jsb2NrIiwiZXhlcmNTbGlkZXIiLCJjaGlsZHJlbiIsImV4ZXJjaXNlQ29udCIsInByb2ZpbGVQYWdlIiwiY2FsZW5kYXIiLCJjcmVhdGVDYWxlbmRhciIsImNhbGVuZGFyV3JhcCIsImNyZWF0ZUNhbGVuZGFyV3JhcCIsImluZm8iLCJjcmVhdGVJbmZvIiwiaXRlbXMiLCJjcmVhdGVJdGVtcyIsImJ0bldyYXAiLCJjcmVhdGVCdG5XcmFwIiwidXNlckluZm8iLCJpdGVtR29hbCIsImNyZWF0ZUl0ZW0iLCJnb2FsIiwiaXRlbUxvYWQiLCJpdGVtV2VpZ2h0IiwiaXRlbUhlaWdodCIsIm5hbWVUaXRsZSIsIm5hbWVEZXNjcmlwdGlvbiIsImJ0bkVkaXQiLCJjcmVhdGVCdG5FZGl0IiwibW9kYWxFZGl0UHJvZmlsZSIsImRyYXdQcm9maWxlUGFnZSIsImVkaXRGb3JtIiwiY3JlYXRlRWRpdEZvcm0iLCJpbnB1dEJsb2NrT25lIiwiaW5wdXRCbG9ja1R3byIsImNyZWF0ZU1lc3NhZ2UiLCJjcmVhdGVCdG5VcGRhdGUiLCJvblN1Ym1pdEhhbmRsZXJGb3JtIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImhlaWdodFZhbGlkIiwidXBkYXRlSW5mb1VzZXIiLCJlcnJvcnMiLCJFcnJvckhhbmRsZXIiLCJtZXNzYWdlRWwiLCJpbnB1dHMiLCJwcm9ncmVzcyIsIm1haW5DbGFzc1R3byIsImJtaVZhbHVlIiwiYm1pQ29udGVudCIsImJtaUNsYXNzTmFtZSIsImNyZWF0ZVByb2dyZXNzIiwiY2FsY3VsYXRlQm1pIiwiYm1pQmxvY2siLCJjcmVhdGVCbWlCbG9jayIsInBvdyIsInRvRml4ZWQiLCJjcmVhdGVCbWlEYXRhIiwidGl0bGVDb250YWluZXIiLCJjcmVhdGVCbWlUaXRsZSIsImJtaUNvbnRhaW5lciIsImNyZWF0ZUJtaUNvbnRhaW5lciIsInBhcmFtZXRlcnNCbG9jayIsImNyZWF0ZVBhcmFtZXRlcnNCbG9jayIsImJtaUxpbmUiLCJjcmVhdGVCbWlMaW5lIiwiYm1pVGl0bGUiLCJjcmVhdGVCbWlQYXJhbWV0ZXJzVGl0bGUiLCJ0aXRsZXMiLCJjcmVhdGVUaXRsZXMiLCJibWkiLCJsaW5lSXRlbSIsImNyZWF0ZUxpbmVJdGVtIiwibGluZVRodW1iIiwiY3JlYXRlTGluZVRodW1iIiwibGluZU51bWJlciIsImRlY29yRWwiLCJjcmVhdGVEZWNvckVsIiwic3RhcnRUcmFpbmluZ1BhZ2UiLCJ0YWtlQVJlc3QiLCJleGVyY2lzZUFycmF5IiwiY3JlYXRlVGFrZUFSZXN0IiwidXNlckRhdGEiLCJjcmVhdGVTZXRpaW5nc0NvbnQiLCJ0aW1lUmVzdCIsImNyZWF0ZUJ1dHRvbnMiLCJuZXh0RXhlcmNpc2VUZXh0IiwiY3JlYXRlTmV4dEV4ZXJjaXNlV3JhcHBlciIsImFycm93Iiwic2V0dGluZ3NDb250Iiwic2V0dGluZ3NFbCIsImFkZEJ1dHRvbiIsImFkZFNlY29uZHMiLCJuZXh0RXhlcmNUaXRsZSIsImNyZWF0ZU5leHRFeGVyY2lzZUluZm8iLCJleGVyY2lzZVRpdGxlIiwibGlua0VsIiwidHZFbCIsImluZm9XcmFwcHBlciIsImltZ1dyYXBwZXIiLCJnaWYiLCJ0aW1lciIsInRpbWVyTGluZUJlZm9yZSIsImFuaW1hdGlvbiIsInRpbWVyTGluZSIsInRpbWVyTGluZUFmdGVyIiwidGltZXJCb2R5IiwiY291bnRTZWNvbmRzIiwiZWxlbWVudDIiLCJ0aWt0YWsiLCJpbnQiLCJwYXVzZSIsInZvbHVtZUJ0biIsImFycm93QmFjayIsImJlZm9yZSIsInByZXZWYWwiLCJhZnRlciIsImN1cnJlbnRFeGVyY2lzZUluZGV4IiwidGltZW91dCIsInJlc3VsdE1pbnMiLCJzZXR0dGluZ3NNb2RhbCIsImNyZWF0ZVNldHRpbmdzTW9kYWwiLCJjdXJFeGVyY2lzZSIsImNsZWFyVGltZW91dCIsImR1cmF0aW9uIiwiZ2V0RXhlcmNpc2VEdXJhdGlvbiIsInNldFRpbWVDb3VudGVyIiwiZW5hYmxlQ291bnRlckJsb2NrIiwic3RhcnQiLCJub3ciLCJnZXRSZXN1bHRNaW51dGVzIiwic2hvd0NvbmdyYXRzIiwic2hvd1Jlc3RNb2RhbCIsImxvYWROZXh0RXhlcmNpc2UiLCJsb2FkUHJldmlvdXNFeGVyY2lzZSIsImNsb3NlTW9kYWwiLCJvdmVyZmxvdyIsInJlc3RhcnRFeGVyY2lzZSIsImNyZWF0ZU1vZGFsQnV0dG9ucyIsIm1vZGFsQnV0dG9ucyIsInJlc3RhcnRCdG4iLCJjb250aW51ZUJ0biIsImRpc2FibGVDb3VudGVyQmxvY2siLCJzdGFydE51bSIsInJlc3VsdFRpbWUiLCJzaG93RXhlcmNpc2UiLCJwYWdlIiwicGFnZUNvbnRlbnQiLCJhdXRvQ2hhbmdlIiwiY29uZ3JhdHMiLCJzYXZlQ29tcGxldGVkQ29tcGxleCIsImNvbmdyYXRzVGV4dCIsImljb25zQmxvY2siLCJleGVyY2lzZU51bWJlciIsIm1pbnV0ZXNCbG9jayIsIm1pbnV0ZXNOdW1iZXIiLCJtaW51dGVzVGV4dCIsImNvbXBsZXRlQnV0dG9uIiwiZmluaXNoU291bmQiLCJ0aW1lTGVmdCIsIndpZHRoRWwiLCJtYXhXaWR0aCIsImNsaWVudFdpZHRoIiwiZHVyTWlucyIsImR1clNlY29uZHMiLCJyZXN0VGltZUJsb2NrIiwiY3JlYXRlU2V0dGluZ3NUaW1lQmxvY2siLCJsb2FkQmxvY2siLCJkb25lV3JhcCIsInJlc3RUaW1lSW5wdXQiLCJsb2FkSW5wdXQiLCJ0aXRsZTEiLCJzdmciLCJhZGRDbGFzcyIsInNxdWFyZSIsInRleHRXcmFwcGVyIiwidGV4dFRpdGxlIiwiY291bnRlckJsb2NrIiwicm91dGVyIiwicm91dGVzIiwiZXJyb3JBY3Rpb24iLCJuYXZpZ2F0ZSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJyb290IiwiY3VycmVudFJvdXQiLCJzdGFydFN1YnNjcmliZXJzIiwic3Vic2NyaWJlcnMiLCJzdWJzY3JpYmVyc09uY2UiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwiYWRkU3Vic2NyaWJlcnMiLCJmdW5jIiwiaXNBY3RpdmVSb3V0Iiwicm91dCIsImV4YWN0IiwiY3VycmVudCIsInBhcmFtIiwiZ2V0UGFyYW0iLCJjYiIsIm1vZGFsTW9iaWxlTWVudSIsInJlc2l6ZVdpbmRvd0Nsb3NlTW9iTW9kYWwiLCJpbm5lcldpZHRoIiwiaXNBdXRoIiwid3JhcCIsImNyZWF0ZVdyYXAiLCJjcmVhdGVMaXN0TWVudSIsImNyZWF0ZUJ0blNpZ25PdXQiLCJjcmVhdGVCdXJnZXJCdG4iLCJjcmVhdGVMb2dvIiwibG9nbyIsInNwYW5PbmUiLCJzcGFuVHdvIiwic3BhblRocmVlIiwib25jbGlja0hhbmRsZXJMb2dvIiwiYnRuU2lnbkluIiwiYnRuU2lnblVwIiwiZXhpdEFwcCIsImNyZWF0ZVZlcnRpY2FsTWVudSIsInZlcnRpY2FsTWVudSIsImxpbmtzTWVudSIsImNyZWF0ZUxpbmtzTWVudSIsIm5hbWVMaW5rIiwibGlzdEl0ZW0iLCJvbkNsaWNrSGFuZGxlckxpbmtNZW51IiwiY3JlYXRlQm9yZGVyTGluayIsInJlbW92ZUl0ZW0iLCJJbnB1dEljb24iLCJvbkNoYW5nZUhhbmRsZXJJbnB1dCIsIlBhc3N3b3JkSW5wdXQiLCJyZXF1aXJlZCIsIm9uQ2xpY2tIYW5kbGVySWNvbiIsIkJ1dHRvblJhZGlvIiwiZGF0YUlucHV0IiwiZGF0YUxhYmVsIiwiY2hlY2tlZCIsIm9uQ2hhbmdlIiwibWFpbkNsYXNzU2Vjb25kIiwic2xpZGVDb3VudCIsImh0bUNvbnRhaW5lciIsInBvaW50Q29udGFpbmVyIiwic2xpZGVOdW0iLCJtb3ZlU2xpZGVyIiwiY2hlY2tQcmV2QnV0dG9uIiwiY2hlY2tOZXh0QnV0dG9uIiwiY2hhbmdlQWN0aXZlUG9pbnRzIiwicG9pbnRzIiwicG9pbnQiLCJ1cGRhdGVQb2ludENsYXNzIiwibnVtIiwiaXNMYXN0U2xpZGUiLCJuZXh0U2xpZGUiLCJwcmV2U2xpZGUiLCJnb1RvU2xpZGUiLCJjdXJyZW50U2xpZGVOdW0iLCJzZXRDb250YWluZXIiLCJzZXRQcmV2QnRuIiwic2V0TmV4dEJ0biIsInNldFBvaW50ZXJDb250YWluZXIiLCJmb3JtU2xpZGVyIiwidW5pdHNXZWlnaHQiLCJ1bml0c0hlaWdodCIsInNsaWRlcldyYXAiLCJjcmVhdGVTbGlkZXJXcmFwIiwiY3JlYXRlU2xpZGVyIiwic2xpZGVyQ29udHJvbCIsInNsaWRlclBvaW50cyIsImNyZWF0ZVNsaWRlclBvaW50cyIsImFycm93Rm9yd2FyZCIsInNsaWRlckZvcm0iLCJjcmVhdGVTbGlkZXJGb3JtIiwic2xpZGVMaXN0IiwiY3JlYXRlU2xpZGVyTGlzdCIsImZvcm1WYWxpZGF0aW9uIiwidmFsdWVzRm9ybSIsInF1ZXN0aW9uIiwidmFsIiwic2VuZEluZm9Vc2VyIiwic2xpZGVyTGlzdCIsIm5hbWVCdG4iLCJ2YWx1ZXMiLCJzbGlkZURhdGEiLCJjcmVhdGVTbGlkZSIsImNyZWF0ZVNsaWRlQWJvdXRNZSIsInNsaWRlQ29udGVudCIsImNyZWF0ZVNsaWRlQ29udGVudCIsInRpdGxlRWwiLCJjcmVhdGVTbGlkZUFib3V0TWVJbnB1dFdyYXAiLCJidG5CbG9jayIsImNyZWF0ZVNsaWRlQWJvdXRNZUJ0bkJsb2NrIiwiYnRuU3VibWl0IiwiY3JlYXRlQnRuU3VibWl0Rm9ybSIsImlucHV0c0Jsb2NrIiwiY3JlYXRlSW5wdXRzQmxvY2siLCJvbkNoYW5nZUhhbmRsZXJCdG5SYWRpbyIsImJ0bldyYXBPbmUiLCJtZXNzYWdlT25lIiwiYnRuT25lIiwiYnRuV3JhcFR3byIsIm1lc3NhZ2VUd28iLCJidG5Ud28iLCJidG5SYWRpbyIsInNsaWRlckl0ZW0iLCJjcmVhdGVTbGlkZXJQb2ludHNFbGVtZW50cyIsImRhdGFJbmZvVXNlciIsInByZWxvYWRlciIsImNyZWF0ZVByZWxvYWRlciIsInJvdyIsImNyZWF0ZVJvdyIsImZvb3RlciIsImNyZWF0ZUdpdEh1YnMiLCJnaXRIdWJzIiwiZmlyc3RMaW5rIiwic2Vjb25kTGluayIsInRoaXJkTGluayIsInNjaG9vbCIsImxvZ2luRm9ybSIsImNyZWF0ZUxvZ2luRm9ybSIsImNyZWF0ZVF1ZXN0aW9uIiwiaW5wdXRCbG9ja0VtYWlsIiwiaW5wdXRCbG9ja1Bhc3N3b3JkIiwiY3JlYXRlTWVzc2FnZUZvcm0iLCJ2YWx1ZUVtYWlsIiwidmFsdWVQc3ciLCJzZW5kQXV0aCIsImRhdGFJbnB1dEF1dGgiLCJxdWVzdGlvbkNvbnRlbnQiLCJsaW5rU2lnblVwIiwibW9kYWxRdWVzdGlvbnMiLCJyZWdpc3RyYXRpb25Gb3JtIiwiY3JlYXRlUmVnaXN0cmF0aW9uRm9ybSIsImNyZWF0ZU1lc3NhZ2VFbCIsInNlbmRSZWdpc3RyYXRpb24iLCJsaW5rU2lnbkluIl0sInNvdXJjZVJvb3QiOiIifQ==
